ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	devAddr,1,1
  19              		.comm	buffer,22,4
  20              		.global	Addr
  21              		.data
  22              		.align	2
  23              		.type	Addr, %object
  24              		.size	Addr, 4
  25              	Addr:
  26 0000 3F000000 		.word	63
  27              		.global	id
  28              		.align	2
  29              		.type	id, %object
  30              		.size	id, 4
  31              	id:
  32 0004 01000000 		.word	1
  33              		.global	press_id
  34              		.align	2
  35              		.type	press_id, %object
  36              		.size	press_id, 4
  37              	press_id:
  38 0008 01000000 		.word	1
  39              		.global	data_time
  40              		.bss
  41              		.align	2
  42              		.type	data_time, %object
  43              		.size	data_time, 4
  44              	data_time:
  45 0000 00000000 		.space	4
  46              		.global	descent_time
  47              		.align	2
  48              		.type	descent_time, %object
  49              		.size	descent_time, 4
  50              	descent_time:
  51 0004 00000000 		.space	4
  52              		.global	sum
  53              		.align	2
  54              		.type	sum, %object
  55              		.size	sum, 4
  56              	sum:
  57 0008 00000000 		.space	4
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 2


  58              		.global	pressure_sum
  59              		.align	2
  60              		.type	pressure_sum, %object
  61              		.size	pressure_sum, 4
  62              	pressure_sum:
  63 000c 00000000 		.space	4
  64              		.global	average
  65              		.align	1
  66              		.type	average, %object
  67              		.size	average, 2
  68              	average:
  69 0010 0000     		.space	2
  70              		.global	collect_flag
  71              		.type	collect_flag, %object
  72              		.size	collect_flag, 1
  73              	collect_flag:
  74 0012 00       		.space	1
  75              		.global	wait_flag
  76              		.type	wait_flag, %object
  77              		.size	wait_flag, 1
  78              	wait_flag:
  79 0013 00       		.space	1
  80              		.global	PANIC_flag
  81              		.type	PANIC_flag, %object
  82              		.size	PANIC_flag, 1
  83              	PANIC_flag:
  84 0014 00       		.space	1
  85              		.global	STATE
  86              		.data
  87              		.type	STATE, %object
  88              		.size	STATE, 1
  89              	STATE:
  90 000c 01       		.byte	1
  91              		.global	countdown
  92              		.bss
  93              		.type	countdown, %object
  94              		.size	countdown, 1
  95              	countdown:
  96 0015 00       		.space	1
  97              		.global	update_Data
  98              		.type	update_Data, %object
  99              		.size	update_Data, 1
 100              	update_Data:
 101 0016 00       		.space	1
 102              		.global	RxBuffer
 103 0017 00       		.align	2
 104              		.type	RxBuffer, %object
 105              		.size	RxBuffer, 64
 106              	RxBuffer:
 107 0018 00000000 		.space	64
 107      00000000 
 107      00000000 
 107      00000000 
 107      00000000 
 108              		.global	msg_count
 109              		.align	2
 110              		.type	msg_count, %object
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 3


 111              		.size	msg_count, 4
 112              	msg_count:
 113 0058 00000000 		.space	4
 114              		.global	rxflag
 115              		.align	2
 116              		.type	rxflag, %object
 117              		.size	rxflag, 4
 118              	rxflag:
 119 005c 00000000 		.space	4
 120              		.global	bytes
 121              		.align	2
 122              		.type	bytes, %object
 123              		.size	bytes, 4
 124              	bytes:
 125 0060 00000000 		.space	4
 126              		.global	dataflag
 127              		.align	2
 128              		.type	dataflag, %object
 129              		.size	dataflag, 4
 130              	dataflag:
 131 0064 00000000 		.space	4
 132              		.global	transmit_flag
 133              		.align	2
 134              		.type	transmit_flag, %object
 135              		.size	transmit_flag, 4
 136              	transmit_flag:
 137 0068 00000000 		.space	4
 138              		.global	depth
 139              		.align	2
 140              		.type	depth, %object
 141              		.size	depth, 4
 142              	depth:
 143 006c 00000000 		.space	4
 144              		.global	reset
 145              		.align	2
 146              		.type	reset, %object
 147              		.size	reset, 4
 148              	reset:
 149 0070 00000000 		.space	4
 150              		.global	testnum
 151              		.data
 152 000d 000000   		.align	2
 153              		.type	testnum, %object
 154              		.size	testnum, 4
 155              	testnum:
 156 0010 01000000 		.word	1
 157              		.global	xavg
 158              		.bss
 159              		.align	2
 160              		.type	xavg, %object
 161              		.size	xavg, 4
 162              	xavg:
 163 0074 00000000 		.space	4
 164              		.global	yavg
 165              		.align	2
 166              		.type	yavg, %object
 167              		.size	yavg, 4
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 4


 168              	yavg:
 169 0078 00000000 		.space	4
 170              		.global	xsum
 171              		.align	2
 172              		.type	xsum, %object
 173              		.size	xsum, 4
 174              	xsum:
 175 007c 00000000 		.space	4
 176              		.global	ysum
 177              		.align	2
 178              		.type	ysum, %object
 179              		.size	ysum, 4
 180              	ysum:
 181 0080 00000000 		.space	4
 182              		.global	file
 183              		.data
 184              		.align	2
 185              		.type	file, %object
 186              		.size	file, 11
 187              	file:
 188 0014 74657374 		.ascii	"test1.txt\000"
 188      312E7478 
 188      7400
 189 001e 00       		.space	1
 190              		.global	volume
 191 001f 00       		.bss
 192              		.align	2
 193              		.type	volume, %object
 194              		.size	volume, 10
 195              	volume:
 196 0084 00000000 		.space	10
 196      00000000 
 196      0000
 197              		.comm	fsfile,4,4
 198 008e 0000     		.section	.text.Moisture_ISR_Handler,"ax",%progbits
 199              		.align	2
 200              		.global	Moisture_ISR_Handler
 201              		.thumb
 202              		.thumb_func
 203              		.type	Moisture_ISR_Handler, %function
 204              	Moisture_ISR_Handler:
 205              	.LFB63:
 206              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 2.20
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   This is a source code for example project of ADC single ended mode.
   8:main.c        **** *
   9:main.c        **** *   Variable resistor(pot) is connected to +ve input of ADC using the I/O pin.
  10:main.c        **** *   P0.0. When voltage to positive terminal of ADC is 0, the output displayed
  11:main.c        **** *   on the LCD pannel is 0x0000. As voltage on positive terminal goes on
  12:main.c        **** *   increasing, the  converted value goes on increasing from 0x0000 and reaches
  13:main.c        **** *   0xFFFF when voltage becomes 1.024V. Futher increase in voltage value,
  14:main.c        **** *   doesn't cause any changes to values displayed in the LCD.
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 5


  15:main.c        **** *
  16:main.c        **** * Hardware Connections: 
  17:main.c        **** *  Connect analog input from Variable resistor to port P0[0] of DVK1 board.
  18:main.c        **** *
  19:main.c        **** ********************************************************************************
  20:main.c        **** * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  21:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  22:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  23:main.c        **** * Therefore, you may use this software only as provided in the license agreement
  24:main.c        **** * accompanying the software package from which you obtained this software.
  25:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  26:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  27:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <project.h>
  31:main.c        **** #include <mpu6050.h>
  32:main.c        **** #include <stdio.h>
  33:main.c        **** #include <stdlib.h>
  34:main.c        **** #include <string.h>
  35:main.c        **** #include <FS.h>
  36:main.c        **** #include "LiquidCrystal_I2C.h"
  37:main.c        **** #include "functions.h"
  38:main.c        **** 
  39:main.c        **** #define MPU6050 
  40:main.c        **** #define LCD
  41:main.c        **** #define SD
  42:main.c        **** #define BT
  43:main.c        **** 
  44:main.c        **** #define MA_WINDOW 15                    // Number of samples in the moving average window.
  45:main.c        **** #define BOT_THRESHOLD 20000             // Z-Aacceleration threshold for transition into LANDED sta
  46:main.c        **** #define WAIT_TIME 1000                  // Number of ISR calls until transition into DESCENDING sta
  47:main.c        **** #define BUFFER_LEN  64u                 // Buffer length for UART rx
  48:main.c        **** #define DEGREES_20 (131 * 20)           // Gyro value corresponding to 30 degrees. Default setting 
  49:main.c        **** #define DEGREES_50 (131 * 50)           // So every 131 in gyro value equals 1 degree of rotational
  50:main.c        **** 
  51:main.c        **** 
  52:main.c        **** uint32_t Addr = 0x3F;                   // I2C address of LCD.
  53:main.c        **** long id = 1, press_id = 1;              // Interrupt count.
  54:main.c        **** long data_time = 0;                     // data point num
  55:main.c        **** long descent_time = 0;                  // Max number of seconds allowed for descent, x 500 because
  56:main.c        **** 
  57:main.c        **** long sum = 0;                           // Sum of accelerometer values
  58:main.c        **** float pressure_sum = 0;                 // Sum of pressure values. 
  59:main.c        **** int16_t average = 0;                    // Moving average variable, accelerometer.
  60:main.c        **** bool collect_flag = 0;                  // flag indicating when to record acceleration sample.
  61:main.c        **** bool wait_flag = 0;                     // flag indicating when to increment interrupt counter.
  62:main.c        **** bool PANIC_flag = 0;                    // flag indicating water is present in housing.
  63:main.c        **** //bool first_test = 1;                  // flag indicating first test(longer countdown)
  64:main.c        **** STATES STATE = WAIT_TO_LAUNCH;                      // Set initial state. 
  65:main.c        **** uint8_t countdown = 0, update_Data = 0;             // Counting variables, one for countdowns, one 
  66:main.c        **** uint8_t RxBuffer[BUFFER_LEN] = {};                  // Rx Buffer
  67:main.c        **** int msg_count = 0, rxflag = 0, bytes = 0, dataflag = 0, transmit_flag = 0;    // UART variables
  68:main.c        **** int depth = 0, reset = 0, testnum = 1;                                                     // Varia
  69:main.c        **** float xavg = 0, yavg = 0, xsum = 0, ysum = 0;                                 // gyro avg/sum value
  70:main.c        **** char file[11] = "test1.txt";
  71:main.c        **** char volume[10] = {};
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 6


  72:main.c        **** FS_FILE *fsfile;
  73:main.c        **** 
  74:main.c        **** /*******************************************************************************
  75:main.c        **** * Function Name: main
  76:main.c        **** ********************************************************************************
  77:main.c        **** *
  78:main.c        **** * Summary:
  79:main.c        **** *  main() performs following functions:
  80:main.c        **** *  1: Initializes all necessary components on board (accelerometer/gyro, SD card, LCD, timers, inte
  81:main.c        **** *       Bluetooth).
  82:main.c        **** *  2: Begins at state: WAIT_FOR_LAUNCH. Waits for a bluetooth command to start, then prompts for a 
  83:main.c        **** *       completion, starts a countdown for which the device should be thrown in the water before it
  84:main.c        **** *       DESCENDING state.
  85:main.c        **** *  3: Samples Z-axis acceleration data from module @ 500hz. Computes moving average of Z-axis accel
  86:main.c        **** *       for gyro data in the case that the system flips somehow. If the moving average has breached
  87:main.c        **** *       20000), we know it has landed on the bottom. If the time of descent has gone over the max d
  88:main.c        **** *       from the depth earlier, then we go to resurfacing. 
  89:main.c        **** *  4: At the LANDED state, we delay to let the system settle, then turn on solenoid 1. This solenoi
  90:main.c        **** *       in the legs. The suction occurs for 5 seconds, then turns off. Switch to RESURFACING.
  91:main.c        **** *  5: To resurface, we pulse the solenoids at a rate of 3 seconds on to 1 second off. The number of
  92:main.c        **** *       by the depth. Once the number of pulses has finished, we move to TRANSMIT.
  93:main.c        **** *  6: At TRANSMIT, we simply wait for the data command to begin sending out the collected data or f
  94:main.c        **** *       do another run.
  95:main.c        **** *
  96:main.c        **** * Parameters:
  97:main.c        **** *  None.
  98:main.c        **** *
  99:main.c        **** * Return:
 100:main.c        **** *  None.
 101:main.c        **** *
 102:main.c        **** *******************************************************************************/
 103:main.c        **** 
 104:main.c        **** int SD_SETUP(char* filename); //SD card setup function
 105:main.c        **** 
 106:main.c        **** /* Moisture sensor ISR */
 107:main.c        **** CY_ISR (Moisture_ISR_Handler){
 207              		.loc 1 107 0
 208              		.cfi_startproc
 209              		@ args = 0, pretend = 0, frame = 0
 210              		@ frame_needed = 1, uses_anonymous_args = 0
 211 0000 80B5     		push	{r7, lr}
 212              		.cfi_def_cfa_offset 8
 213              		.cfi_offset 7, -8
 214              		.cfi_offset 14, -4
 215 0002 00AF     		add	r7, sp, #0
 216              		.cfi_def_cfa_register 7
 108:main.c        ****     PANIC_flag = 1;                             // Set flag to indicate water
 217              		.loc 1 108 0
 218 0004 044B     		ldr	r3, .L2
 219 0006 0122     		movs	r2, #1
 220 0008 1A70     		strb	r2, [r3]
 109:main.c        ****     STATE = RESURFACE;                          // Go to surface
 221              		.loc 1 109 0
 222 000a 044B     		ldr	r3, .L2+4
 223 000c 0422     		movs	r2, #4
 224 000e 1A70     		strb	r2, [r3]
 110:main.c        ****     Comp_Stop();                                // Stop comparator for interrupt
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 7


 225              		.loc 1 110 0
 226 0010 FFF7FEFF 		bl	Comp_Stop
 111:main.c        **** }
 227              		.loc 1 111 0
 228 0014 80BD     		pop	{r7, pc}
 229              	.L3:
 230 0016 00BF     		.align	2
 231              	.L2:
 232 0018 00000000 		.word	PANIC_flag
 233 001c 00000000 		.word	STATE
 234              		.cfi_endproc
 235              	.LFE63:
 236              		.size	Moisture_ISR_Handler, .-Moisture_ISR_Handler
 237              		.section	.text.Sample_ISR_Handler,"ax",%progbits
 238              		.align	2
 239              		.global	Sample_ISR_Handler
 240              		.thumb
 241              		.thumb_func
 242              		.type	Sample_ISR_Handler, %function
 243              	Sample_ISR_Handler:
 244              	.LFB64:
 112:main.c        **** 
 113:main.c        **** /* Sampling ISR */
 114:main.c        **** CY_ISR (Sample_ISR_Handler){
 245              		.loc 1 114 0
 246              		.cfi_startproc
 247              		@ args = 0, pretend = 0, frame = 0
 248              		@ frame_needed = 1, uses_anonymous_args = 0
 249              		@ link register save eliminated.
 250 0000 80B4     		push	{r7}
 251              		.cfi_def_cfa_offset 4
 252              		.cfi_offset 7, -4
 253 0002 00AF     		add	r7, sp, #0
 254              		.cfi_def_cfa_register 7
 115:main.c        ****     Sample_Timer_STATUS;                        // Clears interrupt by accessing timer status regis
 255              		.loc 1 115 0
 256 0004 0A4B     		ldr	r3, .L7
 257 0006 1B78     		ldrb	r3, [r3]
 116:main.c        ****     if (STATE == DESCENDING || STATE == LANDED){
 258              		.loc 1 116 0
 259 0008 0A4B     		ldr	r3, .L7+4
 260 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 261 000c 022B     		cmp	r3, #2
 262 000e 03D0     		beq	.L5
 263              		.loc 1 116 0 is_stmt 0 discriminator 1
 264 0010 084B     		ldr	r3, .L7+4
 265 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 266 0014 032B     		cmp	r3, #3
 267 0016 04D1     		bne	.L6
 268              	.L5:
 117:main.c        ****         data_time++;
 269              		.loc 1 117 0 is_stmt 1
 270 0018 074B     		ldr	r3, .L7+8
 271 001a 1B68     		ldr	r3, [r3]
 272 001c 0133     		adds	r3, r3, #1
 273 001e 064A     		ldr	r2, .L7+8
 274 0020 1360     		str	r3, [r2]
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 8


 275              	.L6:
 118:main.c        ****     }
 119:main.c        ****     collect_flag = 1;
 276              		.loc 1 119 0
 277 0022 064B     		ldr	r3, .L7+12
 278 0024 0122     		movs	r2, #1
 279 0026 1A70     		strb	r2, [r3]
 120:main.c        **** }
 280              		.loc 1 120 0
 281 0028 BD46     		mov	sp, r7
 282              		.cfi_def_cfa_register 13
 283              		@ sp needed
 284 002a 5DF8047B 		ldr	r7, [sp], #4
 285              		.cfi_restore 7
 286              		.cfi_def_cfa_offset 0
 287 002e 7047     		bx	lr
 288              	.L8:
 289              		.align	2
 290              	.L7:
 291 0030 034F0040 		.word	1073762051
 292 0034 00000000 		.word	STATE
 293 0038 00000000 		.word	data_time
 294 003c 00000000 		.word	collect_flag
 295              		.cfi_endproc
 296              	.LFE64:
 297              		.size	Sample_ISR_Handler, .-Sample_ISR_Handler
 298              		.section	.text.Countdown_ISR_Handler,"ax",%progbits
 299              		.align	2
 300              		.global	Countdown_ISR_Handler
 301              		.thumb
 302              		.thumb_func
 303              		.type	Countdown_ISR_Handler, %function
 304              	Countdown_ISR_Handler:
 305              	.LFB65:
 121:main.c        **** 
 122:main.c        **** /* Countdown ISR*/
 123:main.c        **** CY_ISR (Countdown_ISR_Handler){
 306              		.loc 1 123 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311 0000 80B4     		push	{r7}
 312              		.cfi_def_cfa_offset 4
 313              		.cfi_offset 7, -4
 314 0002 00AF     		add	r7, sp, #0
 315              		.cfi_def_cfa_register 7
 124:main.c        ****     Countdown_timer_STATUS;                        // Clears interrupt by accessing timer status re
 316              		.loc 1 124 0
 317 0004 1D4B     		ldr	r3, .L15
 318 0006 1B78     		ldrb	r3, [r3]
 125:main.c        ****     if ((STATE == WAIT_TO_LAUNCH && depth != 0) || STATE == LANDED || STATE == RESURFACE){ 
 319              		.loc 1 125 0
 320 0008 1D4B     		ldr	r3, .L15+4
 321 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 322 000c 012B     		cmp	r3, #1
 323 000e 03D1     		bne	.L10
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 9


 324              		.loc 1 125 0 is_stmt 0 discriminator 1
 325 0010 1C4B     		ldr	r3, .L15+8
 326 0012 1B68     		ldr	r3, [r3]
 327 0014 002B     		cmp	r3, #0
 328 0016 07D1     		bne	.L11
 329              	.L10:
 330              		.loc 1 125 0 discriminator 3
 331 0018 194B     		ldr	r3, .L15+4
 332 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 333 001c 032B     		cmp	r3, #3
 334 001e 03D0     		beq	.L11
 335              		.loc 1 125 0 discriminator 4
 336 0020 174B     		ldr	r3, .L15+4
 337 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 338 0024 042B     		cmp	r3, #4
 339 0026 08D1     		bne	.L12
 340              	.L11:
 126:main.c        ****         wait_flag = 1;
 341              		.loc 1 126 0 is_stmt 1
 342 0028 174B     		ldr	r3, .L15+12
 343 002a 0122     		movs	r2, #1
 344 002c 1A70     		strb	r2, [r3]
 127:main.c        ****         countdown++;
 345              		.loc 1 127 0
 346 002e 174B     		ldr	r3, .L15+16
 347 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 348 0032 0133     		adds	r3, r3, #1
 349 0034 DAB2     		uxtb	r2, r3
 350 0036 154B     		ldr	r3, .L15+16
 351 0038 1A70     		strb	r2, [r3]
 352              	.L12:
 128:main.c        ****     }
 129:main.c        ****     #ifdef BT
 130:main.c        ****         if (STATE == TRANSMIT || (STATE == WAIT_TO_LAUNCH && !dataflag)){
 353              		.loc 1 130 0
 354 003a 114B     		ldr	r3, .L15+4
 355 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 356 003e 052B     		cmp	r3, #5
 357 0040 07D0     		beq	.L13
 358              		.loc 1 130 0 is_stmt 0 discriminator 1
 359 0042 0F4B     		ldr	r3, .L15+4
 360 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 361 0046 012B     		cmp	r3, #1
 362 0048 13D1     		bne	.L9
 363              		.loc 1 130 0 discriminator 2
 364 004a 114B     		ldr	r3, .L15+20
 365 004c 1B68     		ldr	r3, [r3]
 366 004e 002B     		cmp	r3, #0
 367 0050 0FD1     		bne	.L9
 368              	.L13:
 131:main.c        ****             update_Data++;
 369              		.loc 1 131 0 is_stmt 1
 370 0052 104B     		ldr	r3, .L15+24
 371 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 372 0056 0133     		adds	r3, r3, #1
 373 0058 DAB2     		uxtb	r2, r3
 374 005a 0E4B     		ldr	r3, .L15+24
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 10


 375 005c 1A70     		strb	r2, [r3]
 132:main.c        ****             if (update_Data == 10){
 376              		.loc 1 132 0
 377 005e 0D4B     		ldr	r3, .L15+24
 378 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 379 0062 0A2B     		cmp	r3, #10
 380 0064 05D1     		bne	.L9
 133:main.c        ****                 transmit_flag = 1;
 381              		.loc 1 133 0
 382 0066 0C4B     		ldr	r3, .L15+28
 383 0068 0122     		movs	r2, #1
 384 006a 1A60     		str	r2, [r3]
 134:main.c        ****                 update_Data = 0;
 385              		.loc 1 134 0
 386 006c 094B     		ldr	r3, .L15+24
 387 006e 0022     		movs	r2, #0
 388 0070 1A70     		strb	r2, [r3]
 389              	.L9:
 135:main.c        ****             }
 136:main.c        ****         }          
 137:main.c        ****     #endif
 138:main.c        **** }
 390              		.loc 1 138 0
 391 0072 BD46     		mov	sp, r7
 392              		.cfi_def_cfa_register 13
 393              		@ sp needed
 394 0074 5DF8047B 		ldr	r7, [sp], #4
 395              		.cfi_restore 7
 396              		.cfi_def_cfa_offset 0
 397 0078 7047     		bx	lr
 398              	.L16:
 399 007a 00BF     		.align	2
 400              	.L15:
 401 007c 67640040 		.word	1073767527
 402 0080 00000000 		.word	STATE
 403 0084 00000000 		.word	depth
 404 0088 00000000 		.word	wait_flag
 405 008c 00000000 		.word	countdown
 406 0090 00000000 		.word	dataflag
 407 0094 00000000 		.word	update_Data
 408 0098 00000000 		.word	transmit_flag
 409              		.cfi_endproc
 410              	.LFE65:
 411              		.size	Countdown_ISR_Handler, .-Countdown_ISR_Handler
 412              		.section	.text.rx_interrupt,"ax",%progbits
 413              		.align	2
 414              		.global	rx_interrupt
 415              		.thumb
 416              		.thumb_func
 417              		.type	rx_interrupt, %function
 418              	rx_interrupt:
 419              	.LFB66:
 139:main.c        **** /* Bluetooth UART Rx ISR*/
 140:main.c        **** CY_ISR(rx_interrupt){
 420              		.loc 1 140 0
 421              		.cfi_startproc
 422              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 11


 423              		@ frame_needed = 1, uses_anonymous_args = 0
 424 0000 98B5     		push	{r3, r4, r7, lr}
 425              		.cfi_def_cfa_offset 16
 426              		.cfi_offset 3, -16
 427              		.cfi_offset 4, -12
 428              		.cfi_offset 7, -8
 429              		.cfi_offset 14, -4
 430 0002 00AF     		add	r7, sp, #0
 431              		.cfi_def_cfa_register 7
 141:main.c        ****     #ifdef BT
 142:main.c        ****     while (UART_ReadRxStatus() & UART_RX_STS_FIFO_NOTEMPTY){
 432              		.loc 1 142 0
 433 0004 14E0     		b	.L18
 434              	.L19:
 143:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 435              		.loc 1 143 0
 436 0006 0E4B     		ldr	r3, .L20
 437 0008 1C68     		ldr	r4, [r3]
 438 000a 631C     		adds	r3, r4, #1
 439 000c 0C4A     		ldr	r2, .L20
 440 000e 1360     		str	r3, [r2]
 441 0010 FFF7FEFF 		bl	UART_GetChar
 442 0014 0346     		mov	r3, r0
 443 0016 1A46     		mov	r2, r3
 444 0018 0A4B     		ldr	r3, .L20+4
 445 001a 1A55     		strb	r2, [r3, r4]
 144:main.c        ****         if ((msg_count - 3) > bytes)
 446              		.loc 1 144 0
 447 001c 084B     		ldr	r3, .L20
 448 001e 1B68     		ldr	r3, [r3]
 449 0020 DA1E     		subs	r2, r3, #3
 450 0022 094B     		ldr	r3, .L20+8
 451 0024 1B68     		ldr	r3, [r3]
 452 0026 9A42     		cmp	r2, r3
 453 0028 02DD     		ble	.L18
 145:main.c        ****             rxflag = 1;
 454              		.loc 1 145 0
 455 002a 084B     		ldr	r3, .L20+12
 456 002c 0122     		movs	r2, #1
 457 002e 1A60     		str	r2, [r3]
 458              	.L18:
 142:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 459              		.loc 1 142 0
 460 0030 FFF7FEFF 		bl	UART_ReadRxStatus
 461 0034 0346     		mov	r3, r0
 462 0036 03F02003 		and	r3, r3, #32
 463 003a 002B     		cmp	r3, #0
 464 003c E3D1     		bne	.L19
 146:main.c        ****     }
 147:main.c        ****     #endif
 148:main.c        **** }
 465              		.loc 1 148 0
 466 003e 98BD     		pop	{r3, r4, r7, pc}
 467              	.L21:
 468              		.align	2
 469              	.L20:
 470 0040 00000000 		.word	msg_count
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 12


 471 0044 00000000 		.word	RxBuffer
 472 0048 00000000 		.word	bytes
 473 004c 00000000 		.word	rxflag
 474              		.cfi_endproc
 475              	.LFE66:
 476              		.size	rx_interrupt, .-rx_interrupt
 477              		.section	.rodata
 478              		.align	2
 479              	.LC6:
 480 0000 50536F43 		.ascii	"PSoC 5LP: O-Vac\000"
 480      20354C50 
 480      3A204F2D 
 480      56616300 
 481              		.align	2
 482              	.LC7:
 483 0010 49324320 		.ascii	"I2C Working\000"
 483      576F726B 
 483      696E6700 
 484              		.align	2
 485              	.LC8:
 486 001c 53544154 		.ascii	"STATE: WAIT\000"
 486      453A2057 
 486      41495400 
 487              		.global	__aeabi_i2f
 488              		.global	__aeabi_f2d
 489              		.global	__aeabi_dmul
 490              		.global	__aeabi_d2f
 491              		.global	__aeabi_fadd
 492              		.global	__aeabi_fdiv
 493              		.global	__aeabi_f2iz
 494              		.global	__aeabi_fsub
 495              		.global	__aeabi_fmul
 496              		.align	2
 497              	.LC9:
 498 0028 25642E25 		.ascii	"%d.%04d, %d, %d\012\000"
 498      3034642C 
 498      2025642C 
 498      2025640A 
 498      00
 499 0039 000000   		.align	2
 500              	.LC10:
 501 003c 0A256420 		.ascii	"\012%d seconds remaining\000"
 501      7365636F 
 501      6E647320 
 501      72656D61 
 501      696E696E 
 502 0052 0000     		.align	2
 503              	.LC11:
 504 0054 53544154 		.ascii	"STATE: DESCENT\000"
 504      453A2044 
 504      45534345 
 504      4E5400
 505 0063 00       		.align	2
 506              	.LC12:
 507 0064 53544154 		.ascii	"STATE: LANDED\000"
 507      453A204C 
 507      414E4445 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 13


 507      4400
 508 0072 0000     		.align	2
 509              	.LC13:
 510 0074 53544154 		.ascii	"STATE: RESURFACE\000"
 510      453A2052 
 510      45535552 
 510      46414345 
 510      00
 511 0085 000000   		.align	2
 512              	.LC14:
 513 0088 53544154 		.ascii	"STATE: RESURFACING\000"
 513      453A2052 
 513      45535552 
 513      46414349 
 513      4E4700
 514 009b 00       		.align	2
 515              	.LC15:
 516 009c 57415445 		.ascii	"WATER DETECTED\000"
 516      52204445 
 516      54454354 
 516      454400
 517 00ab 00       		.align	2
 518              	.LC16:
 519 00ac 74657374 		.ascii	"test%d.txt\000"
 519      25642E74 
 519      787400
 520 00b7 00       		.align	2
 521              	.LC17:
 522 00b8 7700     		.ascii	"w\000"
 523 00ba 0000     		.align	2
 524              	.LC18:
 525 00bc 5452414E 		.ascii	"TRANSMIT\000"
 525      534D4954 
 525      00
 526 00c5 000000   		.align	2
 527              	.LC0:
 528 00c8 53595354 		.ascii	"SYSTEM_CHECK\000"
 528      454D5F43 
 528      4845434B 
 528      00
 529 00d5 00       		.space	1
 530 00d6 0000     		.align	2
 531              	.LC1:
 532 00d8 0A535441 		.ascii	"\012STATE: DESCENDING\012\000"
 532      54453A20 
 532      44455343 
 532      454E4449 
 532      4E470A00 
 533              		.align	2
 534              	.LC2:
 535 00ec 53544154 		.ascii	"STATE: LANDED\012\000"
 535      453A204C 
 535      414E4445 
 535      440A00
 536 00fb 00       		.align	2
 537              	.LC3:
 538 00fc 53544154 		.ascii	"STATE: VACUUMING\012\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 14


 538      453A2056 
 538      41435555 
 538      4D494E47 
 538      0A00
 539 010e 0000     		.align	2
 540              	.LC4:
 541 0110 53544154 		.ascii	"STATE: RESURFACE\012\000"
 541      453A2052 
 541      45535552 
 541      46414345 
 541      0A00
 542 0122 0000     		.align	2
 543              	.LC5:
 544 0124 53544154 		.ascii	"STATE: TRANSMIT\012\000"
 544      453A2054 
 544      52414E53 
 544      4D49540A 
 544      00
 545              		.section	.text.main,"ax",%progbits
 546              		.align	2
 547              		.global	main
 548              		.thumb
 549              		.thumb_func
 550              		.type	main, %function
 551              	main:
 552              	.LFB67:
 149:main.c        **** 
 150:main.c        **** int main()
 151:main.c        **** {
 553              		.loc 1 151 0
 554              		.cfi_startproc
 555              		@ args = 0, pretend = 0, frame = 296
 556              		@ frame_needed = 1, uses_anonymous_args = 0
 557 0000 B0B5     		push	{r4, r5, r7, lr}
 558              		.cfi_def_cfa_offset 16
 559              		.cfi_offset 4, -16
 560              		.cfi_offset 5, -12
 561              		.cfi_offset 7, -8
 562              		.cfi_offset 14, -4
 563 0002 CCB0     		sub	sp, sp, #304
 564              		.cfi_def_cfa_offset 320
 565 0004 02AF     		add	r7, sp, #8
 566              		.cfi_def_cfa 7, 312
 152:main.c        ****     int num = 0, decimals = 0;                                       // ADC Voltage conversion plac
 567              		.loc 1 152 0
 568 0006 0023     		movs	r3, #0
 569 0008 C7F81831 		str	r3, [r7, #280]
 570 000c 0023     		movs	r3, #0
 571 000e C7F81431 		str	r3, [r7, #276]
 153:main.c        ****     float voltage = 0, temp = 0, output = 0, pressure_avg = 0;       // ADC Voltage conversion vari
 572              		.loc 1 153 0
 573 0012 4FF00003 		mov	r3, #0
 574 0016 C7F81031 		str	r3, [r7, #272]	@ float
 575 001a 4FF00003 		mov	r3, #0
 576 001e C7F80C31 		str	r3, [r7, #268]	@ float
 577 0022 4FF00003 		mov	r3, #0
 578 0026 C7F80831 		str	r3, [r7, #264]	@ float
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 15


 579 002a 4FF00003 		mov	r3, #0
 580 002e C7F82431 		str	r3, [r7, #292]	@ float
 154:main.c        ****     char buf[50], tempbuf[20] = {}, curState[14] = "SYSTEM_CHECK";  // buffers, UART and initial st
 581              		.loc 1 154 0
 582 0032 07F1B003 		add	r3, r7, #176
 583 0036 0022     		movs	r2, #0
 584 0038 1A60     		str	r2, [r3]
 585 003a 0433     		adds	r3, r3, #4
 586 003c 0022     		movs	r2, #0
 587 003e 1A60     		str	r2, [r3]
 588 0040 0433     		adds	r3, r3, #4
 589 0042 0022     		movs	r2, #0
 590 0044 1A60     		str	r2, [r3]
 591 0046 0433     		adds	r3, r3, #4
 592 0048 0022     		movs	r2, #0
 593 004a 1A60     		str	r2, [r3]
 594 004c 0433     		adds	r3, r3, #4
 595 004e 0022     		movs	r2, #0
 596 0050 1A60     		str	r2, [r3]
 597 0052 0433     		adds	r3, r3, #4
 598 0054 744B     		ldr	r3, .L66+8
 599 0056 07F1A004 		add	r4, r7, #160
 600 005a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 601 005c 07C4     		stmia	r4!, {r0, r1, r2}
 602 005e 2370     		strb	r3, [r4]
 603 0060 0023     		movs	r3, #0
 604 0062 87F8AD30 		strb	r3, [r7, #173]
 155:main.c        ****     char descendbuf[DESCENDING_LEN] = STATE_DESCENDING;             // buffers for transmitting sta
 605              		.loc 1 155 0
 606 0066 714B     		ldr	r3, .L66+12
 607 0068 07F18C04 		add	r4, r7, #140
 608 006c 1D46     		mov	r5, r3
 609 006e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 610 0070 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 611 0072 2B68     		ldr	r3, [r5]
 612 0074 1A46     		mov	r2, r3	@ movhi
 613 0076 2280     		strh	r2, [r4]	@ movhi
 614 0078 0234     		adds	r4, r4, #2
 615 007a 1B0C     		lsrs	r3, r3, #16
 616 007c 2370     		strb	r3, [r4]
 156:main.c        ****     char landedbuf[LANDED_LEN] = STATE_LANDED;
 617              		.loc 1 156 0
 618 007e 6C4B     		ldr	r3, .L66+16
 619 0080 07F17C04 		add	r4, r7, #124
 620 0084 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 621 0086 07C4     		stmia	r4!, {r0, r1, r2}
 622 0088 2380     		strh	r3, [r4]	@ movhi
 157:main.c        ****     char vacuumbuf[VACUUM_LEN] = STATE_VACUUM;
 623              		.loc 1 157 0
 624 008a 6A4B     		ldr	r3, .L66+20
 625 008c 07F16804 		add	r4, r7, #104
 626 0090 1D46     		mov	r5, r3
 627 0092 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 628 0094 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 629 0096 2B68     		ldr	r3, [r5]
 630 0098 2370     		strb	r3, [r4]
 158:main.c        ****     char resurfbuf[RESURFACE_LEN] = STATE_RESURFACE;
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 16


 631              		.loc 1 158 0
 632 009a 674B     		ldr	r3, .L66+24
 633 009c 07F15404 		add	r4, r7, #84
 634 00a0 1D46     		mov	r5, r3
 635 00a2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 636 00a4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 637 00a6 2B68     		ldr	r3, [r5]
 638 00a8 2370     		strb	r3, [r4]
 159:main.c        ****     char transbuf[TRANSMIT_LEN] = STATE_TRANSMIT;
 639              		.loc 1 159 0
 640 00aa 644B     		ldr	r3, .L66+28
 641 00ac 07F14404 		add	r4, r7, #68
 642 00b0 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 643 00b2 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 160:main.c        ****     int stateMsgCount = 0, pulse = 0, secs_for_tilt = 0;
 644              		.loc 1 160 0
 645 00b6 0023     		movs	r3, #0
 646 00b8 C7F82031 		str	r3, [r7, #288]
 647 00bc 0023     		movs	r3, #0
 648 00be C7F81C31 		str	r3, [r7, #284]
 649 00c2 0023     		movs	r3, #0
 650 00c4 C7F80431 		str	r3, [r7, #260]
 161:main.c        ****     
 162:main.c        ****     int16_t ax, ay, az, i;
 163:main.c        ****     int16_t gx, gy, gz;
 164:main.c        ****     int16_t z_offset = 0;
 651              		.loc 1 164 0
 652 00c8 0023     		movs	r3, #0
 653 00ca A7F80231 		strh	r3, [r7, #258]	@ movhi
 165:main.c        ****     int tens = 0, ones = 0;                     // digit place variables for message len of bluetoo
 654              		.loc 1 165 0
 655 00ce 0023     		movs	r3, #0
 656 00d0 3B64     		str	r3, [r7, #64]
 657 00d2 0023     		movs	r3, #0
 658 00d4 C7F8FC30 		str	r3, [r7, #252]
 166:main.c        ****     
 167:main.c        ****     /* Start the components */
 168:main.c        ****     CYGlobalIntEnable;                          // enable global interrupts
 659              		.loc 1 168 0
 660              	@ 168 "main.c" 1
 661 00d8 62B6     		CPSIE   i
 662              	@ 0 "" 2
 169:main.c        ****     I2C_Master_Start(); 
 663              		.loc 1 169 0
 664              		.thumb
 665 00da FFF7FEFF 		bl	I2C_Master_Start
 170:main.c        ****     ADC_Start();
 666              		.loc 1 170 0
 667 00de FFF7FEFF 		bl	ADC_Start
 171:main.c        ****     Sample_Timer_Start();                       // start timer module
 668              		.loc 1 171 0
 669 00e2 FFF7FEFF 		bl	Sample_Timer_Start
 172:main.c        ****     Sample_ISR_StartEx(Sample_ISR_Handler);     // reference ISR function
 670              		.loc 1 172 0
 671 00e6 5648     		ldr	r0, .L66+32
 672 00e8 FFF7FEFF 		bl	Sample_ISR_StartEx
 173:main.c        ****     rx_interrupt_StartEx(rx_interrupt);
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 17


 673              		.loc 1 173 0
 674 00ec 5548     		ldr	r0, .L66+36
 675 00ee FFF7FEFF 		bl	rx_interrupt_StartEx
 174:main.c        ****     //moisture_isr_StartEx(Moisture_ISR_Handler); // moisture isr start
 175:main.c        ****     //Comp_Start();                               // comparator for moisture start
 176:main.c        ****     UART_Start();
 676              		.loc 1 176 0
 677 00f2 FFF7FEFF 		bl	UART_Start
 177:main.c        ****     
 178:main.c        ****     
 179:main.c        ****     #ifdef LCD
 180:main.c        ****         LiquidCrystal_I2C_init(Addr,16,2,0);        // initialize I2C communication with LCD
 678              		.loc 1 180 0
 679 00f6 544B     		ldr	r3, .L66+40
 680 00f8 1B68     		ldr	r3, [r3]
 681 00fa DBB2     		uxtb	r3, r3
 682 00fc 1846     		mov	r0, r3
 683 00fe 1021     		movs	r1, #16
 684 0100 0222     		movs	r2, #2
 685 0102 0023     		movs	r3, #0
 686 0104 FFF7FEFF 		bl	LiquidCrystal_I2C_init
 181:main.c        ****         begin(); 
 687              		.loc 1 181 0
 688 0108 FFF7FEFF 		bl	begin
 182:main.c        ****     
 183:main.c        ****     #endif
 184:main.c        ****    
 185:main.c        ****     /* initialize MPU6050 */
 186:main.c        ****     #ifdef MPU6050
 187:main.c        ****         MPU6050_init();    
 689              		.loc 1 187 0
 690 010c FFF7FEFF 		bl	MPU6050_init
 188:main.c        **** 	    MPU6050_initialize(); 
 691              		.loc 1 188 0
 692 0110 FFF7FEFF 		bl	MPU6050_initialize
 189:main.c        ****     #endif
 190:main.c        ****         
 191:main.c        ****     #ifdef LCD
 192:main.c        ****         /* Startup Display */
 193:main.c        ****         LCD_print("PSoC 5LP: O-Vac");
 693              		.loc 1 193 0
 694 0114 4D48     		ldr	r0, .L66+44
 695 0116 FFF7FEFF 		bl	LCD_print
 194:main.c        ****         setCursor(0,1);
 696              		.loc 1 194 0
 697 011a 0020     		movs	r0, #0
 698 011c 0121     		movs	r1, #1
 699 011e FFF7FEFF 		bl	setCursor
 195:main.c        ****         LCD_print("I2C Working");
 700              		.loc 1 195 0
 701 0122 4B48     		ldr	r0, .L66+48
 702 0124 FFF7FEFF 		bl	LCD_print
 196:main.c        ****         
 197:main.c        ****         CyDelay(1000u);   
 703              		.loc 1 197 0
 704 0128 4FF47A70 		mov	r0, #1000
 705 012c FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 18


 198:main.c        ****         clear();
 706              		.loc 1 198 0
 707 0130 FFF7FEFF 		bl	clear
 199:main.c        ****     #endif
 200:main.c        ****     
 201:main.c        ****     /* Start the ADC conversion */
 202:main.c        ****     ADC_StartConvert();
 708              		.loc 1 202 0
 709 0134 FFF7FEFF 		bl	ADC_StartConvert
 203:main.c        **** 
 204:main.c        ****     /* Start SD card*/
 205:main.c        ****     #ifdef SD
 206:main.c        ****         int SD_Result = SD_SETUP(file); 
 710              		.loc 1 206 0
 711 0138 4648     		ldr	r0, .L66+52
 712 013a FFF7FEFF 		bl	SD_SETUP
 713 013e C7F8F800 		str	r0, [r7, #248]
 207:main.c        ****         
 208:main.c        ****     #endif
 209:main.c        ****     
 210:main.c        ****     #ifdef LCD
 211:main.c        ****         /* Display the current State */
 212:main.c        ****         setCursor(0,0);    
 714              		.loc 1 212 0
 715 0142 0020     		movs	r0, #0
 716 0144 0021     		movs	r1, #0
 717 0146 FFF7FEFF 		bl	setCursor
 213:main.c        ****         LCD_print(curState);
 718              		.loc 1 213 0
 719 014a 07F1A003 		add	r3, r7, #160
 720 014e 1846     		mov	r0, r3
 721 0150 FFF7FEFF 		bl	LCD_print
 214:main.c        ****     #endif
 215:main.c        ****     STATE = WAIT_TO_LAUNCH;
 722              		.loc 1 215 0
 723 0154 404B     		ldr	r3, .L66+56
 724 0156 0122     		movs	r2, #1
 725 0158 1A70     		strb	r2, [r3]
 216:main.c        ****     #ifdef LCD
 217:main.c        ****         setCursor(0,0);
 726              		.loc 1 217 0
 727 015a 0020     		movs	r0, #0
 728 015c 0021     		movs	r1, #0
 729 015e FFF7FEFF 		bl	setCursor
 218:main.c        ****         clear();
 730              		.loc 1 218 0
 731 0162 FFF7FEFF 		bl	clear
 219:main.c        ****         LCD_print("STATE: WAIT");  
 732              		.loc 1 219 0
 733 0166 3D48     		ldr	r0, .L66+60
 734 0168 FFF7FEFF 		bl	LCD_print
 220:main.c        ****     #endif
 221:main.c        ****     
 222:main.c        ****     Countdown_timer_Start();
 735              		.loc 1 222 0
 736 016c FFF7FEFF 		bl	Countdown_timer_Start
 223:main.c        ****     countdown_StartEx(Countdown_ISR_Handler);
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 19


 737              		.loc 1 223 0
 738 0170 3B48     		ldr	r0, .L66+64
 739 0172 FFF7FEFF 		bl	countdown_StartEx
 740              	.L64:
 741              	.LBB2:
 224:main.c        ****    
 225:main.c        ****     
 226:main.c        ****     for(;;)
 227:main.c        ****     {
 228:main.c        ****         
 229:main.c        ****         if(ADC_IsEndConversion(ADC_RETURN_STATUS))              // voltage conversion for pressure
 742              		.loc 1 229 0
 743 0176 0120     		movs	r0, #1
 744 0178 FFF7FEFF 		bl	ADC_IsEndConversion
 745 017c 0346     		mov	r3, r0
 746 017e 002B     		cmp	r3, #0
 747 0180 00F0D680 		beq	.L23
 230:main.c        ****         {
 231:main.c        ****             output = ADC_GetResult32();
 748              		.loc 1 231 0
 749 0184 FFF7FEFF 		bl	ADC_GetResult32
 750 0188 0346     		mov	r3, r0
 751 018a 1846     		mov	r0, r3
 752 018c FFF7FEFF 		bl	__aeabi_i2f
 753 0190 0346     		mov	r3, r0
 754 0192 C7F80831 		str	r3, [r7, #264]	@ float
 232:main.c        ****             voltage = output * (3.32 / 4096);
 755              		.loc 1 232 0
 756 0196 D7F80801 		ldr	r0, [r7, #264]	@ float
 757 019a FFF7FEFF 		bl	__aeabi_f2d
 758 019e 0246     		mov	r2, r0
 759 01a0 0B46     		mov	r3, r1
 760 01a2 1046     		mov	r0, r2
 761 01a4 1946     		mov	r1, r3
 762 01a6 1EA3     		adr	r3, .L66
 763 01a8 D3E90023 		ldrd	r2, [r3]
 764 01ac FFF7FEFF 		bl	__aeabi_dmul
 765 01b0 0246     		mov	r2, r0
 766 01b2 0B46     		mov	r3, r1
 767 01b4 1046     		mov	r0, r2
 768 01b6 1946     		mov	r1, r3
 769 01b8 FFF7FEFF 		bl	__aeabi_d2f
 770 01bc 0346     		mov	r3, r0
 771 01be C7F81031 		str	r3, [r7, #272]	@ float
 233:main.c        ****             if(collect_flag == 1){
 772              		.loc 1 233 0
 773 01c2 284B     		ldr	r3, .L66+68
 774 01c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 775 01c6 002B     		cmp	r3, #0
 776 01c8 00F0B280 		beq	.L23
 234:main.c        ****                 if (press_id < MA_WINDOW){
 777              		.loc 1 234 0
 778 01cc 264B     		ldr	r3, .L66+72
 779 01ce 1B68     		ldr	r3, [r3]
 780 01d0 0E2B     		cmp	r3, #14
 781 01d2 0BDC     		bgt	.L24
 235:main.c        ****                     pressure_sum += voltage;     
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 20


 782              		.loc 1 235 0
 783 01d4 254B     		ldr	r3, .L66+76
 784 01d6 1B68     		ldr	r3, [r3]	@ float
 785 01d8 1846     		mov	r0, r3
 786 01da D7F81011 		ldr	r1, [r7, #272]	@ float
 787 01de FFF7FEFF 		bl	__aeabi_fadd
 788 01e2 0346     		mov	r3, r0
 789 01e4 1A46     		mov	r2, r3
 790 01e6 214B     		ldr	r3, .L66+76
 791 01e8 1A60     		str	r2, [r3]	@ float
 792 01ea 95E0     		b	.L25
 793              	.L24:
 236:main.c        ****                 }
 237:main.c        ****                 else if(press_id == MA_WINDOW){
 794              		.loc 1 237 0
 795 01ec 1E4B     		ldr	r3, .L66+72
 796 01ee 1B68     		ldr	r3, [r3]
 797 01f0 0F2B     		cmp	r3, #15
 798 01f2 3FD1     		bne	.L26
 238:main.c        ****                     pressure_sum += voltage;
 799              		.loc 1 238 0
 800 01f4 1D4B     		ldr	r3, .L66+76
 801 01f6 1B68     		ldr	r3, [r3]	@ float
 802 01f8 1846     		mov	r0, r3
 803 01fa D7F81011 		ldr	r1, [r7, #272]	@ float
 804 01fe FFF7FEFF 		bl	__aeabi_fadd
 805 0202 0346     		mov	r3, r0
 806 0204 1A46     		mov	r2, r3
 807 0206 194B     		ldr	r3, .L66+76
 808 0208 1A60     		str	r2, [r3]	@ float
 239:main.c        ****                     pressure_avg = pressure_sum/MA_WINDOW;                            // compute ba
 809              		.loc 1 239 0
 810 020a 184B     		ldr	r3, .L66+76
 811 020c 1B68     		ldr	r3, [r3]	@ float
 812 020e 1846     		mov	r0, r3
 813 0210 1749     		ldr	r1, .L66+80
 814 0212 FFF7FEFF 		bl	__aeabi_fdiv
 815 0216 0346     		mov	r3, r0
 816 0218 C7F82431 		str	r3, [r7, #292]	@ float
 817 021c 7CE0     		b	.L25
 818              	.L67:
 819 021e 00BF     		.align	3
 820              	.L66:
 821 0220 8FC2F528 		.word	687194767
 822 0224 5C8F4A3F 		.word	1061850972
 823 0228 C8000000 		.word	.LC0
 824 022c D8000000 		.word	.LC1
 825 0230 EC000000 		.word	.LC2
 826 0234 FC000000 		.word	.LC3
 827 0238 10010000 		.word	.LC4
 828 023c 24010000 		.word	.LC5
 829 0240 00000000 		.word	Sample_ISR_Handler
 830 0244 00000000 		.word	rx_interrupt
 831 0248 00000000 		.word	Addr
 832 024c 00000000 		.word	.LC6
 833 0250 10000000 		.word	.LC7
 834 0254 00000000 		.word	file
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 21


 835 0258 00000000 		.word	STATE
 836 025c 1C000000 		.word	.LC8
 837 0260 00000000 		.word	Countdown_ISR_Handler
 838 0264 00000000 		.word	collect_flag
 839 0268 00000000 		.word	press_id
 840 026c 00000000 		.word	pressure_sum
 841 0270 00007041 		.word	1097859072
 842              	.L26:
 843              	.LBB3:
 240:main.c        ****                 }
 241:main.c        ****                 else{
 242:main.c        ****                     pressure_avg = ComputeMA(pressure_avg, MA_WINDOW, voltage);
 844              		.loc 1 242 0
 845 0274 D7F82401 		ldr	r0, [r7, #292]	@ float
 846 0278 0F21     		movs	r1, #15
 847 027a D7F81021 		ldr	r2, [r7, #272]	@ float
 848 027e FFF7FEFF 		bl	ComputeMA
 849 0282 C7F82401 		str	r0, [r7, #292]	@ float
 243:main.c        ****                     num = pressure_avg;
 850              		.loc 1 243 0
 851 0286 D7F82401 		ldr	r0, [r7, #292]	@ float
 852 028a FFF7FEFF 		bl	__aeabi_f2iz
 853 028e 0346     		mov	r3, r0
 854 0290 C7F81831 		str	r3, [r7, #280]
 244:main.c        ****                     temp = pressure_avg - num;
 855              		.loc 1 244 0
 856 0294 D7F81801 		ldr	r0, [r7, #280]
 857 0298 FFF7FEFF 		bl	__aeabi_i2f
 858 029c 0346     		mov	r3, r0
 859 029e D7F82401 		ldr	r0, [r7, #292]	@ float
 860 02a2 1946     		mov	r1, r3
 861 02a4 FFF7FEFF 		bl	__aeabi_fsub
 862 02a8 0346     		mov	r3, r0
 863 02aa C7F80C31 		str	r3, [r7, #268]	@ float
 245:main.c        ****                     decimals = temp * 10000;
 864              		.loc 1 245 0
 865 02ae D7F80C01 		ldr	r0, [r7, #268]	@ float
 866 02b2 AF49     		ldr	r1, .L68
 867 02b4 FFF7FEFF 		bl	__aeabi_fmul
 868 02b8 0346     		mov	r3, r0
 869 02ba 1846     		mov	r0, r3
 870 02bc FFF7FEFF 		bl	__aeabi_f2iz
 871 02c0 0346     		mov	r3, r0
 872 02c2 C7F81431 		str	r3, [r7, #276]
 246:main.c        ****                     char sdbuf[60] = {};
 873              		.loc 1 246 0
 874 02c6 3B46     		mov	r3, r7
 875 02c8 1A46     		mov	r2, r3
 876 02ca 3C23     		movs	r3, #60
 877 02cc 1046     		mov	r0, r2
 878 02ce 0021     		movs	r1, #0
 879 02d0 1A46     		mov	r2, r3
 880 02d2 FFF7FEFF 		bl	memset
 247:main.c        ****                     #ifdef SD
 248:main.c        ****                         sprintf(sdbuf, "%d.%04d, %d, %d\n", num, decimals, (int16)output, average);
 881              		.loc 1 248 0
 882 02d6 D7F80801 		ldr	r0, [r7, #264]	@ float
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 22


 883 02da FFF7FEFF 		bl	__aeabi_f2iz
 884 02de 0346     		mov	r3, r0
 885 02e0 9BB2     		uxth	r3, r3
 886 02e2 1AB2     		sxth	r2, r3
 887 02e4 A34B     		ldr	r3, .L68+4
 888 02e6 1B88     		ldrh	r3, [r3]
 889 02e8 1BB2     		sxth	r3, r3
 890 02ea 3946     		mov	r1, r7
 891 02ec 0092     		str	r2, [sp]
 892 02ee 0193     		str	r3, [sp, #4]
 893 02f0 0846     		mov	r0, r1
 894 02f2 A149     		ldr	r1, .L68+8
 895 02f4 D7F81821 		ldr	r2, [r7, #280]
 896 02f8 D7F81431 		ldr	r3, [r7, #276]
 897 02fc FFF7FEFF 		bl	sprintf
 249:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 898              		.loc 1 249 0
 899 0300 9E4B     		ldr	r3, .L68+12
 900 0302 1C68     		ldr	r4, [r3]
 901 0304 3B46     		mov	r3, r7
 902 0306 1846     		mov	r0, r3
 903 0308 FFF7FEFF 		bl	strlen
 904 030c 0246     		mov	r2, r0
 905 030e 3B46     		mov	r3, r7
 906 0310 2046     		mov	r0, r4
 907 0312 1946     		mov	r1, r3
 908 0314 FFF7FEFF 		bl	FS_Write
 909              	.L25:
 910              	.LBE3:
 250:main.c        ****                     #endif 
 251:main.c        ****                 }
 252:main.c        ****                 if (STATE != DESCENDING) collect_flag = 0;
 911              		.loc 1 252 0
 912 0318 994B     		ldr	r3, .L68+16
 913 031a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 914 031c 022B     		cmp	r3, #2
 915 031e 02D0     		beq	.L27
 916              		.loc 1 252 0 is_stmt 0 discriminator 1
 917 0320 984B     		ldr	r3, .L68+20
 918 0322 0022     		movs	r2, #0
 919 0324 1A70     		strb	r2, [r3]
 920              	.L27:
 253:main.c        ****                 press_id++;
 921              		.loc 1 253 0 is_stmt 1
 922 0326 984B     		ldr	r3, .L68+24
 923 0328 1B68     		ldr	r3, [r3]
 924 032a 0133     		adds	r3, r3, #1
 925 032c 964A     		ldr	r2, .L68+24
 926 032e 1360     		str	r3, [r2]
 927              	.L23:
 254:main.c        ****             }
 255:main.c        ****         }
 256:main.c        ****         
 257:main.c        ****        
 258:main.c        ****         
 259:main.c        ****         
 260:main.c        ****     /* Bluetooth message response, after 2 bytes received, retrieve message from those 2 bytes. Onc
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 23


 261:main.c        ****      * has arrived, process it. */
 262:main.c        ****     #ifdef BT
 263:main.c        ****         if (msg_count >= 2){
 928              		.loc 1 263 0
 929 0330 964B     		ldr	r3, .L68+28
 930 0332 1B68     		ldr	r3, [r3]
 931 0334 012B     		cmp	r3, #1
 932 0336 13DD     		ble	.L28
 264:main.c        ****             tens = RxBuffer[0] - 48;
 933              		.loc 1 264 0
 934 0338 954B     		ldr	r3, .L68+32
 935 033a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 936 033c 303B     		subs	r3, r3, #48
 937 033e 3B64     		str	r3, [r7, #64]
 265:main.c        ****             ones = RxBuffer[1] - 48;
 938              		.loc 1 265 0
 939 0340 934B     		ldr	r3, .L68+32
 940 0342 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 941 0344 303B     		subs	r3, r3, #48
 942 0346 C7F8FC30 		str	r3, [r7, #252]
 266:main.c        ****             bytes = (tens * 10) + ones;
 943              		.loc 1 266 0
 944 034a 3A6C     		ldr	r2, [r7, #64]
 945 034c 1346     		mov	r3, r2
 946 034e 9B00     		lsls	r3, r3, #2
 947 0350 1344     		add	r3, r3, r2
 948 0352 5B00     		lsls	r3, r3, #1
 949 0354 1A46     		mov	r2, r3
 950 0356 D7F8FC30 		ldr	r3, [r7, #252]
 951 035a 1344     		add	r3, r3, r2
 952 035c 8D4A     		ldr	r2, .L68+36
 953 035e 1360     		str	r3, [r2]
 954              	.L28:
 267:main.c        ****         } 
 268:main.c        ****         
 269:main.c        ****         if(rxflag) {
 955              		.loc 1 269 0
 956 0360 8D4B     		ldr	r3, .L68+40
 957 0362 1B68     		ldr	r3, [r3]
 958 0364 002B     		cmp	r3, #0
 959 0366 2DD0     		beq	.L29
 270:main.c        ****             uint8_to_char(RxBuffer, &tempbuf[0], 20);
 960              		.loc 1 270 0
 961 0368 07F1B003 		add	r3, r7, #176
 962 036c 8848     		ldr	r0, .L68+32
 963 036e 1946     		mov	r1, r3
 964 0370 1422     		movs	r2, #20
 965 0372 FFF7FEFF 		bl	uint8_to_char
 271:main.c        ****             depth = BT_Process(&tempbuf[3], &STATE, bytes, &dataflag, &reset);
 966              		.loc 1 271 0
 967 0376 874B     		ldr	r3, .L68+36
 968 0378 1A68     		ldr	r2, [r3]
 969 037a 07F1B003 		add	r3, r7, #176
 970 037e D91C     		adds	r1, r3, #3
 971 0380 864B     		ldr	r3, .L68+44
 972 0382 0093     		str	r3, [sp]
 973 0384 0846     		mov	r0, r1
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 24


 974 0386 7E49     		ldr	r1, .L68+16
 975 0388 854B     		ldr	r3, .L68+48
 976 038a FFF7FEFF 		bl	BT_Process
 977 038e 0246     		mov	r2, r0
 978 0390 844B     		ldr	r3, .L68+52
 979 0392 1A60     		str	r2, [r3]
 272:main.c        ****             
 273:main.c        ****             msg_count = 0; bytes = 0;
 980              		.loc 1 273 0
 981 0394 7D4B     		ldr	r3, .L68+28
 982 0396 0022     		movs	r2, #0
 983 0398 1A60     		str	r2, [r3]
 984 039a 7E4B     		ldr	r3, .L68+36
 985 039c 0022     		movs	r2, #0
 986 039e 1A60     		str	r2, [r3]
 274:main.c        ****             memset(RxBuffer, 0, BUFFER_LEN);
 987              		.loc 1 274 0
 988 03a0 7B48     		ldr	r0, .L68+32
 989 03a2 0021     		movs	r1, #0
 990 03a4 4022     		movs	r2, #64
 991 03a6 FFF7FEFF 		bl	memset
 275:main.c        ****             memset(tempbuf, 0, 20);
 992              		.loc 1 275 0
 993 03aa 07F1B003 		add	r3, r7, #176
 994 03ae 1846     		mov	r0, r3
 995 03b0 0021     		movs	r1, #0
 996 03b2 1422     		movs	r2, #20
 997 03b4 FFF7FEFF 		bl	memset
 276:main.c        ****             countdown = 0;
 998              		.loc 1 276 0
 999 03b8 7B4B     		ldr	r3, .L68+56
 1000 03ba 0022     		movs	r2, #0
 1001 03bc 1A70     		strb	r2, [r3]
 277:main.c        ****             rxflag = 0;
 1002              		.loc 1 277 0
 1003 03be 764B     		ldr	r3, .L68+40
 1004 03c0 0022     		movs	r2, #0
 1005 03c2 1A60     		str	r2, [r3]
 1006              	.L29:
 278:main.c        ****         }
 279:main.c        ****     #endif
 280:main.c        ****     
 281:main.c        ****         /* Get Z-Acceleration */
 282:main.c        **** 
 283:main.c        ****         az = MPU6050_getAccelerationZ();
 1007              		.loc 1 283 0
 1008 03c4 FFF7FEFF 		bl	MPU6050_getAccelerationZ
 1009 03c8 0346     		mov	r3, r0
 1010 03ca A7F8F630 		strh	r3, [r7, #246]	@ movhi
 284:main.c        **** 
 285:main.c        ****         int t = 1;
 1011              		.loc 1 285 0
 1012 03ce 0123     		movs	r3, #1
 1013 03d0 FB63     		str	r3, [r7, #60]
 286:main.c        ****         
 287:main.c        ****         
 288:main.c        ****          if(collect_flag == 1){              // Check accelerometer and gyro data
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 25


 1014              		.loc 1 288 0
 1015 03d2 6C4B     		ldr	r3, .L68+20
 1016 03d4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1017 03d6 002B     		cmp	r3, #0
 1018 03d8 42D0     		beq	.L30
 289:main.c        ****                     if (id < MA_WINDOW){    
 1019              		.loc 1 289 0
 1020 03da 744B     		ldr	r3, .L68+60
 1021 03dc 1B68     		ldr	r3, [r3]
 1022 03de 0E2B     		cmp	r3, #14
 1023 03e0 07DC     		bgt	.L31
 290:main.c        ****                         sum += az;  
 1024              		.loc 1 290 0
 1025 03e2 B7F9F620 		ldrsh	r2, [r7, #246]
 1026 03e6 724B     		ldr	r3, .L68+64
 1027 03e8 1B68     		ldr	r3, [r3]
 1028 03ea 1344     		add	r3, r3, r2
 1029 03ec 704A     		ldr	r2, .L68+64
 1030 03ee 1360     		str	r3, [r2]
 1031 03f0 31E0     		b	.L32
 1032              	.L31:
 291:main.c        ****                     }
 292:main.c        ****                     else if(id == MA_WINDOW){
 1033              		.loc 1 292 0
 1034 03f2 6E4B     		ldr	r3, .L68+60
 1035 03f4 1B68     		ldr	r3, [r3]
 1036 03f6 0F2B     		cmp	r3, #15
 1037 03f8 13D1     		bne	.L33
 293:main.c        ****                         sum += az;
 1038              		.loc 1 293 0
 1039 03fa B7F9F620 		ldrsh	r2, [r7, #246]
 1040 03fe 6C4B     		ldr	r3, .L68+64
 1041 0400 1B68     		ldr	r3, [r3]
 1042 0402 1344     		add	r3, r3, r2
 1043 0404 6A4A     		ldr	r2, .L68+64
 1044 0406 1360     		str	r3, [r2]
 294:main.c        ****                         average = sum/MA_WINDOW;                          
 1045              		.loc 1 294 0
 1046 0408 694B     		ldr	r3, .L68+64
 1047 040a 1B68     		ldr	r3, [r3]
 1048 040c 694A     		ldr	r2, .L68+68
 1049 040e 82FB0312 		smull	r1, r2, r2, r3
 1050 0412 1A44     		add	r2, r2, r3
 1051 0414 D210     		asrs	r2, r2, #3
 1052 0416 DB17     		asrs	r3, r3, #31
 1053 0418 D31A     		subs	r3, r2, r3
 1054 041a 9AB2     		uxth	r2, r3
 1055 041c 554B     		ldr	r3, .L68+4
 1056 041e 1A80     		strh	r2, [r3]	@ movhi
 1057 0420 19E0     		b	.L32
 1058              	.L33:
 295:main.c        ****                     }
 296:main.c        ****                     else{
 297:main.c        ****                         average = ComputeMA(average, MA_WINDOW, az);                // Compute aver
 1059              		.loc 1 297 0
 1060 0422 544B     		ldr	r3, .L68+4
 1061 0424 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 26


 1062 0426 1BB2     		sxth	r3, r3
 1063 0428 1846     		mov	r0, r3
 1064 042a FFF7FEFF 		bl	__aeabi_i2f
 1065 042e 0446     		mov	r4, r0
 1066 0430 B7F9F630 		ldrsh	r3, [r7, #246]
 1067 0434 1846     		mov	r0, r3
 1068 0436 FFF7FEFF 		bl	__aeabi_i2f
 1069 043a 0346     		mov	r3, r0
 1070 043c 2046     		mov	r0, r4
 1071 043e 0F21     		movs	r1, #15
 1072 0440 1A46     		mov	r2, r3
 1073 0442 FFF7FEFF 		bl	ComputeMA
 1074 0446 0346     		mov	r3, r0
 1075 0448 1846     		mov	r0, r3
 1076 044a FFF7FEFF 		bl	__aeabi_f2iz
 1077 044e 0346     		mov	r3, r0
 1078 0450 9AB2     		uxth	r2, r3
 1079 0452 484B     		ldr	r3, .L68+4
 1080 0454 1A80     		strh	r2, [r3]	@ movhi
 1081              	.L32:
 298:main.c        ****                     }
 299:main.c        ****                     id++;
 1082              		.loc 1 299 0
 1083 0456 554B     		ldr	r3, .L68+60
 1084 0458 1B68     		ldr	r3, [r3]
 1085 045a 0133     		adds	r3, r3, #1
 1086 045c 534A     		ldr	r2, .L68+60
 1087 045e 1360     		str	r3, [r2]
 1088              	.L30:
 300:main.c        ****                     
 301:main.c        ****         }
 302:main.c        ****         /* State Machine */
 303:main.c        ****         switch (STATE){
 1089              		.loc 1 303 0
 1090 0460 474B     		ldr	r3, .L68+16
 1091 0462 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1092 0464 013B     		subs	r3, r3, #1
 1093 0466 042B     		cmp	r3, #4
 1094 0468 00F20382 		bhi	.L65
 1095 046c 01A2     		adr	r2, .L36
 1096 046e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1097 0472 00BF     		.p2align 2
 1098              	.L36:
 1099 0474 89040000 		.word	.L35+1
 1100 0478 81060000 		.word	.L37+1
 1101 047c 1F070000 		.word	.L38+1
 1102 0480 A9070000 		.word	.L39+1
 1103 0484 4F080000 		.word	.L40+1
 1104              		.p2align 1
 1105              	.L35:
 304:main.c        ****     
 305:main.c        ****             /* Waiting for start command and depth*/
 306:main.c        ****             case WAIT_TO_LAUNCH:  
 307:main.c        ****                 if (reset){                         // If reset command was received, reset:
 1106              		.loc 1 307 0
 1107 0488 444B     		ldr	r3, .L68+44
 1108 048a 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 27


 1109 048c 002B     		cmp	r3, #0
 1110 048e 37D0     		beq	.L41
 308:main.c        ****                     id = 1;                                // Interrupt count.
 1111              		.loc 1 308 0
 1112 0490 464B     		ldr	r3, .L68+60
 1113 0492 0122     		movs	r2, #1
 1114 0494 1A60     		str	r2, [r3]
 309:main.c        ****                     data_time = 0;                         // data point num
 1115              		.loc 1 309 0
 1116 0496 484B     		ldr	r3, .L68+72
 1117 0498 0022     		movs	r2, #0
 1118 049a 1A60     		str	r2, [r3]
 310:main.c        ****                     sum = 0;                               // Sum of accelerometer values. 
 1119              		.loc 1 310 0
 1120 049c 444B     		ldr	r3, .L68+64
 1121 049e 0022     		movs	r2, #0
 1122 04a0 1A60     		str	r2, [r3]
 311:main.c        ****                     average = 0;                           // Moving average variable.
 1123              		.loc 1 311 0
 1124 04a2 344B     		ldr	r3, .L68+4
 1125 04a4 0022     		movs	r2, #0
 1126 04a6 1A80     		strh	r2, [r3]	@ movhi
 312:main.c        ****                     xavg = 0; yavg = 0;                    // Gyro average variables
 1127              		.loc 1 312 0
 1128 04a8 444B     		ldr	r3, .L68+76
 1129 04aa 4FF00002 		mov	r2, #0
 1130 04ae 1A60     		str	r2, [r3]	@ float
 1131 04b0 434B     		ldr	r3, .L68+80
 1132 04b2 4FF00002 		mov	r2, #0
 1133 04b6 1A60     		str	r2, [r3]	@ float
 313:main.c        ****                     collect_flag = 0;                      // flag indicating when to record accele
 1134              		.loc 1 313 0
 1135 04b8 324B     		ldr	r3, .L68+20
 1136 04ba 0022     		movs	r2, #0
 1137 04bc 1A70     		strb	r2, [r3]
 314:main.c        ****                     wait_flag = 0;                         // flag indicating when to increment int
 1138              		.loc 1 314 0
 1139 04be 414B     		ldr	r3, .L68+84
 1140 04c0 0022     		movs	r2, #0
 1141 04c2 1A70     		strb	r2, [r3]
 315:main.c        ****                     PANIC_flag = 0;                        // flag indicating water is present in h
 1142              		.loc 1 315 0
 1143 04c4 404B     		ldr	r3, .L68+88
 1144 04c6 0022     		movs	r2, #0
 1145 04c8 1A70     		strb	r2, [r3]
 316:main.c        ****                     //bool first_test = 1;                 // flag indicating first test(longer cou
 317:main.c        ****                     depth = 0; countdown = 0;              // Current desired depth, variable for c
 1146              		.loc 1 317 0
 1147 04ca 364B     		ldr	r3, .L68+52
 1148 04cc 0022     		movs	r2, #0
 1149 04ce 1A60     		str	r2, [r3]
 1150 04d0 354B     		ldr	r3, .L68+56
 1151 04d2 0022     		movs	r2, #0
 1152 04d4 1A70     		strb	r2, [r3]
 318:main.c        ****                     msg_count = 0; dataflag = 0;           // BT message len variable, data flag 
 1153              		.loc 1 318 0
 1154 04d6 2D4B     		ldr	r3, .L68+28
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 28


 1155 04d8 0022     		movs	r2, #0
 1156 04da 1A60     		str	r2, [r3]
 1157 04dc 304B     		ldr	r3, .L68+48
 1158 04de 0022     		movs	r2, #0
 1159 04e0 1A60     		str	r2, [r3]
 319:main.c        ****                     reset = 0;                             // indicates whether to reset variables 
 1160              		.loc 1 319 0
 1161 04e2 2E4B     		ldr	r3, .L68+44
 1162 04e4 0022     		movs	r2, #0
 1163 04e6 1A60     		str	r2, [r3]
 320:main.c        ****                     pulse = 0;
 1164              		.loc 1 320 0
 1165 04e8 0023     		movs	r3, #0
 1166 04ea C7F81C31 		str	r3, [r7, #284]
 321:main.c        ****                     #ifdef LCD
 322:main.c        ****                         setCursor(0,0);
 1167              		.loc 1 322 0
 1168 04ee 0020     		movs	r0, #0
 1169 04f0 0021     		movs	r1, #0
 1170 04f2 FFF7FEFF 		bl	setCursor
 323:main.c        ****                         clear();
 1171              		.loc 1 323 0
 1172 04f6 FFF7FEFF 		bl	clear
 324:main.c        ****                         LCD_print("STATE: WAIT");  
 1173              		.loc 1 324 0
 1174 04fa 3448     		ldr	r0, .L68+92
 1175 04fc FFF7FEFF 		bl	LCD_print
 1176              	.L41:
 325:main.c        ****                     #endif 
 326:main.c        ****                 }
 327:main.c        ****             
 328:main.c        ****                 if (transmit_flag){
 1177              		.loc 1 328 0
 1178 0500 334B     		ldr	r3, .L68+96
 1179 0502 1B68     		ldr	r3, [r3]
 1180 0504 002B     		cmp	r3, #0
 1181 0506 0BD0     		beq	.L42
 329:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &tens); // Here, the STATE variable only matte
 1182              		.loc 1 329 0
 1183 0508 07F1B002 		add	r2, r7, #176
 1184 050c 07F14003 		add	r3, r7, #64
 1185 0510 1046     		mov	r0, r2
 1186 0512 1B49     		ldr	r1, .L68+16
 1187 0514 0A22     		movs	r2, #10
 1188 0516 FFF7FEFF 		bl	BT_Send
 330:main.c        ****                     transmit_flag = 0;
 1189              		.loc 1 330 0
 1190 051a 2D4B     		ldr	r3, .L68+96
 1191 051c 0022     		movs	r2, #0
 1192 051e 1A60     		str	r2, [r3]
 1193              	.L42:
 331:main.c        ****                 }
 332:main.c        ****                 // Once depth has been entered, can begin countdown into descending
 333:main.c        ****                 if(wait_flag == 1){
 1194              		.loc 1 333 0
 1195 0520 284B     		ldr	r3, .L68+84
 1196 0522 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 29


 1197 0524 002B     		cmp	r3, #0
 1198 0526 00F0AA80 		beq	.L43
 334:main.c        ****                     #ifdef BT
 335:main.c        ****                         stateMsgCount = 0;
 1199              		.loc 1 335 0
 1200 052a 0023     		movs	r3, #0
 1201 052c C7F82031 		str	r3, [r7, #288]
 336:main.c        ****                         sprintf(buf, "\n%d seconds remaining", (10 - countdown));
 1202              		.loc 1 336 0
 1203 0530 1D4B     		ldr	r3, .L68+56
 1204 0532 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1205 0534 C3F10A03 		rsb	r3, r3, #10
 1206 0538 07F1C402 		add	r2, r7, #196
 1207 053c 1046     		mov	r0, r2
 1208 053e 2549     		ldr	r1, .L68+100
 1209 0540 1A46     		mov	r2, r3
 1210 0542 FFF7FEFF 		bl	sprintf
 337:main.c        ****                         while (stateMsgCount < 21){
 1211              		.loc 1 337 0
 1212 0546 4EE0     		b	.L44
 1213              	.L47:
 338:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1214              		.loc 1 338 0
 1215 0548 46E0     		b	.L45
 1216              	.L46:
 339:main.c        ****                                 UART_PutChar(buf[stateMsgCount++]);
 1217              		.loc 1 339 0
 1218 054a D7F82031 		ldr	r3, [r7, #288]
 1219 054e 5A1C     		adds	r2, r3, #1
 1220 0550 C7F82021 		str	r2, [r7, #288]
 1221 0554 07F59472 		add	r2, r7, #296
 1222 0558 1344     		add	r3, r3, r2
 1223 055a 13F8643C 		ldrb	r3, [r3, #-100]	@ zero_extendqisi2
 1224 055e 1846     		mov	r0, r3
 1225 0560 FFF7FEFF 		bl	UART_PutChar
 340:main.c        ****                                 if (stateMsgCount >= 21) break;
 1226              		.loc 1 340 0
 1227 0564 D7F82031 		ldr	r3, [r7, #288]
 1228 0568 142B     		cmp	r3, #20
 1229 056a 35DD     		ble	.L45
 1230 056c 3BE0     		b	.L44
 1231              	.L69:
 1232 056e 00BF     		.align	2
 1233              	.L68:
 1234 0570 00401C46 		.word	1176256512
 1235 0574 00000000 		.word	average
 1236 0578 28000000 		.word	.LC9
 1237 057c 00000000 		.word	fsfile
 1238 0580 00000000 		.word	STATE
 1239 0584 00000000 		.word	collect_flag
 1240 0588 00000000 		.word	press_id
 1241 058c 00000000 		.word	msg_count
 1242 0590 00000000 		.word	RxBuffer
 1243 0594 00000000 		.word	bytes
 1244 0598 00000000 		.word	rxflag
 1245 059c 00000000 		.word	reset
 1246 05a0 00000000 		.word	dataflag
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 30


 1247 05a4 00000000 		.word	depth
 1248 05a8 00000000 		.word	countdown
 1249 05ac 00000000 		.word	id
 1250 05b0 00000000 		.word	sum
 1251 05b4 89888888 		.word	-2004318071
 1252 05b8 00000000 		.word	data_time
 1253 05bc 00000000 		.word	xavg
 1254 05c0 00000000 		.word	yavg
 1255 05c4 00000000 		.word	wait_flag
 1256 05c8 00000000 		.word	PANIC_flag
 1257 05cc 1C000000 		.word	.LC8
 1258 05d0 00000000 		.word	transmit_flag
 1259 05d4 3C000000 		.word	.LC10
 1260              	.L45:
 338:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1261              		.loc 1 338 0
 1262 05d8 FFF7FEFF 		bl	UART_ReadTxStatus
 1263 05dc 0346     		mov	r3, r0
 1264 05de 03F00803 		and	r3, r3, #8
 1265 05e2 002B     		cmp	r3, #0
 1266 05e4 B1D1     		bne	.L46
 1267              	.L44:
 337:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1268              		.loc 1 337 0
 1269 05e6 D7F82031 		ldr	r3, [r7, #288]
 1270 05ea 142B     		cmp	r3, #20
 1271 05ec ACDD     		ble	.L47
 341:main.c        ****                             }
 342:main.c        ****                         }
 343:main.c        ****                     #endif
 344:main.c        ****                     /* at 10 seconds, change into descending */
 345:main.c        ****                     if(countdown == 10){
 1272              		.loc 1 345 0
 1273 05ee A24B     		ldr	r3, .L70
 1274 05f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1275 05f2 0A2B     		cmp	r3, #10
 1276 05f4 3FD1     		bne	.L48
 346:main.c        ****                         descent_time = (((depth / 13) + 3) * 2 * 500);
 1277              		.loc 1 346 0
 1278 05f6 A14B     		ldr	r3, .L70+4
 1279 05f8 1B68     		ldr	r3, [r3]
 1280 05fa A14A     		ldr	r2, .L70+8
 1281 05fc 82FB0312 		smull	r1, r2, r2, r3
 1282 0600 9210     		asrs	r2, r2, #2
 1283 0602 DB17     		asrs	r3, r3, #31
 1284 0604 D31A     		subs	r3, r2, r3
 1285 0606 0333     		adds	r3, r3, #3
 1286 0608 4FF47A72 		mov	r2, #1000
 1287 060c 02FB03F3 		mul	r3, r2, r3
 1288 0610 9C4A     		ldr	r2, .L70+12
 1289 0612 1360     		str	r3, [r2]
 347:main.c        ****                         /* descent time takes about 2~3 seconds to go 13 feet, add 3 for extra 10m 
 348:main.c        ****                          * number of ISR calls to get 1 second */ 
 349:main.c        ****                         STATE = DESCENDING;
 1290              		.loc 1 349 0
 1291 0614 9C4B     		ldr	r3, .L70+16
 1292 0616 0222     		movs	r2, #2
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 31


 1293 0618 1A70     		strb	r2, [r3]
 350:main.c        ****                         #ifdef LCD
 351:main.c        ****                             setCursor(0,0);
 1294              		.loc 1 351 0
 1295 061a 0020     		movs	r0, #0
 1296 061c 0021     		movs	r1, #0
 1297 061e FFF7FEFF 		bl	setCursor
 352:main.c        ****                             clear();
 1298              		.loc 1 352 0
 1299 0622 FFF7FEFF 		bl	clear
 353:main.c        ****                             LCD_print("STATE: DESCENT");
 1300              		.loc 1 353 0
 1301 0626 9948     		ldr	r0, .L70+20
 1302 0628 FFF7FEFF 		bl	LCD_print
 354:main.c        ****                         #endif
 355:main.c        ****                         #ifdef BT
 356:main.c        ****                             stateMsgCount = 0;
 1303              		.loc 1 356 0
 1304 062c 0023     		movs	r3, #0
 1305 062e C7F82031 		str	r3, [r7, #288]
 357:main.c        ****                             while (stateMsgCount < DESCENDING_LEN){
 1306              		.loc 1 357 0
 1307 0632 19E0     		b	.L49
 1308              	.L52:
 358:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1309              		.loc 1 358 0
 1310 0634 11E0     		b	.L50
 1311              	.L51:
 359:main.c        ****                                     UART_PutChar(descendbuf[stateMsgCount++]);
 1312              		.loc 1 359 0
 1313 0636 D7F82031 		ldr	r3, [r7, #288]
 1314 063a 5A1C     		adds	r2, r3, #1
 1315 063c C7F82021 		str	r2, [r7, #288]
 1316 0640 07F59472 		add	r2, r7, #296
 1317 0644 1344     		add	r3, r3, r2
 1318 0646 13F89C3C 		ldrb	r3, [r3, #-156]	@ zero_extendqisi2
 1319 064a 1846     		mov	r0, r3
 1320 064c FFF7FEFF 		bl	UART_PutChar
 360:main.c        ****                                     if (stateMsgCount >= DESCENDING_LEN) break;
 1321              		.loc 1 360 0
 1322 0650 D7F82031 		ldr	r3, [r7, #288]
 1323 0654 122B     		cmp	r3, #18
 1324 0656 00DD     		ble	.L50
 1325 0658 06E0     		b	.L49
 1326              	.L50:
 358:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1327              		.loc 1 358 0
 1328 065a FFF7FEFF 		bl	UART_ReadTxStatus
 1329 065e 0346     		mov	r3, r0
 1330 0660 03F00803 		and	r3, r3, #8
 1331 0664 002B     		cmp	r3, #0
 1332 0666 E6D1     		bne	.L51
 1333              	.L49:
 357:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1334              		.loc 1 357 0
 1335 0668 D7F82031 		ldr	r3, [r7, #288]
 1336 066c 122B     		cmp	r3, #18
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 32


 1337 066e E1DD     		ble	.L52
 361:main.c        ****                                 }
 362:main.c        ****                             }
 363:main.c        ****                         #endif
 364:main.c        ****                         countdown = 0; 
 1338              		.loc 1 364 0
 1339 0670 814B     		ldr	r3, .L70
 1340 0672 0022     		movs	r2, #0
 1341 0674 1A70     		strb	r2, [r3]
 1342              	.L48:
 365:main.c        ****                     }
 366:main.c        ****                     wait_flag = 0; 
 1343              		.loc 1 366 0
 1344 0676 864B     		ldr	r3, .L70+24
 1345 0678 0022     		movs	r2, #0
 1346 067a 1A70     		strb	r2, [r3]
 367:main.c        ****                 }
 368:main.c        ****                 break;
 1347              		.loc 1 368 0
 1348 067c FAE0     		b	.L53
 1349              	.L43:
 1350 067e F9E0     		b	.L53
 1351              	.L37:
 369:main.c        ****                 
 370:main.c        ****             case DESCENDING:
 371:main.c        ****                 
 372:main.c        **** 
 373:main.c        ****          if(collect_flag == 1){              // Check accelerometer and gyro data
 1352              		.loc 1 373 0
 1353 0680 844B     		ldr	r3, .L70+28
 1354 0682 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1355 0684 002B     		cmp	r3, #0
 1356 0686 49D0     		beq	.L54
 374:main.c        ****                     if(average > BOT_THRESHOLD){                        
 1357              		.loc 1 374 0
 1358 0688 834B     		ldr	r3, .L70+32
 1359 068a 1B88     		ldrh	r3, [r3]
 1360 068c 1BB2     		sxth	r3, r3
 1361 068e 44F62062 		movw	r2, #20000
 1362 0692 9342     		cmp	r3, r2
 1363 0694 20DD     		ble	.L55
 375:main.c        ****                         STATE = LANDED;                                     //Switch to LANDED stat
 1364              		.loc 1 375 0
 1365 0696 7C4B     		ldr	r3, .L70+16
 1366 0698 0322     		movs	r2, #3
 1367 069a 1A70     		strb	r2, [r3]
 376:main.c        ****                         #ifdef LCD
 377:main.c        ****                             setCursor(0,0);
 1368              		.loc 1 377 0
 1369 069c 0020     		movs	r0, #0
 1370 069e 0021     		movs	r1, #0
 1371 06a0 FFF7FEFF 		bl	setCursor
 378:main.c        ****                             clear();
 1372              		.loc 1 378 0
 1373 06a4 FFF7FEFF 		bl	clear
 379:main.c        ****                             LCD_print("STATE: LANDED");  
 1374              		.loc 1 379 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 33


 1375 06a8 7C48     		ldr	r0, .L70+36
 1376 06aa FFF7FEFF 		bl	LCD_print
 380:main.c        ****                         #endif
 381:main.c        ****                         #ifdef SD
 382:main.c        ****                             FS_Write(fsfile, landedbuf, LANDED_LEN);
 1377              		.loc 1 382 0
 1378 06ae 7C4B     		ldr	r3, .L70+40
 1379 06b0 1A68     		ldr	r2, [r3]
 1380 06b2 07F17C03 		add	r3, r7, #124
 1381 06b6 1046     		mov	r0, r2
 1382 06b8 1946     		mov	r1, r3
 1383 06ba 0E22     		movs	r2, #14
 1384 06bc FFF7FEFF 		bl	FS_Write
 383:main.c        ****                         #endif
 384:main.c        ****                         #ifdef SD
 385:main.c        ****                             FS_Write(fsfile, vacuumbuf, VACUUM_LEN);
 1385              		.loc 1 385 0
 1386 06c0 774B     		ldr	r3, .L70+40
 1387 06c2 1A68     		ldr	r2, [r3]
 1388 06c4 07F16803 		add	r3, r7, #104
 1389 06c8 1046     		mov	r0, r2
 1390 06ca 1946     		mov	r1, r3
 1391 06cc 1122     		movs	r2, #17
 1392 06ce FFF7FEFF 		bl	FS_Write
 386:main.c        ****                         #endif
 387:main.c        ****                         
 388:main.c        ****                         
 389:main.c        ****                         countdown = 0;
 1393              		.loc 1 389 0
 1394 06d2 694B     		ldr	r3, .L70
 1395 06d4 0022     		movs	r2, #0
 1396 06d6 1A70     		strb	r2, [r3]
 1397              	.L55:
 390:main.c        ****                     }
 391:main.c        ****                     
 392:main.c        ****                     
 393:main.c        ****                     /* if max time allowed for descent has been reached, resurface */
 394:main.c        ****                     if(data_time >= descent_time ){                         // variable descent tim
 1398              		.loc 1 394 0
 1399 06d8 724B     		ldr	r3, .L70+44
 1400 06da 1A68     		ldr	r2, [r3]
 1401 06dc 694B     		ldr	r3, .L70+12
 1402 06de 1B68     		ldr	r3, [r3]
 1403 06e0 9A42     		cmp	r2, r3
 1404 06e2 17DB     		blt	.L56
 395:main.c        ****                         STATE = RESURFACE;                                      
 1405              		.loc 1 395 0
 1406 06e4 684B     		ldr	r3, .L70+16
 1407 06e6 0422     		movs	r2, #4
 1408 06e8 1A70     		strb	r2, [r3]
 396:main.c        ****                         #ifdef LCD
 397:main.c        ****                             setCursor(0,0);
 1409              		.loc 1 397 0
 1410 06ea 0020     		movs	r0, #0
 1411 06ec 0021     		movs	r1, #0
 1412 06ee FFF7FEFF 		bl	setCursor
 398:main.c        ****                             clear();
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 34


 1413              		.loc 1 398 0
 1414 06f2 FFF7FEFF 		bl	clear
 399:main.c        ****                             LCD_print("STATE: RESURFACE");  
 1415              		.loc 1 399 0
 1416 06f6 6C48     		ldr	r0, .L70+48
 1417 06f8 FFF7FEFF 		bl	LCD_print
 400:main.c        ****                         #endif
 401:main.c        ****                         id=0;                                               //reset sample counter
 1418              		.loc 1 401 0
 1419 06fc 6B4B     		ldr	r3, .L70+52
 1420 06fe 0022     		movs	r2, #0
 1421 0700 1A60     		str	r2, [r3]
 402:main.c        ****                         data_time = 0;
 1422              		.loc 1 402 0
 1423 0702 684B     		ldr	r3, .L70+44
 1424 0704 0022     		movs	r2, #0
 1425 0706 1A60     		str	r2, [r3]
 403:main.c        ****                         sum = 0;                                            //reset sum 
 1426              		.loc 1 403 0
 1427 0708 694B     		ldr	r3, .L70+56
 1428 070a 0022     		movs	r2, #0
 1429 070c 1A60     		str	r2, [r3]
 404:main.c        ****                         average = 0;
 1430              		.loc 1 404 0
 1431 070e 624B     		ldr	r3, .L70+32
 1432 0710 0022     		movs	r2, #0
 1433 0712 1A80     		strh	r2, [r3]	@ movhi
 1434              	.L56:
 405:main.c        ****                     }
 406:main.c        ****                     collect_flag = 0;
 1435              		.loc 1 406 0
 1436 0714 5F4B     		ldr	r3, .L70+28
 1437 0716 0022     		movs	r2, #0
 1438 0718 1A70     		strb	r2, [r3]
 407:main.c        ****                     
 408:main.c        ****                 }
 409:main.c        ****                 break;
 1439              		.loc 1 409 0
 1440 071a ABE0     		b	.L53
 1441              	.L54:
 1442              		.loc 1 409 0 is_stmt 0 discriminator 2
 1443 071c AAE0     		b	.L53
 1444              	.L38:
 410:main.c        ****                 
 411:main.c        ****                 case LANDED:
 412:main.c        ****                     if (countdown == 7) {                   // Delay for 7 seconds at bottom
 1445              		.loc 1 412 0 is_stmt 1
 1446 071e 564B     		ldr	r3, .L70
 1447 0720 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1448 0722 072B     		cmp	r3, #7
 1449 0724 08D1     		bne	.L57
 413:main.c        ****                         countdown = 0; 
 1450              		.loc 1 413 0
 1451 0726 544B     		ldr	r3, .L70
 1452 0728 0022     		movs	r2, #0
 1453 072a 1A70     		strb	r2, [r3]
 414:main.c        ****                         pulse = 1;                          // next stage of the state
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 35


 1454              		.loc 1 414 0
 1455 072c 0123     		movs	r3, #1
 1456 072e C7F81C31 		str	r3, [r7, #284]
 415:main.c        ****                         Solenoid_1_Write(1);                // turn on solenoid 1 for 5 seconds
 1457              		.loc 1 415 0
 1458 0732 0120     		movs	r0, #1
 1459 0734 FFF7FEFF 		bl	Solenoid_1_Write
 1460              	.L57:
 416:main.c        ****                     } 
 417:main.c        ****                     
 418:main.c        ****                     if (countdown == 5 && pulse){           // Second stage, turn off solenoid
 1461              		.loc 1 418 0
 1462 0738 4F4B     		ldr	r3, .L70
 1463 073a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1464 073c 052B     		cmp	r3, #5
 1465 073e 0ED1     		bne	.L58
 1466              		.loc 1 418 0 is_stmt 0 discriminator 1
 1467 0740 D7F81C31 		ldr	r3, [r7, #284]
 1468 0744 002B     		cmp	r3, #0
 1469 0746 0AD0     		beq	.L58
 419:main.c        ****                         pulse++;
 1470              		.loc 1 419 0 is_stmt 1
 1471 0748 D7F81C31 		ldr	r3, [r7, #284]
 1472 074c 0133     		adds	r3, r3, #1
 1473 074e C7F81C31 		str	r3, [r7, #284]
 420:main.c        ****                         Solenoid_1_Write(0);                // turn off soleniod 1
 1474              		.loc 1 420 0
 1475 0752 0020     		movs	r0, #0
 1476 0754 FFF7FEFF 		bl	Solenoid_1_Write
 421:main.c        ****                         countdown = 0;
 1477              		.loc 1 421 0
 1478 0758 474B     		ldr	r3, .L70
 1479 075a 0022     		movs	r2, #0
 1480 075c 1A70     		strb	r2, [r3]
 1481              	.L58:
 422:main.c        ****                     }
 423:main.c        ****                     if (countdown == 3 && pulse == 2){      // Delay for 3 seconds then resurface
 1482              		.loc 1 423 0
 1483 075e 464B     		ldr	r3, .L70
 1484 0760 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1485 0762 032B     		cmp	r3, #3
 1486 0764 1FD1     		bne	.L59
 1487              		.loc 1 423 0 is_stmt 0 discriminator 1
 1488 0766 D7F81C31 		ldr	r3, [r7, #284]
 1489 076a 022B     		cmp	r3, #2
 1490 076c 1BD1     		bne	.L59
 424:main.c        ****                         STATE = RESURFACE;
 1491              		.loc 1 424 0 is_stmt 1
 1492 076e 464B     		ldr	r3, .L70+16
 1493 0770 0422     		movs	r2, #4
 1494 0772 1A70     		strb	r2, [r3]
 425:main.c        ****                         
 426:main.c        ****                         #ifdef LCD
 427:main.c        ****                             setCursor(0,0);
 1495              		.loc 1 427 0
 1496 0774 0020     		movs	r0, #0
 1497 0776 0021     		movs	r1, #0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 36


 1498 0778 FFF7FEFF 		bl	setCursor
 428:main.c        ****                             clear();
 1499              		.loc 1 428 0
 1500 077c FFF7FEFF 		bl	clear
 429:main.c        ****                             LCD_print("STATE: RESURFACING");  
 1501              		.loc 1 429 0
 1502 0780 4C48     		ldr	r0, .L70+60
 1503 0782 FFF7FEFF 		bl	LCD_print
 430:main.c        ****                         #endif
 431:main.c        ****                         #ifdef SD
 432:main.c        ****                             FS_Write(fsfile, resurfbuf, RESURFACE_LEN);
 1504              		.loc 1 432 0
 1505 0786 464B     		ldr	r3, .L70+40
 1506 0788 1A68     		ldr	r2, [r3]
 1507 078a 07F15403 		add	r3, r7, #84
 1508 078e 1046     		mov	r0, r2
 1509 0790 1946     		mov	r1, r3
 1510 0792 1122     		movs	r2, #17
 1511 0794 FFF7FEFF 		bl	FS_Write
 433:main.c        ****                         #endif
 434:main.c        ****                         pulse = 0;
 1512              		.loc 1 434 0
 1513 0798 0023     		movs	r3, #0
 1514 079a C7F81C31 		str	r3, [r7, #284]
 435:main.c        ****                         countdown = 0;
 1515              		.loc 1 435 0
 1516 079e 364B     		ldr	r3, .L70
 1517 07a0 0022     		movs	r2, #0
 1518 07a2 1A70     		strb	r2, [r3]
 436:main.c        ****                     }
 437:main.c        ****                 break;
 1519              		.loc 1 437 0
 1520 07a4 66E0     		b	.L53
 1521              	.L59:
 1522              		.loc 1 437 0 is_stmt 0 discriminator 3
 1523 07a6 65E0     		b	.L53
 1524              	.L39:
 438:main.c        ****                 
 439:main.c        ****             case RESURFACE:
 440:main.c        ****                 if (PANIC_flag)                 // Display that moisture sensor triggered
 1525              		.loc 1 440 0 is_stmt 1
 1526 07a8 434B     		ldr	r3, .L70+64
 1527 07aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1528 07ac 002B     		cmp	r3, #0
 1529 07ae 02D0     		beq	.L60
 441:main.c        ****                     LCD_print("WATER DETECTED");
 1530              		.loc 1 441 0
 1531 07b0 4248     		ldr	r0, .L70+68
 1532 07b2 FFF7FEFF 		bl	LCD_print
 1533              	.L60:
 442:main.c        ****                     
 443:main.c        ****                 Solenoid_2_Write(1);            // turn on lift bag solenoid                
 1534              		.loc 1 443 0
 1535 07b6 0120     		movs	r0, #1
 1536 07b8 FFF7FEFF 		bl	Solenoid_2_Write
 444:main.c        ****                 
 445:main.c        ****                 //check pressure sensor to confirm we are at the surface
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 37


 446:main.c        ****                 if (countdown == 3){
 1537              		.loc 1 446 0
 1538 07bc 2E4B     		ldr	r3, .L70
 1539 07be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1540 07c0 032B     		cmp	r3, #3
 1541 07c2 0ED1     		bne	.L61
 447:main.c        ****                     Solenoid_2_Write(0);        // Turn off solenoid 2 for 1 second
 1542              		.loc 1 447 0
 1543 07c4 0020     		movs	r0, #0
 1544 07c6 FFF7FEFF 		bl	Solenoid_2_Write
 448:main.c        ****                     CyDelay(1000u);
 1545              		.loc 1 448 0
 1546 07ca 4FF47A70 		mov	r0, #1000
 1547 07ce FFF7FEFF 		bl	CyDelay
 449:main.c        ****                     pulse++;
 1548              		.loc 1 449 0
 1549 07d2 D7F81C31 		ldr	r3, [r7, #284]
 1550 07d6 0133     		adds	r3, r3, #1
 1551 07d8 C7F81C31 		str	r3, [r7, #284]
 450:main.c        ****                     countdown = 0;
 1552              		.loc 1 450 0
 1553 07dc 264B     		ldr	r3, .L70
 1554 07de 0022     		movs	r2, #0
 1555 07e0 1A70     		strb	r2, [r3]
 1556              	.L61:
 451:main.c        ****                 }
 452:main.c        ****                 if (pulse == 4){
 1557              		.loc 1 452 0
 1558 07e2 D7F81C31 		ldr	r3, [r7, #284]
 1559 07e6 042B     		cmp	r3, #4
 1560 07e8 30D1     		bne	.L62
 453:main.c        ****                     STATE = TRANSMIT;
 1561              		.loc 1 453 0
 1562 07ea 274B     		ldr	r3, .L70+16
 1563 07ec 0522     		movs	r2, #5
 1564 07ee 1A70     		strb	r2, [r3]
 454:main.c        ****                     #ifdef SD                                   //close old file, open new one
 455:main.c        ****                         FS_FClose(fsfile);
 1565              		.loc 1 455 0
 1566 07f0 2B4B     		ldr	r3, .L70+40
 1567 07f2 1B68     		ldr	r3, [r3]
 1568 07f4 1846     		mov	r0, r3
 1569 07f6 FFF7FEFF 		bl	FS_FClose
 456:main.c        ****                         sprintf(file, "test%d.txt", ++testnum);
 1570              		.loc 1 456 0
 1571 07fa 314B     		ldr	r3, .L70+72
 1572 07fc 1B68     		ldr	r3, [r3]
 1573 07fe 0133     		adds	r3, r3, #1
 1574 0800 2F4A     		ldr	r2, .L70+72
 1575 0802 1360     		str	r3, [r2]
 1576 0804 2E4B     		ldr	r3, .L70+72
 1577 0806 1B68     		ldr	r3, [r3]
 1578 0808 2E48     		ldr	r0, .L70+76
 1579 080a 2F49     		ldr	r1, .L70+80
 1580 080c 1A46     		mov	r2, r3
 1581 080e FFF7FEFF 		bl	sprintf
 457:main.c        ****                         fsfile = FS_FOpen(file, "w");
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 38


 1582              		.loc 1 457 0
 1583 0812 2C48     		ldr	r0, .L70+76
 1584 0814 2D49     		ldr	r1, .L70+84
 1585 0816 FFF7FEFF 		bl	FS_FOpen
 1586 081a 0246     		mov	r2, r0
 1587 081c 204B     		ldr	r3, .L70+40
 1588 081e 1A60     		str	r2, [r3]
 458:main.c        ****                     #endif 
 459:main.c        ****                     
 460:main.c        ****                     #ifdef LCD
 461:main.c        ****                         setCursor(0,0);
 1589              		.loc 1 461 0
 1590 0820 0020     		movs	r0, #0
 1591 0822 0021     		movs	r1, #0
 1592 0824 FFF7FEFF 		bl	setCursor
 462:main.c        ****                         clear();
 1593              		.loc 1 462 0
 1594 0828 FFF7FEFF 		bl	clear
 463:main.c        ****                         LCD_print("TRANSMIT");  
 1595              		.loc 1 463 0
 1596 082c 2848     		ldr	r0, .L70+88
 1597 082e FFF7FEFF 		bl	LCD_print
 464:main.c        ****                     #endif
 465:main.c        ****                     #ifdef SD
 466:main.c        ****                         FS_Write(fsfile, transbuf, TRANSMIT_LEN);
 1598              		.loc 1 466 0
 1599 0832 1B4B     		ldr	r3, .L70+40
 1600 0834 1A68     		ldr	r2, [r3]
 1601 0836 07F14403 		add	r3, r7, #68
 1602 083a 1046     		mov	r0, r2
 1603 083c 1946     		mov	r1, r3
 1604 083e 1022     		movs	r2, #16
 1605 0840 FFF7FEFF 		bl	FS_Write
 467:main.c        ****                     #endif
 468:main.c        ****                     countdown = 0;
 1606              		.loc 1 468 0
 1607 0844 0C4B     		ldr	r3, .L70
 1608 0846 0022     		movs	r2, #0
 1609 0848 1A70     		strb	r2, [r3]
 469:main.c        ****                 }
 470:main.c        ****                 break;
 1610              		.loc 1 470 0
 1611 084a 13E0     		b	.L53
 1612              	.L62:
 1613              		.loc 1 470 0 is_stmt 0 discriminator 4
 1614 084c 12E0     		b	.L53
 1615              	.L40:
 471:main.c        ****                 
 472:main.c        ****             case TRANSMIT:
 473:main.c        ****                 if (transmit_flag){
 1616              		.loc 1 473 0 is_stmt 1
 1617 084e 214B     		ldr	r3, .L70+92
 1618 0850 1B68     		ldr	r3, [r3]
 1619 0852 002B     		cmp	r3, #0
 1620 0854 0CD0     		beq	.L63
 474:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &t); // Here, the STATE variable only matters,
 1621              		.loc 1 474 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 39


 1622 0856 07F1B002 		add	r2, r7, #176
 1623 085a 07F13C03 		add	r3, r7, #60
 1624 085e 1046     		mov	r0, r2
 1625 0860 0949     		ldr	r1, .L70+16
 1626 0862 0A22     		movs	r2, #10
 1627 0864 FFF7FEFF 		bl	BT_Send
 475:main.c        ****                     transmit_flag = 0;
 1628              		.loc 1 475 0
 1629 0868 1A4B     		ldr	r3, .L70+92
 1630 086a 0022     		movs	r2, #0
 1631 086c 1A60     		str	r2, [r3]
 476:main.c        ****                 }            
 477:main.c        ****                 break;
 1632              		.loc 1 477 0
 1633 086e 01E0     		b	.L53
 1634              	.L63:
 1635              		.loc 1 477 0 is_stmt 0 discriminator 5
 1636 0870 00E0     		b	.L53
 1637              	.L65:
 478:main.c        ****                 
 479:main.c        ****             default:
 480:main.c        ****                 break;
 1638              		.loc 1 480 0 is_stmt 1
 1639 0872 00BF     		nop
 1640              	.L53:
 1641              	.LBE2:
 481:main.c        ****         
 482:main.c        ****         }
 483:main.c        ****     }
 1642              		.loc 1 483 0 discriminator 1
 1643 0874 7FE4     		b	.L64
 1644              	.L71:
 1645 0876 00BF     		.align	2
 1646              	.L70:
 1647 0878 00000000 		.word	countdown
 1648 087c 00000000 		.word	depth
 1649 0880 4FECC44E 		.word	1321528399
 1650 0884 00000000 		.word	descent_time
 1651 0888 00000000 		.word	STATE
 1652 088c 54000000 		.word	.LC11
 1653 0890 00000000 		.word	wait_flag
 1654 0894 00000000 		.word	collect_flag
 1655 0898 00000000 		.word	average
 1656 089c 64000000 		.word	.LC12
 1657 08a0 00000000 		.word	fsfile
 1658 08a4 00000000 		.word	data_time
 1659 08a8 74000000 		.word	.LC13
 1660 08ac 00000000 		.word	id
 1661 08b0 00000000 		.word	sum
 1662 08b4 88000000 		.word	.LC14
 1663 08b8 00000000 		.word	PANIC_flag
 1664 08bc 9C000000 		.word	.LC15
 1665 08c0 00000000 		.word	testnum
 1666 08c4 00000000 		.word	file
 1667 08c8 AC000000 		.word	.LC16
 1668 08cc B8000000 		.word	.LC17
 1669 08d0 BC000000 		.word	.LC18
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 40


 1670 08d4 00000000 		.word	transmit_flag
 1671              		.cfi_endproc
 1672              	.LFE67:
 1673              		.size	main, .-main
 1674              		.section	.rodata
 1675 0135 000000   		.align	2
 1676              	.LC19:
 1677 0138 53642076 		.ascii	"Sd vol succeed\000"
 1677      6F6C2073 
 1677      75636365 
 1677      656400
 1678 0147 00       		.align	2
 1679              	.LC20:
 1680 0148 53642076 		.ascii	"Sd vol failed\000"
 1680      6F6C2066 
 1680      61696C65 
 1680      6400
 1681 0156 0000     		.align	2
 1682              	.LC21:
 1683 0158 666F726D 		.ascii	"format Succeeded\000"
 1683      61742053 
 1683      75636365 
 1683      65646564 
 1683      00
 1684 0169 000000   		.align	2
 1685              	.LC22:
 1686 016c 666F726D 		.ascii	"format Failed\000"
 1686      61742046 
 1686      61696C65 
 1686      6400
 1687 017a 0000     		.align	2
 1688              	.LC23:
 1689 017c 46696C65 		.ascii	"File \000"
 1689      2000
 1690 0182 0000     		.align	2
 1691              	.LC24:
 1692 0184 77617320 		.ascii	"was opened\000"
 1692      6F70656E 
 1692      656400
 1693 018f 00       		.align	2
 1694              	.LC25:
 1695 0190 77726974 		.ascii	"written to file\000"
 1695      74656E20 
 1695      746F2066 
 1695      696C6500 
 1696              		.align	2
 1697              	.LC26:
 1698 01a0 4661696C 		.ascii	"Failed to write\000"
 1698      65642074 
 1698      6F207772 
 1698      69746500 
 1699              		.align	2
 1700              	.LC27:
 1701 01b0 66696C65 		.ascii	"file not created\000"
 1701      206E6F74 
 1701      20637265 
 1701      61746564 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 41


 1701      00
 1702 01c1 000000   		.align	2
 1703              	.LC28:
 1704 01c4 0A2D2D2D 		.ascii	"\012------------\012\000"
 1704      2D2D2D2D 
 1704      2D2D2D2D 
 1704      2D0A00
 1705 01d3 00       		.section	.text.SD_SETUP,"ax",%progbits
 1706              		.align	2
 1707              		.global	SD_SETUP
 1708              		.thumb
 1709              		.thumb_func
 1710              		.type	SD_SETUP, %function
 1711              	SD_SETUP:
 1712              	.LFB68:
 484:main.c        **** }
 485:main.c        **** 
 486:main.c        **** int SD_SETUP(char* filename){
 1713              		.loc 1 486 0
 1714              		.cfi_startproc
 1715              		@ args = 0, pretend = 0, frame = 16
 1716              		@ frame_needed = 1, uses_anonymous_args = 0
 1717 0000 90B5     		push	{r4, r7, lr}
 1718              		.cfi_def_cfa_offset 12
 1719              		.cfi_offset 4, -12
 1720              		.cfi_offset 7, -8
 1721              		.cfi_offset 14, -4
 1722 0002 85B0     		sub	sp, sp, #20
 1723              		.cfi_def_cfa_offset 32
 1724 0004 00AF     		add	r7, sp, #0
 1725              		.cfi_def_cfa_register 7
 1726 0006 7860     		str	r0, [r7, #4]
 487:main.c        **** int success = 1;
 1727              		.loc 1 487 0
 1728 0008 0123     		movs	r3, #1
 1729 000a FB60     		str	r3, [r7, #12]
 488:main.c        ****       FS_Init();
 1730              		.loc 1 488 0
 1731 000c FFF7FEFF 		bl	FS_Init
 489:main.c        ****             FS_Mount(volume);
 1732              		.loc 1 489 0
 1733 0010 3A48     		ldr	r0, .L82
 1734 0012 FFF7FEFF 		bl	FS_Mount
 490:main.c        ****             if(0 != FS_GetVolumeName(0u, volume, 9u))
 1735              		.loc 1 490 0
 1736 0016 0020     		movs	r0, #0
 1737 0018 3849     		ldr	r1, .L82
 1738 001a 0922     		movs	r2, #9
 1739 001c FFF7FEFF 		bl	FS_GetVolumeName
 1740 0020 0346     		mov	r3, r0
 1741 0022 002B     		cmp	r3, #0
 1742 0024 03D0     		beq	.L73
 491:main.c        ****                 /* Getting volume name succeeded so prompt it on the LCD */
 492:main.c        ****                 LCD_print("Sd vol succeed");
 1743              		.loc 1 492 0
 1744 0026 3648     		ldr	r0, .L82+4
 1745 0028 FFF7FEFF 		bl	LCD_print
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 42


 1746 002c 04E0     		b	.L74
 1747              	.L73:
 493:main.c        ****             else{
 494:main.c        ****                 LCD_print("Sd vol failed");
 1748              		.loc 1 494 0
 1749 002e 3548     		ldr	r0, .L82+8
 1750 0030 FFF7FEFF 		bl	LCD_print
 495:main.c        ****                 success = 0;
 1751              		.loc 1 495 0
 1752 0034 0023     		movs	r3, #0
 1753 0036 FB60     		str	r3, [r7, #12]
 1754              	.L74:
 496:main.c        ****             }
 497:main.c        ****             CyDelay(500u);
 1755              		.loc 1 497 0
 1756 0038 4FF4FA70 		mov	r0, #500
 1757 003c FFF7FEFF 		bl	CyDelay
 498:main.c        ****             clear();
 1758              		.loc 1 498 0
 1759 0040 FFF7FEFF 		bl	clear
 499:main.c        ****             if(0 == FS_FormatSD(volume))
 1760              		.loc 1 499 0
 1761 0044 2D48     		ldr	r0, .L82
 1762 0046 FFF7FEFF 		bl	FS_FormatSD
 1763 004a 0346     		mov	r3, r0
 1764 004c 002B     		cmp	r3, #0
 1765 004e 03D1     		bne	.L75
 500:main.c        ****                 LCD_print("format Succeeded");
 1766              		.loc 1 500 0
 1767 0050 2D48     		ldr	r0, .L82+12
 1768 0052 FFF7FEFF 		bl	LCD_print
 1769 0056 04E0     		b	.L76
 1770              	.L75:
 501:main.c        ****             else{
 502:main.c        ****                 LCD_print("format Failed");
 1771              		.loc 1 502 0
 1772 0058 2C48     		ldr	r0, .L82+16
 1773 005a FFF7FEFF 		bl	LCD_print
 503:main.c        ****                 success = 0;
 1774              		.loc 1 503 0
 1775 005e 0023     		movs	r3, #0
 1776 0060 FB60     		str	r3, [r7, #12]
 1777              	.L76:
 504:main.c        ****             }
 505:main.c        ****             
 506:main.c        ****             CyDelay(500u);
 1778              		.loc 1 506 0
 1779 0062 4FF4FA70 		mov	r0, #500
 1780 0066 FFF7FEFF 		bl	CyDelay
 507:main.c        ****             clear();
 1781              		.loc 1 507 0
 1782 006a FFF7FEFF 		bl	clear
 508:main.c        ****             
 509:main.c        ****             fsfile = FS_FOpen(filename, "w");
 1783              		.loc 1 509 0
 1784 006e 7868     		ldr	r0, [r7, #4]
 1785 0070 2749     		ldr	r1, .L82+20
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 43


 1786 0072 FFF7FEFF 		bl	FS_FOpen
 1787 0076 0246     		mov	r2, r0
 1788 0078 264B     		ldr	r3, .L82+24
 1789 007a 1A60     		str	r2, [r3]
 510:main.c        ****             if(fsfile)
 1790              		.loc 1 510 0
 1791 007c 254B     		ldr	r3, .L82+24
 1792 007e 1B68     		ldr	r3, [r3]
 1793 0080 002B     		cmp	r3, #0
 1794 0082 29D0     		beq	.L77
 511:main.c        ****             {
 512:main.c        ****                 /* Indicate successful file creation message */
 513:main.c        ****                 LCD_print("File ");
 1795              		.loc 1 513 0
 1796 0084 2448     		ldr	r0, .L82+28
 1797 0086 FFF7FEFF 		bl	LCD_print
 514:main.c        ****                 LCD_print("was opened");
 1798              		.loc 1 514 0
 1799 008a 2448     		ldr	r0, .L82+32
 1800 008c FFF7FEFF 		bl	LCD_print
 515:main.c        ****                 /* Need some delay to indicate output on the LCD */
 516:main.c        ****                 CyDelay(500u);
 1801              		.loc 1 516 0
 1802 0090 4FF4FA70 		mov	r0, #500
 1803 0094 FFF7FEFF 		bl	CyDelay
 517:main.c        ****                 clear();
 1804              		.loc 1 517 0
 1805 0098 FFF7FEFF 		bl	clear
 518:main.c        ****                 
 519:main.c        ****                 if(0 != FS_Write(fsfile, filename, strlen(filename))) 
 1806              		.loc 1 519 0
 1807 009c 1D4B     		ldr	r3, .L82+24
 1808 009e 1C68     		ldr	r4, [r3]
 1809 00a0 7868     		ldr	r0, [r7, #4]
 1810 00a2 FFF7FEFF 		bl	strlen
 1811 00a6 0346     		mov	r3, r0
 1812 00a8 2046     		mov	r0, r4
 1813 00aa 7968     		ldr	r1, [r7, #4]
 1814 00ac 1A46     		mov	r2, r3
 1815 00ae FFF7FEFF 		bl	FS_Write
 1816 00b2 0346     		mov	r3, r0
 1817 00b4 002B     		cmp	r3, #0
 1818 00b6 03D0     		beq	.L78
 520:main.c        ****                     /* Inditate that data was written to a file */
 521:main.c        ****                     LCD_print("written to file");
 1819              		.loc 1 521 0
 1820 00b8 1948     		ldr	r0, .L82+36
 1821 00ba FFF7FEFF 		bl	LCD_print
 1822 00be 06E0     		b	.L79
 1823              	.L78:
 522:main.c        ****                 else {
 523:main.c        ****                     LCD_print("Failed to write");
 1824              		.loc 1 523 0
 1825 00c0 1848     		ldr	r0, .L82+40
 1826 00c2 FFF7FEFF 		bl	LCD_print
 524:main.c        ****                     success = 0;
 1827              		.loc 1 524 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 44


 1828 00c6 0023     		movs	r3, #0
 1829 00c8 FB60     		str	r3, [r7, #12]
 525:main.c        ****                     clear();
 1830              		.loc 1 525 0
 1831 00ca FFF7FEFF 		bl	clear
 1832              	.L79:
 526:main.c        ****                 }
 527:main.c        ****                 CyDelay(500u);
 1833              		.loc 1 527 0
 1834 00ce 4FF4FA70 		mov	r0, #500
 1835 00d2 FFF7FEFF 		bl	CyDelay
 1836 00d6 04E0     		b	.L80
 1837              	.L77:
 528:main.c        ****             }
 529:main.c        ****             else{
 530:main.c        ****                 LCD_print("file not created");
 1838              		.loc 1 530 0
 1839 00d8 1348     		ldr	r0, .L82+44
 1840 00da FFF7FEFF 		bl	LCD_print
 531:main.c        ****                 success = 0;
 1841              		.loc 1 531 0
 1842 00de 0023     		movs	r3, #0
 1843 00e0 FB60     		str	r3, [r7, #12]
 1844              	.L80:
 532:main.c        ****             }
 533:main.c        ****         FS_Write(fsfile, "\n------------\n", 14);
 1845              		.loc 1 533 0
 1846 00e2 0C4B     		ldr	r3, .L82+24
 1847 00e4 1B68     		ldr	r3, [r3]
 1848 00e6 1846     		mov	r0, r3
 1849 00e8 1049     		ldr	r1, .L82+48
 1850 00ea 0E22     		movs	r2, #14
 1851 00ec FFF7FEFF 		bl	FS_Write
 534:main.c        **** return success;
 1852              		.loc 1 534 0
 1853 00f0 FB68     		ldr	r3, [r7, #12]
 535:main.c        **** }
 1854              		.loc 1 535 0
 1855 00f2 1846     		mov	r0, r3
 1856 00f4 1437     		adds	r7, r7, #20
 1857              		.cfi_def_cfa_offset 12
 1858 00f6 BD46     		mov	sp, r7
 1859              		.cfi_def_cfa_register 13
 1860              		@ sp needed
 1861 00f8 90BD     		pop	{r4, r7, pc}
 1862              	.L83:
 1863 00fa 00BF     		.align	2
 1864              	.L82:
 1865 00fc 00000000 		.word	volume
 1866 0100 38010000 		.word	.LC19
 1867 0104 48010000 		.word	.LC20
 1868 0108 58010000 		.word	.LC21
 1869 010c 6C010000 		.word	.LC22
 1870 0110 B8000000 		.word	.LC17
 1871 0114 00000000 		.word	fsfile
 1872 0118 7C010000 		.word	.LC23
 1873 011c 84010000 		.word	.LC24
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 45


 1874 0120 90010000 		.word	.LC25
 1875 0124 A0010000 		.word	.LC26
 1876 0128 B0010000 		.word	.LC27
 1877 012c C4010000 		.word	.LC28
 1878              		.cfi_endproc
 1879              	.LFE68:
 1880              		.size	SD_SETUP, .-SD_SETUP
 1881              		.text
 1882              	.Letext0:
 1883              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1884              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 1885              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 1886              		.file 5 "..\\OVac.cydsn\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 1887              		.file 6 "functions.h"
 1888              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 1889              		.file 8 "./mpu6050.h"
 1890              		.section	.debug_info,"",%progbits
 1891              	.Ldebug_info0:
 1892 0000 93060000 		.4byte	0x693
 1893 0004 0400     		.2byte	0x4
 1894 0006 00000000 		.4byte	.Ldebug_abbrev0
 1895 000a 04       		.byte	0x4
 1896 000b 01       		.uleb128 0x1
 1897 000c 24010000 		.4byte	.LASF91
 1898 0010 01       		.byte	0x1
 1899 0011 55030000 		.4byte	.LASF92
 1900 0015 F9010000 		.4byte	.LASF93
 1901 0019 00000000 		.4byte	.Ldebug_ranges0+0
 1902 001d 00000000 		.4byte	0
 1903 0021 00000000 		.4byte	.Ldebug_line0
 1904 0025 02       		.uleb128 0x2
 1905 0026 01       		.byte	0x1
 1906 0027 06       		.byte	0x6
 1907 0028 72020000 		.4byte	.LASF0
 1908 002c 03       		.uleb128 0x3
 1909 002d 4D040000 		.4byte	.LASF2
 1910 0031 02       		.byte	0x2
 1911 0032 1D       		.byte	0x1d
 1912 0033 37000000 		.4byte	0x37
 1913 0037 02       		.uleb128 0x2
 1914 0038 01       		.byte	0x1
 1915 0039 08       		.byte	0x8
 1916 003a 52020000 		.4byte	.LASF1
 1917 003e 03       		.uleb128 0x3
 1918 003f A8030000 		.4byte	.LASF3
 1919 0043 02       		.byte	0x2
 1920 0044 29       		.byte	0x29
 1921 0045 49000000 		.4byte	0x49
 1922 0049 02       		.uleb128 0x2
 1923 004a 02       		.byte	0x2
 1924 004b 05       		.byte	0x5
 1925 004c BA000000 		.4byte	.LASF4
 1926 0050 02       		.uleb128 0x2
 1927 0051 02       		.byte	0x2
 1928 0052 07       		.byte	0x7
 1929 0053 C2020000 		.4byte	.LASF5
 1930 0057 03       		.uleb128 0x3
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 46


 1931 0058 9E030000 		.4byte	.LASF6
 1932 005c 02       		.byte	0x2
 1933 005d 3F       		.byte	0x3f
 1934 005e 62000000 		.4byte	0x62
 1935 0062 02       		.uleb128 0x2
 1936 0063 04       		.byte	0x4
 1937 0064 05       		.byte	0x5
 1938 0065 DF020000 		.4byte	.LASF7
 1939 0069 03       		.uleb128 0x3
 1940 006a 8B030000 		.4byte	.LASF8
 1941 006e 02       		.byte	0x2
 1942 006f 41       		.byte	0x41
 1943 0070 74000000 		.4byte	0x74
 1944 0074 02       		.uleb128 0x2
 1945 0075 04       		.byte	0x4
 1946 0076 07       		.byte	0x7
 1947 0077 61030000 		.4byte	.LASF9
 1948 007b 02       		.uleb128 0x2
 1949 007c 08       		.byte	0x8
 1950 007d 05       		.byte	0x5
 1951 007e 05010000 		.4byte	.LASF10
 1952 0082 02       		.uleb128 0x2
 1953 0083 08       		.byte	0x8
 1954 0084 07       		.byte	0x7
 1955 0085 7E020000 		.4byte	.LASF11
 1956 0089 04       		.uleb128 0x4
 1957 008a 04       		.byte	0x4
 1958 008b 05       		.byte	0x5
 1959 008c 696E7400 		.ascii	"int\000"
 1960 0090 02       		.uleb128 0x2
 1961 0091 04       		.byte	0x4
 1962 0092 07       		.byte	0x7
 1963 0093 A8020000 		.4byte	.LASF12
 1964 0097 03       		.uleb128 0x3
 1965 0098 D4000000 		.4byte	.LASF13
 1966 009c 03       		.byte	0x3
 1967 009d 15       		.byte	0x15
 1968 009e 2C000000 		.4byte	0x2c
 1969 00a2 03       		.uleb128 0x3
 1970 00a3 F5020000 		.4byte	.LASF14
 1971 00a7 03       		.byte	0x3
 1972 00a8 20       		.byte	0x20
 1973 00a9 3E000000 		.4byte	0x3e
 1974 00ad 03       		.uleb128 0x3
 1975 00ae ED020000 		.4byte	.LASF15
 1976 00b2 03       		.byte	0x3
 1977 00b3 2C       		.byte	0x2c
 1978 00b4 57000000 		.4byte	0x57
 1979 00b8 03       		.uleb128 0x3
 1980 00b9 95020000 		.4byte	.LASF16
 1981 00bd 03       		.byte	0x3
 1982 00be 2D       		.byte	0x2d
 1983 00bf 69000000 		.4byte	0x69
 1984 00c3 05       		.uleb128 0x5
 1985 00c4 FD020000 		.4byte	.LASF17
 1986 00c8 04       		.byte	0x4
 1987 00c9 9201     		.2byte	0x192
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 47


 1988 00cb 37000000 		.4byte	0x37
 1989 00cf 05       		.uleb128 0x5
 1990 00d0 E2000000 		.4byte	.LASF18
 1991 00d4 04       		.byte	0x4
 1992 00d5 9601     		.2byte	0x196
 1993 00d7 49000000 		.4byte	0x49
 1994 00db 02       		.uleb128 0x2
 1995 00dc 04       		.byte	0x4
 1996 00dd 04       		.byte	0x4
 1997 00de F1000000 		.4byte	.LASF19
 1998 00e2 02       		.uleb128 0x2
 1999 00e3 08       		.byte	0x8
 2000 00e4 04       		.byte	0x4
 2001 00e5 84030000 		.4byte	.LASF20
 2002 00e9 02       		.uleb128 0x2
 2003 00ea 01       		.byte	0x1
 2004 00eb 08       		.byte	0x8
 2005 00ec DA020000 		.4byte	.LASF21
 2006 00f0 05       		.uleb128 0x5
 2007 00f1 5C030000 		.4byte	.LASF22
 2008 00f5 04       		.byte	0x4
 2009 00f6 3C02     		.2byte	0x23c
 2010 00f8 FC000000 		.4byte	0xfc
 2011 00fc 06       		.uleb128 0x6
 2012 00fd C3000000 		.4byte	0xc3
 2013 0101 02       		.uleb128 0x2
 2014 0102 04       		.byte	0x4
 2015 0103 07       		.byte	0x7
 2016 0104 BD030000 		.4byte	.LASF23
 2017 0108 07       		.uleb128 0x7
 2018 0109 04       		.byte	0x4
 2019 010a E9000000 		.4byte	0xe9
 2020 010e 03       		.uleb128 0x3
 2021 010f 60020000 		.4byte	.LASF24
 2022 0113 05       		.byte	0x5
 2023 0114 7E       		.byte	0x7e
 2024 0115 19010000 		.4byte	0x119
 2025 0119 08       		.uleb128 0x8
 2026 011a 60020000 		.4byte	.LASF24
 2027 011e 07       		.uleb128 0x7
 2028 011f 04       		.byte	0x4
 2029 0120 0E010000 		.4byte	0x10e
 2030 0124 02       		.uleb128 0x2
 2031 0125 08       		.byte	0x8
 2032 0126 04       		.byte	0x4
 2033 0127 37020000 		.4byte	.LASF25
 2034 012b 09       		.uleb128 0x9
 2035 012c 43000000 		.4byte	.LASF33
 2036 0130 01       		.byte	0x1
 2037 0131 06       		.byte	0x6
 2038 0132 35       		.byte	0x35
 2039 0133 62010000 		.4byte	0x162
 2040 0137 0A       		.uleb128 0xa
 2041 0138 36000000 		.4byte	.LASF26
 2042 013c 00       		.sleb128 0
 2043 013d 0A       		.uleb128 0xa
 2044 013e 43020000 		.4byte	.LASF27
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 48


 2045 0142 01       		.sleb128 1
 2046 0143 0A       		.uleb128 0xa
 2047 0144 73030000 		.4byte	.LASF28
 2048 0148 02       		.sleb128 2
 2049 0149 0A       		.uleb128 0xa
 2050 014a 70000000 		.4byte	.LASF29
 2051 014e 03       		.sleb128 3
 2052 014f 0A       		.uleb128 0xa
 2053 0150 0D000000 		.4byte	.LASF30
 2054 0154 04       		.sleb128 4
 2055 0155 0A       		.uleb128 0xa
 2056 0156 1B010000 		.4byte	.LASF31
 2057 015a 05       		.sleb128 5
 2058 015b 0A       		.uleb128 0xa
 2059 015c E6010000 		.4byte	.LASF32
 2060 0160 06       		.sleb128 6
 2061 0161 00       		.byte	0
 2062 0162 03       		.uleb128 0x3
 2063 0163 43000000 		.4byte	.LASF33
 2064 0167 06       		.byte	0x6
 2065 0168 3D       		.byte	0x3d
 2066 0169 2B010000 		.4byte	0x12b
 2067 016d 0B       		.uleb128 0xb
 2068 016e 89000000 		.4byte	.LASF34
 2069 0172 01       		.byte	0x1
 2070 0173 6B       		.byte	0x6b
 2071 0174 00000000 		.4byte	.LFB63
 2072 0178 20000000 		.4byte	.LFE63-.LFB63
 2073 017c 01       		.uleb128 0x1
 2074 017d 9C       		.byte	0x9c
 2075 017e 0C       		.uleb128 0xc
 2076 017f 1F040000 		.4byte	.LASF35
 2077 0183 01       		.byte	0x1
 2078 0184 72       		.byte	0x72
 2079 0185 00000000 		.4byte	.LFB64
 2080 0189 40000000 		.4byte	.LFE64-.LFB64
 2081 018d 01       		.uleb128 0x1
 2082 018e 9C       		.byte	0x9c
 2083 018f 0C       		.uleb128 0xc
 2084 0190 3F030000 		.4byte	.LASF36
 2085 0194 01       		.byte	0x1
 2086 0195 7B       		.byte	0x7b
 2087 0196 00000000 		.4byte	.LFB65
 2088 019a 9C000000 		.4byte	.LFE65-.LFB65
 2089 019e 01       		.uleb128 0x1
 2090 019f 9C       		.byte	0x9c
 2091 01a0 0B       		.uleb128 0xb
 2092 01a1 EF030000 		.4byte	.LASF37
 2093 01a5 01       		.byte	0x1
 2094 01a6 8C       		.byte	0x8c
 2095 01a7 00000000 		.4byte	.LFB66
 2096 01ab 50000000 		.4byte	.LFE66-.LFB66
 2097 01af 01       		.uleb128 0x1
 2098 01b0 9C       		.byte	0x9c
 2099 01b1 0D       		.uleb128 0xd
 2100 01b2 E8020000 		.4byte	.LASF94
 2101 01b6 01       		.byte	0x1
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 49


 2102 01b7 96       		.byte	0x96
 2103 01b8 89000000 		.4byte	0x89
 2104 01bc 00000000 		.4byte	.LFB67
 2105 01c0 D8080000 		.4byte	.LFE67-.LFB67
 2106 01c4 01       		.uleb128 0x1
 2107 01c5 9C       		.byte	0x9c
 2108 01c6 74030000 		.4byte	0x374
 2109 01ca 0E       		.uleb128 0xe
 2110 01cb 6E756D00 		.ascii	"num\000"
 2111 01cf 01       		.byte	0x1
 2112 01d0 98       		.byte	0x98
 2113 01d1 89000000 		.4byte	0x89
 2114 01d5 02       		.uleb128 0x2
 2115 01d6 91       		.byte	0x91
 2116 01d7 60       		.sleb128 -32
 2117 01d8 0F       		.uleb128 0xf
 2118 01d9 E8000000 		.4byte	.LASF38
 2119 01dd 01       		.byte	0x1
 2120 01de 98       		.byte	0x98
 2121 01df 89000000 		.4byte	0x89
 2122 01e3 02       		.uleb128 0x2
 2123 01e4 91       		.byte	0x91
 2124 01e5 5C       		.sleb128 -36
 2125 01e6 0F       		.uleb128 0xf
 2126 01e7 B7010000 		.4byte	.LASF39
 2127 01eb 01       		.byte	0x1
 2128 01ec 99       		.byte	0x99
 2129 01ed DB000000 		.4byte	0xdb
 2130 01f1 02       		.uleb128 0x2
 2131 01f2 91       		.byte	0x91
 2132 01f3 58       		.sleb128 -40
 2133 01f4 0F       		.uleb128 0xf
 2134 01f5 B5020000 		.4byte	.LASF40
 2135 01f9 01       		.byte	0x1
 2136 01fa 99       		.byte	0x99
 2137 01fb DB000000 		.4byte	0xdb
 2138 01ff 02       		.uleb128 0x2
 2139 0200 91       		.byte	0x91
 2140 0201 54       		.sleb128 -44
 2141 0202 0F       		.uleb128 0xf
 2142 0203 D6030000 		.4byte	.LASF41
 2143 0207 01       		.byte	0x1
 2144 0208 99       		.byte	0x99
 2145 0209 DB000000 		.4byte	0xdb
 2146 020d 02       		.uleb128 0x2
 2147 020e 91       		.byte	0x91
 2148 020f 50       		.sleb128 -48
 2149 0210 0F       		.uleb128 0xf
 2150 0211 AD000000 		.4byte	.LASF42
 2151 0215 01       		.byte	0x1
 2152 0216 99       		.byte	0x99
 2153 0217 DB000000 		.4byte	0xdb
 2154 021b 02       		.uleb128 0x2
 2155 021c 91       		.byte	0x91
 2156 021d 6C       		.sleb128 -20
 2157 021e 0E       		.uleb128 0xe
 2158 021f 62756600 		.ascii	"buf\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 50


 2159 0223 01       		.byte	0x1
 2160 0224 9A       		.byte	0x9a
 2161 0225 74030000 		.4byte	0x374
 2162 0229 03       		.uleb128 0x3
 2163 022a 91       		.byte	0x91
 2164 022b 8C7F     		.sleb128 -116
 2165 022d 0F       		.uleb128 0xf
 2166 022e 96030000 		.4byte	.LASF43
 2167 0232 01       		.byte	0x1
 2168 0233 9A       		.byte	0x9a
 2169 0234 84030000 		.4byte	0x384
 2170 0238 03       		.uleb128 0x3
 2171 0239 91       		.byte	0x91
 2172 023a F87E     		.sleb128 -136
 2173 023c 0F       		.uleb128 0xf
 2174 023d 0F030000 		.4byte	.LASF44
 2175 0241 01       		.byte	0x1
 2176 0242 9A       		.byte	0x9a
 2177 0243 94030000 		.4byte	0x394
 2178 0247 03       		.uleb128 0x3
 2179 0248 91       		.byte	0x91
 2180 0249 E87E     		.sleb128 -152
 2181 024b 0F       		.uleb128 0xf
 2182 024c B2030000 		.4byte	.LASF45
 2183 0250 01       		.byte	0x1
 2184 0251 9B       		.byte	0x9b
 2185 0252 A4030000 		.4byte	0x3a4
 2186 0256 03       		.uleb128 0x3
 2187 0257 91       		.byte	0x91
 2188 0258 D47E     		.sleb128 -172
 2189 025a 0F       		.uleb128 0xf
 2190 025b 39040000 		.4byte	.LASF46
 2191 025f 01       		.byte	0x1
 2192 0260 9C       		.byte	0x9c
 2193 0261 94030000 		.4byte	0x394
 2194 0265 03       		.uleb128 0x3
 2195 0266 91       		.byte	0x91
 2196 0267 C47E     		.sleb128 -188
 2197 0269 0F       		.uleb128 0xf
 2198 026a 9E000000 		.4byte	.LASF47
 2199 026e 01       		.byte	0x1
 2200 026f 9D       		.byte	0x9d
 2201 0270 B4030000 		.4byte	0x3b4
 2202 0274 03       		.uleb128 0x3
 2203 0275 91       		.byte	0x91
 2204 0276 B07E     		.sleb128 -208
 2205 0278 0F       		.uleb128 0xf
 2206 0279 27030000 		.4byte	.LASF48
 2207 027d 01       		.byte	0x1
 2208 027e 9E       		.byte	0x9e
 2209 027f B4030000 		.4byte	0x3b4
 2210 0283 03       		.uleb128 0x3
 2211 0284 91       		.byte	0x91
 2212 0285 9C7E     		.sleb128 -228
 2213 0287 0F       		.uleb128 0xf
 2214 0288 DD010000 		.4byte	.LASF49
 2215 028c 01       		.byte	0x1
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 51


 2216 028d 9F       		.byte	0x9f
 2217 028e C4030000 		.4byte	0x3c4
 2218 0292 03       		.uleb128 0x3
 2219 0293 91       		.byte	0x91
 2220 0294 8C7E     		.sleb128 -244
 2221 0296 0F       		.uleb128 0xf
 2222 0297 F7000000 		.4byte	.LASF50
 2223 029b 01       		.byte	0x1
 2224 029c A0       		.byte	0xa0
 2225 029d 89000000 		.4byte	0x89
 2226 02a1 02       		.uleb128 0x2
 2227 02a2 91       		.byte	0x91
 2228 02a3 68       		.sleb128 -24
 2229 02a4 0F       		.uleb128 0xf
 2230 02a5 DC000000 		.4byte	.LASF51
 2231 02a9 01       		.byte	0x1
 2232 02aa A0       		.byte	0xa0
 2233 02ab 89000000 		.4byte	0x89
 2234 02af 02       		.uleb128 0x2
 2235 02b0 91       		.byte	0x91
 2236 02b1 64       		.sleb128 -28
 2237 02b2 0F       		.uleb128 0xf
 2238 02b3 CF010000 		.4byte	.LASF52
 2239 02b7 01       		.byte	0x1
 2240 02b8 A0       		.byte	0xa0
 2241 02b9 89000000 		.4byte	0x89
 2242 02bd 02       		.uleb128 0x2
 2243 02be 91       		.byte	0x91
 2244 02bf 4C       		.sleb128 -52
 2245 02c0 10       		.uleb128 0x10
 2246 02c1 617800   		.ascii	"ax\000"
 2247 02c4 01       		.byte	0x1
 2248 02c5 A2       		.byte	0xa2
 2249 02c6 A2000000 		.4byte	0xa2
 2250 02ca 10       		.uleb128 0x10
 2251 02cb 617900   		.ascii	"ay\000"
 2252 02ce 01       		.byte	0x1
 2253 02cf A2       		.byte	0xa2
 2254 02d0 A2000000 		.4byte	0xa2
 2255 02d4 0E       		.uleb128 0xe
 2256 02d5 617A00   		.ascii	"az\000"
 2257 02d8 01       		.byte	0x1
 2258 02d9 A2       		.byte	0xa2
 2259 02da A2000000 		.4byte	0xa2
 2260 02de 03       		.uleb128 0x3
 2261 02df 91       		.byte	0x91
 2262 02e0 BE7F     		.sleb128 -66
 2263 02e2 10       		.uleb128 0x10
 2264 02e3 6900     		.ascii	"i\000"
 2265 02e5 01       		.byte	0x1
 2266 02e6 A2       		.byte	0xa2
 2267 02e7 A2000000 		.4byte	0xa2
 2268 02eb 10       		.uleb128 0x10
 2269 02ec 677800   		.ascii	"gx\000"
 2270 02ef 01       		.byte	0x1
 2271 02f0 A3       		.byte	0xa3
 2272 02f1 A2000000 		.4byte	0xa2
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 52


 2273 02f5 10       		.uleb128 0x10
 2274 02f6 677900   		.ascii	"gy\000"
 2275 02f9 01       		.byte	0x1
 2276 02fa A3       		.byte	0xa3
 2277 02fb A2000000 		.4byte	0xa2
 2278 02ff 10       		.uleb128 0x10
 2279 0300 677A00   		.ascii	"gz\000"
 2280 0303 01       		.byte	0x1
 2281 0304 A3       		.byte	0xa3
 2282 0305 A2000000 		.4byte	0xa2
 2283 0309 0F       		.uleb128 0xf
 2284 030a 1E030000 		.4byte	.LASF53
 2285 030e 01       		.byte	0x1
 2286 030f A4       		.byte	0xa4
 2287 0310 A2000000 		.4byte	0xa2
 2288 0314 02       		.uleb128 0x2
 2289 0315 91       		.byte	0x91
 2290 0316 4A       		.sleb128 -54
 2291 0317 0F       		.uleb128 0xf
 2292 0318 B2010000 		.4byte	.LASF54
 2293 031c 01       		.byte	0x1
 2294 031d A5       		.byte	0xa5
 2295 031e 89000000 		.4byte	0x89
 2296 0322 03       		.uleb128 0x3
 2297 0323 91       		.byte	0x91
 2298 0324 887E     		.sleb128 -248
 2299 0326 0F       		.uleb128 0xf
 2300 0327 6B000000 		.4byte	.LASF55
 2301 032b 01       		.byte	0x1
 2302 032c A5       		.byte	0xa5
 2303 032d 89000000 		.4byte	0x89
 2304 0331 02       		.uleb128 0x2
 2305 0332 91       		.byte	0x91
 2306 0333 44       		.sleb128 -60
 2307 0334 0F       		.uleb128 0xf
 2308 0335 C6030000 		.4byte	.LASF56
 2309 0339 01       		.byte	0x1
 2310 033a CE       		.byte	0xce
 2311 033b 89000000 		.4byte	0x89
 2312 033f 02       		.uleb128 0x2
 2313 0340 91       		.byte	0x91
 2314 0341 40       		.sleb128 -64
 2315 0342 11       		.uleb128 0x11
 2316 0343 76010000 		.4byte	.LBB2
 2317 0347 FE060000 		.4byte	.LBE2-.LBB2
 2318 034b 12       		.uleb128 0x12
 2319 034c 7400     		.ascii	"t\000"
 2320 034e 01       		.byte	0x1
 2321 034f 1D01     		.2byte	0x11d
 2322 0351 89000000 		.4byte	0x89
 2323 0355 03       		.uleb128 0x3
 2324 0356 91       		.byte	0x91
 2325 0357 847E     		.sleb128 -252
 2326 0359 11       		.uleb128 0x11
 2327 035a 74020000 		.4byte	.LBB3
 2328 035e A4000000 		.4byte	.LBE3-.LBB3
 2329 0362 0F       		.uleb128 0xf
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 53


 2330 0363 4A000000 		.4byte	.LASF57
 2331 0367 01       		.byte	0x1
 2332 0368 F6       		.byte	0xf6
 2333 0369 D4030000 		.4byte	0x3d4
 2334 036d 03       		.uleb128 0x3
 2335 036e 91       		.byte	0x91
 2336 036f C87D     		.sleb128 -312
 2337 0371 00       		.byte	0
 2338 0372 00       		.byte	0
 2339 0373 00       		.byte	0
 2340 0374 13       		.uleb128 0x13
 2341 0375 E9000000 		.4byte	0xe9
 2342 0379 84030000 		.4byte	0x384
 2343 037d 14       		.uleb128 0x14
 2344 037e 01010000 		.4byte	0x101
 2345 0382 31       		.byte	0x31
 2346 0383 00       		.byte	0
 2347 0384 13       		.uleb128 0x13
 2348 0385 E9000000 		.4byte	0xe9
 2349 0389 94030000 		.4byte	0x394
 2350 038d 14       		.uleb128 0x14
 2351 038e 01010000 		.4byte	0x101
 2352 0392 13       		.byte	0x13
 2353 0393 00       		.byte	0
 2354 0394 13       		.uleb128 0x13
 2355 0395 E9000000 		.4byte	0xe9
 2356 0399 A4030000 		.4byte	0x3a4
 2357 039d 14       		.uleb128 0x14
 2358 039e 01010000 		.4byte	0x101
 2359 03a2 0D       		.byte	0xd
 2360 03a3 00       		.byte	0
 2361 03a4 13       		.uleb128 0x13
 2362 03a5 E9000000 		.4byte	0xe9
 2363 03a9 B4030000 		.4byte	0x3b4
 2364 03ad 14       		.uleb128 0x14
 2365 03ae 01010000 		.4byte	0x101
 2366 03b2 12       		.byte	0x12
 2367 03b3 00       		.byte	0
 2368 03b4 13       		.uleb128 0x13
 2369 03b5 E9000000 		.4byte	0xe9
 2370 03b9 C4030000 		.4byte	0x3c4
 2371 03bd 14       		.uleb128 0x14
 2372 03be 01010000 		.4byte	0x101
 2373 03c2 10       		.byte	0x10
 2374 03c3 00       		.byte	0
 2375 03c4 13       		.uleb128 0x13
 2376 03c5 E9000000 		.4byte	0xe9
 2377 03c9 D4030000 		.4byte	0x3d4
 2378 03cd 14       		.uleb128 0x14
 2379 03ce 01010000 		.4byte	0x101
 2380 03d2 0F       		.byte	0xf
 2381 03d3 00       		.byte	0
 2382 03d4 13       		.uleb128 0x13
 2383 03d5 E9000000 		.4byte	0xe9
 2384 03d9 E4030000 		.4byte	0x3e4
 2385 03dd 14       		.uleb128 0x14
 2386 03de 01010000 		.4byte	0x101
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 54


 2387 03e2 3B       		.byte	0x3b
 2388 03e3 00       		.byte	0
 2389 03e4 15       		.uleb128 0x15
 2390 03e5 09040000 		.4byte	.LASF95
 2391 03e9 01       		.byte	0x1
 2392 03ea E601     		.2byte	0x1e6
 2393 03ec 89000000 		.4byte	0x89
 2394 03f0 00000000 		.4byte	.LFB68
 2395 03f4 30010000 		.4byte	.LFE68-.LFB68
 2396 03f8 01       		.uleb128 0x1
 2397 03f9 9C       		.byte	0x9c
 2398 03fa 1D040000 		.4byte	0x41d
 2399 03fe 16       		.uleb128 0x16
 2400 03ff 80000000 		.4byte	.LASF96
 2401 0403 01       		.byte	0x1
 2402 0404 E601     		.2byte	0x1e6
 2403 0406 08010000 		.4byte	0x108
 2404 040a 02       		.uleb128 0x2
 2405 040b 91       		.byte	0x91
 2406 040c 64       		.sleb128 -28
 2407 040d 17       		.uleb128 0x17
 2408 040e 12040000 		.4byte	.LASF58
 2409 0412 01       		.byte	0x1
 2410 0413 E701     		.2byte	0x1e7
 2411 0415 89000000 		.4byte	0x89
 2412 0419 02       		.uleb128 0x2
 2413 041a 91       		.byte	0x91
 2414 041b 6C       		.sleb128 -20
 2415 041c 00       		.byte	0
 2416 041d 18       		.uleb128 0x18
 2417 041e FC030000 		.4byte	.LASF59
 2418 0422 07       		.byte	0x7
 2419 0423 9606     		.2byte	0x696
 2420 0425 29040000 		.4byte	0x429
 2421 0429 06       		.uleb128 0x6
 2422 042a AD000000 		.4byte	0xad
 2423 042e 19       		.uleb128 0x19
 2424 042f 55000000 		.4byte	.LASF60
 2425 0433 08       		.byte	0x8
 2426 0434 9101     		.2byte	0x191
 2427 0436 97000000 		.4byte	0x97
 2428 043a 05       		.uleb128 0x5
 2429 043b 03       		.byte	0x3
 2430 043c 00000000 		.4byte	devAddr
 2431 0440 13       		.uleb128 0x13
 2432 0441 97000000 		.4byte	0x97
 2433 0445 50040000 		.4byte	0x450
 2434 0449 14       		.uleb128 0x14
 2435 044a 01010000 		.4byte	0x101
 2436 044e 15       		.byte	0x15
 2437 044f 00       		.byte	0
 2438 0450 19       		.uleb128 0x19
 2439 0451 38030000 		.4byte	.LASF61
 2440 0455 08       		.byte	0x8
 2441 0456 9201     		.2byte	0x192
 2442 0458 40040000 		.4byte	0x440
 2443 045c 05       		.uleb128 0x5
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 55


 2444 045d 03       		.byte	0x3
 2445 045e 00000000 		.4byte	buffer
 2446 0462 1A       		.uleb128 0x1a
 2447 0463 50000000 		.4byte	.LASF62
 2448 0467 01       		.byte	0x1
 2449 0468 34       		.byte	0x34
 2450 0469 B8000000 		.4byte	0xb8
 2451 046d 05       		.uleb128 0x5
 2452 046e 03       		.byte	0x3
 2453 046f 00000000 		.4byte	Addr
 2454 0473 1B       		.uleb128 0x1b
 2455 0474 696400   		.ascii	"id\000"
 2456 0477 01       		.byte	0x1
 2457 0478 35       		.byte	0x35
 2458 0479 62000000 		.4byte	0x62
 2459 047d 05       		.uleb128 0x5
 2460 047e 03       		.byte	0x3
 2461 047f 00000000 		.4byte	id
 2462 0483 1A       		.uleb128 0x1a
 2463 0484 C6010000 		.4byte	.LASF63
 2464 0488 01       		.byte	0x1
 2465 0489 35       		.byte	0x35
 2466 048a 62000000 		.4byte	0x62
 2467 048e 05       		.uleb128 0x5
 2468 048f 03       		.byte	0x3
 2469 0490 00000000 		.4byte	press_id
 2470 0494 1A       		.uleb128 0x1a
 2471 0495 9E020000 		.4byte	.LASF64
 2472 0499 01       		.byte	0x1
 2473 049a 36       		.byte	0x36
 2474 049b 62000000 		.4byte	0x62
 2475 049f 05       		.uleb128 0x5
 2476 04a0 03       		.byte	0x3
 2477 04a1 00000000 		.4byte	data_time
 2478 04a5 1A       		.uleb128 0x1a
 2479 04a6 00000000 		.4byte	.LASF65
 2480 04aa 01       		.byte	0x1
 2481 04ab 37       		.byte	0x37
 2482 04ac 62000000 		.4byte	0x62
 2483 04b0 05       		.uleb128 0x5
 2484 04b1 03       		.byte	0x3
 2485 04b2 00000000 		.4byte	descent_time
 2486 04b6 1B       		.uleb128 0x1b
 2487 04b7 73756D00 		.ascii	"sum\000"
 2488 04bb 01       		.byte	0x1
 2489 04bc 39       		.byte	0x39
 2490 04bd 62000000 		.4byte	0x62
 2491 04c1 05       		.uleb128 0x5
 2492 04c2 03       		.byte	0x3
 2493 04c3 00000000 		.4byte	sum
 2494 04c7 1A       		.uleb128 0x1a
 2495 04c8 EC010000 		.4byte	.LASF66
 2496 04cc 01       		.byte	0x1
 2497 04cd 3A       		.byte	0x3a
 2498 04ce DB000000 		.4byte	0xdb
 2499 04d2 05       		.uleb128 0x5
 2500 04d3 03       		.byte	0x3
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 56


 2501 04d4 00000000 		.4byte	pressure_sum
 2502 04d8 1A       		.uleb128 0x1a
 2503 04d9 13010000 		.4byte	.LASF67
 2504 04dd 01       		.byte	0x1
 2505 04de 3B       		.byte	0x3b
 2506 04df A2000000 		.4byte	0xa2
 2507 04e3 05       		.uleb128 0x5
 2508 04e4 03       		.byte	0x3
 2509 04e5 00000000 		.4byte	average
 2510 04e9 1A       		.uleb128 0x1a
 2511 04ea E2030000 		.4byte	.LASF68
 2512 04ee 01       		.byte	0x1
 2513 04ef 3C       		.byte	0x3c
 2514 04f0 FA040000 		.4byte	0x4fa
 2515 04f4 05       		.uleb128 0x5
 2516 04f5 03       		.byte	0x3
 2517 04f6 00000000 		.4byte	collect_flag
 2518 04fa 02       		.uleb128 0x2
 2519 04fb 01       		.byte	0x1
 2520 04fc 02       		.byte	0x2
 2521 04fd 03030000 		.4byte	.LASF69
 2522 0501 1A       		.uleb128 0x1a
 2523 0502 43040000 		.4byte	.LASF70
 2524 0506 01       		.byte	0x1
 2525 0507 3D       		.byte	0x3d
 2526 0508 FA040000 		.4byte	0x4fa
 2527 050c 05       		.uleb128 0x5
 2528 050d 03       		.byte	0x3
 2529 050e 00000000 		.4byte	wait_flag
 2530 0512 1A       		.uleb128 0x1a
 2531 0513 C4000000 		.4byte	.LASF71
 2532 0517 01       		.byte	0x1
 2533 0518 3E       		.byte	0x3e
 2534 0519 FA040000 		.4byte	0x4fa
 2535 051d 05       		.uleb128 0x5
 2536 051e 03       		.byte	0x3
 2537 051f 00000000 		.4byte	PANIC_flag
 2538 0523 1A       		.uleb128 0x1a
 2539 0524 D0030000 		.4byte	.LASF72
 2540 0528 01       		.byte	0x1
 2541 0529 40       		.byte	0x40
 2542 052a 62010000 		.4byte	0x162
 2543 052e 05       		.uleb128 0x5
 2544 052f 03       		.byte	0x3
 2545 0530 00000000 		.4byte	STATE
 2546 0534 1A       		.uleb128 0x1a
 2547 0535 68020000 		.4byte	.LASF73
 2548 0539 01       		.byte	0x1
 2549 053a 41       		.byte	0x41
 2550 053b 97000000 		.4byte	0x97
 2551 053f 05       		.uleb128 0x5
 2552 0540 03       		.byte	0x3
 2553 0541 00000000 		.4byte	countdown
 2554 0545 1A       		.uleb128 0x1a
 2555 0546 21000000 		.4byte	.LASF74
 2556 054a 01       		.byte	0x1
 2557 054b 41       		.byte	0x41
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 57


 2558 054c 97000000 		.4byte	0x97
 2559 0550 05       		.uleb128 0x5
 2560 0551 03       		.byte	0x3
 2561 0552 00000000 		.4byte	update_Data
 2562 0556 13       		.uleb128 0x13
 2563 0557 97000000 		.4byte	0x97
 2564 055b 66050000 		.4byte	0x566
 2565 055f 14       		.uleb128 0x14
 2566 0560 01010000 		.4byte	0x101
 2567 0564 3F       		.byte	0x3f
 2568 0565 00       		.byte	0
 2569 0566 1A       		.uleb128 0x1a
 2570 0567 2D000000 		.4byte	.LASF75
 2571 056b 01       		.byte	0x1
 2572 056c 42       		.byte	0x42
 2573 056d 56050000 		.4byte	0x556
 2574 0571 05       		.uleb128 0x5
 2575 0572 03       		.byte	0x3
 2576 0573 00000000 		.4byte	RxBuffer
 2577 0577 1A       		.uleb128 0x1a
 2578 0578 17000000 		.4byte	.LASF76
 2579 057c 01       		.byte	0x1
 2580 057d 43       		.byte	0x43
 2581 057e 89000000 		.4byte	0x89
 2582 0582 05       		.uleb128 0x5
 2583 0583 03       		.byte	0x3
 2584 0584 00000000 		.4byte	msg_count
 2585 0588 1A       		.uleb128 0x1a
 2586 0589 31030000 		.4byte	.LASF77
 2587 058d 01       		.byte	0x1
 2588 058e 43       		.byte	0x43
 2589 058f 89000000 		.4byte	0x89
 2590 0593 05       		.uleb128 0x5
 2591 0594 03       		.byte	0x3
 2592 0595 00000000 		.4byte	rxflag
 2593 0599 1A       		.uleb128 0x1a
 2594 059a 7E030000 		.4byte	.LASF78
 2595 059e 01       		.byte	0x1
 2596 059f 43       		.byte	0x43
 2597 05a0 89000000 		.4byte	0x89
 2598 05a4 05       		.uleb128 0x5
 2599 05a5 03       		.byte	0x3
 2600 05a6 00000000 		.4byte	bytes
 2601 05aa 1A       		.uleb128 0x1a
 2602 05ab 77000000 		.4byte	.LASF79
 2603 05af 01       		.byte	0x1
 2604 05b0 43       		.byte	0x43
 2605 05b1 89000000 		.4byte	0x89
 2606 05b5 05       		.uleb128 0x5
 2607 05b6 03       		.byte	0x3
 2608 05b7 00000000 		.4byte	dataflag
 2609 05bb 1A       		.uleb128 0x1a
 2610 05bc 5D000000 		.4byte	.LASF80
 2611 05c0 01       		.byte	0x1
 2612 05c1 43       		.byte	0x43
 2613 05c2 89000000 		.4byte	0x89
 2614 05c6 05       		.uleb128 0x5
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 58


 2615 05c7 03       		.byte	0x3
 2616 05c8 00000000 		.4byte	transmit_flag
 2617 05cc 1A       		.uleb128 0x1a
 2618 05cd 18030000 		.4byte	.LASF81
 2619 05d1 01       		.byte	0x1
 2620 05d2 44       		.byte	0x44
 2621 05d3 89000000 		.4byte	0x89
 2622 05d7 05       		.uleb128 0x5
 2623 05d8 03       		.byte	0x3
 2624 05d9 00000000 		.4byte	depth
 2625 05dd 1A       		.uleb128 0x1a
 2626 05de 09030000 		.4byte	.LASF82
 2627 05e2 01       		.byte	0x1
 2628 05e3 44       		.byte	0x44
 2629 05e4 89000000 		.4byte	0x89
 2630 05e8 05       		.uleb128 0x5
 2631 05e9 03       		.byte	0x3
 2632 05ea 00000000 		.4byte	reset
 2633 05ee 1A       		.uleb128 0x1a
 2634 05ef BA020000 		.4byte	.LASF83
 2635 05f3 01       		.byte	0x1
 2636 05f4 44       		.byte	0x44
 2637 05f5 89000000 		.4byte	0x89
 2638 05f9 05       		.uleb128 0x5
 2639 05fa 03       		.byte	0x3
 2640 05fb 00000000 		.4byte	testnum
 2641 05ff 1A       		.uleb128 0x1a
 2642 0600 1A040000 		.4byte	.LASF84
 2643 0604 01       		.byte	0x1
 2644 0605 45       		.byte	0x45
 2645 0606 DB000000 		.4byte	0xdb
 2646 060a 05       		.uleb128 0x5
 2647 060b 03       		.byte	0x3
 2648 060c 00000000 		.4byte	xavg
 2649 0610 1A       		.uleb128 0x1a
 2650 0611 CF000000 		.4byte	.LASF85
 2651 0615 01       		.byte	0x1
 2652 0616 45       		.byte	0x45
 2653 0617 DB000000 		.4byte	0xdb
 2654 061b 05       		.uleb128 0x5
 2655 061c 03       		.byte	0x3
 2656 061d 00000000 		.4byte	yavg
 2657 0621 1A       		.uleb128 0x1a
 2658 0622 D5020000 		.4byte	.LASF86
 2659 0626 01       		.byte	0x1
 2660 0627 45       		.byte	0x45
 2661 0628 DB000000 		.4byte	0xdb
 2662 062c 05       		.uleb128 0x5
 2663 062d 03       		.byte	0x3
 2664 062e 00000000 		.4byte	xsum
 2665 0632 1A       		.uleb128 0x1a
 2666 0633 DD030000 		.4byte	.LASF87
 2667 0637 01       		.byte	0x1
 2668 0638 45       		.byte	0x45
 2669 0639 DB000000 		.4byte	0xdb
 2670 063d 05       		.uleb128 0x5
 2671 063e 03       		.byte	0x3
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 59


 2672 063f 00000000 		.4byte	ysum
 2673 0643 13       		.uleb128 0x13
 2674 0644 E9000000 		.4byte	0xe9
 2675 0648 53060000 		.4byte	0x653
 2676 064c 14       		.uleb128 0x14
 2677 064d 01010000 		.4byte	0x101
 2678 0651 0A       		.byte	0xa
 2679 0652 00       		.byte	0
 2680 0653 1A       		.uleb128 0x1a
 2681 0654 A8000000 		.4byte	.LASF88
 2682 0658 01       		.byte	0x1
 2683 0659 46       		.byte	0x46
 2684 065a 43060000 		.4byte	0x643
 2685 065e 05       		.uleb128 0x5
 2686 065f 03       		.byte	0x3
 2687 0660 00000000 		.4byte	file
 2688 0664 13       		.uleb128 0x13
 2689 0665 E9000000 		.4byte	0xe9
 2690 0669 74060000 		.4byte	0x674
 2691 066d 14       		.uleb128 0x14
 2692 066e 01010000 		.4byte	0x101
 2693 0672 09       		.byte	0x9
 2694 0673 00       		.byte	0
 2695 0674 1A       		.uleb128 0x1a
 2696 0675 BF010000 		.4byte	.LASF89
 2697 0679 01       		.byte	0x1
 2698 067a 47       		.byte	0x47
 2699 067b 64060000 		.4byte	0x664
 2700 067f 05       		.uleb128 0x5
 2701 0680 03       		.byte	0x3
 2702 0681 00000000 		.4byte	volume
 2703 0685 1A       		.uleb128 0x1a
 2704 0686 32040000 		.4byte	.LASF90
 2705 068a 01       		.byte	0x1
 2706 068b 48       		.byte	0x48
 2707 068c 1E010000 		.4byte	0x11e
 2708 0690 05       		.uleb128 0x5
 2709 0691 03       		.byte	0x3
 2710 0692 00000000 		.4byte	fsfile
 2711 0696 00       		.byte	0
 2712              		.section	.debug_abbrev,"",%progbits
 2713              	.Ldebug_abbrev0:
 2714 0000 01       		.uleb128 0x1
 2715 0001 11       		.uleb128 0x11
 2716 0002 01       		.byte	0x1
 2717 0003 25       		.uleb128 0x25
 2718 0004 0E       		.uleb128 0xe
 2719 0005 13       		.uleb128 0x13
 2720 0006 0B       		.uleb128 0xb
 2721 0007 03       		.uleb128 0x3
 2722 0008 0E       		.uleb128 0xe
 2723 0009 1B       		.uleb128 0x1b
 2724 000a 0E       		.uleb128 0xe
 2725 000b 55       		.uleb128 0x55
 2726 000c 17       		.uleb128 0x17
 2727 000d 11       		.uleb128 0x11
 2728 000e 01       		.uleb128 0x1
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 60


 2729 000f 10       		.uleb128 0x10
 2730 0010 17       		.uleb128 0x17
 2731 0011 00       		.byte	0
 2732 0012 00       		.byte	0
 2733 0013 02       		.uleb128 0x2
 2734 0014 24       		.uleb128 0x24
 2735 0015 00       		.byte	0
 2736 0016 0B       		.uleb128 0xb
 2737 0017 0B       		.uleb128 0xb
 2738 0018 3E       		.uleb128 0x3e
 2739 0019 0B       		.uleb128 0xb
 2740 001a 03       		.uleb128 0x3
 2741 001b 0E       		.uleb128 0xe
 2742 001c 00       		.byte	0
 2743 001d 00       		.byte	0
 2744 001e 03       		.uleb128 0x3
 2745 001f 16       		.uleb128 0x16
 2746 0020 00       		.byte	0
 2747 0021 03       		.uleb128 0x3
 2748 0022 0E       		.uleb128 0xe
 2749 0023 3A       		.uleb128 0x3a
 2750 0024 0B       		.uleb128 0xb
 2751 0025 3B       		.uleb128 0x3b
 2752 0026 0B       		.uleb128 0xb
 2753 0027 49       		.uleb128 0x49
 2754 0028 13       		.uleb128 0x13
 2755 0029 00       		.byte	0
 2756 002a 00       		.byte	0
 2757 002b 04       		.uleb128 0x4
 2758 002c 24       		.uleb128 0x24
 2759 002d 00       		.byte	0
 2760 002e 0B       		.uleb128 0xb
 2761 002f 0B       		.uleb128 0xb
 2762 0030 3E       		.uleb128 0x3e
 2763 0031 0B       		.uleb128 0xb
 2764 0032 03       		.uleb128 0x3
 2765 0033 08       		.uleb128 0x8
 2766 0034 00       		.byte	0
 2767 0035 00       		.byte	0
 2768 0036 05       		.uleb128 0x5
 2769 0037 16       		.uleb128 0x16
 2770 0038 00       		.byte	0
 2771 0039 03       		.uleb128 0x3
 2772 003a 0E       		.uleb128 0xe
 2773 003b 3A       		.uleb128 0x3a
 2774 003c 0B       		.uleb128 0xb
 2775 003d 3B       		.uleb128 0x3b
 2776 003e 05       		.uleb128 0x5
 2777 003f 49       		.uleb128 0x49
 2778 0040 13       		.uleb128 0x13
 2779 0041 00       		.byte	0
 2780 0042 00       		.byte	0
 2781 0043 06       		.uleb128 0x6
 2782 0044 35       		.uleb128 0x35
 2783 0045 00       		.byte	0
 2784 0046 49       		.uleb128 0x49
 2785 0047 13       		.uleb128 0x13
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 61


 2786 0048 00       		.byte	0
 2787 0049 00       		.byte	0
 2788 004a 07       		.uleb128 0x7
 2789 004b 0F       		.uleb128 0xf
 2790 004c 00       		.byte	0
 2791 004d 0B       		.uleb128 0xb
 2792 004e 0B       		.uleb128 0xb
 2793 004f 49       		.uleb128 0x49
 2794 0050 13       		.uleb128 0x13
 2795 0051 00       		.byte	0
 2796 0052 00       		.byte	0
 2797 0053 08       		.uleb128 0x8
 2798 0054 13       		.uleb128 0x13
 2799 0055 00       		.byte	0
 2800 0056 03       		.uleb128 0x3
 2801 0057 0E       		.uleb128 0xe
 2802 0058 3C       		.uleb128 0x3c
 2803 0059 19       		.uleb128 0x19
 2804 005a 00       		.byte	0
 2805 005b 00       		.byte	0
 2806 005c 09       		.uleb128 0x9
 2807 005d 04       		.uleb128 0x4
 2808 005e 01       		.byte	0x1
 2809 005f 03       		.uleb128 0x3
 2810 0060 0E       		.uleb128 0xe
 2811 0061 0B       		.uleb128 0xb
 2812 0062 0B       		.uleb128 0xb
 2813 0063 3A       		.uleb128 0x3a
 2814 0064 0B       		.uleb128 0xb
 2815 0065 3B       		.uleb128 0x3b
 2816 0066 0B       		.uleb128 0xb
 2817 0067 01       		.uleb128 0x1
 2818 0068 13       		.uleb128 0x13
 2819 0069 00       		.byte	0
 2820 006a 00       		.byte	0
 2821 006b 0A       		.uleb128 0xa
 2822 006c 28       		.uleb128 0x28
 2823 006d 00       		.byte	0
 2824 006e 03       		.uleb128 0x3
 2825 006f 0E       		.uleb128 0xe
 2826 0070 1C       		.uleb128 0x1c
 2827 0071 0D       		.uleb128 0xd
 2828 0072 00       		.byte	0
 2829 0073 00       		.byte	0
 2830 0074 0B       		.uleb128 0xb
 2831 0075 2E       		.uleb128 0x2e
 2832 0076 00       		.byte	0
 2833 0077 3F       		.uleb128 0x3f
 2834 0078 19       		.uleb128 0x19
 2835 0079 03       		.uleb128 0x3
 2836 007a 0E       		.uleb128 0xe
 2837 007b 3A       		.uleb128 0x3a
 2838 007c 0B       		.uleb128 0xb
 2839 007d 3B       		.uleb128 0x3b
 2840 007e 0B       		.uleb128 0xb
 2841 007f 27       		.uleb128 0x27
 2842 0080 19       		.uleb128 0x19
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 62


 2843 0081 11       		.uleb128 0x11
 2844 0082 01       		.uleb128 0x1
 2845 0083 12       		.uleb128 0x12
 2846 0084 06       		.uleb128 0x6
 2847 0085 40       		.uleb128 0x40
 2848 0086 18       		.uleb128 0x18
 2849 0087 9642     		.uleb128 0x2116
 2850 0089 19       		.uleb128 0x19
 2851 008a 00       		.byte	0
 2852 008b 00       		.byte	0
 2853 008c 0C       		.uleb128 0xc
 2854 008d 2E       		.uleb128 0x2e
 2855 008e 00       		.byte	0
 2856 008f 3F       		.uleb128 0x3f
 2857 0090 19       		.uleb128 0x19
 2858 0091 03       		.uleb128 0x3
 2859 0092 0E       		.uleb128 0xe
 2860 0093 3A       		.uleb128 0x3a
 2861 0094 0B       		.uleb128 0xb
 2862 0095 3B       		.uleb128 0x3b
 2863 0096 0B       		.uleb128 0xb
 2864 0097 27       		.uleb128 0x27
 2865 0098 19       		.uleb128 0x19
 2866 0099 11       		.uleb128 0x11
 2867 009a 01       		.uleb128 0x1
 2868 009b 12       		.uleb128 0x12
 2869 009c 06       		.uleb128 0x6
 2870 009d 40       		.uleb128 0x40
 2871 009e 18       		.uleb128 0x18
 2872 009f 9742     		.uleb128 0x2117
 2873 00a1 19       		.uleb128 0x19
 2874 00a2 00       		.byte	0
 2875 00a3 00       		.byte	0
 2876 00a4 0D       		.uleb128 0xd
 2877 00a5 2E       		.uleb128 0x2e
 2878 00a6 01       		.byte	0x1
 2879 00a7 3F       		.uleb128 0x3f
 2880 00a8 19       		.uleb128 0x19
 2881 00a9 03       		.uleb128 0x3
 2882 00aa 0E       		.uleb128 0xe
 2883 00ab 3A       		.uleb128 0x3a
 2884 00ac 0B       		.uleb128 0xb
 2885 00ad 3B       		.uleb128 0x3b
 2886 00ae 0B       		.uleb128 0xb
 2887 00af 49       		.uleb128 0x49
 2888 00b0 13       		.uleb128 0x13
 2889 00b1 11       		.uleb128 0x11
 2890 00b2 01       		.uleb128 0x1
 2891 00b3 12       		.uleb128 0x12
 2892 00b4 06       		.uleb128 0x6
 2893 00b5 40       		.uleb128 0x40
 2894 00b6 18       		.uleb128 0x18
 2895 00b7 9642     		.uleb128 0x2116
 2896 00b9 19       		.uleb128 0x19
 2897 00ba 01       		.uleb128 0x1
 2898 00bb 13       		.uleb128 0x13
 2899 00bc 00       		.byte	0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 63


 2900 00bd 00       		.byte	0
 2901 00be 0E       		.uleb128 0xe
 2902 00bf 34       		.uleb128 0x34
 2903 00c0 00       		.byte	0
 2904 00c1 03       		.uleb128 0x3
 2905 00c2 08       		.uleb128 0x8
 2906 00c3 3A       		.uleb128 0x3a
 2907 00c4 0B       		.uleb128 0xb
 2908 00c5 3B       		.uleb128 0x3b
 2909 00c6 0B       		.uleb128 0xb
 2910 00c7 49       		.uleb128 0x49
 2911 00c8 13       		.uleb128 0x13
 2912 00c9 02       		.uleb128 0x2
 2913 00ca 18       		.uleb128 0x18
 2914 00cb 00       		.byte	0
 2915 00cc 00       		.byte	0
 2916 00cd 0F       		.uleb128 0xf
 2917 00ce 34       		.uleb128 0x34
 2918 00cf 00       		.byte	0
 2919 00d0 03       		.uleb128 0x3
 2920 00d1 0E       		.uleb128 0xe
 2921 00d2 3A       		.uleb128 0x3a
 2922 00d3 0B       		.uleb128 0xb
 2923 00d4 3B       		.uleb128 0x3b
 2924 00d5 0B       		.uleb128 0xb
 2925 00d6 49       		.uleb128 0x49
 2926 00d7 13       		.uleb128 0x13
 2927 00d8 02       		.uleb128 0x2
 2928 00d9 18       		.uleb128 0x18
 2929 00da 00       		.byte	0
 2930 00db 00       		.byte	0
 2931 00dc 10       		.uleb128 0x10
 2932 00dd 34       		.uleb128 0x34
 2933 00de 00       		.byte	0
 2934 00df 03       		.uleb128 0x3
 2935 00e0 08       		.uleb128 0x8
 2936 00e1 3A       		.uleb128 0x3a
 2937 00e2 0B       		.uleb128 0xb
 2938 00e3 3B       		.uleb128 0x3b
 2939 00e4 0B       		.uleb128 0xb
 2940 00e5 49       		.uleb128 0x49
 2941 00e6 13       		.uleb128 0x13
 2942 00e7 00       		.byte	0
 2943 00e8 00       		.byte	0
 2944 00e9 11       		.uleb128 0x11
 2945 00ea 0B       		.uleb128 0xb
 2946 00eb 01       		.byte	0x1
 2947 00ec 11       		.uleb128 0x11
 2948 00ed 01       		.uleb128 0x1
 2949 00ee 12       		.uleb128 0x12
 2950 00ef 06       		.uleb128 0x6
 2951 00f0 00       		.byte	0
 2952 00f1 00       		.byte	0
 2953 00f2 12       		.uleb128 0x12
 2954 00f3 34       		.uleb128 0x34
 2955 00f4 00       		.byte	0
 2956 00f5 03       		.uleb128 0x3
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 64


 2957 00f6 08       		.uleb128 0x8
 2958 00f7 3A       		.uleb128 0x3a
 2959 00f8 0B       		.uleb128 0xb
 2960 00f9 3B       		.uleb128 0x3b
 2961 00fa 05       		.uleb128 0x5
 2962 00fb 49       		.uleb128 0x49
 2963 00fc 13       		.uleb128 0x13
 2964 00fd 02       		.uleb128 0x2
 2965 00fe 18       		.uleb128 0x18
 2966 00ff 00       		.byte	0
 2967 0100 00       		.byte	0
 2968 0101 13       		.uleb128 0x13
 2969 0102 01       		.uleb128 0x1
 2970 0103 01       		.byte	0x1
 2971 0104 49       		.uleb128 0x49
 2972 0105 13       		.uleb128 0x13
 2973 0106 01       		.uleb128 0x1
 2974 0107 13       		.uleb128 0x13
 2975 0108 00       		.byte	0
 2976 0109 00       		.byte	0
 2977 010a 14       		.uleb128 0x14
 2978 010b 21       		.uleb128 0x21
 2979 010c 00       		.byte	0
 2980 010d 49       		.uleb128 0x49
 2981 010e 13       		.uleb128 0x13
 2982 010f 2F       		.uleb128 0x2f
 2983 0110 0B       		.uleb128 0xb
 2984 0111 00       		.byte	0
 2985 0112 00       		.byte	0
 2986 0113 15       		.uleb128 0x15
 2987 0114 2E       		.uleb128 0x2e
 2988 0115 01       		.byte	0x1
 2989 0116 3F       		.uleb128 0x3f
 2990 0117 19       		.uleb128 0x19
 2991 0118 03       		.uleb128 0x3
 2992 0119 0E       		.uleb128 0xe
 2993 011a 3A       		.uleb128 0x3a
 2994 011b 0B       		.uleb128 0xb
 2995 011c 3B       		.uleb128 0x3b
 2996 011d 05       		.uleb128 0x5
 2997 011e 27       		.uleb128 0x27
 2998 011f 19       		.uleb128 0x19
 2999 0120 49       		.uleb128 0x49
 3000 0121 13       		.uleb128 0x13
 3001 0122 11       		.uleb128 0x11
 3002 0123 01       		.uleb128 0x1
 3003 0124 12       		.uleb128 0x12
 3004 0125 06       		.uleb128 0x6
 3005 0126 40       		.uleb128 0x40
 3006 0127 18       		.uleb128 0x18
 3007 0128 9642     		.uleb128 0x2116
 3008 012a 19       		.uleb128 0x19
 3009 012b 01       		.uleb128 0x1
 3010 012c 13       		.uleb128 0x13
 3011 012d 00       		.byte	0
 3012 012e 00       		.byte	0
 3013 012f 16       		.uleb128 0x16
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 65


 3014 0130 05       		.uleb128 0x5
 3015 0131 00       		.byte	0
 3016 0132 03       		.uleb128 0x3
 3017 0133 0E       		.uleb128 0xe
 3018 0134 3A       		.uleb128 0x3a
 3019 0135 0B       		.uleb128 0xb
 3020 0136 3B       		.uleb128 0x3b
 3021 0137 05       		.uleb128 0x5
 3022 0138 49       		.uleb128 0x49
 3023 0139 13       		.uleb128 0x13
 3024 013a 02       		.uleb128 0x2
 3025 013b 18       		.uleb128 0x18
 3026 013c 00       		.byte	0
 3027 013d 00       		.byte	0
 3028 013e 17       		.uleb128 0x17
 3029 013f 34       		.uleb128 0x34
 3030 0140 00       		.byte	0
 3031 0141 03       		.uleb128 0x3
 3032 0142 0E       		.uleb128 0xe
 3033 0143 3A       		.uleb128 0x3a
 3034 0144 0B       		.uleb128 0xb
 3035 0145 3B       		.uleb128 0x3b
 3036 0146 05       		.uleb128 0x5
 3037 0147 49       		.uleb128 0x49
 3038 0148 13       		.uleb128 0x13
 3039 0149 02       		.uleb128 0x2
 3040 014a 18       		.uleb128 0x18
 3041 014b 00       		.byte	0
 3042 014c 00       		.byte	0
 3043 014d 18       		.uleb128 0x18
 3044 014e 34       		.uleb128 0x34
 3045 014f 00       		.byte	0
 3046 0150 03       		.uleb128 0x3
 3047 0151 0E       		.uleb128 0xe
 3048 0152 3A       		.uleb128 0x3a
 3049 0153 0B       		.uleb128 0xb
 3050 0154 3B       		.uleb128 0x3b
 3051 0155 05       		.uleb128 0x5
 3052 0156 49       		.uleb128 0x49
 3053 0157 13       		.uleb128 0x13
 3054 0158 3F       		.uleb128 0x3f
 3055 0159 19       		.uleb128 0x19
 3056 015a 3C       		.uleb128 0x3c
 3057 015b 19       		.uleb128 0x19
 3058 015c 00       		.byte	0
 3059 015d 00       		.byte	0
 3060 015e 19       		.uleb128 0x19
 3061 015f 34       		.uleb128 0x34
 3062 0160 00       		.byte	0
 3063 0161 03       		.uleb128 0x3
 3064 0162 0E       		.uleb128 0xe
 3065 0163 3A       		.uleb128 0x3a
 3066 0164 0B       		.uleb128 0xb
 3067 0165 3B       		.uleb128 0x3b
 3068 0166 05       		.uleb128 0x5
 3069 0167 49       		.uleb128 0x49
 3070 0168 13       		.uleb128 0x13
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 66


 3071 0169 3F       		.uleb128 0x3f
 3072 016a 19       		.uleb128 0x19
 3073 016b 02       		.uleb128 0x2
 3074 016c 18       		.uleb128 0x18
 3075 016d 00       		.byte	0
 3076 016e 00       		.byte	0
 3077 016f 1A       		.uleb128 0x1a
 3078 0170 34       		.uleb128 0x34
 3079 0171 00       		.byte	0
 3080 0172 03       		.uleb128 0x3
 3081 0173 0E       		.uleb128 0xe
 3082 0174 3A       		.uleb128 0x3a
 3083 0175 0B       		.uleb128 0xb
 3084 0176 3B       		.uleb128 0x3b
 3085 0177 0B       		.uleb128 0xb
 3086 0178 49       		.uleb128 0x49
 3087 0179 13       		.uleb128 0x13
 3088 017a 3F       		.uleb128 0x3f
 3089 017b 19       		.uleb128 0x19
 3090 017c 02       		.uleb128 0x2
 3091 017d 18       		.uleb128 0x18
 3092 017e 00       		.byte	0
 3093 017f 00       		.byte	0
 3094 0180 1B       		.uleb128 0x1b
 3095 0181 34       		.uleb128 0x34
 3096 0182 00       		.byte	0
 3097 0183 03       		.uleb128 0x3
 3098 0184 08       		.uleb128 0x8
 3099 0185 3A       		.uleb128 0x3a
 3100 0186 0B       		.uleb128 0xb
 3101 0187 3B       		.uleb128 0x3b
 3102 0188 0B       		.uleb128 0xb
 3103 0189 49       		.uleb128 0x49
 3104 018a 13       		.uleb128 0x13
 3105 018b 3F       		.uleb128 0x3f
 3106 018c 19       		.uleb128 0x19
 3107 018d 02       		.uleb128 0x2
 3108 018e 18       		.uleb128 0x18
 3109 018f 00       		.byte	0
 3110 0190 00       		.byte	0
 3111 0191 00       		.byte	0
 3112              		.section	.debug_aranges,"",%progbits
 3113 0000 44000000 		.4byte	0x44
 3114 0004 0200     		.2byte	0x2
 3115 0006 00000000 		.4byte	.Ldebug_info0
 3116 000a 04       		.byte	0x4
 3117 000b 00       		.byte	0
 3118 000c 0000     		.2byte	0
 3119 000e 0000     		.2byte	0
 3120 0010 00000000 		.4byte	.LFB63
 3121 0014 20000000 		.4byte	.LFE63-.LFB63
 3122 0018 00000000 		.4byte	.LFB64
 3123 001c 40000000 		.4byte	.LFE64-.LFB64
 3124 0020 00000000 		.4byte	.LFB65
 3125 0024 9C000000 		.4byte	.LFE65-.LFB65
 3126 0028 00000000 		.4byte	.LFB66
 3127 002c 50000000 		.4byte	.LFE66-.LFB66
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 67


 3128 0030 00000000 		.4byte	.LFB67
 3129 0034 D8080000 		.4byte	.LFE67-.LFB67
 3130 0038 00000000 		.4byte	.LFB68
 3131 003c 30010000 		.4byte	.LFE68-.LFB68
 3132 0040 00000000 		.4byte	0
 3133 0044 00000000 		.4byte	0
 3134              		.section	.debug_ranges,"",%progbits
 3135              	.Ldebug_ranges0:
 3136 0000 00000000 		.4byte	.LFB63
 3137 0004 20000000 		.4byte	.LFE63
 3138 0008 00000000 		.4byte	.LFB64
 3139 000c 40000000 		.4byte	.LFE64
 3140 0010 00000000 		.4byte	.LFB65
 3141 0014 9C000000 		.4byte	.LFE65
 3142 0018 00000000 		.4byte	.LFB66
 3143 001c 50000000 		.4byte	.LFE66
 3144 0020 00000000 		.4byte	.LFB67
 3145 0024 D8080000 		.4byte	.LFE67
 3146 0028 00000000 		.4byte	.LFB68
 3147 002c 30010000 		.4byte	.LFE68
 3148 0030 00000000 		.4byte	0
 3149 0034 00000000 		.4byte	0
 3150              		.section	.debug_line,"",%progbits
 3151              	.Ldebug_line0:
 3152 0000 5C030000 		.section	.debug_str,"MS",%progbits,1
 3152      0200A101 
 3152      00000201 
 3152      FB0E0D00 
 3152      01010101 
 3153              	.LASF65:
 3154 0000 64657363 		.ascii	"descent_time\000"
 3154      656E745F 
 3154      74696D65 
 3154      00
 3155              	.LASF30:
 3156 000d 52455355 		.ascii	"RESURFACE\000"
 3156      52464143 
 3156      4500
 3157              	.LASF76:
 3158 0017 6D73675F 		.ascii	"msg_count\000"
 3158      636F756E 
 3158      7400
 3159              	.LASF74:
 3160 0021 75706461 		.ascii	"update_Data\000"
 3160      74655F44 
 3160      61746100 
 3161              	.LASF75:
 3162 002d 52784275 		.ascii	"RxBuffer\000"
 3162      66666572 
 3162      00
 3163              	.LASF26:
 3164 0036 53595354 		.ascii	"SYSTEM_CHECK\000"
 3164      454D5F43 
 3164      4845434B 
 3164      00
 3165              	.LASF33:
 3166 0043 53544154 		.ascii	"STATES\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 68


 3166      455300
 3167              	.LASF57:
 3168 004a 73646275 		.ascii	"sdbuf\000"
 3168      6600
 3169              	.LASF62:
 3170 0050 41646472 		.ascii	"Addr\000"
 3170      00
 3171              	.LASF60:
 3172 0055 64657641 		.ascii	"devAddr\000"
 3172      64647200 
 3173              	.LASF80:
 3174 005d 7472616E 		.ascii	"transmit_flag\000"
 3174      736D6974 
 3174      5F666C61 
 3174      6700
 3175              	.LASF55:
 3176 006b 6F6E6573 		.ascii	"ones\000"
 3176      00
 3177              	.LASF29:
 3178 0070 4C414E44 		.ascii	"LANDED\000"
 3178      454400
 3179              	.LASF79:
 3180 0077 64617461 		.ascii	"dataflag\000"
 3180      666C6167 
 3180      00
 3181              	.LASF96:
 3182 0080 66696C65 		.ascii	"filename\000"
 3182      6E616D65 
 3182      00
 3183              	.LASF34:
 3184 0089 4D6F6973 		.ascii	"Moisture_ISR_Handler\000"
 3184      74757265 
 3184      5F495352 
 3184      5F48616E 
 3184      646C6572 
 3185              	.LASF47:
 3186 009e 76616375 		.ascii	"vacuumbuf\000"
 3186      756D6275 
 3186      6600
 3187              	.LASF88:
 3188 00a8 66696C65 		.ascii	"file\000"
 3188      00
 3189              	.LASF42:
 3190 00ad 70726573 		.ascii	"pressure_avg\000"
 3190      73757265 
 3190      5F617667 
 3190      00
 3191              	.LASF4:
 3192 00ba 73686F72 		.ascii	"short int\000"
 3192      7420696E 
 3192      7400
 3193              	.LASF71:
 3194 00c4 50414E49 		.ascii	"PANIC_flag\000"
 3194      435F666C 
 3194      616700
 3195              	.LASF85:
 3196 00cf 79617667 		.ascii	"yavg\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 69


 3196      00
 3197              	.LASF13:
 3198 00d4 75696E74 		.ascii	"uint8_t\000"
 3198      385F7400 
 3199              	.LASF51:
 3200 00dc 70756C73 		.ascii	"pulse\000"
 3200      6500
 3201              	.LASF18:
 3202 00e2 696E7431 		.ascii	"int16\000"
 3202      3600
 3203              	.LASF38:
 3204 00e8 64656369 		.ascii	"decimals\000"
 3204      6D616C73 
 3204      00
 3205              	.LASF19:
 3206 00f1 666C6F61 		.ascii	"float\000"
 3206      7400
 3207              	.LASF50:
 3208 00f7 73746174 		.ascii	"stateMsgCount\000"
 3208      654D7367 
 3208      436F756E 
 3208      7400
 3209              	.LASF10:
 3210 0105 6C6F6E67 		.ascii	"long long int\000"
 3210      206C6F6E 
 3210      6720696E 
 3210      7400
 3211              	.LASF67:
 3212 0113 61766572 		.ascii	"average\000"
 3212      61676500 
 3213              	.LASF31:
 3214 011b 5452414E 		.ascii	"TRANSMIT\000"
 3214      534D4954 
 3214      00
 3215              	.LASF91:
 3216 0124 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3216      4320342E 
 3216      392E3320 
 3216      32303135 
 3216      30333033 
 3217 0157 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3217      20726576 
 3217      6973696F 
 3217      6E203232 
 3217      31323230 
 3218 018a 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3218      66756E63 
 3218      74696F6E 
 3218      2D736563 
 3218      74696F6E 
 3219              	.LASF54:
 3220 01b2 74656E73 		.ascii	"tens\000"
 3220      00
 3221              	.LASF39:
 3222 01b7 766F6C74 		.ascii	"voltage\000"
 3222      61676500 
 3223              	.LASF89:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 70


 3224 01bf 766F6C75 		.ascii	"volume\000"
 3224      6D6500
 3225              	.LASF63:
 3226 01c6 70726573 		.ascii	"press_id\000"
 3226      735F6964 
 3226      00
 3227              	.LASF52:
 3228 01cf 73656373 		.ascii	"secs_for_tilt\000"
 3228      5F666F72 
 3228      5F74696C 
 3228      7400
 3229              	.LASF49:
 3230 01dd 7472616E 		.ascii	"transbuf\000"
 3230      73627566 
 3230      00
 3231              	.LASF32:
 3232 01e6 4552524F 		.ascii	"ERROR\000"
 3232      5200
 3233              	.LASF66:
 3234 01ec 70726573 		.ascii	"pressure_sum\000"
 3234      73757265 
 3234      5F73756D 
 3234      00
 3235              	.LASF93:
 3236 01f9 433A5C55 		.ascii	"C:\\Users\\gstoll\\Desktop\\Project_O-Vac\\Full_wo_"
 3236      73657273 
 3236      5C677374 
 3236      6F6C6C5C 
 3236      4465736B 
 3237 0227 6661696C 		.ascii	"failsafes.cydsn\000"
 3237      73616665 
 3237      732E6379 
 3237      64736E00 
 3238              	.LASF25:
 3239 0237 6C6F6E67 		.ascii	"long double\000"
 3239      20646F75 
 3239      626C6500 
 3240              	.LASF27:
 3241 0243 57414954 		.ascii	"WAIT_TO_LAUNCH\000"
 3241      5F544F5F 
 3241      4C41554E 
 3241      434800
 3242              	.LASF1:
 3243 0252 756E7369 		.ascii	"unsigned char\000"
 3243      676E6564 
 3243      20636861 
 3243      7200
 3244              	.LASF24:
 3245 0260 46535F46 		.ascii	"FS_FILE\000"
 3245      494C4500 
 3246              	.LASF73:
 3247 0268 636F756E 		.ascii	"countdown\000"
 3247      74646F77 
 3247      6E00
 3248              	.LASF0:
 3249 0272 7369676E 		.ascii	"signed char\000"
 3249      65642063 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 71


 3249      68617200 
 3250              	.LASF11:
 3251 027e 6C6F6E67 		.ascii	"long long unsigned int\000"
 3251      206C6F6E 
 3251      6720756E 
 3251      7369676E 
 3251      65642069 
 3252              	.LASF16:
 3253 0295 75696E74 		.ascii	"uint32_t\000"
 3253      33325F74 
 3253      00
 3254              	.LASF64:
 3255 029e 64617461 		.ascii	"data_time\000"
 3255      5F74696D 
 3255      6500
 3256              	.LASF12:
 3257 02a8 756E7369 		.ascii	"unsigned int\000"
 3257      676E6564 
 3257      20696E74 
 3257      00
 3258              	.LASF40:
 3259 02b5 74656D70 		.ascii	"temp\000"
 3259      00
 3260              	.LASF83:
 3261 02ba 74657374 		.ascii	"testnum\000"
 3261      6E756D00 
 3262              	.LASF5:
 3263 02c2 73686F72 		.ascii	"short unsigned int\000"
 3263      7420756E 
 3263      7369676E 
 3263      65642069 
 3263      6E7400
 3264              	.LASF86:
 3265 02d5 7873756D 		.ascii	"xsum\000"
 3265      00
 3266              	.LASF21:
 3267 02da 63686172 		.ascii	"char\000"
 3267      00
 3268              	.LASF7:
 3269 02df 6C6F6E67 		.ascii	"long int\000"
 3269      20696E74 
 3269      00
 3270              	.LASF94:
 3271 02e8 6D61696E 		.ascii	"main\000"
 3271      00
 3272              	.LASF15:
 3273 02ed 696E7433 		.ascii	"int32_t\000"
 3273      325F7400 
 3274              	.LASF14:
 3275 02f5 696E7431 		.ascii	"int16_t\000"
 3275      365F7400 
 3276              	.LASF17:
 3277 02fd 75696E74 		.ascii	"uint8\000"
 3277      3800
 3278              	.LASF69:
 3279 0303 5F426F6F 		.ascii	"_Bool\000"
 3279      6C00
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 72


 3280              	.LASF82:
 3281 0309 72657365 		.ascii	"reset\000"
 3281      7400
 3282              	.LASF44:
 3283 030f 63757253 		.ascii	"curState\000"
 3283      74617465 
 3283      00
 3284              	.LASF81:
 3285 0318 64657074 		.ascii	"depth\000"
 3285      6800
 3286              	.LASF53:
 3287 031e 7A5F6F66 		.ascii	"z_offset\000"
 3287      66736574 
 3287      00
 3288              	.LASF48:
 3289 0327 72657375 		.ascii	"resurfbuf\000"
 3289      72666275 
 3289      6600
 3290              	.LASF77:
 3291 0331 7278666C 		.ascii	"rxflag\000"
 3291      616700
 3292              	.LASF61:
 3293 0338 62756666 		.ascii	"buffer\000"
 3293      657200
 3294              	.LASF36:
 3295 033f 436F756E 		.ascii	"Countdown_ISR_Handler\000"
 3295      74646F77 
 3295      6E5F4953 
 3295      525F4861 
 3295      6E646C65 
 3296              	.LASF92:
 3297 0355 6D61696E 		.ascii	"main.c\000"
 3297      2E6300
 3298              	.LASF22:
 3299 035c 72656738 		.ascii	"reg8\000"
 3299      00
 3300              	.LASF9:
 3301 0361 6C6F6E67 		.ascii	"long unsigned int\000"
 3301      20756E73 
 3301      69676E65 
 3301      6420696E 
 3301      7400
 3302              	.LASF28:
 3303 0373 44455343 		.ascii	"DESCENDING\000"
 3303      454E4449 
 3303      4E4700
 3304              	.LASF78:
 3305 037e 62797465 		.ascii	"bytes\000"
 3305      7300
 3306              	.LASF20:
 3307 0384 646F7562 		.ascii	"double\000"
 3307      6C6500
 3308              	.LASF8:
 3309 038b 5F5F7569 		.ascii	"__uint32_t\000"
 3309      6E743332 
 3309      5F7400
 3310              	.LASF43:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 73


 3311 0396 74656D70 		.ascii	"tempbuf\000"
 3311      62756600 
 3312              	.LASF6:
 3313 039e 5F5F696E 		.ascii	"__int32_t\000"
 3313      7433325F 
 3313      7400
 3314              	.LASF3:
 3315 03a8 5F5F696E 		.ascii	"__int16_t\000"
 3315      7431365F 
 3315      7400
 3316              	.LASF45:
 3317 03b2 64657363 		.ascii	"descendbuf\000"
 3317      656E6462 
 3317      756600
 3318              	.LASF23:
 3319 03bd 73697A65 		.ascii	"sizetype\000"
 3319      74797065 
 3319      00
 3320              	.LASF56:
 3321 03c6 53445F52 		.ascii	"SD_Result\000"
 3321      6573756C 
 3321      7400
 3322              	.LASF72:
 3323 03d0 53544154 		.ascii	"STATE\000"
 3323      4500
 3324              	.LASF41:
 3325 03d6 6F757470 		.ascii	"output\000"
 3325      757400
 3326              	.LASF87:
 3327 03dd 7973756D 		.ascii	"ysum\000"
 3327      00
 3328              	.LASF68:
 3329 03e2 636F6C6C 		.ascii	"collect_flag\000"
 3329      6563745F 
 3329      666C6167 
 3329      00
 3330              	.LASF37:
 3331 03ef 72785F69 		.ascii	"rx_interrupt\000"
 3331      6E746572 
 3331      72757074 
 3331      00
 3332              	.LASF59:
 3333 03fc 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3333      52784275 
 3333      66666572 
 3333      00
 3334              	.LASF95:
 3335 0409 53445F53 		.ascii	"SD_SETUP\000"
 3335      45545550 
 3335      00
 3336              	.LASF58:
 3337 0412 73756363 		.ascii	"success\000"
 3337      65737300 
 3338              	.LASF84:
 3339 041a 78617667 		.ascii	"xavg\000"
 3339      00
 3340              	.LASF35:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccXrYmz4.s 			page 74


 3341 041f 53616D70 		.ascii	"Sample_ISR_Handler\000"
 3341      6C655F49 
 3341      53525F48 
 3341      616E646C 
 3341      657200
 3342              	.LASF90:
 3343 0432 66736669 		.ascii	"fsfile\000"
 3343      6C6500
 3344              	.LASF46:
 3345 0439 6C616E64 		.ascii	"landedbuf\000"
 3345      65646275 
 3345      6600
 3346              	.LASF70:
 3347 0443 77616974 		.ascii	"wait_flag\000"
 3347      5F666C61 
 3347      6700
 3348              	.LASF2:
 3349 044d 5F5F7569 		.ascii	"__uint8_t\000"
 3349      6E74385F 
 3349      7400
 3350              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

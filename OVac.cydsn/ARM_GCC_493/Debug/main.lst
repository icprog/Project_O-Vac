ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	devAddr,1,1
  19              		.comm	buffer,22,4
  20              		.global	Addr
  21              		.data
  22              		.align	2
  23              		.type	Addr, %object
  24              		.size	Addr, 4
  25              	Addr:
  26 0000 3F000000 		.word	63
  27              		.global	id
  28              		.align	2
  29              		.type	id, %object
  30              		.size	id, 4
  31              	id:
  32 0004 01000000 		.word	1
  33              		.global	press_id
  34              		.align	2
  35              		.type	press_id, %object
  36              		.size	press_id, 4
  37              	press_id:
  38 0008 01000000 		.word	1
  39              		.global	data_time
  40              		.bss
  41              		.align	2
  42              		.type	data_time, %object
  43              		.size	data_time, 4
  44              	data_time:
  45 0000 00000000 		.space	4
  46              		.global	sum
  47              		.align	2
  48              		.type	sum, %object
  49              		.size	sum, 4
  50              	sum:
  51 0004 00000000 		.space	4
  52              		.global	pressure_sum
  53              		.align	2
  54              		.type	pressure_sum, %object
  55              		.size	pressure_sum, 4
  56              	pressure_sum:
  57 0008 00000000 		.space	4
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 2


  58              		.global	average
  59              		.align	1
  60              		.type	average, %object
  61              		.size	average, 2
  62              	average:
  63 000c 0000     		.space	2
  64              		.global	collect_flag
  65              		.type	collect_flag, %object
  66              		.size	collect_flag, 1
  67              	collect_flag:
  68 000e 00       		.space	1
  69              		.global	wait_flag
  70              		.type	wait_flag, %object
  71              		.size	wait_flag, 1
  72              	wait_flag:
  73 000f 00       		.space	1
  74              		.global	PANIC_flag
  75              		.type	PANIC_flag, %object
  76              		.size	PANIC_flag, 1
  77              	PANIC_flag:
  78 0010 00       		.space	1
  79              		.global	STATE
  80              		.data
  81              		.type	STATE, %object
  82              		.size	STATE, 1
  83              	STATE:
  84 000c 01       		.byte	1
  85              		.global	testnum
  86              		.type	testnum, %object
  87              		.size	testnum, 1
  88              	testnum:
  89 000d 01       		.byte	1
  90              		.global	countdown
  91              		.bss
  92              		.type	countdown, %object
  93              		.size	countdown, 1
  94              	countdown:
  95 0011 00       		.space	1
  96              		.global	update_Data
  97              		.type	update_Data, %object
  98              		.size	update_Data, 1
  99              	update_Data:
 100 0012 00       		.space	1
 101              		.global	RxBuffer
 102 0013 00       		.align	2
 103              		.type	RxBuffer, %object
 104              		.size	RxBuffer, 64
 105              	RxBuffer:
 106 0014 00000000 		.space	64
 106      00000000 
 106      00000000 
 106      00000000 
 106      00000000 
 107              		.global	msg_count
 108              		.align	2
 109              		.type	msg_count, %object
 110              		.size	msg_count, 4
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 3


 111              	msg_count:
 112 0054 00000000 		.space	4
 113              		.global	rxflag
 114              		.align	2
 115              		.type	rxflag, %object
 116              		.size	rxflag, 4
 117              	rxflag:
 118 0058 00000000 		.space	4
 119              		.global	bytes
 120              		.align	2
 121              		.type	bytes, %object
 122              		.size	bytes, 4
 123              	bytes:
 124 005c 00000000 		.space	4
 125              		.global	dataflag
 126              		.align	2
 127              		.type	dataflag, %object
 128              		.size	dataflag, 4
 129              	dataflag:
 130 0060 00000000 		.space	4
 131              		.global	transmit_flag
 132              		.align	2
 133              		.type	transmit_flag, %object
 134              		.size	transmit_flag, 4
 135              	transmit_flag:
 136 0064 00000000 		.space	4
 137              		.global	depth
 138              		.align	2
 139              		.type	depth, %object
 140              		.size	depth, 4
 141              	depth:
 142 0068 00000000 		.space	4
 143              		.global	reset
 144              		.align	2
 145              		.type	reset, %object
 146              		.size	reset, 4
 147              	reset:
 148 006c 00000000 		.space	4
 149              		.global	file
 150              		.data
 151 000e 0000     		.align	2
 152              		.type	file, %object
 153              		.size	file, 11
 154              	file:
 155 0010 74657374 		.ascii	"test_1.txt\000"
 155      5F312E74 
 155      787400
 156              		.global	volume
 157 001b 00       		.bss
 158              		.align	2
 159              		.type	volume, %object
 160              		.size	volume, 10
 161              	volume:
 162 0070 00000000 		.space	10
 162      00000000 
 162      0000
 163              		.comm	fsfile,4,4
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 4


 164 007a 0000     		.section	.text.Moisture_ISR_Handler,"ax",%progbits
 165              		.align	2
 166              		.global	Moisture_ISR_Handler
 167              		.thumb
 168              		.thumb_func
 169              		.type	Moisture_ISR_Handler, %function
 170              	Moisture_ISR_Handler:
 171              	.LFB63:
 172              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 2.20
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   This is a source code for example project of ADC single ended mode.
   8:main.c        **** *
   9:main.c        **** *   Variable resistor(pot) is connected to +ve input of ADC using the I/O pin.
  10:main.c        **** *   P0.0. When voltage to positive terminal of ADC is 0, the output displayed
  11:main.c        **** *   on the LCD pannel is 0x0000. As voltage on positive terminal goes on
  12:main.c        **** *   increasing, the  converted value goes on increasing from 0x0000 and reaches
  13:main.c        **** *   0xFFFF when voltage becomes 1.024V. Futher increase in voltage value,
  14:main.c        **** *   doesn't cause any changes to values displayed in the LCD.
  15:main.c        **** *
  16:main.c        **** * Hardware Connections: 
  17:main.c        **** *  Connect analog input from Variable resistor to port P0[0] of DVK1 board.
  18:main.c        **** *
  19:main.c        **** ********************************************************************************
  20:main.c        **** * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  21:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  22:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  23:main.c        **** * Therefore, you may use this software only as provided in the license agreement
  24:main.c        **** * accompanying the software package from which you obtained this software.
  25:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  26:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  27:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <project.h>
  31:main.c        **** #include <mpu6050.h>
  32:main.c        **** #include <stdio.h>
  33:main.c        **** #include <string.h>
  34:main.c        **** #include <FS.h>
  35:main.c        **** #include "LiquidCrystal_I2C.h"
  36:main.c        **** #include "functions.h"
  37:main.c        **** 
  38:main.c        **** #define MPU6050 
  39:main.c        **** #define LCD
  40:main.c        **** #define SD
  41:main.c        **** #define BT
  42:main.c        **** 
  43:main.c        **** #define MA_WINDOW 15                    // Number of samples in the moving average window.
  44:main.c        **** #define BOT_THRESHOLD 20000             // Z-Aacceleration threshold for transition into LANDED sta
  45:main.c        **** #define WAIT_TIME 1000                  // Number of ISR calls until transition into DESCENDING sta
  46:main.c        **** #define DATA_TIME 5000                  // Number of ISR calls until transition into WAIT_TO_LAUNCH
  47:main.c        **** #define BUFFER_LEN  64u                 // Buffer length for UART rx
  48:main.c        **** 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 5


  49:main.c        **** 
  50:main.c        **** uint32_t Addr = 0x3F;                       // I2C address of LCD.
  51:main.c        **** long id = 1, press_id = 1;                 // Interrupt count.
  52:main.c        **** long data_time = 0;                        // data point num
  53:main.c        **** 
  54:main.c        **** long sum = 0;                               // Sum of accelerometer values
  55:main.c        **** float pressure_sum = 0;                     // Sum of pressure values. 
  56:main.c        **** int16_t average = 0;                        // Moving average variable, accelerometer.
  57:main.c        **** bool collect_flag = 0;                      // flag indicating when to record acceleration sample.
  58:main.c        **** bool wait_flag = 0;                         // flag indicating when to increment interrupt counter.
  59:main.c        **** bool PANIC_flag = 0;                        // flag indicating water is present in housing.
  60:main.c        **** //bool first_test = 1;                        // flag indicating first test(longer countdown)
  61:main.c        **** STATES STATE = WAIT_TO_LAUNCH;                  // Set initial state. 
  62:main.c        **** uint8_t testnum = 1, countdown = 0, update_Data = 0;
  63:main.c        **** uint8_t RxBuffer[BUFFER_LEN] = {};            // Rx Buffer
  64:main.c        **** int msg_count = 0, rxflag = 0, bytes = 0, dataflag = 0, transmit_flag = 0;    // UART variables
  65:main.c        **** int depth = 0, reset = 0;                                                  // Variable depth
  66:main.c        **** char file[11] = "test_1.txt";
  67:main.c        **** char volume[10] = {};
  68:main.c        **** FS_FILE *fsfile;
  69:main.c        **** 
  70:main.c        **** /*******************************************************************************
  71:main.c        **** * Function Name: main
  72:main.c        **** ********************************************************************************
  73:main.c        **** *
  74:main.c        **** * Summary:
  75:main.c        **** *  main() performs following functions:
  76:main.c        **** *  1: Initializes the LCD.
  77:main.c        **** *  2: Initializes timer module and sampling interrupt.
  78:main.c        **** *  3: Initializes MPU6050 Accelerometer/Gyroscope module.
  79:main.c        **** *  4: Samples Z-axis acceleration data from module @ 500hz.
  80:main.c        **** *  5: Computes moving average of Z-axis acceleration values.
  81:main.c        **** *  6: Transitions from DESCENDING to LANDED state when sudden acceleration occurs
  82:main.c        **** *     (ie. moving average > 200000).
  83:main.c        **** *
  84:main.c        **** * Parameters:
  85:main.c        **** *  None.
  86:main.c        **** *
  87:main.c        **** * Return:
  88:main.c        **** *  None.
  89:main.c        **** *
  90:main.c        **** *******************************************************************************/
  91:main.c        **** 
  92:main.c        **** int SD_SETUP(char* filename); //SD card setup function
  93:main.c        **** 
  94:main.c        **** /* Moisture sensor ISR */
  95:main.c        **** CY_ISR (Moisture_ISR_Handler){
 173              		.loc 1 95 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177 0000 80B5     		push	{r7, lr}
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 00AF     		add	r7, sp, #0
 182              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 6


  96:main.c        ****     PANIC_flag = 1;                             // Set flag to indicate water
 183              		.loc 1 96 0
 184 0004 044B     		ldr	r3, .L2
 185 0006 0122     		movs	r2, #1
 186 0008 1A70     		strb	r2, [r3]
  97:main.c        ****     STATE = RESURFACE;                          // Go to surface
 187              		.loc 1 97 0
 188 000a 044B     		ldr	r3, .L2+4
 189 000c 0422     		movs	r2, #4
 190 000e 1A70     		strb	r2, [r3]
  98:main.c        ****     Comp_Stop();                                // Stop comparator for interrupt
 191              		.loc 1 98 0
 192 0010 FFF7FEFF 		bl	Comp_Stop
  99:main.c        **** }
 193              		.loc 1 99 0
 194 0014 80BD     		pop	{r7, pc}
 195              	.L3:
 196 0016 00BF     		.align	2
 197              	.L2:
 198 0018 00000000 		.word	PANIC_flag
 199 001c 00000000 		.word	STATE
 200              		.cfi_endproc
 201              	.LFE63:
 202              		.size	Moisture_ISR_Handler, .-Moisture_ISR_Handler
 203              		.section	.text.Sample_ISR_Handler,"ax",%progbits
 204              		.align	2
 205              		.global	Sample_ISR_Handler
 206              		.thumb
 207              		.thumb_func
 208              		.type	Sample_ISR_Handler, %function
 209              	Sample_ISR_Handler:
 210              	.LFB64:
 100:main.c        **** 
 101:main.c        **** /* Sampling ISR */
 102:main.c        **** CY_ISR (Sample_ISR_Handler){
 211              		.loc 1 102 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 216 0000 80B4     		push	{r7}
 217              		.cfi_def_cfa_offset 4
 218              		.cfi_offset 7, -4
 219 0002 00AF     		add	r7, sp, #0
 220              		.cfi_def_cfa_register 7
 103:main.c        ****     Sample_Timer_STATUS;                        // Clears interrupt by accessing timer status regis
 221              		.loc 1 103 0
 222 0004 084B     		ldr	r3, .L6
 223 0006 1B78     		ldrb	r3, [r3]
 104:main.c        ****     if (STATE == DESCENDING){ 
 224              		.loc 1 104 0
 225 0008 084B     		ldr	r3, .L6+4
 226 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 227 000c 022B     		cmp	r3, #2
 228 000e 07D1     		bne	.L4
 105:main.c        ****         collect_flag = 1;
 229              		.loc 1 105 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 7


 230 0010 074B     		ldr	r3, .L6+8
 231 0012 0122     		movs	r2, #1
 232 0014 1A70     		strb	r2, [r3]
 106:main.c        ****         data_time++;
 233              		.loc 1 106 0
 234 0016 074B     		ldr	r3, .L6+12
 235 0018 1B68     		ldr	r3, [r3]
 236 001a 0133     		adds	r3, r3, #1
 237 001c 054A     		ldr	r2, .L6+12
 238 001e 1360     		str	r3, [r2]
 239              	.L4:
 107:main.c        ****     }
 108:main.c        **** }
 240              		.loc 1 108 0
 241 0020 BD46     		mov	sp, r7
 242              		.cfi_def_cfa_register 13
 243              		@ sp needed
 244 0022 5DF8047B 		ldr	r7, [sp], #4
 245              		.cfi_restore 7
 246              		.cfi_def_cfa_offset 0
 247 0026 7047     		bx	lr
 248              	.L7:
 249              		.align	2
 250              	.L6:
 251 0028 034F0040 		.word	1073762051
 252 002c 00000000 		.word	STATE
 253 0030 00000000 		.word	collect_flag
 254 0034 00000000 		.word	data_time
 255              		.cfi_endproc
 256              	.LFE64:
 257              		.size	Sample_ISR_Handler, .-Sample_ISR_Handler
 258              		.section	.text.Countdown_ISR_Handler,"ax",%progbits
 259              		.align	2
 260              		.global	Countdown_ISR_Handler
 261              		.thumb
 262              		.thumb_func
 263              		.type	Countdown_ISR_Handler, %function
 264              	Countdown_ISR_Handler:
 265              	.LFB65:
 109:main.c        **** 
 110:main.c        **** /* Countdown ISR*/
 111:main.c        **** CY_ISR (Countdown_ISR_Handler){
 266              		.loc 1 111 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 271 0000 80B4     		push	{r7}
 272              		.cfi_def_cfa_offset 4
 273              		.cfi_offset 7, -4
 274 0002 00AF     		add	r7, sp, #0
 275              		.cfi_def_cfa_register 7
 112:main.c        ****     Countdown_timer_STATUS;                        // Clears interrupt by accessing timer status re
 276              		.loc 1 112 0
 277 0004 184B     		ldr	r3, .L13
 278 0006 1B78     		ldrb	r3, [r3]
 113:main.c        ****     if (STATE == DESCENDING || STATE == LANDED || STATE == RESURFACE){
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 8


 279              		.loc 1 113 0
 280 0008 184B     		ldr	r3, .L13+4
 281 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 282 000c 022B     		cmp	r3, #2
 283 000e 07D0     		beq	.L9
 284              		.loc 1 113 0 is_stmt 0 discriminator 1
 285 0010 164B     		ldr	r3, .L13+4
 286 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 0014 032B     		cmp	r3, #3
 288 0016 03D0     		beq	.L9
 289              		.loc 1 113 0 discriminator 2
 290 0018 144B     		ldr	r3, .L13+4
 291 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 292 001c 042B     		cmp	r3, #4
 293 001e 02D1     		bne	.L10
 294              	.L9:
 114:main.c        ****         wait_flag = 1;
 295              		.loc 1 114 0 is_stmt 1
 296 0020 134B     		ldr	r3, .L13+8
 297 0022 0122     		movs	r2, #1
 298 0024 1A70     		strb	r2, [r3]
 299              	.L10:
 115:main.c        ****     }
 116:main.c        ****     #ifdef BT
 117:main.c        ****         if (STATE == TRANSMIT || (STATE == WAIT_TO_LAUNCH && !dataflag)){
 300              		.loc 1 117 0
 301 0026 114B     		ldr	r3, .L13+4
 302 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 303 002a 052B     		cmp	r3, #5
 304 002c 07D0     		beq	.L11
 305              		.loc 1 117 0 is_stmt 0 discriminator 1
 306 002e 0F4B     		ldr	r3, .L13+4
 307 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 308 0032 012B     		cmp	r3, #1
 309 0034 13D1     		bne	.L8
 310              		.loc 1 117 0 discriminator 2
 311 0036 0F4B     		ldr	r3, .L13+12
 312 0038 1B68     		ldr	r3, [r3]
 313 003a 002B     		cmp	r3, #0
 314 003c 0FD1     		bne	.L8
 315              	.L11:
 118:main.c        ****             update_Data++;
 316              		.loc 1 118 0 is_stmt 1
 317 003e 0E4B     		ldr	r3, .L13+16
 318 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 319 0042 0133     		adds	r3, r3, #1
 320 0044 DAB2     		uxtb	r2, r3
 321 0046 0C4B     		ldr	r3, .L13+16
 322 0048 1A70     		strb	r2, [r3]
 119:main.c        ****             if (update_Data == 100){
 323              		.loc 1 119 0
 324 004a 0B4B     		ldr	r3, .L13+16
 325 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 326 004e 642B     		cmp	r3, #100
 327 0050 05D1     		bne	.L8
 120:main.c        ****                 transmit_flag = 1;
 328              		.loc 1 120 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 9


 329 0052 0A4B     		ldr	r3, .L13+20
 330 0054 0122     		movs	r2, #1
 331 0056 1A60     		str	r2, [r3]
 121:main.c        ****                 update_Data = 0;
 332              		.loc 1 121 0
 333 0058 074B     		ldr	r3, .L13+16
 334 005a 0022     		movs	r2, #0
 335 005c 1A70     		strb	r2, [r3]
 336              	.L8:
 122:main.c        ****             }
 123:main.c        ****         }          
 124:main.c        ****     #endif
 125:main.c        **** }
 337              		.loc 1 125 0
 338 005e BD46     		mov	sp, r7
 339              		.cfi_def_cfa_register 13
 340              		@ sp needed
 341 0060 5DF8047B 		ldr	r7, [sp], #4
 342              		.cfi_restore 7
 343              		.cfi_def_cfa_offset 0
 344 0064 7047     		bx	lr
 345              	.L14:
 346 0066 00BF     		.align	2
 347              	.L13:
 348 0068 6D640040 		.word	1073767533
 349 006c 00000000 		.word	STATE
 350 0070 00000000 		.word	wait_flag
 351 0074 00000000 		.word	dataflag
 352 0078 00000000 		.word	update_Data
 353 007c 00000000 		.word	transmit_flag
 354              		.cfi_endproc
 355              	.LFE65:
 356              		.size	Countdown_ISR_Handler, .-Countdown_ISR_Handler
 357              		.section	.text.rx_interrupt,"ax",%progbits
 358              		.align	2
 359              		.global	rx_interrupt
 360              		.thumb
 361              		.thumb_func
 362              		.type	rx_interrupt, %function
 363              	rx_interrupt:
 364              	.LFB66:
 126:main.c        **** 
 127:main.c        **** CY_ISR(rx_interrupt){
 365              		.loc 1 127 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 1, uses_anonymous_args = 0
 369 0000 98B5     		push	{r3, r4, r7, lr}
 370              		.cfi_def_cfa_offset 16
 371              		.cfi_offset 3, -16
 372              		.cfi_offset 4, -12
 373              		.cfi_offset 7, -8
 374              		.cfi_offset 14, -4
 375 0002 00AF     		add	r7, sp, #0
 376              		.cfi_def_cfa_register 7
 128:main.c        ****     #ifdef BT
 129:main.c        ****     while (UART_ReadRxStatus() & UART_RX_STS_FIFO_NOTEMPTY){
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 10


 377              		.loc 1 129 0
 378 0004 14E0     		b	.L16
 379              	.L17:
 130:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 380              		.loc 1 130 0
 381 0006 0E4B     		ldr	r3, .L18
 382 0008 1C68     		ldr	r4, [r3]
 383 000a 631C     		adds	r3, r4, #1
 384 000c 0C4A     		ldr	r2, .L18
 385 000e 1360     		str	r3, [r2]
 386 0010 FFF7FEFF 		bl	UART_GetChar
 387 0014 0346     		mov	r3, r0
 388 0016 1A46     		mov	r2, r3
 389 0018 0A4B     		ldr	r3, .L18+4
 390 001a 1A55     		strb	r2, [r3, r4]
 131:main.c        ****         if ((msg_count - 3) >= bytes)
 391              		.loc 1 131 0
 392 001c 084B     		ldr	r3, .L18
 393 001e 1B68     		ldr	r3, [r3]
 394 0020 DA1E     		subs	r2, r3, #3
 395 0022 094B     		ldr	r3, .L18+8
 396 0024 1B68     		ldr	r3, [r3]
 397 0026 9A42     		cmp	r2, r3
 398 0028 02DB     		blt	.L16
 132:main.c        ****             rxflag = 1;
 399              		.loc 1 132 0
 400 002a 084B     		ldr	r3, .L18+12
 401 002c 0122     		movs	r2, #1
 402 002e 1A60     		str	r2, [r3]
 403              	.L16:
 129:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 404              		.loc 1 129 0
 405 0030 FFF7FEFF 		bl	UART_ReadRxStatus
 406 0034 0346     		mov	r3, r0
 407 0036 03F02003 		and	r3, r3, #32
 408 003a 002B     		cmp	r3, #0
 409 003c E3D1     		bne	.L17
 133:main.c        ****     }
 134:main.c        ****     #endif
 135:main.c        **** }
 410              		.loc 1 135 0
 411 003e 98BD     		pop	{r3, r4, r7, pc}
 412              	.L19:
 413              		.align	2
 414              	.L18:
 415 0040 00000000 		.word	msg_count
 416 0044 00000000 		.word	RxBuffer
 417 0048 00000000 		.word	bytes
 418 004c 00000000 		.word	rxflag
 419              		.cfi_endproc
 420              	.LFE66:
 421              		.size	rx_interrupt, .-rx_interrupt
 422              		.section	.text.temp_interrupt,"ax",%progbits
 423              		.align	2
 424              		.global	temp_interrupt
 425              		.thumb
 426              		.thumb_func
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 11


 427              		.type	temp_interrupt, %function
 428              	temp_interrupt:
 429              	.LFB67:
 136:main.c        **** 
 137:main.c        **** CY_ISR(temp_interrupt){
 430              		.loc 1 137 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 1, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 435 0000 80B4     		push	{r7}
 436              		.cfi_def_cfa_offset 4
 437              		.cfi_offset 7, -4
 438 0002 00AF     		add	r7, sp, #0
 439              		.cfi_def_cfa_register 7
 138:main.c        ****     adjust_timer_STATUS;
 440              		.loc 1 138 0
 441 0004 0F4B     		ldr	r3, .L24
 442 0006 1B78     		ldrb	r3, [r3]
 139:main.c        ****     if ((STATE == WAIT_TO_LAUNCH && depth != 0) || STATE == LANDED || STATE == RESURFACE){ 
 443              		.loc 1 139 0
 444 0008 0F4B     		ldr	r3, .L24+4
 445 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 446 000c 012B     		cmp	r3, #1
 447 000e 03D1     		bne	.L21
 448              		.loc 1 139 0 is_stmt 0 discriminator 1
 449 0010 0E4B     		ldr	r3, .L24+8
 450 0012 1B68     		ldr	r3, [r3]
 451 0014 002B     		cmp	r3, #0
 452 0016 07D1     		bne	.L22
 453              	.L21:
 454              		.loc 1 139 0 discriminator 3
 455 0018 0B4B     		ldr	r3, .L24+4
 456 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 457 001c 032B     		cmp	r3, #3
 458 001e 03D0     		beq	.L22
 459              		.loc 1 139 0 discriminator 4
 460 0020 094B     		ldr	r3, .L24+4
 461 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 462 0024 042B     		cmp	r3, #4
 463 0026 08D1     		bne	.L20
 464              	.L22:
 140:main.c        ****         wait_flag = 1;
 465              		.loc 1 140 0 is_stmt 1
 466 0028 094B     		ldr	r3, .L24+12
 467 002a 0122     		movs	r2, #1
 468 002c 1A70     		strb	r2, [r3]
 141:main.c        ****         countdown++;
 469              		.loc 1 141 0
 470 002e 094B     		ldr	r3, .L24+16
 471 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 472 0032 0133     		adds	r3, r3, #1
 473 0034 DAB2     		uxtb	r2, r3
 474 0036 074B     		ldr	r3, .L24+16
 475 0038 1A70     		strb	r2, [r3]
 476              	.L20:
 142:main.c        ****     }
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 12


 143:main.c        **** }
 477              		.loc 1 143 0
 478 003a BD46     		mov	sp, r7
 479              		.cfi_def_cfa_register 13
 480              		@ sp needed
 481 003c 5DF8047B 		ldr	r7, [sp], #4
 482              		.cfi_restore 7
 483              		.cfi_def_cfa_offset 0
 484 0040 7047     		bx	lr
 485              	.L25:
 486 0042 00BF     		.align	2
 487              	.L24:
 488 0044 67650040 		.word	1073767783
 489 0048 00000000 		.word	STATE
 490 004c 00000000 		.word	depth
 491 0050 00000000 		.word	wait_flag
 492 0054 00000000 		.word	countdown
 493              		.cfi_endproc
 494              	.LFE67:
 495              		.size	temp_interrupt, .-temp_interrupt
 496              		.section	.rodata
 497              		.align	2
 498              	.LC6:
 499 0000 50536F43 		.ascii	"PSoC 5LP: O-Vac\000"
 499      20354C50 
 499      3A204F2D 
 499      56616300 
 500              		.align	2
 501              	.LC7:
 502 0010 49324320 		.ascii	"I2C Working\000"
 502      576F726B 
 502      696E6700 
 503              		.align	2
 504              	.LC8:
 505 001c 53442043 		.ascii	"SD CARD READY\000"
 505      41524420 
 505      52454144 
 505      5900
 506 002a 0000     		.align	2
 507              	.LC9:
 508 002c 53442046 		.ascii	"SD FAILED\000"
 508      41494C45 
 508      4400
 509              		.global	__aeabi_i2f
 510              		.global	__aeabi_f2d
 511              		.global	__aeabi_dmul
 512              		.global	__aeabi_d2f
 513              		.global	__aeabi_fadd
 514              		.global	__aeabi_fdiv
 515              		.global	__aeabi_f2iz
 516              		.global	__aeabi_fsub
 517              		.global	__aeabi_fmul
 518 0036 0000     		.align	2
 519              	.LC10:
 520 0038 70726573 		.ascii	"pressure: %d.%04d, %d\012\000"
 520      73757265 
 520      3A202564 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 13


 520      2E253034 
 520      642C2025 
 521 004f 00       		.align	2
 522              	.LC11:
 523 0050 542D6D69 		.ascii	"T-minus %d seconds\012\000"
 523      6E757320 
 523      25642073 
 523      65636F6E 
 523      64730A00 
 524              		.align	2
 525              	.LC12:
 526 0064 0A256420 		.ascii	"\012%d seconds remaining\000"
 526      7365636F 
 526      6E647320 
 526      72656D61 
 526      696E696E 
 527 007a 0000     		.align	2
 528              	.LC13:
 529 007c 53544154 		.ascii	"STATE: DESCENT\000"
 529      453A2044 
 529      45534345 
 529      4E5400
 530 008b 00       		.align	2
 531              	.LC14:
 532 008c 53544154 		.ascii	"STATE: LANDED\000"
 532      453A204C 
 532      414E4445 
 532      4400
 533 009a 0000     		.align	2
 534              	.LC15:
 535 009c 53544154 		.ascii	"STATE: LANDED ***********\012\000"
 535      453A204C 
 535      414E4445 
 535      44202A2A 
 535      2A2A2A2A 
 536 00b7 00       		.align	2
 537              	.LC16:
 538 00b8 56414355 		.ascii	"VACUUMING\000"
 538      554D494E 
 538      4700
 539 00c2 0000     		.align	2
 540              	.LC17:
 541 00c4 53544154 		.ascii	"STATE: VACUUMING ***********\012\000"
 541      453A2056 
 541      41435555 
 541      4D494E47 
 541      202A2A2A 
 542 00e2 0000     		.align	2
 543              	.LC18:
 544 00e4 53544154 		.ascii	"STATE: WAIT\000"
 544      453A2057 
 544      41495400 
 545              		.align	2
 546              	.LC19:
 547 00f0 53544154 		.ascii	"STATE: RESURFACING\000"
 547      453A2052 
 547      45535552 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 14


 547      46414349 
 547      4E4700
 548 0103 00       		.align	2
 549              	.LC20:
 550 0104 53544154 		.ascii	"STATE: RESURFACING ***********\012\000"
 550      453A2052 
 550      45535552 
 550      46414349 
 550      4E47202A 
 551              		.align	2
 552              	.LC21:
 553 0124 57415445 		.ascii	"WATER DETECTED\000"
 553      52204445 
 553      54454354 
 553      454400
 554 0133 00       		.align	2
 555              	.LC22:
 556 0134 74657374 		.ascii	"test%d.txt\000"
 556      25642E74 
 556      787400
 557 013f 00       		.align	2
 558              	.LC23:
 559 0140 7700     		.ascii	"w\000"
 560 0142 0000     		.align	2
 561              	.LC24:
 562 0144 5452414E 		.ascii	"TRANSMIT\000"
 562      534D4954 
 562      00
 563 014d 000000   		.align	2
 564              	.LC25:
 565 0150 53544154 		.ascii	"STATE: TRANSMIT ***********\012\000"
 565      453A2054 
 565      52414E53 
 565      4D495420 
 565      2A2A2A2A 
 566 016d 000000   		.align	2
 567              	.LC0:
 568 0170 53595354 		.ascii	"SYSTEM_CHECK\000"
 568      454D5F43 
 568      4845434B 
 568      00
 569 017d 00       		.space	1
 570 017e 0000     		.align	2
 571              	.LC1:
 572 0180 0A535441 		.ascii	"\012STATE: DESCENDING\012\000"
 572      54453A20 
 572      44455343 
 572      454E4449 
 572      4E470A00 
 573              		.align	2
 574              	.LC2:
 575 0194 53544154 		.ascii	"STATE: LANDED\012\000"
 575      453A204C 
 575      414E4445 
 575      440A00
 576 01a3 00       		.align	2
 577              	.LC3:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 15


 578 01a4 53544154 		.ascii	"STATE: VACUUMING\012\000"
 578      453A2056 
 578      41435555 
 578      4D494E47 
 578      0A00
 579 01b6 0000     		.align	2
 580              	.LC4:
 581 01b8 53544154 		.ascii	"STATE: RESURFACE\012\000"
 581      453A2052 
 581      45535552 
 581      46414345 
 581      0A00
 582 01ca 0000     		.align	2
 583              	.LC5:
 584 01cc 53544154 		.ascii	"STATE: TRANSMIT\012\000"
 584      453A2054 
 584      52414E53 
 584      4D49540A 
 584      00
 585              		.section	.text.main,"ax",%progbits
 586              		.align	2
 587              		.global	main
 588              		.thumb
 589              		.thumb_func
 590              		.type	main, %function
 591              	main:
 592              	.LFB68:
 144:main.c        **** 
 145:main.c        **** int main()
 146:main.c        **** {
 593              		.loc 1 146 0
 594              		.cfi_startproc
 595              		@ args = 0, pretend = 0, frame = 296
 596              		@ frame_needed = 1, uses_anonymous_args = 0
 597 0000 B0B5     		push	{r4, r5, r7, lr}
 598              		.cfi_def_cfa_offset 16
 599              		.cfi_offset 4, -16
 600              		.cfi_offset 5, -12
 601              		.cfi_offset 7, -8
 602              		.cfi_offset 14, -4
 603 0002 CCB0     		sub	sp, sp, #304
 604              		.cfi_def_cfa_offset 320
 605 0004 02AF     		add	r7, sp, #8
 606              		.cfi_def_cfa 7, 312
 147:main.c        ****     int num = 0, decimals = 0;                                       // ADC Voltage conversion plac
 607              		.loc 1 147 0
 608 0006 0023     		movs	r3, #0
 609 0008 C7F81831 		str	r3, [r7, #280]
 610 000c 0023     		movs	r3, #0
 611 000e C7F81431 		str	r3, [r7, #276]
 148:main.c        ****     float voltage = 0, temp = 0, output = 0, pressure_avg = 0;       // ADC Voltage conversion vari
 612              		.loc 1 148 0
 613 0012 4FF00003 		mov	r3, #0
 614 0016 C7F81031 		str	r3, [r7, #272]	@ float
 615 001a 4FF00003 		mov	r3, #0
 616 001e C7F80C31 		str	r3, [r7, #268]	@ float
 617 0022 4FF00003 		mov	r3, #0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 16


 618 0026 C7F80831 		str	r3, [r7, #264]	@ float
 619 002a 4FF00003 		mov	r3, #0
 620 002e C7F82431 		str	r3, [r7, #292]	@ float
 149:main.c        ****     char buf[50], tempbuf[20] = {}, curState[14] = "SYSTEM_CHECK";  // buffers, UART and initial st
 621              		.loc 1 149 0
 622 0032 07F1B403 		add	r3, r7, #180
 623 0036 0022     		movs	r2, #0
 624 0038 1A60     		str	r2, [r3]
 625 003a 0433     		adds	r3, r3, #4
 626 003c 0022     		movs	r2, #0
 627 003e 1A60     		str	r2, [r3]
 628 0040 0433     		adds	r3, r3, #4
 629 0042 0022     		movs	r2, #0
 630 0044 1A60     		str	r2, [r3]
 631 0046 0433     		adds	r3, r3, #4
 632 0048 0022     		movs	r2, #0
 633 004a 1A60     		str	r2, [r3]
 634 004c 0433     		adds	r3, r3, #4
 635 004e 0022     		movs	r2, #0
 636 0050 1A60     		str	r2, [r3]
 637 0052 0433     		adds	r3, r3, #4
 638 0054 7C4B     		ldr	r3, .L86+8
 639 0056 07F1A404 		add	r4, r7, #164
 640 005a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 641 005c 07C4     		stmia	r4!, {r0, r1, r2}
 642 005e 2370     		strb	r3, [r4]
 643 0060 0023     		movs	r3, #0
 644 0062 87F8B130 		strb	r3, [r7, #177]
 150:main.c        ****     char descendbuf[DESCENDING_LEN] = STATE_DESCENDING;             // buffers for transmitting sta
 645              		.loc 1 150 0
 646 0066 794B     		ldr	r3, .L86+12
 647 0068 07F19004 		add	r4, r7, #144
 648 006c 1D46     		mov	r5, r3
 649 006e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 650 0070 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 651 0072 2B68     		ldr	r3, [r5]
 652 0074 1A46     		mov	r2, r3	@ movhi
 653 0076 2280     		strh	r2, [r4]	@ movhi
 654 0078 0234     		adds	r4, r4, #2
 655 007a 1B0C     		lsrs	r3, r3, #16
 656 007c 2370     		strb	r3, [r4]
 151:main.c        ****     char landedbuf[LANDED_LEN] = STATE_LANDED;              
 657              		.loc 1 151 0
 658 007e 744B     		ldr	r3, .L86+16
 659 0080 07F18004 		add	r4, r7, #128
 660 0084 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 661 0086 07C4     		stmia	r4!, {r0, r1, r2}
 662 0088 2380     		strh	r3, [r4]	@ movhi
 152:main.c        ****     char vacuumbuf[VACUUM_LEN] = STATE_VACUUM;
 663              		.loc 1 152 0
 664 008a 724B     		ldr	r3, .L86+20
 665 008c 07F16C04 		add	r4, r7, #108
 666 0090 1D46     		mov	r5, r3
 667 0092 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 668 0094 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 669 0096 2B68     		ldr	r3, [r5]
 670 0098 2370     		strb	r3, [r4]
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 17


 153:main.c        ****     char resurfbuf[RESURFACE_LEN] = STATE_RESURFACE;
 671              		.loc 1 153 0
 672 009a 6F4B     		ldr	r3, .L86+24
 673 009c 07F15804 		add	r4, r7, #88
 674 00a0 1D46     		mov	r5, r3
 675 00a2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 676 00a4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 677 00a6 2B68     		ldr	r3, [r5]
 678 00a8 2370     		strb	r3, [r4]
 154:main.c        ****     char transbuf[TRANSMIT_LEN] = STATE_TRANSMIT;
 679              		.loc 1 154 0
 680 00aa 6C4B     		ldr	r3, .L86+28
 681 00ac 07F14804 		add	r4, r7, #72
 682 00b0 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 683 00b2 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 155:main.c        ****     int stateMsgCount = 0;
 684              		.loc 1 155 0
 685 00b6 0023     		movs	r3, #0
 686 00b8 C7F82031 		str	r3, [r7, #288]
 156:main.c        ****     
 157:main.c        ****     int16_t ax, ay, az, i;
 158:main.c        ****     int16_t gx, gy, gz;
 159:main.c        ****     int16_t z_offset = 0;
 687              		.loc 1 159 0
 688 00bc 0023     		movs	r3, #0
 689 00be A7F80631 		strh	r3, [r7, #262]	@ movhi
 160:main.c        ****     int tens = 0, ones = 0;                     // digit place variables for message len of bluetoo
 690              		.loc 1 160 0
 691 00c2 0023     		movs	r3, #0
 692 00c4 7B64     		str	r3, [r7, #68]
 693 00c6 0023     		movs	r3, #0
 694 00c8 C7F80031 		str	r3, [r7, #256]
 161:main.c        ****     
 162:main.c        ****     /* Start the components */
 163:main.c        ****     CYGlobalIntEnable;                          // enable global interrupts
 695              		.loc 1 163 0
 696              	@ 163 "main.c" 1
 697 00cc 62B6     		CPSIE   i
 698              	@ 0 "" 2
 164:main.c        ****     I2C_Master_Start(); 
 699              		.loc 1 164 0
 700              		.thumb
 701 00ce FFF7FEFF 		bl	I2C_Master_Start
 165:main.c        ****     ADC_Start();
 702              		.loc 1 165 0
 703 00d2 FFF7FEFF 		bl	ADC_Start
 166:main.c        ****     Sample_Timer_Start();                       // start timer module
 704              		.loc 1 166 0
 705 00d6 FFF7FEFF 		bl	Sample_Timer_Start
 167:main.c        ****     Sample_ISR_StartEx(Sample_ISR_Handler);     // reference ISR function
 706              		.loc 1 167 0
 707 00da 6148     		ldr	r0, .L86+32
 708 00dc FFF7FEFF 		bl	Sample_ISR_StartEx
 168:main.c        ****     rx_interrupt_StartEx(rx_interrupt);
 709              		.loc 1 168 0
 710 00e0 6048     		ldr	r0, .L86+36
 711 00e2 FFF7FEFF 		bl	rx_interrupt_StartEx
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 18


 169:main.c        ****     //moisture_isr_StartEx(Moisture_ISR_Handler); // moisture isr start
 170:main.c        ****     //Comp_Start();                               // comparator for moisture start
 171:main.c        ****     UART_Start();
 712              		.loc 1 171 0
 713 00e6 FFF7FEFF 		bl	UART_Start
 172:main.c        ****     
 173:main.c        ****     
 174:main.c        ****     #ifdef LCD
 175:main.c        ****         LiquidCrystal_I2C_init(Addr,16,2,0);        // initialize I2C communication with LCD
 714              		.loc 1 175 0
 715 00ea 5F4B     		ldr	r3, .L86+40
 716 00ec 1B68     		ldr	r3, [r3]
 717 00ee DBB2     		uxtb	r3, r3
 718 00f0 1846     		mov	r0, r3
 719 00f2 1021     		movs	r1, #16
 720 00f4 0222     		movs	r2, #2
 721 00f6 0023     		movs	r3, #0
 722 00f8 FFF7FEFF 		bl	LiquidCrystal_I2C_init
 176:main.c        ****         begin(); 
 723              		.loc 1 176 0
 724 00fc FFF7FEFF 		bl	begin
 177:main.c        ****     
 178:main.c        ****     #endif
 179:main.c        ****    
 180:main.c        ****     /* initialize MPU6050 */
 181:main.c        ****     #ifdef MPU6050
 182:main.c        ****         MPU6050_init();    
 725              		.loc 1 182 0
 726 0100 FFF7FEFF 		bl	MPU6050_init
 183:main.c        **** 	    MPU6050_initialize(); 
 727              		.loc 1 183 0
 728 0104 FFF7FEFF 		bl	MPU6050_initialize
 184:main.c        ****     #endif
 185:main.c        ****         
 186:main.c        ****     #ifdef LCD
 187:main.c        ****         /* Startup Display */
 188:main.c        ****         LCD_print("PSoC 5LP: O-Vac");
 729              		.loc 1 188 0
 730 0108 5848     		ldr	r0, .L86+44
 731 010a FFF7FEFF 		bl	LCD_print
 189:main.c        ****         setCursor(0,1);
 732              		.loc 1 189 0
 733 010e 0020     		movs	r0, #0
 734 0110 0121     		movs	r1, #1
 735 0112 FFF7FEFF 		bl	setCursor
 190:main.c        ****         LCD_print("I2C Working");
 736              		.loc 1 190 0
 737 0116 5648     		ldr	r0, .L86+48
 738 0118 FFF7FEFF 		bl	LCD_print
 191:main.c        ****         
 192:main.c        ****         CyDelay(1000u);   
 739              		.loc 1 192 0
 740 011c 4FF47A70 		mov	r0, #1000
 741 0120 FFF7FEFF 		bl	CyDelay
 193:main.c        ****         clear();
 742              		.loc 1 193 0
 743 0124 FFF7FEFF 		bl	clear
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 19


 194:main.c        ****     #endif
 195:main.c        ****     
 196:main.c        ****     /* Start the ADC conversion */
 197:main.c        ****     ADC_StartConvert();
 744              		.loc 1 197 0
 745 0128 FFF7FEFF 		bl	ADC_StartConvert
 198:main.c        **** 
 199:main.c        ****     /* Start SD card*/
 200:main.c        ****     #ifdef SD
 201:main.c        ****         int SD_Result = SD_SETUP(file); 
 746              		.loc 1 201 0
 747 012c 5148     		ldr	r0, .L86+52
 748 012e FFF7FEFF 		bl	SD_SETUP
 749 0132 C7F8FC00 		str	r0, [r7, #252]
 202:main.c        ****         
 203:main.c        ****         if(SD_Result){
 750              		.loc 1 203 0
 751 0136 D7F8FC30 		ldr	r3, [r7, #252]
 752 013a 002B     		cmp	r3, #0
 753 013c 09D0     		beq	.L27
 204:main.c        ****            LCD_print("SD CARD READY");
 754              		.loc 1 204 0
 755 013e 4E48     		ldr	r0, .L86+56
 756 0140 FFF7FEFF 		bl	LCD_print
 205:main.c        ****            CyDelay(1000u);   
 757              		.loc 1 205 0
 758 0144 4FF47A70 		mov	r0, #1000
 759 0148 FFF7FEFF 		bl	CyDelay
 206:main.c        ****            clear();
 760              		.loc 1 206 0
 761 014c FFF7FEFF 		bl	clear
 762 0150 08E0     		b	.L28
 763              	.L27:
 207:main.c        ****         }
 208:main.c        ****         else{
 209:main.c        ****             LCD_print("SD FAILED");
 764              		.loc 1 209 0
 765 0152 4A48     		ldr	r0, .L86+60
 766 0154 FFF7FEFF 		bl	LCD_print
 210:main.c        ****             CyDelay(1000u);   
 767              		.loc 1 210 0
 768 0158 4FF47A70 		mov	r0, #1000
 769 015c FFF7FEFF 		bl	CyDelay
 211:main.c        ****            clear();
 770              		.loc 1 211 0
 771 0160 FFF7FEFF 		bl	clear
 772              	.L28:
 212:main.c        ****         }
 213:main.c        ****     #endif
 214:main.c        ****     
 215:main.c        ****     #ifdef LCD
 216:main.c        ****         /* Display the current State */
 217:main.c        ****         setCursor(0,0);    
 773              		.loc 1 217 0
 774 0164 0020     		movs	r0, #0
 775 0166 0021     		movs	r1, #0
 776 0168 FFF7FEFF 		bl	setCursor
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 20


 218:main.c        ****         LCD_print(curState);
 777              		.loc 1 218 0
 778 016c 07F1A403 		add	r3, r7, #164
 779 0170 1846     		mov	r0, r3
 780 0172 FFF7FEFF 		bl	LCD_print
 219:main.c        ****     #endif
 220:main.c        ****     STATE = WAIT_TO_LAUNCH;
 781              		.loc 1 220 0
 782 0176 424B     		ldr	r3, .L86+64
 783 0178 0122     		movs	r2, #1
 784 017a 1A70     		strb	r2, [r3]
 221:main.c        ****     
 222:main.c        ****     Countdown_timer_Start();
 785              		.loc 1 222 0
 786 017c FFF7FEFF 		bl	Countdown_timer_Start
 223:main.c        ****     adjust_timer_Start();
 787              		.loc 1 223 0
 788 0180 FFF7FEFF 		bl	adjust_timer_Start
 224:main.c        ****     countdown_StartEx(Countdown_ISR_Handler);
 789              		.loc 1 224 0
 790 0184 3F48     		ldr	r0, .L86+68
 791 0186 FFF7FEFF 		bl	countdown_StartEx
 225:main.c        ****     temp_isr_StartEx(temp_interrupt);
 792              		.loc 1 225 0
 793 018a 3F48     		ldr	r0, .L86+72
 794 018c FFF7FEFF 		bl	temp_isr_StartEx
 226:main.c        ****     int pulse = 0;
 795              		.loc 1 226 0
 796 0190 0023     		movs	r3, #0
 797 0192 C7F81C31 		str	r3, [r7, #284]
 798              	.L84:
 799              	.LBB2:
 227:main.c        ****     for(;;)
 228:main.c        ****     {
 229:main.c        ****         
 230:main.c        ****         if(ADC_IsEndConversion(ADC_RETURN_STATUS))
 800              		.loc 1 230 0
 801 0196 0120     		movs	r0, #1
 802 0198 FFF7FEFF 		bl	ADC_IsEndConversion
 803 019c 0346     		mov	r3, r0
 804 019e 002B     		cmp	r3, #0
 805 01a0 00F0D280 		beq	.L29
 231:main.c        ****         {
 232:main.c        ****             output = ADC_GetResult32();
 806              		.loc 1 232 0
 807 01a4 FFF7FEFF 		bl	ADC_GetResult32
 808 01a8 0346     		mov	r3, r0
 809 01aa 1846     		mov	r0, r3
 810 01ac FFF7FEFF 		bl	__aeabi_i2f
 811 01b0 0346     		mov	r3, r0
 812 01b2 C7F80831 		str	r3, [r7, #264]	@ float
 233:main.c        **** 
 234:main.c        ****             voltage = output * (3.32 / 4096);
 813              		.loc 1 234 0
 814 01b6 D7F80801 		ldr	r0, [r7, #264]	@ float
 815 01ba FFF7FEFF 		bl	__aeabi_f2d
 816 01be 0246     		mov	r2, r0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 21


 817 01c0 0B46     		mov	r3, r1
 818 01c2 1046     		mov	r0, r2
 819 01c4 1946     		mov	r1, r3
 820 01c6 1EA3     		adr	r3, .L86
 821 01c8 D3E90023 		ldrd	r2, [r3]
 822 01cc FFF7FEFF 		bl	__aeabi_dmul
 823 01d0 0246     		mov	r2, r0
 824 01d2 0B46     		mov	r3, r1
 825 01d4 1046     		mov	r0, r2
 826 01d6 1946     		mov	r1, r3
 827 01d8 FFF7FEFF 		bl	__aeabi_d2f
 828 01dc 0346     		mov	r3, r0
 829 01de C7F81031 		str	r3, [r7, #272]	@ float
 235:main.c        ****             if(wait_flag == 1){
 830              		.loc 1 235 0
 831 01e2 2A4B     		ldr	r3, .L86+76
 832 01e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 833 01e6 002B     		cmp	r3, #0
 834 01e8 00F0AE80 		beq	.L29
 236:main.c        ****                 if (press_id < MA_WINDOW){
 835              		.loc 1 236 0
 836 01ec 284B     		ldr	r3, .L86+80
 837 01ee 1B68     		ldr	r3, [r3]
 838 01f0 0E2B     		cmp	r3, #14
 839 01f2 0BDC     		bgt	.L30
 237:main.c        ****                     pressure_sum += voltage;     
 840              		.loc 1 237 0
 841 01f4 274B     		ldr	r3, .L86+84
 842 01f6 1B68     		ldr	r3, [r3]	@ float
 843 01f8 1846     		mov	r0, r3
 844 01fa D7F81011 		ldr	r1, [r7, #272]	@ float
 845 01fe FFF7FEFF 		bl	__aeabi_fadd
 846 0202 0346     		mov	r3, r0
 847 0204 1A46     		mov	r2, r3
 848 0206 234B     		ldr	r3, .L86+84
 849 0208 1A60     		str	r2, [r3]	@ float
 850 020a 95E0     		b	.L31
 851              	.L30:
 238:main.c        ****                 }
 239:main.c        ****                 else if(press_id == MA_WINDOW){
 852              		.loc 1 239 0
 853 020c 204B     		ldr	r3, .L86+80
 854 020e 1B68     		ldr	r3, [r3]
 855 0210 0F2B     		cmp	r3, #15
 856 0212 43D1     		bne	.L32
 240:main.c        ****                     pressure_sum += voltage;
 857              		.loc 1 240 0
 858 0214 1F4B     		ldr	r3, .L86+84
 859 0216 1B68     		ldr	r3, [r3]	@ float
 860 0218 1846     		mov	r0, r3
 861 021a D7F81011 		ldr	r1, [r7, #272]	@ float
 862 021e FFF7FEFF 		bl	__aeabi_fadd
 863 0222 0346     		mov	r3, r0
 864 0224 1A46     		mov	r2, r3
 865 0226 1B4B     		ldr	r3, .L86+84
 866 0228 1A60     		str	r2, [r3]	@ float
 241:main.c        ****                     pressure_avg = pressure_sum/MA_WINDOW;                            // compute ba
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 22


 867              		.loc 1 241 0
 868 022a 1A4B     		ldr	r3, .L86+84
 869 022c 1B68     		ldr	r3, [r3]	@ float
 870 022e 1846     		mov	r0, r3
 871 0230 1949     		ldr	r1, .L86+88
 872 0232 FFF7FEFF 		bl	__aeabi_fdiv
 873 0236 0346     		mov	r3, r0
 874 0238 C7F82431 		str	r3, [r7, #292]	@ float
 875 023c 7CE0     		b	.L31
 876              	.L87:
 877 023e 00BF     		.align	3
 878              	.L86:
 879 0240 8FC2F528 		.word	687194767
 880 0244 5C8F4A3F 		.word	1061850972
 881 0248 70010000 		.word	.LC0
 882 024c 80010000 		.word	.LC1
 883 0250 94010000 		.word	.LC2
 884 0254 A4010000 		.word	.LC3
 885 0258 B8010000 		.word	.LC4
 886 025c CC010000 		.word	.LC5
 887 0260 00000000 		.word	Sample_ISR_Handler
 888 0264 00000000 		.word	rx_interrupt
 889 0268 00000000 		.word	Addr
 890 026c 00000000 		.word	.LC6
 891 0270 10000000 		.word	.LC7
 892 0274 00000000 		.word	file
 893 0278 1C000000 		.word	.LC8
 894 027c 2C000000 		.word	.LC9
 895 0280 00000000 		.word	STATE
 896 0284 00000000 		.word	Countdown_ISR_Handler
 897 0288 00000000 		.word	temp_interrupt
 898 028c 00000000 		.word	wait_flag
 899 0290 00000000 		.word	press_id
 900 0294 00000000 		.word	pressure_sum
 901 0298 00007041 		.word	1097859072
 902              	.L32:
 903              	.LBB3:
 242:main.c        ****                 }
 243:main.c        ****                 else{
 244:main.c        ****                     pressure_avg = ComputeMA(pressure_avg, MA_WINDOW, voltage);
 904              		.loc 1 244 0
 905 029c D7F82401 		ldr	r0, [r7, #292]	@ float
 906 02a0 0F21     		movs	r1, #15
 907 02a2 D7F81021 		ldr	r2, [r7, #272]	@ float
 908 02a6 FFF7FEFF 		bl	ComputeMA
 909 02aa C7F82401 		str	r0, [r7, #292]	@ float
 245:main.c        ****                     num = pressure_avg;
 910              		.loc 1 245 0
 911 02ae D7F82401 		ldr	r0, [r7, #292]	@ float
 912 02b2 FFF7FEFF 		bl	__aeabi_f2iz
 913 02b6 0346     		mov	r3, r0
 914 02b8 C7F81831 		str	r3, [r7, #280]
 246:main.c        ****                     temp = pressure_avg - num;
 915              		.loc 1 246 0
 916 02bc D7F81801 		ldr	r0, [r7, #280]
 917 02c0 FFF7FEFF 		bl	__aeabi_i2f
 918 02c4 0346     		mov	r3, r0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 23


 919 02c6 D7F82401 		ldr	r0, [r7, #292]	@ float
 920 02ca 1946     		mov	r1, r3
 921 02cc FFF7FEFF 		bl	__aeabi_fsub
 922 02d0 0346     		mov	r3, r0
 923 02d2 C7F80C31 		str	r3, [r7, #268]	@ float
 247:main.c        ****                     decimals = temp * 10000;
 924              		.loc 1 247 0
 925 02d6 D7F80C01 		ldr	r0, [r7, #268]	@ float
 926 02da B749     		ldr	r1, .L88
 927 02dc FFF7FEFF 		bl	__aeabi_fmul
 928 02e0 0346     		mov	r3, r0
 929 02e2 1846     		mov	r0, r3
 930 02e4 FFF7FEFF 		bl	__aeabi_f2iz
 931 02e8 0346     		mov	r3, r0
 932 02ea C7F81431 		str	r3, [r7, #276]
 248:main.c        ****                     char sdbuf[60] = {};
 933              		.loc 1 248 0
 934 02ee 3B1D     		adds	r3, r7, #4
 935 02f0 1A46     		mov	r2, r3
 936 02f2 3C23     		movs	r3, #60
 937 02f4 1046     		mov	r0, r2
 938 02f6 0021     		movs	r1, #0
 939 02f8 1A46     		mov	r2, r3
 940 02fa FFF7FEFF 		bl	memset
 249:main.c        ****                     #ifdef SD
 250:main.c        ****                         sprintf(sdbuf, "pressure: %d.%04d, %d\n", num, decimals, (int16)output); //
 941              		.loc 1 250 0
 942 02fe D7F80801 		ldr	r0, [r7, #264]	@ float
 943 0302 FFF7FEFF 		bl	__aeabi_f2iz
 944 0306 0346     		mov	r3, r0
 945 0308 9BB2     		uxth	r3, r3
 946 030a 1BB2     		sxth	r3, r3
 947 030c 3A1D     		adds	r2, r7, #4
 948 030e 0093     		str	r3, [sp]
 949 0310 1046     		mov	r0, r2
 950 0312 AA49     		ldr	r1, .L88+4
 951 0314 D7F81821 		ldr	r2, [r7, #280]
 952 0318 D7F81431 		ldr	r3, [r7, #276]
 953 031c FFF7FEFF 		bl	sprintf
 251:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 954              		.loc 1 251 0
 955 0320 A74B     		ldr	r3, .L88+8
 956 0322 1C68     		ldr	r4, [r3]
 957 0324 3B1D     		adds	r3, r7, #4
 958 0326 1846     		mov	r0, r3
 959 0328 FFF7FEFF 		bl	strlen
 960 032c 0246     		mov	r2, r0
 961 032e 3B1D     		adds	r3, r7, #4
 962 0330 2046     		mov	r0, r4
 963 0332 1946     		mov	r1, r3
 964 0334 FFF7FEFF 		bl	FS_Write
 965              	.L31:
 966              	.LBE3:
 252:main.c        ****                     #endif 
 253:main.c        ****                 }
 254:main.c        ****                 wait_flag = 0;
 967              		.loc 1 254 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 24


 968 0338 A24B     		ldr	r3, .L88+12
 969 033a 0022     		movs	r2, #0
 970 033c 1A70     		strb	r2, [r3]
 255:main.c        ****                 press_id++;
 971              		.loc 1 255 0
 972 033e A24B     		ldr	r3, .L88+16
 973 0340 1B68     		ldr	r3, [r3]
 974 0342 0133     		adds	r3, r3, #1
 975 0344 A04A     		ldr	r2, .L88+16
 976 0346 1360     		str	r3, [r2]
 977              	.L29:
 256:main.c        ****             }
 257:main.c        ****             
 258:main.c        ****         }
 259:main.c        ****         
 260:main.c        ****     /* Bluetooth message response*/
 261:main.c        ****     #ifdef BT
 262:main.c        ****         if (msg_count >= 2){
 978              		.loc 1 262 0
 979 0348 A04B     		ldr	r3, .L88+20
 980 034a 1B68     		ldr	r3, [r3]
 981 034c 012B     		cmp	r3, #1
 982 034e 13DD     		ble	.L33
 263:main.c        ****             tens = RxBuffer[0] - 48;
 983              		.loc 1 263 0
 984 0350 9F4B     		ldr	r3, .L88+24
 985 0352 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 986 0354 303B     		subs	r3, r3, #48
 987 0356 7B64     		str	r3, [r7, #68]
 264:main.c        ****             ones = RxBuffer[1] - 48;
 988              		.loc 1 264 0
 989 0358 9D4B     		ldr	r3, .L88+24
 990 035a 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 991 035c 303B     		subs	r3, r3, #48
 992 035e C7F80031 		str	r3, [r7, #256]
 265:main.c        ****             bytes = (tens * 10) + ones;
 993              		.loc 1 265 0
 994 0362 7A6C     		ldr	r2, [r7, #68]
 995 0364 1346     		mov	r3, r2
 996 0366 9B00     		lsls	r3, r3, #2
 997 0368 1344     		add	r3, r3, r2
 998 036a 5B00     		lsls	r3, r3, #1
 999 036c 1A46     		mov	r2, r3
 1000 036e D7F80031 		ldr	r3, [r7, #256]
 1001 0372 1344     		add	r3, r3, r2
 1002 0374 974A     		ldr	r2, .L88+28
 1003 0376 1360     		str	r3, [r2]
 1004              	.L33:
 266:main.c        ****         } 
 267:main.c        ****         
 268:main.c        ****         if(rxflag) {
 1005              		.loc 1 268 0
 1006 0378 974B     		ldr	r3, .L88+32
 1007 037a 1B68     		ldr	r3, [r3]
 1008 037c 002B     		cmp	r3, #0
 1009 037e 2DD0     		beq	.L34
 269:main.c        ****             uint8_to_char(RxBuffer, &tempbuf[0], 20);
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 25


 1010              		.loc 1 269 0
 1011 0380 07F1B403 		add	r3, r7, #180
 1012 0384 9248     		ldr	r0, .L88+24
 1013 0386 1946     		mov	r1, r3
 1014 0388 1422     		movs	r2, #20
 1015 038a FFF7FEFF 		bl	uint8_to_char
 270:main.c        ****             depth = BT_Process(&tempbuf[3], &STATE, bytes, &dataflag, &reset);
 1016              		.loc 1 270 0
 1017 038e 914B     		ldr	r3, .L88+28
 1018 0390 1A68     		ldr	r2, [r3]
 1019 0392 07F1B403 		add	r3, r7, #180
 1020 0396 D91C     		adds	r1, r3, #3
 1021 0398 904B     		ldr	r3, .L88+36
 1022 039a 0093     		str	r3, [sp]
 1023 039c 0846     		mov	r0, r1
 1024 039e 9049     		ldr	r1, .L88+40
 1025 03a0 904B     		ldr	r3, .L88+44
 1026 03a2 FFF7FEFF 		bl	BT_Process
 1027 03a6 0246     		mov	r2, r0
 1028 03a8 8F4B     		ldr	r3, .L88+48
 1029 03aa 1A60     		str	r2, [r3]
 271:main.c        ****             
 272:main.c        ****             msg_count = 0; bytes = 0;
 1030              		.loc 1 272 0
 1031 03ac 874B     		ldr	r3, .L88+20
 1032 03ae 0022     		movs	r2, #0
 1033 03b0 1A60     		str	r2, [r3]
 1034 03b2 884B     		ldr	r3, .L88+28
 1035 03b4 0022     		movs	r2, #0
 1036 03b6 1A60     		str	r2, [r3]
 273:main.c        ****             memset(RxBuffer, 0, BUFFER_LEN);
 1037              		.loc 1 273 0
 1038 03b8 8548     		ldr	r0, .L88+24
 1039 03ba 0021     		movs	r1, #0
 1040 03bc 4022     		movs	r2, #64
 1041 03be FFF7FEFF 		bl	memset
 274:main.c        ****             memset(tempbuf, 0, 20);
 1042              		.loc 1 274 0
 1043 03c2 07F1B403 		add	r3, r7, #180
 1044 03c6 1846     		mov	r0, r3
 1045 03c8 0021     		movs	r1, #0
 1046 03ca 1422     		movs	r2, #20
 1047 03cc FFF7FEFF 		bl	memset
 275:main.c        ****             countdown = 0;
 1048              		.loc 1 275 0
 1049 03d0 864B     		ldr	r3, .L88+52
 1050 03d2 0022     		movs	r2, #0
 1051 03d4 1A70     		strb	r2, [r3]
 276:main.c        ****             rxflag = 0;
 1052              		.loc 1 276 0
 1053 03d6 804B     		ldr	r3, .L88+32
 1054 03d8 0022     		movs	r2, #0
 1055 03da 1A60     		str	r2, [r3]
 1056              	.L34:
 277:main.c        ****         }
 278:main.c        ****     #endif
 279:main.c        ****     
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 26


 280:main.c        ****         /* Display Z-Acceleration */
 281:main.c        **** 
 282:main.c        ****         az = MPU6050_getAccelerationZ();
 1057              		.loc 1 282 0
 1058 03dc FFF7FEFF 		bl	MPU6050_getAccelerationZ
 1059 03e0 0346     		mov	r3, r0
 1060 03e2 A7F8FA30 		strh	r3, [r7, #250]	@ movhi
 283:main.c        **** 
 284:main.c        ****         int t = 1;
 1061              		.loc 1 284 0
 1062 03e6 0123     		movs	r3, #1
 1063 03e8 3B64     		str	r3, [r7, #64]
 285:main.c        ****         /* State Machine */
 286:main.c        ****         switch (STATE){
 1064              		.loc 1 286 0
 1065 03ea 7D4B     		ldr	r3, .L88+40
 1066 03ec 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1067 03ee 013B     		subs	r3, r3, #1
 1068 03f0 042B     		cmp	r3, #4
 1069 03f2 00F26B83 		bhi	.L85
 1070 03f6 01A2     		adr	r2, .L37
 1071 03f8 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1072              		.p2align 2
 1073              	.L37:
 1074 03fc 11040000 		.word	.L36+1
 1075 0400 97050000 		.word	.L38+1
 1076 0404 31080000 		.word	.L39+1
 1077 0408 77090000 		.word	.L40+1
 1078 040c 990A0000 		.word	.L41+1
 1079              		.p2align 1
 1080              	.L36:
 287:main.c        ****     
 288:main.c        ****             case WAIT_TO_LAUNCH:
 289:main.c        ****                 if (reset){
 1081              		.loc 1 289 0
 1082 0410 724B     		ldr	r3, .L88+36
 1083 0412 1B68     		ldr	r3, [r3]
 1084 0414 002B     		cmp	r3, #0
 1085 0416 26D0     		beq	.L42
 290:main.c        ****                     id = 1;                                // Interrupt count.
 1086              		.loc 1 290 0
 1087 0418 754B     		ldr	r3, .L88+56
 1088 041a 0122     		movs	r2, #1
 1089 041c 1A60     		str	r2, [r3]
 291:main.c        ****                     data_time = 0;                        // data point num
 1090              		.loc 1 291 0
 1091 041e 754B     		ldr	r3, .L88+60
 1092 0420 0022     		movs	r2, #0
 1093 0422 1A60     		str	r2, [r3]
 292:main.c        ****                     sum = 0;                               // Sum of accelerometer values. 
 1094              		.loc 1 292 0
 1095 0424 744B     		ldr	r3, .L88+64
 1096 0426 0022     		movs	r2, #0
 1097 0428 1A60     		str	r2, [r3]
 293:main.c        ****                     average = 0;                        // Moving average variable.
 1098              		.loc 1 293 0
 1099 042a 744B     		ldr	r3, .L88+68
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 27


 1100 042c 0022     		movs	r2, #0
 1101 042e 1A80     		strh	r2, [r3]	@ movhi
 294:main.c        ****                     collect_flag = 0;                      // flag indicating when to record accele
 1102              		.loc 1 294 0
 1103 0430 734B     		ldr	r3, .L88+72
 1104 0432 0022     		movs	r2, #0
 1105 0434 1A70     		strb	r2, [r3]
 295:main.c        ****                     wait_flag = 0;                         // flag indicating when to increment int
 1106              		.loc 1 295 0
 1107 0436 634B     		ldr	r3, .L88+12
 1108 0438 0022     		movs	r2, #0
 1109 043a 1A70     		strb	r2, [r3]
 296:main.c        ****                     PANIC_flag = 0;                        // flag indicating water is present in h
 1110              		.loc 1 296 0
 1111 043c 714B     		ldr	r3, .L88+76
 1112 043e 0022     		movs	r2, #0
 1113 0440 1A70     		strb	r2, [r3]
 297:main.c        ****                     //bool first_test = 1;                        // flag indicating first test(lon
 298:main.c        ****                     testnum = 1;
 1114              		.loc 1 298 0
 1115 0442 714B     		ldr	r3, .L88+80
 1116 0444 0122     		movs	r2, #1
 1117 0446 1A70     		strb	r2, [r3]
 299:main.c        ****                     depth = 0; countdown = 0; msg_count = 0; dataflag = 0;
 1118              		.loc 1 299 0
 1119 0448 674B     		ldr	r3, .L88+48
 1120 044a 0022     		movs	r2, #0
 1121 044c 1A60     		str	r2, [r3]
 1122 044e 674B     		ldr	r3, .L88+52
 1123 0450 0022     		movs	r2, #0
 1124 0452 1A70     		strb	r2, [r3]
 1125 0454 5D4B     		ldr	r3, .L88+20
 1126 0456 0022     		movs	r2, #0
 1127 0458 1A60     		str	r2, [r3]
 1128 045a 624B     		ldr	r3, .L88+44
 1129 045c 0022     		movs	r2, #0
 1130 045e 1A60     		str	r2, [r3]
 300:main.c        ****                     reset = 0;
 1131              		.loc 1 300 0
 1132 0460 5E4B     		ldr	r3, .L88+36
 1133 0462 0022     		movs	r2, #0
 1134 0464 1A60     		str	r2, [r3]
 1135              	.L42:
 301:main.c        ****                 }
 302:main.c        ****             
 303:main.c        ****                 if (transmit_flag){
 1136              		.loc 1 303 0
 1137 0466 694B     		ldr	r3, .L88+84
 1138 0468 1B68     		ldr	r3, [r3]
 1139 046a 002B     		cmp	r3, #0
 1140 046c 0BD0     		beq	.L43
 304:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &tens); // Here, the STATE variable only matte
 1141              		.loc 1 304 0
 1142 046e 07F1B402 		add	r2, r7, #180
 1143 0472 07F14403 		add	r3, r7, #68
 1144 0476 1046     		mov	r0, r2
 1145 0478 5949     		ldr	r1, .L88+40
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 28


 1146 047a 0A22     		movs	r2, #10
 1147 047c FFF7FEFF 		bl	BT_Send
 305:main.c        ****                     transmit_flag = 0;
 1148              		.loc 1 305 0
 1149 0480 624B     		ldr	r3, .L88+84
 1150 0482 0022     		movs	r2, #0
 1151 0484 1A60     		str	r2, [r3]
 1152              	.L43:
 306:main.c        ****                 }
 307:main.c        ****                 if(wait_flag == 1){
 1153              		.loc 1 307 0
 1154 0486 4F4B     		ldr	r3, .L88+12
 1155 0488 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1156 048a 002B     		cmp	r3, #0
 1157 048c 00F08280 		beq	.L44
 308:main.c        ****                     #ifdef LCD
 309:main.c        ****                         setCursor(0,0);
 1158              		.loc 1 309 0
 1159 0490 0020     		movs	r0, #0
 1160 0492 0021     		movs	r1, #0
 1161 0494 FFF7FEFF 		bl	setCursor
 310:main.c        ****                         clear();
 1162              		.loc 1 310 0
 1163 0498 FFF7FEFF 		bl	clear
 311:main.c        ****                         
 312:main.c        ****                         sprintf(buf, "T-minus %d seconds\n", (10 - countdown)); // countdown
 1164              		.loc 1 312 0
 1165 049c 534B     		ldr	r3, .L88+52
 1166 049e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1167 04a0 C3F10A03 		rsb	r3, r3, #10
 1168 04a4 07F1C802 		add	r2, r7, #200
 1169 04a8 1046     		mov	r0, r2
 1170 04aa 5949     		ldr	r1, .L88+88
 1171 04ac 1A46     		mov	r2, r3
 1172 04ae FFF7FEFF 		bl	sprintf
 313:main.c        ****                         LCD_print(buf);
 1173              		.loc 1 313 0
 1174 04b2 07F1C803 		add	r3, r7, #200
 1175 04b6 1846     		mov	r0, r3
 1176 04b8 FFF7FEFF 		bl	LCD_print
 314:main.c        ****                     #endif
 315:main.c        ****                     #ifdef BT
 316:main.c        ****                         stateMsgCount = 0;
 1177              		.loc 1 316 0
 1178 04bc 0023     		movs	r3, #0
 1179 04be C7F82031 		str	r3, [r7, #288]
 317:main.c        ****                         sprintf(buf, "\n%d seconds remaining", (10 - countdown));
 1180              		.loc 1 317 0
 1181 04c2 4A4B     		ldr	r3, .L88+52
 1182 04c4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1183 04c6 C3F10A03 		rsb	r3, r3, #10
 1184 04ca 07F1C802 		add	r2, r7, #200
 1185 04ce 1046     		mov	r0, r2
 1186 04d0 5049     		ldr	r1, .L88+92
 1187 04d2 1A46     		mov	r2, r3
 1188 04d4 FFF7FEFF 		bl	sprintf
 318:main.c        ****                         while (stateMsgCount < 21){
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 29


 1189              		.loc 1 318 0
 1190 04d8 19E0     		b	.L45
 1191              	.L48:
 319:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1192              		.loc 1 319 0
 1193 04da 11E0     		b	.L46
 1194              	.L47:
 320:main.c        ****                                 UART_PutChar(buf[stateMsgCount++]);
 1195              		.loc 1 320 0
 1196 04dc D7F82031 		ldr	r3, [r7, #288]
 1197 04e0 5A1C     		adds	r2, r3, #1
 1198 04e2 C7F82021 		str	r2, [r7, #288]
 1199 04e6 07F59472 		add	r2, r7, #296
 1200 04ea 1344     		add	r3, r3, r2
 1201 04ec 13F8603C 		ldrb	r3, [r3, #-96]	@ zero_extendqisi2
 1202 04f0 1846     		mov	r0, r3
 1203 04f2 FFF7FEFF 		bl	UART_PutChar
 321:main.c        ****                                 if (stateMsgCount >= 21) break;
 1204              		.loc 1 321 0
 1205 04f6 D7F82031 		ldr	r3, [r7, #288]
 1206 04fa 142B     		cmp	r3, #20
 1207 04fc 00DD     		ble	.L46
 1208 04fe 06E0     		b	.L45
 1209              	.L46:
 319:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1210              		.loc 1 319 0
 1211 0500 FFF7FEFF 		bl	UART_ReadTxStatus
 1212 0504 0346     		mov	r3, r0
 1213 0506 03F00803 		and	r3, r3, #8
 1214 050a 002B     		cmp	r3, #0
 1215 050c E6D1     		bne	.L47
 1216              	.L45:
 318:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1217              		.loc 1 318 0
 1218 050e D7F82031 		ldr	r3, [r7, #288]
 1219 0512 142B     		cmp	r3, #20
 1220 0514 E1DD     		ble	.L48
 322:main.c        ****                             }
 323:main.c        ****                         }
 324:main.c        ****                     #endif
 325:main.c        ****                     if(countdown == 10){
 1221              		.loc 1 325 0
 1222 0516 354B     		ldr	r3, .L88+52
 1223 0518 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1224 051a 0A2B     		cmp	r3, #10
 1225 051c 36D1     		bne	.L49
 326:main.c        ****                         STATE = DESCENDING;
 1226              		.loc 1 326 0
 1227 051e 304B     		ldr	r3, .L88+40
 1228 0520 0222     		movs	r2, #2
 1229 0522 1A70     		strb	r2, [r3]
 327:main.c        ****                         #ifdef LCD
 328:main.c        ****                             setCursor(0,0);
 1230              		.loc 1 328 0
 1231 0524 0020     		movs	r0, #0
 1232 0526 0021     		movs	r1, #0
 1233 0528 FFF7FEFF 		bl	setCursor
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 30


 329:main.c        ****                             clear();
 1234              		.loc 1 329 0
 1235 052c FFF7FEFF 		bl	clear
 330:main.c        ****                             LCD_print("STATE: DESCENT");
 1236              		.loc 1 330 0
 1237 0530 3948     		ldr	r0, .L88+96
 1238 0532 FFF7FEFF 		bl	LCD_print
 331:main.c        ****                         #endif
 332:main.c        ****                         #ifdef BT
 333:main.c        ****                             stateMsgCount = 0;
 1239              		.loc 1 333 0
 1240 0536 0023     		movs	r3, #0
 1241 0538 C7F82031 		str	r3, [r7, #288]
 334:main.c        ****                             while (stateMsgCount < DESCENDING_LEN){
 1242              		.loc 1 334 0
 1243 053c 19E0     		b	.L50
 1244              	.L53:
 335:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1245              		.loc 1 335 0
 1246 053e 11E0     		b	.L51
 1247              	.L52:
 336:main.c        ****                                     UART_PutChar(descendbuf[stateMsgCount++]);
 1248              		.loc 1 336 0
 1249 0540 D7F82031 		ldr	r3, [r7, #288]
 1250 0544 5A1C     		adds	r2, r3, #1
 1251 0546 C7F82021 		str	r2, [r7, #288]
 1252 054a 07F59472 		add	r2, r7, #296
 1253 054e 1344     		add	r3, r3, r2
 1254 0550 13F8983C 		ldrb	r3, [r3, #-152]	@ zero_extendqisi2
 1255 0554 1846     		mov	r0, r3
 1256 0556 FFF7FEFF 		bl	UART_PutChar
 337:main.c        ****                                     if (stateMsgCount >= DESCENDING_LEN) break;
 1257              		.loc 1 337 0
 1258 055a D7F82031 		ldr	r3, [r7, #288]
 1259 055e 122B     		cmp	r3, #18
 1260 0560 00DD     		ble	.L51
 1261 0562 06E0     		b	.L50
 1262              	.L51:
 335:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1263              		.loc 1 335 0
 1264 0564 FFF7FEFF 		bl	UART_ReadTxStatus
 1265 0568 0346     		mov	r3, r0
 1266 056a 03F00803 		and	r3, r3, #8
 1267 056e 002B     		cmp	r3, #0
 1268 0570 E6D1     		bne	.L52
 1269              	.L50:
 334:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1270              		.loc 1 334 0
 1271 0572 D7F82031 		ldr	r3, [r7, #288]
 1272 0576 122B     		cmp	r3, #18
 1273 0578 E1DD     		ble	.L53
 338:main.c        ****                                 }
 339:main.c        ****                             }
 340:main.c        ****                         #endif
 341:main.c        ****                         id=0;
 1274              		.loc 1 341 0
 1275 057a 1D4B     		ldr	r3, .L88+56
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 31


 1276 057c 0022     		movs	r2, #0
 1277 057e 1A60     		str	r2, [r3]
 342:main.c        ****                         data_time = 0;
 1278              		.loc 1 342 0
 1279 0580 1C4B     		ldr	r3, .L88+60
 1280 0582 0022     		movs	r2, #0
 1281 0584 1A60     		str	r2, [r3]
 343:main.c        ****                         countdown = 0; 
 1282              		.loc 1 343 0
 1283 0586 194B     		ldr	r3, .L88+52
 1284 0588 0022     		movs	r2, #0
 1285 058a 1A70     		strb	r2, [r3]
 1286              	.L49:
 344:main.c        ****                     }
 345:main.c        ****                     wait_flag = 0; 
 1287              		.loc 1 345 0
 1288 058c 0D4B     		ldr	r3, .L88+12
 1289 058e 0022     		movs	r2, #0
 1290 0590 1A70     		strb	r2, [r3]
 346:main.c        ****                 }
 347:main.c        ****                 break;
 1291              		.loc 1 347 0
 1292 0592 9CE2     		b	.L54
 1293              	.L44:
 1294 0594 9BE2     		b	.L54
 1295              	.L38:
 348:main.c        ****                 
 349:main.c        ****             case DESCENDING:
 350:main.c        ****                 if(collect_flag == 1){
 1296              		.loc 1 350 0
 1297 0596 1A4B     		ldr	r3, .L88+72
 1298 0598 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1299 059a 002B     		cmp	r3, #0
 1300 059c 00F04781 		beq	.L55
 351:main.c        ****                     if (id < MA_WINDOW){
 1301              		.loc 1 351 0
 1302 05a0 134B     		ldr	r3, .L88+56
 1303 05a2 1B68     		ldr	r3, [r3]
 1304 05a4 0E2B     		cmp	r3, #14
 1305 05a6 39DC     		bgt	.L56
 352:main.c        ****                         sum += az;     
 1306              		.loc 1 352 0
 1307 05a8 B7F9FA20 		ldrsh	r2, [r7, #250]
 1308 05ac 124B     		ldr	r3, .L88+64
 1309 05ae 1B68     		ldr	r3, [r3]
 1310 05b0 1344     		add	r3, r3, r2
 1311 05b2 114A     		ldr	r2, .L88+64
 1312 05b4 1360     		str	r3, [r2]
 1313 05b6 63E0     		b	.L57
 1314              	.L89:
 1315              		.align	2
 1316              	.L88:
 1317 05b8 00401C46 		.word	1176256512
 1318 05bc 38000000 		.word	.LC10
 1319 05c0 00000000 		.word	fsfile
 1320 05c4 00000000 		.word	wait_flag
 1321 05c8 00000000 		.word	press_id
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 32


 1322 05cc 00000000 		.word	msg_count
 1323 05d0 00000000 		.word	RxBuffer
 1324 05d4 00000000 		.word	bytes
 1325 05d8 00000000 		.word	rxflag
 1326 05dc 00000000 		.word	reset
 1327 05e0 00000000 		.word	STATE
 1328 05e4 00000000 		.word	dataflag
 1329 05e8 00000000 		.word	depth
 1330 05ec 00000000 		.word	countdown
 1331 05f0 00000000 		.word	id
 1332 05f4 00000000 		.word	data_time
 1333 05f8 00000000 		.word	sum
 1334 05fc 00000000 		.word	average
 1335 0600 00000000 		.word	collect_flag
 1336 0604 00000000 		.word	PANIC_flag
 1337 0608 00000000 		.word	testnum
 1338 060c 00000000 		.word	transmit_flag
 1339 0610 50000000 		.word	.LC11
 1340 0614 64000000 		.word	.LC12
 1341 0618 7C000000 		.word	.LC13
 1342              	.L56:
 353:main.c        ****                     }
 354:main.c        ****                     else if(id == MA_WINDOW){
 1343              		.loc 1 354 0
 1344 061c BC4B     		ldr	r3, .L90
 1345 061e 1B68     		ldr	r3, [r3]
 1346 0620 0F2B     		cmp	r3, #15
 1347 0622 13D1     		bne	.L58
 355:main.c        ****                         sum += az;
 1348              		.loc 1 355 0
 1349 0624 B7F9FA20 		ldrsh	r2, [r7, #250]
 1350 0628 BA4B     		ldr	r3, .L90+4
 1351 062a 1B68     		ldr	r3, [r3]
 1352 062c 1344     		add	r3, r3, r2
 1353 062e B94A     		ldr	r2, .L90+4
 1354 0630 1360     		str	r3, [r2]
 356:main.c        ****                         average = sum/MA_WINDOW;                            //compute baseline aver
 1355              		.loc 1 356 0
 1356 0632 B84B     		ldr	r3, .L90+4
 1357 0634 1B68     		ldr	r3, [r3]
 1358 0636 B84A     		ldr	r2, .L90+8
 1359 0638 82FB0312 		smull	r1, r2, r2, r3
 1360 063c 1A44     		add	r2, r2, r3
 1361 063e D210     		asrs	r2, r2, #3
 1362 0640 DB17     		asrs	r3, r3, #31
 1363 0642 D31A     		subs	r3, r2, r3
 1364 0644 9AB2     		uxth	r2, r3
 1365 0646 B54B     		ldr	r3, .L90+12
 1366 0648 1A80     		strh	r2, [r3]	@ movhi
 1367 064a 19E0     		b	.L57
 1368              	.L58:
 357:main.c        ****                     }
 358:main.c        ****                     else{
 359:main.c        ****                         average = ComputeMA(average, MA_WINDOW, az);
 1369              		.loc 1 359 0
 1370 064c B34B     		ldr	r3, .L90+12
 1371 064e 1B88     		ldrh	r3, [r3]
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 33


 1372 0650 1BB2     		sxth	r3, r3
 1373 0652 1846     		mov	r0, r3
 1374 0654 FFF7FEFF 		bl	__aeabi_i2f
 1375 0658 0446     		mov	r4, r0
 1376 065a B7F9FA30 		ldrsh	r3, [r7, #250]
 1377 065e 1846     		mov	r0, r3
 1378 0660 FFF7FEFF 		bl	__aeabi_i2f
 1379 0664 0346     		mov	r3, r0
 1380 0666 2046     		mov	r0, r4
 1381 0668 0F21     		movs	r1, #15
 1382 066a 1A46     		mov	r2, r3
 1383 066c FFF7FEFF 		bl	ComputeMA
 1384 0670 0346     		mov	r3, r0
 1385 0672 1846     		mov	r0, r3
 1386 0674 FFF7FEFF 		bl	__aeabi_f2iz
 1387 0678 0346     		mov	r3, r0
 1388 067a 9AB2     		uxth	r2, r3
 1389 067c A74B     		ldr	r3, .L90+12
 1390 067e 1A80     		strh	r2, [r3]	@ movhi
 1391              	.L57:
 360:main.c        ****                     }
 361:main.c        ****                     
 362:main.c        ****                     if(average > BOT_THRESHOLD){                        
 1392              		.loc 1 362 0
 1393 0680 A64B     		ldr	r3, .L90+12
 1394 0682 1B88     		ldrh	r3, [r3]
 1395 0684 1BB2     		sxth	r3, r3
 1396 0686 44F62062 		movw	r2, #20000
 1397 068a 9342     		cmp	r3, r2
 1398 068c 40F3A580 		ble	.L59
 1399              	.LBB4:
 363:main.c        ****                         STATE = LANDED;                                     //Switch to LANDED stat
 1400              		.loc 1 363 0
 1401 0690 A34B     		ldr	r3, .L90+16
 1402 0692 0322     		movs	r2, #3
 1403 0694 1A70     		strb	r2, [r3]
 364:main.c        ****                         #ifdef LCD
 365:main.c        ****                             setCursor(0,0);
 1404              		.loc 1 365 0
 1405 0696 0020     		movs	r0, #0
 1406 0698 0021     		movs	r1, #0
 1407 069a FFF7FEFF 		bl	setCursor
 366:main.c        ****                             clear();
 1408              		.loc 1 366 0
 1409 069e FFF7FEFF 		bl	clear
 367:main.c        ****                             LCD_print("STATE: LANDED");  
 1410              		.loc 1 367 0
 1411 06a2 A048     		ldr	r0, .L90+20
 1412 06a4 FFF7FEFF 		bl	LCD_print
 368:main.c        ****                         #endif
 369:main.c        ****                         char sdbuf[60] = {};
 1413              		.loc 1 369 0
 1414 06a8 3B1D     		adds	r3, r7, #4
 1415 06aa 1A46     		mov	r2, r3
 1416 06ac 3C23     		movs	r3, #60
 1417 06ae 1046     		mov	r0, r2
 1418 06b0 0021     		movs	r1, #0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 34


 1419 06b2 1A46     		mov	r2, r3
 1420 06b4 FFF7FEFF 		bl	memset
 370:main.c        ****                         #ifdef SD
 371:main.c        ****                             sprintf(sdbuf, "STATE: LANDED ***********\n");
 1421              		.loc 1 371 0
 1422 06b8 3B1D     		adds	r3, r7, #4
 1423 06ba 9B4A     		ldr	r2, .L90+24
 1424 06bc 1C46     		mov	r4, r3
 1425 06be 1546     		mov	r5, r2
 1426 06c0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1427 06c2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1428 06c4 95E80700 		ldmia	r5, {r0, r1, r2}
 1429 06c8 03C4     		stmia	r4!, {r0, r1}
 1430 06ca 2280     		strh	r2, [r4]	@ movhi
 1431 06cc 0234     		adds	r4, r4, #2
 1432 06ce 130C     		lsrs	r3, r2, #16
 1433 06d0 2370     		strb	r3, [r4]
 372:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 1434              		.loc 1 372 0
 1435 06d2 964B     		ldr	r3, .L90+28
 1436 06d4 1C68     		ldr	r4, [r3]
 1437 06d6 3B1D     		adds	r3, r7, #4
 1438 06d8 1846     		mov	r0, r3
 1439 06da FFF7FEFF 		bl	strlen
 1440 06de 0246     		mov	r2, r0
 1441 06e0 3B1D     		adds	r3, r7, #4
 1442 06e2 2046     		mov	r0, r4
 1443 06e4 1946     		mov	r1, r3
 1444 06e6 FFF7FEFF 		bl	FS_Write
 373:main.c        ****                         #endif
 374:main.c        ****                         #ifdef BT
 375:main.c        ****                             stateMsgCount = 0;
 1445              		.loc 1 375 0
 1446 06ea 0023     		movs	r3, #0
 1447 06ec C7F82031 		str	r3, [r7, #288]
 376:main.c        ****                             while (stateMsgCount < LANDED_LEN){
 1448              		.loc 1 376 0
 1449 06f0 19E0     		b	.L60
 1450              	.L63:
 377:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1451              		.loc 1 377 0
 1452 06f2 11E0     		b	.L61
 1453              	.L62:
 378:main.c        ****                                     UART_PutChar(landedbuf[stateMsgCount++]);
 1454              		.loc 1 378 0
 1455 06f4 D7F82031 		ldr	r3, [r7, #288]
 1456 06f8 5A1C     		adds	r2, r3, #1
 1457 06fa C7F82021 		str	r2, [r7, #288]
 1458 06fe 07F59472 		add	r2, r7, #296
 1459 0702 1344     		add	r3, r3, r2
 1460 0704 13F8A83C 		ldrb	r3, [r3, #-168]	@ zero_extendqisi2
 1461 0708 1846     		mov	r0, r3
 1462 070a FFF7FEFF 		bl	UART_PutChar
 379:main.c        ****                                     if (stateMsgCount >= LANDED_LEN) break;
 1463              		.loc 1 379 0
 1464 070e D7F82031 		ldr	r3, [r7, #288]
 1465 0712 0D2B     		cmp	r3, #13
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 35


 1466 0714 00DD     		ble	.L61
 1467 0716 06E0     		b	.L60
 1468              	.L61:
 377:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1469              		.loc 1 377 0
 1470 0718 FFF7FEFF 		bl	UART_ReadTxStatus
 1471 071c 0346     		mov	r3, r0
 1472 071e 03F00803 		and	r3, r3, #8
 1473 0722 002B     		cmp	r3, #0
 1474 0724 E6D1     		bne	.L62
 1475              	.L60:
 376:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1476              		.loc 1 376 0
 1477 0726 D7F82031 		ldr	r3, [r7, #288]
 1478 072a 0D2B     		cmp	r3, #13
 1479 072c E1DD     		ble	.L63
 380:main.c        ****                                 }
 381:main.c        ****                             }
 382:main.c        ****                         #endif
 383:main.c        ****                         #ifdef LCD
 384:main.c        ****                             setCursor(0,0);
 1480              		.loc 1 384 0
 1481 072e 0020     		movs	r0, #0
 1482 0730 0021     		movs	r1, #0
 1483 0732 FFF7FEFF 		bl	setCursor
 385:main.c        ****                             clear();
 1484              		.loc 1 385 0
 1485 0736 FFF7FEFF 		bl	clear
 386:main.c        ****                             LCD_print("VACUUMING");  
 1486              		.loc 1 386 0
 1487 073a 7D48     		ldr	r0, .L90+32
 1488 073c FFF7FEFF 		bl	LCD_print
 387:main.c        ****                         #endif
 388:main.c        ****                         
 389:main.c        ****                         #ifdef SD
 390:main.c        ****                                 memset(sdbuf, 0, 40);
 1489              		.loc 1 390 0
 1490 0740 3B1D     		adds	r3, r7, #4
 1491 0742 1846     		mov	r0, r3
 1492 0744 0021     		movs	r1, #0
 1493 0746 2822     		movs	r2, #40
 1494 0748 FFF7FEFF 		bl	memset
 391:main.c        ****                                 sprintf(sdbuf, "STATE: VACUUMING ***********\n");
 1495              		.loc 1 391 0
 1496 074c 3B1D     		adds	r3, r7, #4
 1497 074e 794A     		ldr	r2, .L90+36
 1498 0750 1C46     		mov	r4, r3
 1499 0752 1546     		mov	r5, r2
 1500 0754 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1501 0756 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1502 0758 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1503 075c 07C4     		stmia	r4!, {r0, r1, r2}
 1504 075e 2380     		strh	r3, [r4]	@ movhi
 392:main.c        ****                                 FS_Write(fsfile, sdbuf, strlen(sdbuf));
 1505              		.loc 1 392 0
 1506 0760 724B     		ldr	r3, .L90+28
 1507 0762 1C68     		ldr	r4, [r3]
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 36


 1508 0764 3B1D     		adds	r3, r7, #4
 1509 0766 1846     		mov	r0, r3
 1510 0768 FFF7FEFF 		bl	strlen
 1511 076c 0246     		mov	r2, r0
 1512 076e 3B1D     		adds	r3, r7, #4
 1513 0770 2046     		mov	r0, r4
 1514 0772 1946     		mov	r1, r3
 1515 0774 FFF7FEFF 		bl	FS_Write
 393:main.c        ****                         #endif
 394:main.c        ****                         #ifdef BT
 395:main.c        ****                             stateMsgCount = 0;
 1516              		.loc 1 395 0
 1517 0778 0023     		movs	r3, #0
 1518 077a C7F82031 		str	r3, [r7, #288]
 396:main.c        ****                             while (stateMsgCount < VACUUM_LEN){
 1519              		.loc 1 396 0
 1520 077e 19E0     		b	.L64
 1521              	.L67:
 397:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1522              		.loc 1 397 0
 1523 0780 11E0     		b	.L65
 1524              	.L66:
 398:main.c        ****                                     UART_PutChar(vacuumbuf[stateMsgCount++]);
 1525              		.loc 1 398 0
 1526 0782 D7F82031 		ldr	r3, [r7, #288]
 1527 0786 5A1C     		adds	r2, r3, #1
 1528 0788 C7F82021 		str	r2, [r7, #288]
 1529 078c 07F59472 		add	r2, r7, #296
 1530 0790 1344     		add	r3, r3, r2
 1531 0792 13F8BC3C 		ldrb	r3, [r3, #-188]	@ zero_extendqisi2
 1532 0796 1846     		mov	r0, r3
 1533 0798 FFF7FEFF 		bl	UART_PutChar
 399:main.c        ****                                     if (stateMsgCount >= VACUUM_LEN) break;
 1534              		.loc 1 399 0
 1535 079c D7F82031 		ldr	r3, [r7, #288]
 1536 07a0 102B     		cmp	r3, #16
 1537 07a2 00DD     		ble	.L65
 1538 07a4 06E0     		b	.L64
 1539              	.L65:
 397:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1540              		.loc 1 397 0
 1541 07a6 FFF7FEFF 		bl	UART_ReadTxStatus
 1542 07aa 0346     		mov	r3, r0
 1543 07ac 03F00803 		and	r3, r3, #8
 1544 07b0 002B     		cmp	r3, #0
 1545 07b2 E6D1     		bne	.L66
 1546              	.L64:
 396:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1547              		.loc 1 396 0
 1548 07b4 D7F82031 		ldr	r3, [r7, #288]
 1549 07b8 102B     		cmp	r3, #16
 1550 07ba E1DD     		ble	.L67
 400:main.c        ****                                 }
 401:main.c        ****                             }
 402:main.c        ****                         #endif
 403:main.c        ****                             id=0;                                                   //reset sample 
 1551              		.loc 1 403 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 37


 1552 07bc 544B     		ldr	r3, .L90
 1553 07be 0022     		movs	r2, #0
 1554 07c0 1A60     		str	r2, [r3]
 404:main.c        ****                             data_time = 0;
 1555              		.loc 1 404 0
 1556 07c2 5D4B     		ldr	r3, .L90+40
 1557 07c4 0022     		movs	r2, #0
 1558 07c6 1A60     		str	r2, [r3]
 405:main.c        ****                             sum = 0;
 1559              		.loc 1 405 0
 1560 07c8 524B     		ldr	r3, .L90+4
 1561 07ca 0022     		movs	r2, #0
 1562 07cc 1A60     		str	r2, [r3]
 406:main.c        ****                             average = 0; 
 1563              		.loc 1 406 0
 1564 07ce 534B     		ldr	r3, .L90+12
 1565 07d0 0022     		movs	r2, #0
 1566 07d2 1A80     		strh	r2, [r3]	@ movhi
 407:main.c        ****                         countdown = 0;
 1567              		.loc 1 407 0
 1568 07d4 594B     		ldr	r3, .L90+44
 1569 07d6 0022     		movs	r2, #0
 1570 07d8 1A70     		strb	r2, [r3]
 1571              	.L59:
 1572              	.LBE4:
 408:main.c        ****                     }
 409:main.c        ****                     id++;     
 1573              		.loc 1 409 0
 1574 07da 4D4B     		ldr	r3, .L90
 1575 07dc 1B68     		ldr	r3, [r3]
 1576 07de 0133     		adds	r3, r3, #1
 1577 07e0 4B4A     		ldr	r2, .L90
 1578 07e2 1360     		str	r3, [r2]
 410:main.c        ****                     
 411:main.c        ****                     /*if desired amount of samples have been collected, switch states*/
 412:main.c        ****                     if(data_time >= DATA_TIME * 2){
 1579              		.loc 1 412 0
 1580 07e4 544B     		ldr	r3, .L90+40
 1581 07e6 1B68     		ldr	r3, [r3]
 1582 07e8 42F20F72 		movw	r2, #9999
 1583 07ec 9342     		cmp	r3, r2
 1584 07ee 1ADD     		ble	.L68
 413:main.c        ****                         LED2_Write(0);                                          //turn LED off
 1585              		.loc 1 413 0
 1586 07f0 0020     		movs	r0, #0
 1587 07f2 FFF7FEFF 		bl	LED2_Write
 414:main.c        ****                                                             
 415:main.c        ****                         STATE = WAIT_TO_LAUNCH;                                //Switch to Waiting 
 1588              		.loc 1 415 0
 1589 07f6 4A4B     		ldr	r3, .L90+16
 1590 07f8 0122     		movs	r2, #1
 1591 07fa 1A70     		strb	r2, [r3]
 416:main.c        ****                         #ifdef LCD
 417:main.c        ****                             setCursor(0,0);
 1592              		.loc 1 417 0
 1593 07fc 0020     		movs	r0, #0
 1594 07fe 0021     		movs	r1, #0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 38


 1595 0800 FFF7FEFF 		bl	setCursor
 418:main.c        ****                             clear();
 1596              		.loc 1 418 0
 1597 0804 FFF7FEFF 		bl	clear
 419:main.c        ****                             LCD_print("STATE: WAIT");  
 1598              		.loc 1 419 0
 1599 0808 4D48     		ldr	r0, .L90+48
 1600 080a FFF7FEFF 		bl	LCD_print
 420:main.c        ****                         #endif
 421:main.c        ****                         id=0;                                                  //reset sample count
 1601              		.loc 1 421 0
 1602 080e 404B     		ldr	r3, .L90
 1603 0810 0022     		movs	r2, #0
 1604 0812 1A60     		str	r2, [r3]
 422:main.c        ****                         data_time = 0;
 1605              		.loc 1 422 0
 1606 0814 484B     		ldr	r3, .L90+40
 1607 0816 0022     		movs	r2, #0
 1608 0818 1A60     		str	r2, [r3]
 423:main.c        ****                         sum = 0;                                               //reset sum 
 1609              		.loc 1 423 0
 1610 081a 3E4B     		ldr	r3, .L90+4
 1611 081c 0022     		movs	r2, #0
 1612 081e 1A60     		str	r2, [r3]
 424:main.c        ****                         average = 0;
 1613              		.loc 1 424 0
 1614 0820 3E4B     		ldr	r3, .L90+12
 1615 0822 0022     		movs	r2, #0
 1616 0824 1A80     		strh	r2, [r3]	@ movhi
 1617              	.L68:
 425:main.c        ****                        
 426:main.c        ****                     }
 427:main.c        ****                     collect_flag = 0;
 1618              		.loc 1 427 0
 1619 0826 474B     		ldr	r3, .L90+52
 1620 0828 0022     		movs	r2, #0
 1621 082a 1A70     		strb	r2, [r3]
 428:main.c        ****                 }
 429:main.c        ****                 break;
 1622              		.loc 1 429 0
 1623 082c 4FE1     		b	.L54
 1624              	.L55:
 1625              		.loc 1 429 0 is_stmt 0 discriminator 2
 1626 082e 4EE1     		b	.L54
 1627              	.L39:
 430:main.c        ****                 
 431:main.c        ****                 case LANDED:
 432:main.c        ****                     if (countdown == 7) {countdown = 0; pulse = 1; Solenoid_1_Write(1);} //turn on 
 1628              		.loc 1 432 0 is_stmt 1
 1629 0830 424B     		ldr	r3, .L90+44
 1630 0832 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1631 0834 072B     		cmp	r3, #7
 1632 0836 08D1     		bne	.L69
 1633              		.loc 1 432 0 is_stmt 0 discriminator 1
 1634 0838 404B     		ldr	r3, .L90+44
 1635 083a 0022     		movs	r2, #0
 1636 083c 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 39


 1637 083e 0123     		movs	r3, #1
 1638 0840 C7F81C31 		str	r3, [r7, #284]
 1639 0844 0120     		movs	r0, #1
 1640 0846 FFF7FEFF 		bl	Solenoid_1_Write
 1641              	.L69:
 433:main.c        ****                     
 434:main.c        ****                     
 435:main.c        ****                     if (countdown == 5 && pulse){
 1642              		.loc 1 435 0 is_stmt 1
 1643 084a 3C4B     		ldr	r3, .L90+44
 1644 084c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1645 084e 052B     		cmp	r3, #5
 1646 0850 0ED1     		bne	.L70
 1647              		.loc 1 435 0 is_stmt 0 discriminator 1
 1648 0852 D7F81C31 		ldr	r3, [r7, #284]
 1649 0856 002B     		cmp	r3, #0
 1650 0858 0AD0     		beq	.L70
 436:main.c        ****                         pulse++;
 1651              		.loc 1 436 0 is_stmt 1
 1652 085a D7F81C31 		ldr	r3, [r7, #284]
 1653 085e 0133     		adds	r3, r3, #1
 1654 0860 C7F81C31 		str	r3, [r7, #284]
 437:main.c        ****                         Solenoid_1_Write(0); //turn off soleniod 1
 1655              		.loc 1 437 0
 1656 0864 0020     		movs	r0, #0
 1657 0866 FFF7FEFF 		bl	Solenoid_1_Write
 438:main.c        ****                         countdown = 0;
 1658              		.loc 1 438 0
 1659 086a 344B     		ldr	r3, .L90+44
 1660 086c 0022     		movs	r2, #0
 1661 086e 1A70     		strb	r2, [r3]
 1662              	.L70:
 439:main.c        ****                         
 440:main.c        ****                     }
 441:main.c        ****                     if (countdown == 3 && pulse == 2){
 1663              		.loc 1 441 0
 1664 0870 324B     		ldr	r3, .L90+44
 1665 0872 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1666 0874 032B     		cmp	r3, #3
 1667 0876 7DD1     		bne	.L71
 1668              		.loc 1 441 0 is_stmt 0 discriminator 1
 1669 0878 D7F81C31 		ldr	r3, [r7, #284]
 1670 087c 022B     		cmp	r3, #2
 1671 087e 79D1     		bne	.L71
 1672              	.LBB5:
 442:main.c        ****                         STATE = RESURFACE;
 1673              		.loc 1 442 0 is_stmt 1
 1674 0880 274B     		ldr	r3, .L90+16
 1675 0882 0422     		movs	r2, #4
 1676 0884 1A70     		strb	r2, [r3]
 443:main.c        ****                         char sdbuf[60] = {};
 1677              		.loc 1 443 0
 1678 0886 3B1D     		adds	r3, r7, #4
 1679 0888 1A46     		mov	r2, r3
 1680 088a 3C23     		movs	r3, #60
 1681 088c 1046     		mov	r0, r2
 1682 088e 0021     		movs	r1, #0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 40


 1683 0890 1A46     		mov	r2, r3
 1684 0892 FFF7FEFF 		bl	memset
 444:main.c        ****                         #ifdef LCD
 445:main.c        ****                             setCursor(0,0);
 1685              		.loc 1 445 0
 1686 0896 0020     		movs	r0, #0
 1687 0898 0021     		movs	r1, #0
 1688 089a FFF7FEFF 		bl	setCursor
 446:main.c        ****                             clear();
 1689              		.loc 1 446 0
 1690 089e FFF7FEFF 		bl	clear
 447:main.c        ****                             LCD_print("STATE: RESURFACING");  
 1691              		.loc 1 447 0
 1692 08a2 2948     		ldr	r0, .L90+56
 1693 08a4 FFF7FEFF 		bl	LCD_print
 448:main.c        ****                         #endif
 449:main.c        ****                         #ifdef SD
 450:main.c        ****                             memset(sdbuf, 0, 40);
 1694              		.loc 1 450 0
 1695 08a8 3B1D     		adds	r3, r7, #4
 1696 08aa 1846     		mov	r0, r3
 1697 08ac 0021     		movs	r1, #0
 1698 08ae 2822     		movs	r2, #40
 1699 08b0 FFF7FEFF 		bl	memset
 451:main.c        ****                             sprintf(sdbuf, "STATE: RESURFACING ***********\n");
 1700              		.loc 1 451 0
 1701 08b4 3B1D     		adds	r3, r7, #4
 1702 08b6 254A     		ldr	r2, .L90+60
 1703 08b8 1C46     		mov	r4, r3
 1704 08ba 1546     		mov	r5, r2
 1705 08bc 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1706 08be 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1707 08c0 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1708 08c4 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 452:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 1709              		.loc 1 452 0
 1710 08c8 184B     		ldr	r3, .L90+28
 1711 08ca 1C68     		ldr	r4, [r3]
 1712 08cc 3B1D     		adds	r3, r7, #4
 1713 08ce 1846     		mov	r0, r3
 1714 08d0 FFF7FEFF 		bl	strlen
 1715 08d4 0246     		mov	r2, r0
 1716 08d6 3B1D     		adds	r3, r7, #4
 1717 08d8 2046     		mov	r0, r4
 1718 08da 1946     		mov	r1, r3
 1719 08dc FFF7FEFF 		bl	FS_Write
 453:main.c        ****                         #endif
 454:main.c        ****                         #ifdef BT
 455:main.c        ****                             stateMsgCount = 0;
 1720              		.loc 1 455 0
 1721 08e0 0023     		movs	r3, #0
 1722 08e2 C7F82031 		str	r3, [r7, #288]
 456:main.c        ****                             while (stateMsgCount < RESURFACE_LEN){
 1723              		.loc 1 456 0
 1724 08e6 3AE0     		b	.L72
 1725              	.L75:
 457:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 41


 1726              		.loc 1 457 0
 1727 08e8 32E0     		b	.L73
 1728              	.L74:
 458:main.c        ****                                     UART_PutChar(resurfbuf[stateMsgCount++]);
 1729              		.loc 1 458 0
 1730 08ea D7F82031 		ldr	r3, [r7, #288]
 1731 08ee 5A1C     		adds	r2, r3, #1
 1732 08f0 C7F82021 		str	r2, [r7, #288]
 1733 08f4 07F59472 		add	r2, r7, #296
 1734 08f8 1344     		add	r3, r3, r2
 1735 08fa 13F8D03C 		ldrb	r3, [r3, #-208]	@ zero_extendqisi2
 1736 08fe 1846     		mov	r0, r3
 1737 0900 FFF7FEFF 		bl	UART_PutChar
 459:main.c        ****                                     if (stateMsgCount >= RESURFACE_LEN) break;
 1738              		.loc 1 459 0
 1739 0904 D7F82031 		ldr	r3, [r7, #288]
 1740 0908 102B     		cmp	r3, #16
 1741 090a 21DD     		ble	.L73
 1742 090c 27E0     		b	.L72
 1743              	.L91:
 1744 090e 00BF     		.align	2
 1745              	.L90:
 1746 0910 00000000 		.word	id
 1747 0914 00000000 		.word	sum
 1748 0918 89888888 		.word	-2004318071
 1749 091c 00000000 		.word	average
 1750 0920 00000000 		.word	STATE
 1751 0924 8C000000 		.word	.LC14
 1752 0928 9C000000 		.word	.LC15
 1753 092c 00000000 		.word	fsfile
 1754 0930 B8000000 		.word	.LC16
 1755 0934 C4000000 		.word	.LC17
 1756 0938 00000000 		.word	data_time
 1757 093c 00000000 		.word	countdown
 1758 0940 E4000000 		.word	.LC18
 1759 0944 00000000 		.word	collect_flag
 1760 0948 F0000000 		.word	.LC19
 1761 094c 04010000 		.word	.LC20
 1762              	.L73:
 457:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1763              		.loc 1 457 0
 1764 0950 FFF7FEFF 		bl	UART_ReadTxStatus
 1765 0954 0346     		mov	r3, r0
 1766 0956 03F00803 		and	r3, r3, #8
 1767 095a 002B     		cmp	r3, #0
 1768 095c C5D1     		bne	.L74
 1769              	.L72:
 456:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1770              		.loc 1 456 0
 1771 095e D7F82031 		ldr	r3, [r7, #288]
 1772 0962 102B     		cmp	r3, #16
 1773 0964 C0DD     		ble	.L75
 460:main.c        ****                                 }
 461:main.c        ****                             }
 462:main.c        ****                         #endif
 463:main.c        ****                         pulse = 0;
 1774              		.loc 1 463 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 42


 1775 0966 0023     		movs	r3, #0
 1776 0968 C7F81C31 		str	r3, [r7, #284]
 464:main.c        ****                         countdown = 0;
 1777              		.loc 1 464 0
 1778 096c 594B     		ldr	r3, .L92
 1779 096e 0022     		movs	r2, #0
 1780 0970 1A70     		strb	r2, [r3]
 1781              	.LBE5:
 465:main.c        ****                     }
 466:main.c        ****                 break;
 1782              		.loc 1 466 0
 1783 0972 ACE0     		b	.L54
 1784              	.L71:
 1785              		.loc 1 466 0 is_stmt 0 discriminator 3
 1786 0974 ABE0     		b	.L54
 1787              	.L40:
 467:main.c        ****                 
 468:main.c        ****             case RESURFACE:
 469:main.c        ****                 if (PANIC_flag)
 1788              		.loc 1 469 0 is_stmt 1
 1789 0976 584B     		ldr	r3, .L92+4
 1790 0978 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1791 097a 002B     		cmp	r3, #0
 1792 097c 02D0     		beq	.L76
 470:main.c        ****                     LCD_print("WATER DETECTED");
 1793              		.loc 1 470 0
 1794 097e 5748     		ldr	r0, .L92+8
 1795 0980 FFF7FEFF 		bl	LCD_print
 1796              	.L76:
 471:main.c        ****                 Solenoid_2_Write(1);
 1797              		.loc 1 471 0
 1798 0984 0120     		movs	r0, #1
 1799 0986 FFF7FEFF 		bl	Solenoid_2_Write
 472:main.c        ****                 
 473:main.c        ****                 //check pressure sensor to confirm we are at the surface
 474:main.c        ****                 if (countdown == 3){
 1800              		.loc 1 474 0
 1801 098a 524B     		ldr	r3, .L92
 1802 098c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1803 098e 032B     		cmp	r3, #3
 1804 0990 0ED1     		bne	.L77
 475:main.c        ****                     Solenoid_2_Write(0);
 1805              		.loc 1 475 0
 1806 0992 0020     		movs	r0, #0
 1807 0994 FFF7FEFF 		bl	Solenoid_2_Write
 476:main.c        ****                     CyDelay(1000u);
 1808              		.loc 1 476 0
 1809 0998 4FF47A70 		mov	r0, #1000
 1810 099c FFF7FEFF 		bl	CyDelay
 477:main.c        ****                     pulse++;
 1811              		.loc 1 477 0
 1812 09a0 D7F81C31 		ldr	r3, [r7, #284]
 1813 09a4 0133     		adds	r3, r3, #1
 1814 09a6 C7F81C31 		str	r3, [r7, #284]
 478:main.c        ****                     countdown = 0;
 1815              		.loc 1 478 0
 1816 09aa 4A4B     		ldr	r3, .L92
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 43


 1817 09ac 0022     		movs	r2, #0
 1818 09ae 1A70     		strb	r2, [r3]
 1819              	.L77:
 479:main.c        ****                 }
 480:main.c        ****                 if (pulse == 2){
 1820              		.loc 1 480 0
 1821 09b0 D7F81C31 		ldr	r3, [r7, #284]
 1822 09b4 022B     		cmp	r3, #2
 1823 09b6 6ED1     		bne	.L78
 1824              	.LBB6:
 481:main.c        ****                     char sdbuf[60] = {};
 1825              		.loc 1 481 0
 1826 09b8 3B1D     		adds	r3, r7, #4
 1827 09ba 1A46     		mov	r2, r3
 1828 09bc 3C23     		movs	r3, #60
 1829 09be 1046     		mov	r0, r2
 1830 09c0 0021     		movs	r1, #0
 1831 09c2 1A46     		mov	r2, r3
 1832 09c4 FFF7FEFF 		bl	memset
 482:main.c        ****                                                    //wait 10 seconds to lift, for testing in pool
 483:main.c        ****                     STATE = TRANSMIT;
 1833              		.loc 1 483 0
 1834 09c8 454B     		ldr	r3, .L92+12
 1835 09ca 0522     		movs	r2, #5
 1836 09cc 1A70     		strb	r2, [r3]
 484:main.c        ****                     #ifdef SD                                   //close old file, open new one
 485:main.c        ****                     FS_FClose(fsfile);
 1837              		.loc 1 485 0
 1838 09ce 454B     		ldr	r3, .L92+16
 1839 09d0 1B68     		ldr	r3, [r3]
 1840 09d2 1846     		mov	r0, r3
 1841 09d4 FFF7FEFF 		bl	FS_FClose
 486:main.c        ****                     sprintf(file, "test%d.txt", ++testnum);
 1842              		.loc 1 486 0
 1843 09d8 434B     		ldr	r3, .L92+20
 1844 09da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1845 09dc 0133     		adds	r3, r3, #1
 1846 09de DAB2     		uxtb	r2, r3
 1847 09e0 414B     		ldr	r3, .L92+20
 1848 09e2 1A70     		strb	r2, [r3]
 1849 09e4 404B     		ldr	r3, .L92+20
 1850 09e6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1851 09e8 4048     		ldr	r0, .L92+24
 1852 09ea 4149     		ldr	r1, .L92+28
 1853 09ec 1A46     		mov	r2, r3
 1854 09ee FFF7FEFF 		bl	sprintf
 487:main.c        ****                     fsfile = FS_FOpen(file, "w");
 1855              		.loc 1 487 0
 1856 09f2 3E48     		ldr	r0, .L92+24
 1857 09f4 3F49     		ldr	r1, .L92+32
 1858 09f6 FFF7FEFF 		bl	FS_FOpen
 1859 09fa 0246     		mov	r2, r0
 1860 09fc 394B     		ldr	r3, .L92+16
 1861 09fe 1A60     		str	r2, [r3]
 488:main.c        ****                     #endif 
 489:main.c        ****                     
 490:main.c        ****                     #ifdef LCD
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 44


 491:main.c        ****                         setCursor(0,0);
 1862              		.loc 1 491 0
 1863 0a00 0020     		movs	r0, #0
 1864 0a02 0021     		movs	r1, #0
 1865 0a04 FFF7FEFF 		bl	setCursor
 492:main.c        ****                         clear();
 1866              		.loc 1 492 0
 1867 0a08 FFF7FEFF 		bl	clear
 493:main.c        ****                         LCD_print("TRANSMIT");  
 1868              		.loc 1 493 0
 1869 0a0c 3A48     		ldr	r0, .L92+36
 1870 0a0e FFF7FEFF 		bl	LCD_print
 494:main.c        ****                     #endif
 495:main.c        ****                     #ifdef SD
 496:main.c        ****                         memset(sdbuf, 0, 40);
 1871              		.loc 1 496 0
 1872 0a12 3B1D     		adds	r3, r7, #4
 1873 0a14 1846     		mov	r0, r3
 1874 0a16 0021     		movs	r1, #0
 1875 0a18 2822     		movs	r2, #40
 1876 0a1a FFF7FEFF 		bl	memset
 497:main.c        ****                         sprintf(sdbuf, "STATE: TRANSMIT ***********\n");
 1877              		.loc 1 497 0
 1878 0a1e 3B1D     		adds	r3, r7, #4
 1879 0a20 364A     		ldr	r2, .L92+40
 1880 0a22 1C46     		mov	r4, r3
 1881 0a24 1546     		mov	r5, r2
 1882 0a26 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1883 0a28 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1884 0a2a 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1885 0a2e 07C4     		stmia	r4!, {r0, r1, r2}
 1886 0a30 2370     		strb	r3, [r4]
 498:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));
 1887              		.loc 1 498 0
 1888 0a32 2C4B     		ldr	r3, .L92+16
 1889 0a34 1C68     		ldr	r4, [r3]
 1890 0a36 3B1D     		adds	r3, r7, #4
 1891 0a38 1846     		mov	r0, r3
 1892 0a3a FFF7FEFF 		bl	strlen
 1893 0a3e 0246     		mov	r2, r0
 1894 0a40 3B1D     		adds	r3, r7, #4
 1895 0a42 2046     		mov	r0, r4
 1896 0a44 1946     		mov	r1, r3
 1897 0a46 FFF7FEFF 		bl	FS_Write
 499:main.c        ****                     #endif
 500:main.c        ****                     #ifdef BT
 501:main.c        ****                         stateMsgCount = 0;
 1898              		.loc 1 501 0
 1899 0a4a 0023     		movs	r3, #0
 1900 0a4c C7F82031 		str	r3, [r7, #288]
 502:main.c        ****                         while (stateMsgCount < TRANSMIT_LEN){
 1901              		.loc 1 502 0
 1902 0a50 19E0     		b	.L79
 1903              	.L82:
 503:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1904              		.loc 1 503 0
 1905 0a52 11E0     		b	.L80
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 45


 1906              	.L81:
 504:main.c        ****                                 UART_PutChar(transbuf[stateMsgCount++]);
 1907              		.loc 1 504 0
 1908 0a54 D7F82031 		ldr	r3, [r7, #288]
 1909 0a58 5A1C     		adds	r2, r3, #1
 1910 0a5a C7F82021 		str	r2, [r7, #288]
 1911 0a5e 07F59472 		add	r2, r7, #296
 1912 0a62 1344     		add	r3, r3, r2
 1913 0a64 13F8E03C 		ldrb	r3, [r3, #-224]	@ zero_extendqisi2
 1914 0a68 1846     		mov	r0, r3
 1915 0a6a FFF7FEFF 		bl	UART_PutChar
 505:main.c        ****                                 if (stateMsgCount >= TRANSMIT_LEN) break;
 1916              		.loc 1 505 0
 1917 0a6e D7F82031 		ldr	r3, [r7, #288]
 1918 0a72 0F2B     		cmp	r3, #15
 1919 0a74 00DD     		ble	.L80
 1920 0a76 06E0     		b	.L79
 1921              	.L80:
 503:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1922              		.loc 1 503 0
 1923 0a78 FFF7FEFF 		bl	UART_ReadTxStatus
 1924 0a7c 0346     		mov	r3, r0
 1925 0a7e 03F00803 		and	r3, r3, #8
 1926 0a82 002B     		cmp	r3, #0
 1927 0a84 E6D1     		bne	.L81
 1928              	.L79:
 502:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1929              		.loc 1 502 0
 1930 0a86 D7F82031 		ldr	r3, [r7, #288]
 1931 0a8a 0F2B     		cmp	r3, #15
 1932 0a8c E1DD     		ble	.L82
 506:main.c        ****                             }
 507:main.c        ****                         }
 508:main.c        ****                     #endif
 509:main.c        ****                     countdown = 0;
 1933              		.loc 1 509 0
 1934 0a8e 114B     		ldr	r3, .L92
 1935 0a90 0022     		movs	r2, #0
 1936 0a92 1A70     		strb	r2, [r3]
 1937              	.LBE6:
 510:main.c        ****                 }
 511:main.c        ****                 break;
 1938              		.loc 1 511 0
 1939 0a94 1BE0     		b	.L54
 1940              	.L78:
 1941              		.loc 1 511 0 is_stmt 0 discriminator 5
 1942 0a96 1AE0     		b	.L54
 1943              	.L41:
 512:main.c        ****                 
 513:main.c        ****             case TRANSMIT:
 514:main.c        ****                 if (transmit_flag){
 1944              		.loc 1 514 0 is_stmt 1
 1945 0a98 194B     		ldr	r3, .L92+44
 1946 0a9a 1B68     		ldr	r3, [r3]
 1947 0a9c 002B     		cmp	r3, #0
 1948 0a9e 0BD0     		beq	.L83
 515:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &t); // Here, the STATE variable only matters,
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 46


 1949              		.loc 1 515 0
 1950 0aa0 07F1B402 		add	r2, r7, #180
 1951 0aa4 07F14003 		add	r3, r7, #64
 1952 0aa8 1046     		mov	r0, r2
 1953 0aaa 0D49     		ldr	r1, .L92+12
 1954 0aac 0A22     		movs	r2, #10
 1955 0aae FFF7FEFF 		bl	BT_Send
 516:main.c        ****                     transmit_flag = 0;
 1956              		.loc 1 516 0
 1957 0ab2 134B     		ldr	r3, .L92+44
 1958 0ab4 0022     		movs	r2, #0
 1959 0ab6 1A60     		str	r2, [r3]
 1960              	.L83:
 517:main.c        ****                 }
 518:main.c        ****                 countdown = 0;
 1961              		.loc 1 518 0
 1962 0ab8 064B     		ldr	r3, .L92
 1963 0aba 0022     		movs	r2, #0
 1964 0abc 1A70     		strb	r2, [r3]
 519:main.c        ****                 pulse = 0;
 1965              		.loc 1 519 0
 1966 0abe 0023     		movs	r3, #0
 1967 0ac0 C7F81C31 		str	r3, [r7, #284]
 520:main.c        ****                 depth = 0;
 1968              		.loc 1 520 0
 1969 0ac4 0F4B     		ldr	r3, .L92+48
 1970 0ac6 0022     		movs	r2, #0
 1971 0ac8 1A60     		str	r2, [r3]
 521:main.c        ****                 
 522:main.c        ****                 //FS_Read(fsfile, 4);
 523:main.c        ****                 
 524:main.c        ****                 //CyDelay(15000u);
 525:main.c        ****                 
 526:main.c        ****                 break;
 1972              		.loc 1 526 0
 1973 0aca 00E0     		b	.L54
 1974              	.L85:
 527:main.c        ****                 
 528:main.c        ****             default:
 529:main.c        ****                 break;
 1975              		.loc 1 529 0
 1976 0acc 00BF     		nop
 1977              	.L54:
 1978              	.LBE2:
 530:main.c        ****         
 531:main.c        ****         
 532:main.c        ****         }
 533:main.c        ****         
 534:main.c        ****     }
 1979              		.loc 1 534 0 discriminator 6
 1980 0ace FFF762BB 		b	.L84
 1981              	.L93:
 1982 0ad2 00BF     		.align	2
 1983              	.L92:
 1984 0ad4 00000000 		.word	countdown
 1985 0ad8 00000000 		.word	PANIC_flag
 1986 0adc 24010000 		.word	.LC21
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 47


 1987 0ae0 00000000 		.word	STATE
 1988 0ae4 00000000 		.word	fsfile
 1989 0ae8 00000000 		.word	testnum
 1990 0aec 00000000 		.word	file
 1991 0af0 34010000 		.word	.LC22
 1992 0af4 40010000 		.word	.LC23
 1993 0af8 44010000 		.word	.LC24
 1994 0afc 50010000 		.word	.LC25
 1995 0b00 00000000 		.word	transmit_flag
 1996 0b04 00000000 		.word	depth
 1997              		.cfi_endproc
 1998              	.LFE68:
 1999              		.size	main, .-main
 2000              		.section	.rodata
 2001 01dd 000000   		.align	2
 2002              	.LC26:
 2003 01e0 53642076 		.ascii	"Sd vol succeed\000"
 2003      6F6C2073 
 2003      75636365 
 2003      656400
 2004 01ef 00       		.align	2
 2005              	.LC27:
 2006 01f0 53642076 		.ascii	"Sd vol failed\000"
 2006      6F6C2066 
 2006      61696C65 
 2006      6400
 2007 01fe 0000     		.align	2
 2008              	.LC28:
 2009 0200 666F726D 		.ascii	"format Succeeded\000"
 2009      61742053 
 2009      75636365 
 2009      65646564 
 2009      00
 2010 0211 000000   		.align	2
 2011              	.LC29:
 2012 0214 666F726D 		.ascii	"format Failed\000"
 2012      61742046 
 2012      61696C65 
 2012      6400
 2013 0222 0000     		.align	2
 2014              	.LC30:
 2015 0224 46696C65 		.ascii	"File \000"
 2015      2000
 2016 022a 0000     		.align	2
 2017              	.LC31:
 2018 022c 77617320 		.ascii	"was opened\000"
 2018      6F70656E 
 2018      656400
 2019 0237 00       		.align	2
 2020              	.LC32:
 2021 0238 77726974 		.ascii	"written to file\000"
 2021      74656E20 
 2021      746F2066 
 2021      696C6500 
 2022              		.align	2
 2023              	.LC33:
 2024 0248 4661696C 		.ascii	"Failed to write\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 48


 2024      65642074 
 2024      6F207772 
 2024      69746500 
 2025              		.align	2
 2026              	.LC34:
 2027 0258 66696C65 		.ascii	"file not created\000"
 2027      206E6F74 
 2027      20637265 
 2027      61746564 
 2027      00
 2028 0269 000000   		.align	2
 2029              	.LC35:
 2030 026c 0A2D2D2D 		.ascii	"\012------------\012\000"
 2030      2D2D2D2D 
 2030      2D2D2D2D 
 2030      2D0A00
 2031 027b 00       		.section	.text.SD_SETUP,"ax",%progbits
 2032              		.align	2
 2033              		.global	SD_SETUP
 2034              		.thumb
 2035              		.thumb_func
 2036              		.type	SD_SETUP, %function
 2037              	SD_SETUP:
 2038              	.LFB69:
 535:main.c        **** }
 536:main.c        **** 
 537:main.c        **** int SD_SETUP(char* filename){
 2039              		.loc 1 537 0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 16
 2042              		@ frame_needed = 1, uses_anonymous_args = 0
 2043 0000 90B5     		push	{r4, r7, lr}
 2044              		.cfi_def_cfa_offset 12
 2045              		.cfi_offset 4, -12
 2046              		.cfi_offset 7, -8
 2047              		.cfi_offset 14, -4
 2048 0002 85B0     		sub	sp, sp, #20
 2049              		.cfi_def_cfa_offset 32
 2050 0004 00AF     		add	r7, sp, #0
 2051              		.cfi_def_cfa_register 7
 2052 0006 7860     		str	r0, [r7, #4]
 538:main.c        **** int success = 1;
 2053              		.loc 1 538 0
 2054 0008 0123     		movs	r3, #1
 2055 000a FB60     		str	r3, [r7, #12]
 539:main.c        ****       FS_Init();
 2056              		.loc 1 539 0
 2057 000c FFF7FEFF 		bl	FS_Init
 540:main.c        ****             FS_Mount(volume);
 2058              		.loc 1 540 0
 2059 0010 3A48     		ldr	r0, .L104
 2060 0012 FFF7FEFF 		bl	FS_Mount
 541:main.c        ****             if(0 != FS_GetVolumeName(0u, volume, 9u))
 2061              		.loc 1 541 0
 2062 0016 0020     		movs	r0, #0
 2063 0018 3849     		ldr	r1, .L104
 2064 001a 0922     		movs	r2, #9
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 49


 2065 001c FFF7FEFF 		bl	FS_GetVolumeName
 2066 0020 0346     		mov	r3, r0
 2067 0022 002B     		cmp	r3, #0
 2068 0024 03D0     		beq	.L95
 542:main.c        ****                 /* Getting volume name succeeded so prompt it on the LCD */
 543:main.c        ****                 LCD_print("Sd vol succeed");
 2069              		.loc 1 543 0
 2070 0026 3648     		ldr	r0, .L104+4
 2071 0028 FFF7FEFF 		bl	LCD_print
 2072 002c 02E0     		b	.L96
 2073              	.L95:
 544:main.c        ****             else
 545:main.c        ****                 LCD_print("Sd vol failed");
 2074              		.loc 1 545 0
 2075 002e 3548     		ldr	r0, .L104+8
 2076 0030 FFF7FEFF 		bl	LCD_print
 2077              	.L96:
 546:main.c        ****                 success = 0;
 2078              		.loc 1 546 0
 2079 0034 0023     		movs	r3, #0
 2080 0036 FB60     		str	r3, [r7, #12]
 547:main.c        ****             CyDelay(500u);
 2081              		.loc 1 547 0
 2082 0038 4FF4FA70 		mov	r0, #500
 2083 003c FFF7FEFF 		bl	CyDelay
 548:main.c        ****             clear();
 2084              		.loc 1 548 0
 2085 0040 FFF7FEFF 		bl	clear
 549:main.c        ****             if(0 == FS_FormatSD(volume))
 2086              		.loc 1 549 0
 2087 0044 2D48     		ldr	r0, .L104
 2088 0046 FFF7FEFF 		bl	FS_FormatSD
 2089 004a 0346     		mov	r3, r0
 2090 004c 002B     		cmp	r3, #0
 2091 004e 03D1     		bne	.L97
 550:main.c        ****                 LCD_print("format Succeeded");
 2092              		.loc 1 550 0
 2093 0050 2D48     		ldr	r0, .L104+12
 2094 0052 FFF7FEFF 		bl	LCD_print
 2095 0056 02E0     		b	.L98
 2096              	.L97:
 551:main.c        ****             else
 552:main.c        ****                 LCD_print("format Failed");
 2097              		.loc 1 552 0
 2098 0058 2C48     		ldr	r0, .L104+16
 2099 005a FFF7FEFF 		bl	LCD_print
 2100              	.L98:
 553:main.c        ****                 success = 0;
 2101              		.loc 1 553 0
 2102 005e 0023     		movs	r3, #0
 2103 0060 FB60     		str	r3, [r7, #12]
 554:main.c        ****           
 555:main.c        ****             CyDelay(500u);
 2104              		.loc 1 555 0
 2105 0062 4FF4FA70 		mov	r0, #500
 2106 0066 FFF7FEFF 		bl	CyDelay
 556:main.c        ****             clear();
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 50


 2107              		.loc 1 556 0
 2108 006a FFF7FEFF 		bl	clear
 557:main.c        ****             
 558:main.c        ****             fsfile = FS_FOpen(filename, "w");
 2109              		.loc 1 558 0
 2110 006e 7868     		ldr	r0, [r7, #4]
 2111 0070 2749     		ldr	r1, .L104+20
 2112 0072 FFF7FEFF 		bl	FS_FOpen
 2113 0076 0246     		mov	r2, r0
 2114 0078 264B     		ldr	r3, .L104+24
 2115 007a 1A60     		str	r2, [r3]
 559:main.c        ****             if(fsfile)
 2116              		.loc 1 559 0
 2117 007c 254B     		ldr	r3, .L104+24
 2118 007e 1B68     		ldr	r3, [r3]
 2119 0080 002B     		cmp	r3, #0
 2120 0082 29D0     		beq	.L99
 560:main.c        ****             {
 561:main.c        ****                 /* Indicate successful file creation message */
 562:main.c        ****                 LCD_print("File ");
 2121              		.loc 1 562 0
 2122 0084 2448     		ldr	r0, .L104+28
 2123 0086 FFF7FEFF 		bl	LCD_print
 563:main.c        ****                 LCD_print("was opened");
 2124              		.loc 1 563 0
 2125 008a 2448     		ldr	r0, .L104+32
 2126 008c FFF7FEFF 		bl	LCD_print
 564:main.c        ****                 /* Need some delay to indicate output on the LCD */
 565:main.c        ****                 CyDelay(500u);
 2127              		.loc 1 565 0
 2128 0090 4FF4FA70 		mov	r0, #500
 2129 0094 FFF7FEFF 		bl	CyDelay
 566:main.c        ****                 clear();
 2130              		.loc 1 566 0
 2131 0098 FFF7FEFF 		bl	clear
 567:main.c        ****                 
 568:main.c        ****                 if(0 != FS_Write(fsfile, filename, strlen(filename))) 
 2132              		.loc 1 568 0
 2133 009c 1D4B     		ldr	r3, .L104+24
 2134 009e 1C68     		ldr	r4, [r3]
 2135 00a0 7868     		ldr	r0, [r7, #4]
 2136 00a2 FFF7FEFF 		bl	strlen
 2137 00a6 0346     		mov	r3, r0
 2138 00a8 2046     		mov	r0, r4
 2139 00aa 7968     		ldr	r1, [r7, #4]
 2140 00ac 1A46     		mov	r2, r3
 2141 00ae FFF7FEFF 		bl	FS_Write
 2142 00b2 0346     		mov	r3, r0
 2143 00b4 002B     		cmp	r3, #0
 2144 00b6 03D0     		beq	.L100
 569:main.c        ****                     /* Inditate that data was written to a file */
 570:main.c        ****                     LCD_print("written to file");
 2145              		.loc 1 570 0
 2146 00b8 1948     		ldr	r0, .L104+36
 2147 00ba FFF7FEFF 		bl	LCD_print
 2148 00be 02E0     		b	.L101
 2149              	.L100:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 51


 571:main.c        ****                 else
 572:main.c        ****                     LCD_print("Failed to write");
 2150              		.loc 1 572 0
 2151 00c0 1848     		ldr	r0, .L104+40
 2152 00c2 FFF7FEFF 		bl	LCD_print
 2153              	.L101:
 573:main.c        ****                     success = 0;
 2154              		.loc 1 573 0
 2155 00c6 0023     		movs	r3, #0
 2156 00c8 FB60     		str	r3, [r7, #12]
 574:main.c        ****                     clear();
 2157              		.loc 1 574 0
 2158 00ca FFF7FEFF 		bl	clear
 575:main.c        ****                 CyDelay(500u);
 2159              		.loc 1 575 0
 2160 00ce 4FF4FA70 		mov	r0, #500
 2161 00d2 FFF7FEFF 		bl	CyDelay
 2162 00d6 02E0     		b	.L102
 2163              	.L99:
 576:main.c        ****             }
 577:main.c        ****             else
 578:main.c        ****                 LCD_print("file not created");
 2164              		.loc 1 578 0
 2165 00d8 1348     		ldr	r0, .L104+44
 2166 00da FFF7FEFF 		bl	LCD_print
 2167              	.L102:
 579:main.c        ****                 success = 0;
 2168              		.loc 1 579 0
 2169 00de 0023     		movs	r3, #0
 2170 00e0 FB60     		str	r3, [r7, #12]
 580:main.c        ****         
 581:main.c        ****         FS_Write(fsfile, "\n------------\n", 14);
 2171              		.loc 1 581 0
 2172 00e2 0C4B     		ldr	r3, .L104+24
 2173 00e4 1B68     		ldr	r3, [r3]
 2174 00e6 1846     		mov	r0, r3
 2175 00e8 1049     		ldr	r1, .L104+48
 2176 00ea 0E22     		movs	r2, #14
 2177 00ec FFF7FEFF 		bl	FS_Write
 582:main.c        **** return success;
 2178              		.loc 1 582 0
 2179 00f0 FB68     		ldr	r3, [r7, #12]
 583:main.c        **** }
 2180              		.loc 1 583 0
 2181 00f2 1846     		mov	r0, r3
 2182 00f4 1437     		adds	r7, r7, #20
 2183              		.cfi_def_cfa_offset 12
 2184 00f6 BD46     		mov	sp, r7
 2185              		.cfi_def_cfa_register 13
 2186              		@ sp needed
 2187 00f8 90BD     		pop	{r4, r7, pc}
 2188              	.L105:
 2189 00fa 00BF     		.align	2
 2190              	.L104:
 2191 00fc 00000000 		.word	volume
 2192 0100 E0010000 		.word	.LC26
 2193 0104 F0010000 		.word	.LC27
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 52


 2194 0108 00020000 		.word	.LC28
 2195 010c 14020000 		.word	.LC29
 2196 0110 40010000 		.word	.LC23
 2197 0114 00000000 		.word	fsfile
 2198 0118 24020000 		.word	.LC30
 2199 011c 2C020000 		.word	.LC31
 2200 0120 38020000 		.word	.LC32
 2201 0124 48020000 		.word	.LC33
 2202 0128 58020000 		.word	.LC34
 2203 012c 6C020000 		.word	.LC35
 2204              		.cfi_endproc
 2205              	.LFE69:
 2206              		.size	SD_SETUP, .-SD_SETUP
 2207              		.text
 2208              	.Letext0:
 2209              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2210              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2211              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2212              		.file 5 ".\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 2213              		.file 6 "functions.h"
 2214              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2215              		.file 8 "./mpu6050.h"
 2216              		.section	.debug_info,"",%progbits
 2217              	.Ldebug_info0:
 2218 0000 9A060000 		.4byte	0x69a
 2219 0004 0400     		.2byte	0x4
 2220 0006 00000000 		.4byte	.Ldebug_abbrev0
 2221 000a 04       		.byte	0x4
 2222 000b 01       		.uleb128 0x1
 2223 000c 12010000 		.4byte	.LASF86
 2224 0010 01       		.byte	0x1
 2225 0011 23030000 		.4byte	.LASF87
 2226 0015 64020000 		.4byte	.LASF88
 2227 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2228 001d 00000000 		.4byte	0
 2229 0021 00000000 		.4byte	.Ldebug_line0
 2230 0025 02       		.uleb128 0x2
 2231 0026 01       		.byte	0x1
 2232 0027 06       		.byte	0x6
 2233 0028 14020000 		.4byte	.LASF0
 2234 002c 03       		.uleb128 0x3
 2235 002d 20040000 		.4byte	.LASF2
 2236 0031 02       		.byte	0x2
 2237 0032 1D       		.byte	0x1d
 2238 0033 37000000 		.4byte	0x37
 2239 0037 02       		.uleb128 0x2
 2240 0038 01       		.byte	0x1
 2241 0039 08       		.byte	0x8
 2242 003a F4010000 		.4byte	.LASF1
 2243 003e 03       		.uleb128 0x3
 2244 003f 76030000 		.4byte	.LASF3
 2245 0043 02       		.byte	0x2
 2246 0044 29       		.byte	0x29
 2247 0045 49000000 		.4byte	0x49
 2248 0049 02       		.uleb128 0x2
 2249 004a 02       		.byte	0x2
 2250 004b 05       		.byte	0x5
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 53


 2251 004c AD000000 		.4byte	.LASF4
 2252 0050 02       		.uleb128 0x2
 2253 0051 02       		.byte	0x2
 2254 0052 07       		.byte	0x7
 2255 0053 B0020000 		.4byte	.LASF5
 2256 0057 03       		.uleb128 0x3
 2257 0058 6C030000 		.4byte	.LASF6
 2258 005c 02       		.byte	0x2
 2259 005d 3F       		.byte	0x3f
 2260 005e 62000000 		.4byte	0x62
 2261 0062 02       		.uleb128 0x2
 2262 0063 04       		.byte	0x4
 2263 0064 05       		.byte	0x5
 2264 0065 9A020000 		.4byte	.LASF7
 2265 0069 03       		.uleb128 0x3
 2266 006a 59030000 		.4byte	.LASF8
 2267 006e 02       		.byte	0x2
 2268 006f 41       		.byte	0x41
 2269 0070 74000000 		.4byte	0x74
 2270 0074 02       		.uleb128 0x2
 2271 0075 04       		.byte	0x4
 2272 0076 07       		.byte	0x7
 2273 0077 2F030000 		.4byte	.LASF9
 2274 007b 02       		.uleb128 0x2
 2275 007c 08       		.byte	0x8
 2276 007d 05       		.byte	0x5
 2277 007e F3000000 		.4byte	.LASF10
 2278 0082 02       		.uleb128 0x2
 2279 0083 08       		.byte	0x8
 2280 0084 07       		.byte	0x7
 2281 0085 20020000 		.4byte	.LASF11
 2282 0089 04       		.uleb128 0x4
 2283 008a 04       		.byte	0x4
 2284 008b 05       		.byte	0x5
 2285 008c 696E7400 		.ascii	"int\000"
 2286 0090 02       		.uleb128 0x2
 2287 0091 04       		.byte	0x4
 2288 0092 07       		.byte	0x7
 2289 0093 4A020000 		.4byte	.LASF12
 2290 0097 03       		.uleb128 0x3
 2291 0098 C2000000 		.4byte	.LASF13
 2292 009c 03       		.byte	0x3
 2293 009d 15       		.byte	0x15
 2294 009e 2C000000 		.4byte	0x2c
 2295 00a2 03       		.uleb128 0x3
 2296 00a3 C3020000 		.4byte	.LASF14
 2297 00a7 03       		.byte	0x3
 2298 00a8 20       		.byte	0x20
 2299 00a9 3E000000 		.4byte	0x3e
 2300 00ad 03       		.uleb128 0x3
 2301 00ae A8020000 		.4byte	.LASF15
 2302 00b2 03       		.byte	0x3
 2303 00b3 2C       		.byte	0x2c
 2304 00b4 57000000 		.4byte	0x57
 2305 00b8 03       		.uleb128 0x3
 2306 00b9 37020000 		.4byte	.LASF16
 2307 00bd 03       		.byte	0x3
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 54


 2308 00be 2D       		.byte	0x2d
 2309 00bf 69000000 		.4byte	0x69
 2310 00c3 05       		.uleb128 0x5
 2311 00c4 CB020000 		.4byte	.LASF17
 2312 00c8 04       		.byte	0x4
 2313 00c9 9201     		.2byte	0x192
 2314 00cb 37000000 		.4byte	0x37
 2315 00cf 05       		.uleb128 0x5
 2316 00d0 D0000000 		.4byte	.LASF18
 2317 00d4 04       		.byte	0x4
 2318 00d5 9601     		.2byte	0x196
 2319 00d7 49000000 		.4byte	0x49
 2320 00db 02       		.uleb128 0x2
 2321 00dc 04       		.byte	0x4
 2322 00dd 04       		.byte	0x4
 2323 00de DF000000 		.4byte	.LASF19
 2324 00e2 02       		.uleb128 0x2
 2325 00e3 08       		.byte	0x8
 2326 00e4 04       		.byte	0x4
 2327 00e5 52030000 		.4byte	.LASF20
 2328 00e9 02       		.uleb128 0x2
 2329 00ea 01       		.byte	0x1
 2330 00eb 08       		.byte	0x8
 2331 00ec 95020000 		.4byte	.LASF21
 2332 00f0 05       		.uleb128 0x5
 2333 00f1 2A030000 		.4byte	.LASF22
 2334 00f5 04       		.byte	0x4
 2335 00f6 3C02     		.2byte	0x23c
 2336 00f8 FC000000 		.4byte	0xfc
 2337 00fc 06       		.uleb128 0x6
 2338 00fd C3000000 		.4byte	0xc3
 2339 0101 02       		.uleb128 0x2
 2340 0102 04       		.byte	0x4
 2341 0103 07       		.byte	0x7
 2342 0104 8B030000 		.4byte	.LASF23
 2343 0108 07       		.uleb128 0x7
 2344 0109 04       		.byte	0x4
 2345 010a E9000000 		.4byte	0xe9
 2346 010e 03       		.uleb128 0x3
 2347 010f 02020000 		.4byte	.LASF24
 2348 0113 05       		.byte	0x5
 2349 0114 7E       		.byte	0x7e
 2350 0115 19010000 		.4byte	0x119
 2351 0119 08       		.uleb128 0x8
 2352 011a 02020000 		.4byte	.LASF24
 2353 011e 07       		.uleb128 0x7
 2354 011f 04       		.byte	0x4
 2355 0120 0E010000 		.4byte	0x10e
 2356 0124 02       		.uleb128 0x2
 2357 0125 08       		.byte	0x8
 2358 0126 04       		.byte	0x4
 2359 0127 D9010000 		.4byte	.LASF25
 2360 012b 09       		.uleb128 0x9
 2361 012c 36000000 		.4byte	.LASF33
 2362 0130 01       		.byte	0x1
 2363 0131 06       		.byte	0x6
 2364 0132 35       		.byte	0x35
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 55


 2365 0133 62010000 		.4byte	0x162
 2366 0137 0A       		.uleb128 0xa
 2367 0138 29000000 		.4byte	.LASF26
 2368 013c 00       		.sleb128 0
 2369 013d 0A       		.uleb128 0xa
 2370 013e E5010000 		.4byte	.LASF27
 2371 0142 01       		.sleb128 1
 2372 0143 0A       		.uleb128 0xa
 2373 0144 41030000 		.4byte	.LASF28
 2374 0148 02       		.sleb128 2
 2375 0149 0A       		.uleb128 0xa
 2376 014a 63000000 		.4byte	.LASF29
 2377 014e 03       		.sleb128 3
 2378 014f 0A       		.uleb128 0xa
 2379 0150 00000000 		.4byte	.LASF30
 2380 0154 04       		.sleb128 4
 2381 0155 0A       		.uleb128 0xa
 2382 0156 09010000 		.4byte	.LASF31
 2383 015a 05       		.sleb128 5
 2384 015b 0A       		.uleb128 0xa
 2385 015c C6010000 		.4byte	.LASF32
 2386 0160 06       		.sleb128 6
 2387 0161 00       		.byte	0
 2388 0162 03       		.uleb128 0x3
 2389 0163 36000000 		.4byte	.LASF33
 2390 0167 06       		.byte	0x6
 2391 0168 3D       		.byte	0x3d
 2392 0169 2B010000 		.4byte	0x12b
 2393 016d 0B       		.uleb128 0xb
 2394 016e 7C000000 		.4byte	.LASF34
 2395 0172 01       		.byte	0x1
 2396 0173 5F       		.byte	0x5f
 2397 0174 00000000 		.4byte	.LFB63
 2398 0178 20000000 		.4byte	.LFE63-.LFB63
 2399 017c 01       		.uleb128 0x1
 2400 017d 9C       		.byte	0x9c
 2401 017e 0C       		.uleb128 0xc
 2402 017f FC030000 		.4byte	.LASF35
 2403 0183 01       		.byte	0x1
 2404 0184 66       		.byte	0x66
 2405 0185 00000000 		.4byte	.LFB64
 2406 0189 38000000 		.4byte	.LFE64-.LFB64
 2407 018d 01       		.uleb128 0x1
 2408 018e 9C       		.byte	0x9c
 2409 018f 0C       		.uleb128 0xc
 2410 0190 0D030000 		.4byte	.LASF36
 2411 0194 01       		.byte	0x1
 2412 0195 6F       		.byte	0x6f
 2413 0196 00000000 		.4byte	.LFB65
 2414 019a 80000000 		.4byte	.LFE65-.LFB65
 2415 019e 01       		.uleb128 0x1
 2416 019f 9C       		.byte	0x9c
 2417 01a0 0B       		.uleb128 0xb
 2418 01a1 C7030000 		.4byte	.LASF37
 2419 01a5 01       		.byte	0x1
 2420 01a6 7F       		.byte	0x7f
 2421 01a7 00000000 		.4byte	.LFB66
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 56


 2422 01ab 50000000 		.4byte	.LFE66-.LFB66
 2423 01af 01       		.uleb128 0x1
 2424 01b0 9C       		.byte	0x9c
 2425 01b1 0C       		.uleb128 0xc
 2426 01b2 A4030000 		.4byte	.LASF38
 2427 01b6 01       		.byte	0x1
 2428 01b7 89       		.byte	0x89
 2429 01b8 00000000 		.4byte	.LFB67
 2430 01bc 58000000 		.4byte	.LFE67-.LFB67
 2431 01c0 01       		.uleb128 0x1
 2432 01c1 9C       		.byte	0x9c
 2433 01c2 0D       		.uleb128 0xd
 2434 01c3 A3020000 		.4byte	.LASF89
 2435 01c7 01       		.byte	0x1
 2436 01c8 91       		.byte	0x91
 2437 01c9 89000000 		.4byte	0x89
 2438 01cd 00000000 		.4byte	.LFB68
 2439 01d1 080B0000 		.4byte	.LFE68-.LFB68
 2440 01d5 01       		.uleb128 0x1
 2441 01d6 9C       		.byte	0x9c
 2442 01d7 D0030000 		.4byte	0x3d0
 2443 01db 0E       		.uleb128 0xe
 2444 01dc 6E756D00 		.ascii	"num\000"
 2445 01e0 01       		.byte	0x1
 2446 01e1 93       		.byte	0x93
 2447 01e2 89000000 		.4byte	0x89
 2448 01e6 02       		.uleb128 0x2
 2449 01e7 91       		.byte	0x91
 2450 01e8 60       		.sleb128 -32
 2451 01e9 0F       		.uleb128 0xf
 2452 01ea D6000000 		.4byte	.LASF39
 2453 01ee 01       		.byte	0x1
 2454 01ef 93       		.byte	0x93
 2455 01f0 89000000 		.4byte	0x89
 2456 01f4 02       		.uleb128 0x2
 2457 01f5 91       		.byte	0x91
 2458 01f6 5C       		.sleb128 -36
 2459 01f7 0F       		.uleb128 0xf
 2460 01f8 A5010000 		.4byte	.LASF40
 2461 01fc 01       		.byte	0x1
 2462 01fd 94       		.byte	0x94
 2463 01fe DB000000 		.4byte	0xdb
 2464 0202 02       		.uleb128 0x2
 2465 0203 91       		.byte	0x91
 2466 0204 58       		.sleb128 -40
 2467 0205 0F       		.uleb128 0xf
 2468 0206 57020000 		.4byte	.LASF41
 2469 020a 01       		.byte	0x1
 2470 020b 94       		.byte	0x94
 2471 020c DB000000 		.4byte	0xdb
 2472 0210 02       		.uleb128 0x2
 2473 0211 91       		.byte	0x91
 2474 0212 54       		.sleb128 -44
 2475 0213 0F       		.uleb128 0xf
 2476 0214 B3030000 		.4byte	.LASF42
 2477 0218 01       		.byte	0x1
 2478 0219 94       		.byte	0x94
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 57


 2479 021a DB000000 		.4byte	0xdb
 2480 021e 02       		.uleb128 0x2
 2481 021f 91       		.byte	0x91
 2482 0220 50       		.sleb128 -48
 2483 0221 0F       		.uleb128 0xf
 2484 0222 A0000000 		.4byte	.LASF43
 2485 0226 01       		.byte	0x1
 2486 0227 94       		.byte	0x94
 2487 0228 DB000000 		.4byte	0xdb
 2488 022c 02       		.uleb128 0x2
 2489 022d 91       		.byte	0x91
 2490 022e 6C       		.sleb128 -20
 2491 022f 0E       		.uleb128 0xe
 2492 0230 62756600 		.ascii	"buf\000"
 2493 0234 01       		.byte	0x1
 2494 0235 95       		.byte	0x95
 2495 0236 D0030000 		.4byte	0x3d0
 2496 023a 03       		.uleb128 0x3
 2497 023b 91       		.byte	0x91
 2498 023c 907F     		.sleb128 -112
 2499 023e 0F       		.uleb128 0xf
 2500 023f 64030000 		.4byte	.LASF44
 2501 0243 01       		.byte	0x1
 2502 0244 95       		.byte	0x95
 2503 0245 E0030000 		.4byte	0x3e0
 2504 0249 03       		.uleb128 0x3
 2505 024a 91       		.byte	0x91
 2506 024b FC7E     		.sleb128 -132
 2507 024d 0F       		.uleb128 0xf
 2508 024e DD020000 		.4byte	.LASF45
 2509 0252 01       		.byte	0x1
 2510 0253 95       		.byte	0x95
 2511 0254 F0030000 		.4byte	0x3f0
 2512 0258 03       		.uleb128 0x3
 2513 0259 91       		.byte	0x91
 2514 025a EC7E     		.sleb128 -148
 2515 025c 0F       		.uleb128 0xf
 2516 025d 80030000 		.4byte	.LASF46
 2517 0261 01       		.byte	0x1
 2518 0262 96       		.byte	0x96
 2519 0263 00040000 		.4byte	0x400
 2520 0267 03       		.uleb128 0x3
 2521 0268 91       		.byte	0x91
 2522 0269 D87E     		.sleb128 -168
 2523 026b 0F       		.uleb128 0xf
 2524 026c 16040000 		.4byte	.LASF47
 2525 0270 01       		.byte	0x1
 2526 0271 97       		.byte	0x97
 2527 0272 F0030000 		.4byte	0x3f0
 2528 0276 03       		.uleb128 0x3
 2529 0277 91       		.byte	0x91
 2530 0278 C87E     		.sleb128 -184
 2531 027a 0F       		.uleb128 0xf
 2532 027b 91000000 		.4byte	.LASF48
 2533 027f 01       		.byte	0x1
 2534 0280 98       		.byte	0x98
 2535 0281 10040000 		.4byte	0x410
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 58


 2536 0285 03       		.uleb128 0x3
 2537 0286 91       		.byte	0x91
 2538 0287 B47E     		.sleb128 -204
 2539 0289 0F       		.uleb128 0xf
 2540 028a F5020000 		.4byte	.LASF49
 2541 028e 01       		.byte	0x1
 2542 028f 99       		.byte	0x99
 2543 0290 10040000 		.4byte	0x410
 2544 0294 03       		.uleb128 0x3
 2545 0295 91       		.byte	0x91
 2546 0296 A07E     		.sleb128 -224
 2547 0298 0F       		.uleb128 0xf
 2548 0299 BD010000 		.4byte	.LASF50
 2549 029d 01       		.byte	0x1
 2550 029e 9A       		.byte	0x9a
 2551 029f 20040000 		.4byte	0x420
 2552 02a3 03       		.uleb128 0x3
 2553 02a4 91       		.byte	0x91
 2554 02a5 907E     		.sleb128 -240
 2555 02a7 0F       		.uleb128 0xf
 2556 02a8 E5000000 		.4byte	.LASF51
 2557 02ac 01       		.byte	0x1
 2558 02ad 9B       		.byte	0x9b
 2559 02ae 89000000 		.4byte	0x89
 2560 02b2 02       		.uleb128 0x2
 2561 02b3 91       		.byte	0x91
 2562 02b4 68       		.sleb128 -24
 2563 02b5 10       		.uleb128 0x10
 2564 02b6 617800   		.ascii	"ax\000"
 2565 02b9 01       		.byte	0x1
 2566 02ba 9D       		.byte	0x9d
 2567 02bb A2000000 		.4byte	0xa2
 2568 02bf 10       		.uleb128 0x10
 2569 02c0 617900   		.ascii	"ay\000"
 2570 02c3 01       		.byte	0x1
 2571 02c4 9D       		.byte	0x9d
 2572 02c5 A2000000 		.4byte	0xa2
 2573 02c9 0E       		.uleb128 0xe
 2574 02ca 617A00   		.ascii	"az\000"
 2575 02cd 01       		.byte	0x1
 2576 02ce 9D       		.byte	0x9d
 2577 02cf A2000000 		.4byte	0xa2
 2578 02d3 02       		.uleb128 0x2
 2579 02d4 91       		.byte	0x91
 2580 02d5 42       		.sleb128 -62
 2581 02d6 10       		.uleb128 0x10
 2582 02d7 6900     		.ascii	"i\000"
 2583 02d9 01       		.byte	0x1
 2584 02da 9D       		.byte	0x9d
 2585 02db A2000000 		.4byte	0xa2
 2586 02df 10       		.uleb128 0x10
 2587 02e0 677800   		.ascii	"gx\000"
 2588 02e3 01       		.byte	0x1
 2589 02e4 9E       		.byte	0x9e
 2590 02e5 A2000000 		.4byte	0xa2
 2591 02e9 10       		.uleb128 0x10
 2592 02ea 677900   		.ascii	"gy\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 59


 2593 02ed 01       		.byte	0x1
 2594 02ee 9E       		.byte	0x9e
 2595 02ef A2000000 		.4byte	0xa2
 2596 02f3 10       		.uleb128 0x10
 2597 02f4 677A00   		.ascii	"gz\000"
 2598 02f7 01       		.byte	0x1
 2599 02f8 9E       		.byte	0x9e
 2600 02f9 A2000000 		.4byte	0xa2
 2601 02fd 0F       		.uleb128 0xf
 2602 02fe EC020000 		.4byte	.LASF52
 2603 0302 01       		.byte	0x1
 2604 0303 9F       		.byte	0x9f
 2605 0304 A2000000 		.4byte	0xa2
 2606 0308 02       		.uleb128 0x2
 2607 0309 91       		.byte	0x91
 2608 030a 4E       		.sleb128 -50
 2609 030b 0F       		.uleb128 0xf
 2610 030c A0010000 		.4byte	.LASF53
 2611 0310 01       		.byte	0x1
 2612 0311 A0       		.byte	0xa0
 2613 0312 89000000 		.4byte	0x89
 2614 0316 03       		.uleb128 0x3
 2615 0317 91       		.byte	0x91
 2616 0318 8C7E     		.sleb128 -244
 2617 031a 0F       		.uleb128 0xf
 2618 031b 5E000000 		.4byte	.LASF54
 2619 031f 01       		.byte	0x1
 2620 0320 A0       		.byte	0xa0
 2621 0321 89000000 		.4byte	0x89
 2622 0325 02       		.uleb128 0x2
 2623 0326 91       		.byte	0x91
 2624 0327 48       		.sleb128 -56
 2625 0328 0F       		.uleb128 0xf
 2626 0329 94030000 		.4byte	.LASF55
 2627 032d 01       		.byte	0x1
 2628 032e C9       		.byte	0xc9
 2629 032f 89000000 		.4byte	0x89
 2630 0333 02       		.uleb128 0x2
 2631 0334 91       		.byte	0x91
 2632 0335 44       		.sleb128 -60
 2633 0336 0F       		.uleb128 0xf
 2634 0337 CA000000 		.4byte	.LASF56
 2635 033b 01       		.byte	0x1
 2636 033c E2       		.byte	0xe2
 2637 033d 89000000 		.4byte	0x89
 2638 0341 02       		.uleb128 0x2
 2639 0342 91       		.byte	0x91
 2640 0343 64       		.sleb128 -28
 2641 0344 11       		.uleb128 0x11
 2642 0345 96010000 		.4byte	.LBB2
 2643 0349 38090000 		.4byte	.LBE2-.LBB2
 2644 034d 12       		.uleb128 0x12
 2645 034e 7400     		.ascii	"t\000"
 2646 0350 01       		.byte	0x1
 2647 0351 1C01     		.2byte	0x11c
 2648 0353 89000000 		.4byte	0x89
 2649 0357 03       		.uleb128 0x3
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 60


 2650 0358 91       		.byte	0x91
 2651 0359 887E     		.sleb128 -248
 2652 035b 13       		.uleb128 0x13
 2653 035c 9C020000 		.4byte	.LBB3
 2654 0360 9C000000 		.4byte	.LBE3-.LBB3
 2655 0364 78030000 		.4byte	0x378
 2656 0368 0F       		.uleb128 0xf
 2657 0369 3D000000 		.4byte	.LASF57
 2658 036d 01       		.byte	0x1
 2659 036e F8       		.byte	0xf8
 2660 036f 30040000 		.4byte	0x430
 2661 0373 03       		.uleb128 0x3
 2662 0374 91       		.byte	0x91
 2663 0375 CC7D     		.sleb128 -308
 2664 0377 00       		.byte	0
 2665 0378 13       		.uleb128 0x13
 2666 0379 90060000 		.4byte	.LBB4
 2667 037d 4A010000 		.4byte	.LBE4-.LBB4
 2668 0381 96030000 		.4byte	0x396
 2669 0385 14       		.uleb128 0x14
 2670 0386 3D000000 		.4byte	.LASF57
 2671 038a 01       		.byte	0x1
 2672 038b 7101     		.2byte	0x171
 2673 038d 30040000 		.4byte	0x430
 2674 0391 03       		.uleb128 0x3
 2675 0392 91       		.byte	0x91
 2676 0393 CC7D     		.sleb128 -308
 2677 0395 00       		.byte	0
 2678 0396 13       		.uleb128 0x13
 2679 0397 80080000 		.4byte	.LBB5
 2680 039b F2000000 		.4byte	.LBE5-.LBB5
 2681 039f B4030000 		.4byte	0x3b4
 2682 03a3 14       		.uleb128 0x14
 2683 03a4 3D000000 		.4byte	.LASF57
 2684 03a8 01       		.byte	0x1
 2685 03a9 BB01     		.2byte	0x1bb
 2686 03ab 30040000 		.4byte	0x430
 2687 03af 03       		.uleb128 0x3
 2688 03b0 91       		.byte	0x91
 2689 03b1 CC7D     		.sleb128 -308
 2690 03b3 00       		.byte	0
 2691 03b4 11       		.uleb128 0x11
 2692 03b5 B8090000 		.4byte	.LBB6
 2693 03b9 DC000000 		.4byte	.LBE6-.LBB6
 2694 03bd 14       		.uleb128 0x14
 2695 03be 3D000000 		.4byte	.LASF57
 2696 03c2 01       		.byte	0x1
 2697 03c3 E101     		.2byte	0x1e1
 2698 03c5 30040000 		.4byte	0x430
 2699 03c9 03       		.uleb128 0x3
 2700 03ca 91       		.byte	0x91
 2701 03cb CC7D     		.sleb128 -308
 2702 03cd 00       		.byte	0
 2703 03ce 00       		.byte	0
 2704 03cf 00       		.byte	0
 2705 03d0 15       		.uleb128 0x15
 2706 03d1 E9000000 		.4byte	0xe9
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 61


 2707 03d5 E0030000 		.4byte	0x3e0
 2708 03d9 16       		.uleb128 0x16
 2709 03da 01010000 		.4byte	0x101
 2710 03de 31       		.byte	0x31
 2711 03df 00       		.byte	0
 2712 03e0 15       		.uleb128 0x15
 2713 03e1 E9000000 		.4byte	0xe9
 2714 03e5 F0030000 		.4byte	0x3f0
 2715 03e9 16       		.uleb128 0x16
 2716 03ea 01010000 		.4byte	0x101
 2717 03ee 13       		.byte	0x13
 2718 03ef 00       		.byte	0
 2719 03f0 15       		.uleb128 0x15
 2720 03f1 E9000000 		.4byte	0xe9
 2721 03f5 00040000 		.4byte	0x400
 2722 03f9 16       		.uleb128 0x16
 2723 03fa 01010000 		.4byte	0x101
 2724 03fe 0D       		.byte	0xd
 2725 03ff 00       		.byte	0
 2726 0400 15       		.uleb128 0x15
 2727 0401 E9000000 		.4byte	0xe9
 2728 0405 10040000 		.4byte	0x410
 2729 0409 16       		.uleb128 0x16
 2730 040a 01010000 		.4byte	0x101
 2731 040e 12       		.byte	0x12
 2732 040f 00       		.byte	0
 2733 0410 15       		.uleb128 0x15
 2734 0411 E9000000 		.4byte	0xe9
 2735 0415 20040000 		.4byte	0x420
 2736 0419 16       		.uleb128 0x16
 2737 041a 01010000 		.4byte	0x101
 2738 041e 10       		.byte	0x10
 2739 041f 00       		.byte	0
 2740 0420 15       		.uleb128 0x15
 2741 0421 E9000000 		.4byte	0xe9
 2742 0425 30040000 		.4byte	0x430
 2743 0429 16       		.uleb128 0x16
 2744 042a 01010000 		.4byte	0x101
 2745 042e 0F       		.byte	0xf
 2746 042f 00       		.byte	0
 2747 0430 15       		.uleb128 0x15
 2748 0431 E9000000 		.4byte	0xe9
 2749 0435 40040000 		.4byte	0x440
 2750 0439 16       		.uleb128 0x16
 2751 043a 01010000 		.4byte	0x101
 2752 043e 3B       		.byte	0x3b
 2753 043f 00       		.byte	0
 2754 0440 17       		.uleb128 0x17
 2755 0441 E1030000 		.4byte	.LASF90
 2756 0445 01       		.byte	0x1
 2757 0446 1902     		.2byte	0x219
 2758 0448 89000000 		.4byte	0x89
 2759 044c 00000000 		.4byte	.LFB69
 2760 0450 30010000 		.4byte	.LFE69-.LFB69
 2761 0454 01       		.uleb128 0x1
 2762 0455 9C       		.byte	0x9c
 2763 0456 79040000 		.4byte	0x479
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 62


 2764 045a 18       		.uleb128 0x18
 2765 045b 73000000 		.4byte	.LASF91
 2766 045f 01       		.byte	0x1
 2767 0460 1902     		.2byte	0x219
 2768 0462 08010000 		.4byte	0x108
 2769 0466 02       		.uleb128 0x2
 2770 0467 91       		.byte	0x91
 2771 0468 64       		.sleb128 -28
 2772 0469 14       		.uleb128 0x14
 2773 046a EA030000 		.4byte	.LASF58
 2774 046e 01       		.byte	0x1
 2775 046f 1A02     		.2byte	0x21a
 2776 0471 89000000 		.4byte	0x89
 2777 0475 02       		.uleb128 0x2
 2778 0476 91       		.byte	0x91
 2779 0477 6C       		.sleb128 -20
 2780 0478 00       		.byte	0
 2781 0479 19       		.uleb128 0x19
 2782 047a D4030000 		.4byte	.LASF59
 2783 047e 07       		.byte	0x7
 2784 047f 9606     		.2byte	0x696
 2785 0481 85040000 		.4byte	0x485
 2786 0485 06       		.uleb128 0x6
 2787 0486 AD000000 		.4byte	0xad
 2788 048a 1A       		.uleb128 0x1a
 2789 048b 48000000 		.4byte	.LASF60
 2790 048f 08       		.byte	0x8
 2791 0490 9101     		.2byte	0x191
 2792 0492 97000000 		.4byte	0x97
 2793 0496 05       		.uleb128 0x5
 2794 0497 03       		.byte	0x3
 2795 0498 00000000 		.4byte	devAddr
 2796 049c 15       		.uleb128 0x15
 2797 049d 97000000 		.4byte	0x97
 2798 04a1 AC040000 		.4byte	0x4ac
 2799 04a5 16       		.uleb128 0x16
 2800 04a6 01010000 		.4byte	0x101
 2801 04aa 15       		.byte	0x15
 2802 04ab 00       		.byte	0
 2803 04ac 1A       		.uleb128 0x1a
 2804 04ad 06030000 		.4byte	.LASF61
 2805 04b1 08       		.byte	0x8
 2806 04b2 9201     		.2byte	0x192
 2807 04b4 9C040000 		.4byte	0x49c
 2808 04b8 05       		.uleb128 0x5
 2809 04b9 03       		.byte	0x3
 2810 04ba 00000000 		.4byte	buffer
 2811 04be 1B       		.uleb128 0x1b
 2812 04bf 43000000 		.4byte	.LASF62
 2813 04c3 01       		.byte	0x1
 2814 04c4 32       		.byte	0x32
 2815 04c5 B8000000 		.4byte	0xb8
 2816 04c9 05       		.uleb128 0x5
 2817 04ca 03       		.byte	0x3
 2818 04cb 00000000 		.4byte	Addr
 2819 04cf 1C       		.uleb128 0x1c
 2820 04d0 696400   		.ascii	"id\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 63


 2821 04d3 01       		.byte	0x1
 2822 04d4 33       		.byte	0x33
 2823 04d5 62000000 		.4byte	0x62
 2824 04d9 05       		.uleb128 0x5
 2825 04da 03       		.byte	0x3
 2826 04db 00000000 		.4byte	id
 2827 04df 1B       		.uleb128 0x1b
 2828 04e0 B4010000 		.4byte	.LASF63
 2829 04e4 01       		.byte	0x1
 2830 04e5 33       		.byte	0x33
 2831 04e6 62000000 		.4byte	0x62
 2832 04ea 05       		.uleb128 0x5
 2833 04eb 03       		.byte	0x3
 2834 04ec 00000000 		.4byte	press_id
 2835 04f0 1B       		.uleb128 0x1b
 2836 04f1 40020000 		.4byte	.LASF64
 2837 04f5 01       		.byte	0x1
 2838 04f6 34       		.byte	0x34
 2839 04f7 62000000 		.4byte	0x62
 2840 04fb 05       		.uleb128 0x5
 2841 04fc 03       		.byte	0x3
 2842 04fd 00000000 		.4byte	data_time
 2843 0501 1C       		.uleb128 0x1c
 2844 0502 73756D00 		.ascii	"sum\000"
 2845 0506 01       		.byte	0x1
 2846 0507 36       		.byte	0x36
 2847 0508 62000000 		.4byte	0x62
 2848 050c 05       		.uleb128 0x5
 2849 050d 03       		.byte	0x3
 2850 050e 00000000 		.4byte	sum
 2851 0512 1B       		.uleb128 0x1b
 2852 0513 CC010000 		.4byte	.LASF65
 2853 0517 01       		.byte	0x1
 2854 0518 37       		.byte	0x37
 2855 0519 DB000000 		.4byte	0xdb
 2856 051d 05       		.uleb128 0x5
 2857 051e 03       		.byte	0x3
 2858 051f 00000000 		.4byte	pressure_sum
 2859 0523 1B       		.uleb128 0x1b
 2860 0524 01010000 		.4byte	.LASF66
 2861 0528 01       		.byte	0x1
 2862 0529 38       		.byte	0x38
 2863 052a A2000000 		.4byte	0xa2
 2864 052e 05       		.uleb128 0x5
 2865 052f 03       		.byte	0x3
 2866 0530 00000000 		.4byte	average
 2867 0534 1B       		.uleb128 0x1b
 2868 0535 BA030000 		.4byte	.LASF67
 2869 0539 01       		.byte	0x1
 2870 053a 39       		.byte	0x39
 2871 053b 45050000 		.4byte	0x545
 2872 053f 05       		.uleb128 0x5
 2873 0540 03       		.byte	0x3
 2874 0541 00000000 		.4byte	collect_flag
 2875 0545 02       		.uleb128 0x2
 2876 0546 01       		.byte	0x1
 2877 0547 02       		.byte	0x2
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 64


 2878 0548 D1020000 		.4byte	.LASF68
 2879 054c 1B       		.uleb128 0x1b
 2880 054d F2030000 		.4byte	.LASF69
 2881 0551 01       		.byte	0x1
 2882 0552 3A       		.byte	0x3a
 2883 0553 45050000 		.4byte	0x545
 2884 0557 05       		.uleb128 0x5
 2885 0558 03       		.byte	0x3
 2886 0559 00000000 		.4byte	wait_flag
 2887 055d 1B       		.uleb128 0x1b
 2888 055e B7000000 		.4byte	.LASF70
 2889 0562 01       		.byte	0x1
 2890 0563 3B       		.byte	0x3b
 2891 0564 45050000 		.4byte	0x545
 2892 0568 05       		.uleb128 0x5
 2893 0569 03       		.byte	0x3
 2894 056a 00000000 		.4byte	PANIC_flag
 2895 056e 1B       		.uleb128 0x1b
 2896 056f 9E030000 		.4byte	.LASF71
 2897 0573 01       		.byte	0x1
 2898 0574 3D       		.byte	0x3d
 2899 0575 62010000 		.4byte	0x162
 2900 0579 05       		.uleb128 0x5
 2901 057a 03       		.byte	0x3
 2902 057b 00000000 		.4byte	STATE
 2903 057f 1B       		.uleb128 0x1b
 2904 0580 5C020000 		.4byte	.LASF72
 2905 0584 01       		.byte	0x1
 2906 0585 3E       		.byte	0x3e
 2907 0586 97000000 		.4byte	0x97
 2908 058a 05       		.uleb128 0x5
 2909 058b 03       		.byte	0x3
 2910 058c 00000000 		.4byte	testnum
 2911 0590 1B       		.uleb128 0x1b
 2912 0591 0A020000 		.4byte	.LASF73
 2913 0595 01       		.byte	0x1
 2914 0596 3E       		.byte	0x3e
 2915 0597 97000000 		.4byte	0x97
 2916 059b 05       		.uleb128 0x5
 2917 059c 03       		.byte	0x3
 2918 059d 00000000 		.4byte	countdown
 2919 05a1 1B       		.uleb128 0x1b
 2920 05a2 14000000 		.4byte	.LASF74
 2921 05a6 01       		.byte	0x1
 2922 05a7 3E       		.byte	0x3e
 2923 05a8 97000000 		.4byte	0x97
 2924 05ac 05       		.uleb128 0x5
 2925 05ad 03       		.byte	0x3
 2926 05ae 00000000 		.4byte	update_Data
 2927 05b2 15       		.uleb128 0x15
 2928 05b3 97000000 		.4byte	0x97
 2929 05b7 C2050000 		.4byte	0x5c2
 2930 05bb 16       		.uleb128 0x16
 2931 05bc 01010000 		.4byte	0x101
 2932 05c0 3F       		.byte	0x3f
 2933 05c1 00       		.byte	0
 2934 05c2 1B       		.uleb128 0x1b
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 65


 2935 05c3 20000000 		.4byte	.LASF75
 2936 05c7 01       		.byte	0x1
 2937 05c8 3F       		.byte	0x3f
 2938 05c9 B2050000 		.4byte	0x5b2
 2939 05cd 05       		.uleb128 0x5
 2940 05ce 03       		.byte	0x3
 2941 05cf 00000000 		.4byte	RxBuffer
 2942 05d3 1B       		.uleb128 0x1b
 2943 05d4 0A000000 		.4byte	.LASF76
 2944 05d8 01       		.byte	0x1
 2945 05d9 40       		.byte	0x40
 2946 05da 89000000 		.4byte	0x89
 2947 05de 05       		.uleb128 0x5
 2948 05df 03       		.byte	0x3
 2949 05e0 00000000 		.4byte	msg_count
 2950 05e4 1B       		.uleb128 0x1b
 2951 05e5 FF020000 		.4byte	.LASF77
 2952 05e9 01       		.byte	0x1
 2953 05ea 40       		.byte	0x40
 2954 05eb 89000000 		.4byte	0x89
 2955 05ef 05       		.uleb128 0x5
 2956 05f0 03       		.byte	0x3
 2957 05f1 00000000 		.4byte	rxflag
 2958 05f5 1B       		.uleb128 0x1b
 2959 05f6 4C030000 		.4byte	.LASF78
 2960 05fa 01       		.byte	0x1
 2961 05fb 40       		.byte	0x40
 2962 05fc 89000000 		.4byte	0x89
 2963 0600 05       		.uleb128 0x5
 2964 0601 03       		.byte	0x3
 2965 0602 00000000 		.4byte	bytes
 2966 0606 1B       		.uleb128 0x1b
 2967 0607 6A000000 		.4byte	.LASF79
 2968 060b 01       		.byte	0x1
 2969 060c 40       		.byte	0x40
 2970 060d 89000000 		.4byte	0x89
 2971 0611 05       		.uleb128 0x5
 2972 0612 03       		.byte	0x3
 2973 0613 00000000 		.4byte	dataflag
 2974 0617 1B       		.uleb128 0x1b
 2975 0618 50000000 		.4byte	.LASF80
 2976 061c 01       		.byte	0x1
 2977 061d 40       		.byte	0x40
 2978 061e 89000000 		.4byte	0x89
 2979 0622 05       		.uleb128 0x5
 2980 0623 03       		.byte	0x3
 2981 0624 00000000 		.4byte	transmit_flag
 2982 0628 1B       		.uleb128 0x1b
 2983 0629 E6020000 		.4byte	.LASF81
 2984 062d 01       		.byte	0x1
 2985 062e 41       		.byte	0x41
 2986 062f 89000000 		.4byte	0x89
 2987 0633 05       		.uleb128 0x5
 2988 0634 03       		.byte	0x3
 2989 0635 00000000 		.4byte	depth
 2990 0639 1B       		.uleb128 0x1b
 2991 063a D7020000 		.4byte	.LASF82
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 66


 2992 063e 01       		.byte	0x1
 2993 063f 41       		.byte	0x41
 2994 0640 89000000 		.4byte	0x89
 2995 0644 05       		.uleb128 0x5
 2996 0645 03       		.byte	0x3
 2997 0646 00000000 		.4byte	reset
 2998 064a 15       		.uleb128 0x15
 2999 064b E9000000 		.4byte	0xe9
 3000 064f 5A060000 		.4byte	0x65a
 3001 0653 16       		.uleb128 0x16
 3002 0654 01010000 		.4byte	0x101
 3003 0658 0A       		.byte	0xa
 3004 0659 00       		.byte	0
 3005 065a 1B       		.uleb128 0x1b
 3006 065b 9B000000 		.4byte	.LASF83
 3007 065f 01       		.byte	0x1
 3008 0660 42       		.byte	0x42
 3009 0661 4A060000 		.4byte	0x64a
 3010 0665 05       		.uleb128 0x5
 3011 0666 03       		.byte	0x3
 3012 0667 00000000 		.4byte	file
 3013 066b 15       		.uleb128 0x15
 3014 066c E9000000 		.4byte	0xe9
 3015 0670 7B060000 		.4byte	0x67b
 3016 0674 16       		.uleb128 0x16
 3017 0675 01010000 		.4byte	0x101
 3018 0679 09       		.byte	0x9
 3019 067a 00       		.byte	0
 3020 067b 1B       		.uleb128 0x1b
 3021 067c AD010000 		.4byte	.LASF84
 3022 0680 01       		.byte	0x1
 3023 0681 43       		.byte	0x43
 3024 0682 6B060000 		.4byte	0x66b
 3025 0686 05       		.uleb128 0x5
 3026 0687 03       		.byte	0x3
 3027 0688 00000000 		.4byte	volume
 3028 068c 1B       		.uleb128 0x1b
 3029 068d 0F040000 		.4byte	.LASF85
 3030 0691 01       		.byte	0x1
 3031 0692 44       		.byte	0x44
 3032 0693 1E010000 		.4byte	0x11e
 3033 0697 05       		.uleb128 0x5
 3034 0698 03       		.byte	0x3
 3035 0699 00000000 		.4byte	fsfile
 3036 069d 00       		.byte	0
 3037              		.section	.debug_abbrev,"",%progbits
 3038              	.Ldebug_abbrev0:
 3039 0000 01       		.uleb128 0x1
 3040 0001 11       		.uleb128 0x11
 3041 0002 01       		.byte	0x1
 3042 0003 25       		.uleb128 0x25
 3043 0004 0E       		.uleb128 0xe
 3044 0005 13       		.uleb128 0x13
 3045 0006 0B       		.uleb128 0xb
 3046 0007 03       		.uleb128 0x3
 3047 0008 0E       		.uleb128 0xe
 3048 0009 1B       		.uleb128 0x1b
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 67


 3049 000a 0E       		.uleb128 0xe
 3050 000b 55       		.uleb128 0x55
 3051 000c 17       		.uleb128 0x17
 3052 000d 11       		.uleb128 0x11
 3053 000e 01       		.uleb128 0x1
 3054 000f 10       		.uleb128 0x10
 3055 0010 17       		.uleb128 0x17
 3056 0011 00       		.byte	0
 3057 0012 00       		.byte	0
 3058 0013 02       		.uleb128 0x2
 3059 0014 24       		.uleb128 0x24
 3060 0015 00       		.byte	0
 3061 0016 0B       		.uleb128 0xb
 3062 0017 0B       		.uleb128 0xb
 3063 0018 3E       		.uleb128 0x3e
 3064 0019 0B       		.uleb128 0xb
 3065 001a 03       		.uleb128 0x3
 3066 001b 0E       		.uleb128 0xe
 3067 001c 00       		.byte	0
 3068 001d 00       		.byte	0
 3069 001e 03       		.uleb128 0x3
 3070 001f 16       		.uleb128 0x16
 3071 0020 00       		.byte	0
 3072 0021 03       		.uleb128 0x3
 3073 0022 0E       		.uleb128 0xe
 3074 0023 3A       		.uleb128 0x3a
 3075 0024 0B       		.uleb128 0xb
 3076 0025 3B       		.uleb128 0x3b
 3077 0026 0B       		.uleb128 0xb
 3078 0027 49       		.uleb128 0x49
 3079 0028 13       		.uleb128 0x13
 3080 0029 00       		.byte	0
 3081 002a 00       		.byte	0
 3082 002b 04       		.uleb128 0x4
 3083 002c 24       		.uleb128 0x24
 3084 002d 00       		.byte	0
 3085 002e 0B       		.uleb128 0xb
 3086 002f 0B       		.uleb128 0xb
 3087 0030 3E       		.uleb128 0x3e
 3088 0031 0B       		.uleb128 0xb
 3089 0032 03       		.uleb128 0x3
 3090 0033 08       		.uleb128 0x8
 3091 0034 00       		.byte	0
 3092 0035 00       		.byte	0
 3093 0036 05       		.uleb128 0x5
 3094 0037 16       		.uleb128 0x16
 3095 0038 00       		.byte	0
 3096 0039 03       		.uleb128 0x3
 3097 003a 0E       		.uleb128 0xe
 3098 003b 3A       		.uleb128 0x3a
 3099 003c 0B       		.uleb128 0xb
 3100 003d 3B       		.uleb128 0x3b
 3101 003e 05       		.uleb128 0x5
 3102 003f 49       		.uleb128 0x49
 3103 0040 13       		.uleb128 0x13
 3104 0041 00       		.byte	0
 3105 0042 00       		.byte	0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 68


 3106 0043 06       		.uleb128 0x6
 3107 0044 35       		.uleb128 0x35
 3108 0045 00       		.byte	0
 3109 0046 49       		.uleb128 0x49
 3110 0047 13       		.uleb128 0x13
 3111 0048 00       		.byte	0
 3112 0049 00       		.byte	0
 3113 004a 07       		.uleb128 0x7
 3114 004b 0F       		.uleb128 0xf
 3115 004c 00       		.byte	0
 3116 004d 0B       		.uleb128 0xb
 3117 004e 0B       		.uleb128 0xb
 3118 004f 49       		.uleb128 0x49
 3119 0050 13       		.uleb128 0x13
 3120 0051 00       		.byte	0
 3121 0052 00       		.byte	0
 3122 0053 08       		.uleb128 0x8
 3123 0054 13       		.uleb128 0x13
 3124 0055 00       		.byte	0
 3125 0056 03       		.uleb128 0x3
 3126 0057 0E       		.uleb128 0xe
 3127 0058 3C       		.uleb128 0x3c
 3128 0059 19       		.uleb128 0x19
 3129 005a 00       		.byte	0
 3130 005b 00       		.byte	0
 3131 005c 09       		.uleb128 0x9
 3132 005d 04       		.uleb128 0x4
 3133 005e 01       		.byte	0x1
 3134 005f 03       		.uleb128 0x3
 3135 0060 0E       		.uleb128 0xe
 3136 0061 0B       		.uleb128 0xb
 3137 0062 0B       		.uleb128 0xb
 3138 0063 3A       		.uleb128 0x3a
 3139 0064 0B       		.uleb128 0xb
 3140 0065 3B       		.uleb128 0x3b
 3141 0066 0B       		.uleb128 0xb
 3142 0067 01       		.uleb128 0x1
 3143 0068 13       		.uleb128 0x13
 3144 0069 00       		.byte	0
 3145 006a 00       		.byte	0
 3146 006b 0A       		.uleb128 0xa
 3147 006c 28       		.uleb128 0x28
 3148 006d 00       		.byte	0
 3149 006e 03       		.uleb128 0x3
 3150 006f 0E       		.uleb128 0xe
 3151 0070 1C       		.uleb128 0x1c
 3152 0071 0D       		.uleb128 0xd
 3153 0072 00       		.byte	0
 3154 0073 00       		.byte	0
 3155 0074 0B       		.uleb128 0xb
 3156 0075 2E       		.uleb128 0x2e
 3157 0076 00       		.byte	0
 3158 0077 3F       		.uleb128 0x3f
 3159 0078 19       		.uleb128 0x19
 3160 0079 03       		.uleb128 0x3
 3161 007a 0E       		.uleb128 0xe
 3162 007b 3A       		.uleb128 0x3a
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 69


 3163 007c 0B       		.uleb128 0xb
 3164 007d 3B       		.uleb128 0x3b
 3165 007e 0B       		.uleb128 0xb
 3166 007f 27       		.uleb128 0x27
 3167 0080 19       		.uleb128 0x19
 3168 0081 11       		.uleb128 0x11
 3169 0082 01       		.uleb128 0x1
 3170 0083 12       		.uleb128 0x12
 3171 0084 06       		.uleb128 0x6
 3172 0085 40       		.uleb128 0x40
 3173 0086 18       		.uleb128 0x18
 3174 0087 9642     		.uleb128 0x2116
 3175 0089 19       		.uleb128 0x19
 3176 008a 00       		.byte	0
 3177 008b 00       		.byte	0
 3178 008c 0C       		.uleb128 0xc
 3179 008d 2E       		.uleb128 0x2e
 3180 008e 00       		.byte	0
 3181 008f 3F       		.uleb128 0x3f
 3182 0090 19       		.uleb128 0x19
 3183 0091 03       		.uleb128 0x3
 3184 0092 0E       		.uleb128 0xe
 3185 0093 3A       		.uleb128 0x3a
 3186 0094 0B       		.uleb128 0xb
 3187 0095 3B       		.uleb128 0x3b
 3188 0096 0B       		.uleb128 0xb
 3189 0097 27       		.uleb128 0x27
 3190 0098 19       		.uleb128 0x19
 3191 0099 11       		.uleb128 0x11
 3192 009a 01       		.uleb128 0x1
 3193 009b 12       		.uleb128 0x12
 3194 009c 06       		.uleb128 0x6
 3195 009d 40       		.uleb128 0x40
 3196 009e 18       		.uleb128 0x18
 3197 009f 9742     		.uleb128 0x2117
 3198 00a1 19       		.uleb128 0x19
 3199 00a2 00       		.byte	0
 3200 00a3 00       		.byte	0
 3201 00a4 0D       		.uleb128 0xd
 3202 00a5 2E       		.uleb128 0x2e
 3203 00a6 01       		.byte	0x1
 3204 00a7 3F       		.uleb128 0x3f
 3205 00a8 19       		.uleb128 0x19
 3206 00a9 03       		.uleb128 0x3
 3207 00aa 0E       		.uleb128 0xe
 3208 00ab 3A       		.uleb128 0x3a
 3209 00ac 0B       		.uleb128 0xb
 3210 00ad 3B       		.uleb128 0x3b
 3211 00ae 0B       		.uleb128 0xb
 3212 00af 49       		.uleb128 0x49
 3213 00b0 13       		.uleb128 0x13
 3214 00b1 11       		.uleb128 0x11
 3215 00b2 01       		.uleb128 0x1
 3216 00b3 12       		.uleb128 0x12
 3217 00b4 06       		.uleb128 0x6
 3218 00b5 40       		.uleb128 0x40
 3219 00b6 18       		.uleb128 0x18
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 70


 3220 00b7 9642     		.uleb128 0x2116
 3221 00b9 19       		.uleb128 0x19
 3222 00ba 01       		.uleb128 0x1
 3223 00bb 13       		.uleb128 0x13
 3224 00bc 00       		.byte	0
 3225 00bd 00       		.byte	0
 3226 00be 0E       		.uleb128 0xe
 3227 00bf 34       		.uleb128 0x34
 3228 00c0 00       		.byte	0
 3229 00c1 03       		.uleb128 0x3
 3230 00c2 08       		.uleb128 0x8
 3231 00c3 3A       		.uleb128 0x3a
 3232 00c4 0B       		.uleb128 0xb
 3233 00c5 3B       		.uleb128 0x3b
 3234 00c6 0B       		.uleb128 0xb
 3235 00c7 49       		.uleb128 0x49
 3236 00c8 13       		.uleb128 0x13
 3237 00c9 02       		.uleb128 0x2
 3238 00ca 18       		.uleb128 0x18
 3239 00cb 00       		.byte	0
 3240 00cc 00       		.byte	0
 3241 00cd 0F       		.uleb128 0xf
 3242 00ce 34       		.uleb128 0x34
 3243 00cf 00       		.byte	0
 3244 00d0 03       		.uleb128 0x3
 3245 00d1 0E       		.uleb128 0xe
 3246 00d2 3A       		.uleb128 0x3a
 3247 00d3 0B       		.uleb128 0xb
 3248 00d4 3B       		.uleb128 0x3b
 3249 00d5 0B       		.uleb128 0xb
 3250 00d6 49       		.uleb128 0x49
 3251 00d7 13       		.uleb128 0x13
 3252 00d8 02       		.uleb128 0x2
 3253 00d9 18       		.uleb128 0x18
 3254 00da 00       		.byte	0
 3255 00db 00       		.byte	0
 3256 00dc 10       		.uleb128 0x10
 3257 00dd 34       		.uleb128 0x34
 3258 00de 00       		.byte	0
 3259 00df 03       		.uleb128 0x3
 3260 00e0 08       		.uleb128 0x8
 3261 00e1 3A       		.uleb128 0x3a
 3262 00e2 0B       		.uleb128 0xb
 3263 00e3 3B       		.uleb128 0x3b
 3264 00e4 0B       		.uleb128 0xb
 3265 00e5 49       		.uleb128 0x49
 3266 00e6 13       		.uleb128 0x13
 3267 00e7 00       		.byte	0
 3268 00e8 00       		.byte	0
 3269 00e9 11       		.uleb128 0x11
 3270 00ea 0B       		.uleb128 0xb
 3271 00eb 01       		.byte	0x1
 3272 00ec 11       		.uleb128 0x11
 3273 00ed 01       		.uleb128 0x1
 3274 00ee 12       		.uleb128 0x12
 3275 00ef 06       		.uleb128 0x6
 3276 00f0 00       		.byte	0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 71


 3277 00f1 00       		.byte	0
 3278 00f2 12       		.uleb128 0x12
 3279 00f3 34       		.uleb128 0x34
 3280 00f4 00       		.byte	0
 3281 00f5 03       		.uleb128 0x3
 3282 00f6 08       		.uleb128 0x8
 3283 00f7 3A       		.uleb128 0x3a
 3284 00f8 0B       		.uleb128 0xb
 3285 00f9 3B       		.uleb128 0x3b
 3286 00fa 05       		.uleb128 0x5
 3287 00fb 49       		.uleb128 0x49
 3288 00fc 13       		.uleb128 0x13
 3289 00fd 02       		.uleb128 0x2
 3290 00fe 18       		.uleb128 0x18
 3291 00ff 00       		.byte	0
 3292 0100 00       		.byte	0
 3293 0101 13       		.uleb128 0x13
 3294 0102 0B       		.uleb128 0xb
 3295 0103 01       		.byte	0x1
 3296 0104 11       		.uleb128 0x11
 3297 0105 01       		.uleb128 0x1
 3298 0106 12       		.uleb128 0x12
 3299 0107 06       		.uleb128 0x6
 3300 0108 01       		.uleb128 0x1
 3301 0109 13       		.uleb128 0x13
 3302 010a 00       		.byte	0
 3303 010b 00       		.byte	0
 3304 010c 14       		.uleb128 0x14
 3305 010d 34       		.uleb128 0x34
 3306 010e 00       		.byte	0
 3307 010f 03       		.uleb128 0x3
 3308 0110 0E       		.uleb128 0xe
 3309 0111 3A       		.uleb128 0x3a
 3310 0112 0B       		.uleb128 0xb
 3311 0113 3B       		.uleb128 0x3b
 3312 0114 05       		.uleb128 0x5
 3313 0115 49       		.uleb128 0x49
 3314 0116 13       		.uleb128 0x13
 3315 0117 02       		.uleb128 0x2
 3316 0118 18       		.uleb128 0x18
 3317 0119 00       		.byte	0
 3318 011a 00       		.byte	0
 3319 011b 15       		.uleb128 0x15
 3320 011c 01       		.uleb128 0x1
 3321 011d 01       		.byte	0x1
 3322 011e 49       		.uleb128 0x49
 3323 011f 13       		.uleb128 0x13
 3324 0120 01       		.uleb128 0x1
 3325 0121 13       		.uleb128 0x13
 3326 0122 00       		.byte	0
 3327 0123 00       		.byte	0
 3328 0124 16       		.uleb128 0x16
 3329 0125 21       		.uleb128 0x21
 3330 0126 00       		.byte	0
 3331 0127 49       		.uleb128 0x49
 3332 0128 13       		.uleb128 0x13
 3333 0129 2F       		.uleb128 0x2f
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 72


 3334 012a 0B       		.uleb128 0xb
 3335 012b 00       		.byte	0
 3336 012c 00       		.byte	0
 3337 012d 17       		.uleb128 0x17
 3338 012e 2E       		.uleb128 0x2e
 3339 012f 01       		.byte	0x1
 3340 0130 3F       		.uleb128 0x3f
 3341 0131 19       		.uleb128 0x19
 3342 0132 03       		.uleb128 0x3
 3343 0133 0E       		.uleb128 0xe
 3344 0134 3A       		.uleb128 0x3a
 3345 0135 0B       		.uleb128 0xb
 3346 0136 3B       		.uleb128 0x3b
 3347 0137 05       		.uleb128 0x5
 3348 0138 27       		.uleb128 0x27
 3349 0139 19       		.uleb128 0x19
 3350 013a 49       		.uleb128 0x49
 3351 013b 13       		.uleb128 0x13
 3352 013c 11       		.uleb128 0x11
 3353 013d 01       		.uleb128 0x1
 3354 013e 12       		.uleb128 0x12
 3355 013f 06       		.uleb128 0x6
 3356 0140 40       		.uleb128 0x40
 3357 0141 18       		.uleb128 0x18
 3358 0142 9642     		.uleb128 0x2116
 3359 0144 19       		.uleb128 0x19
 3360 0145 01       		.uleb128 0x1
 3361 0146 13       		.uleb128 0x13
 3362 0147 00       		.byte	0
 3363 0148 00       		.byte	0
 3364 0149 18       		.uleb128 0x18
 3365 014a 05       		.uleb128 0x5
 3366 014b 00       		.byte	0
 3367 014c 03       		.uleb128 0x3
 3368 014d 0E       		.uleb128 0xe
 3369 014e 3A       		.uleb128 0x3a
 3370 014f 0B       		.uleb128 0xb
 3371 0150 3B       		.uleb128 0x3b
 3372 0151 05       		.uleb128 0x5
 3373 0152 49       		.uleb128 0x49
 3374 0153 13       		.uleb128 0x13
 3375 0154 02       		.uleb128 0x2
 3376 0155 18       		.uleb128 0x18
 3377 0156 00       		.byte	0
 3378 0157 00       		.byte	0
 3379 0158 19       		.uleb128 0x19
 3380 0159 34       		.uleb128 0x34
 3381 015a 00       		.byte	0
 3382 015b 03       		.uleb128 0x3
 3383 015c 0E       		.uleb128 0xe
 3384 015d 3A       		.uleb128 0x3a
 3385 015e 0B       		.uleb128 0xb
 3386 015f 3B       		.uleb128 0x3b
 3387 0160 05       		.uleb128 0x5
 3388 0161 49       		.uleb128 0x49
 3389 0162 13       		.uleb128 0x13
 3390 0163 3F       		.uleb128 0x3f
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 73


 3391 0164 19       		.uleb128 0x19
 3392 0165 3C       		.uleb128 0x3c
 3393 0166 19       		.uleb128 0x19
 3394 0167 00       		.byte	0
 3395 0168 00       		.byte	0
 3396 0169 1A       		.uleb128 0x1a
 3397 016a 34       		.uleb128 0x34
 3398 016b 00       		.byte	0
 3399 016c 03       		.uleb128 0x3
 3400 016d 0E       		.uleb128 0xe
 3401 016e 3A       		.uleb128 0x3a
 3402 016f 0B       		.uleb128 0xb
 3403 0170 3B       		.uleb128 0x3b
 3404 0171 05       		.uleb128 0x5
 3405 0172 49       		.uleb128 0x49
 3406 0173 13       		.uleb128 0x13
 3407 0174 3F       		.uleb128 0x3f
 3408 0175 19       		.uleb128 0x19
 3409 0176 02       		.uleb128 0x2
 3410 0177 18       		.uleb128 0x18
 3411 0178 00       		.byte	0
 3412 0179 00       		.byte	0
 3413 017a 1B       		.uleb128 0x1b
 3414 017b 34       		.uleb128 0x34
 3415 017c 00       		.byte	0
 3416 017d 03       		.uleb128 0x3
 3417 017e 0E       		.uleb128 0xe
 3418 017f 3A       		.uleb128 0x3a
 3419 0180 0B       		.uleb128 0xb
 3420 0181 3B       		.uleb128 0x3b
 3421 0182 0B       		.uleb128 0xb
 3422 0183 49       		.uleb128 0x49
 3423 0184 13       		.uleb128 0x13
 3424 0185 3F       		.uleb128 0x3f
 3425 0186 19       		.uleb128 0x19
 3426 0187 02       		.uleb128 0x2
 3427 0188 18       		.uleb128 0x18
 3428 0189 00       		.byte	0
 3429 018a 00       		.byte	0
 3430 018b 1C       		.uleb128 0x1c
 3431 018c 34       		.uleb128 0x34
 3432 018d 00       		.byte	0
 3433 018e 03       		.uleb128 0x3
 3434 018f 08       		.uleb128 0x8
 3435 0190 3A       		.uleb128 0x3a
 3436 0191 0B       		.uleb128 0xb
 3437 0192 3B       		.uleb128 0x3b
 3438 0193 0B       		.uleb128 0xb
 3439 0194 49       		.uleb128 0x49
 3440 0195 13       		.uleb128 0x13
 3441 0196 3F       		.uleb128 0x3f
 3442 0197 19       		.uleb128 0x19
 3443 0198 02       		.uleb128 0x2
 3444 0199 18       		.uleb128 0x18
 3445 019a 00       		.byte	0
 3446 019b 00       		.byte	0
 3447 019c 00       		.byte	0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 74


 3448              		.section	.debug_aranges,"",%progbits
 3449 0000 4C000000 		.4byte	0x4c
 3450 0004 0200     		.2byte	0x2
 3451 0006 00000000 		.4byte	.Ldebug_info0
 3452 000a 04       		.byte	0x4
 3453 000b 00       		.byte	0
 3454 000c 0000     		.2byte	0
 3455 000e 0000     		.2byte	0
 3456 0010 00000000 		.4byte	.LFB63
 3457 0014 20000000 		.4byte	.LFE63-.LFB63
 3458 0018 00000000 		.4byte	.LFB64
 3459 001c 38000000 		.4byte	.LFE64-.LFB64
 3460 0020 00000000 		.4byte	.LFB65
 3461 0024 80000000 		.4byte	.LFE65-.LFB65
 3462 0028 00000000 		.4byte	.LFB66
 3463 002c 50000000 		.4byte	.LFE66-.LFB66
 3464 0030 00000000 		.4byte	.LFB67
 3465 0034 58000000 		.4byte	.LFE67-.LFB67
 3466 0038 00000000 		.4byte	.LFB68
 3467 003c 080B0000 		.4byte	.LFE68-.LFB68
 3468 0040 00000000 		.4byte	.LFB69
 3469 0044 30010000 		.4byte	.LFE69-.LFB69
 3470 0048 00000000 		.4byte	0
 3471 004c 00000000 		.4byte	0
 3472              		.section	.debug_ranges,"",%progbits
 3473              	.Ldebug_ranges0:
 3474 0000 00000000 		.4byte	.LFB63
 3475 0004 20000000 		.4byte	.LFE63
 3476 0008 00000000 		.4byte	.LFB64
 3477 000c 38000000 		.4byte	.LFE64
 3478 0010 00000000 		.4byte	.LFB65
 3479 0014 80000000 		.4byte	.LFE65
 3480 0018 00000000 		.4byte	.LFB66
 3481 001c 50000000 		.4byte	.LFE66
 3482 0020 00000000 		.4byte	.LFB67
 3483 0024 58000000 		.4byte	.LFE67
 3484 0028 00000000 		.4byte	.LFB68
 3485 002c 080B0000 		.4byte	.LFE68
 3486 0030 00000000 		.4byte	.LFB69
 3487 0034 30010000 		.4byte	.LFE69
 3488 0038 00000000 		.4byte	0
 3489 003c 00000000 		.4byte	0
 3490              		.section	.debug_line,"",%progbits
 3491              	.Ldebug_line0:
 3492 0000 95030000 		.section	.debug_str,"MS",%progbits,1
 3492      02009501 
 3492      00000201 
 3492      FB0E0D00 
 3492      01010101 
 3493              	.LASF30:
 3494 0000 52455355 		.ascii	"RESURFACE\000"
 3494      52464143 
 3494      4500
 3495              	.LASF76:
 3496 000a 6D73675F 		.ascii	"msg_count\000"
 3496      636F756E 
 3496      7400
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 75


 3497              	.LASF74:
 3498 0014 75706461 		.ascii	"update_Data\000"
 3498      74655F44 
 3498      61746100 
 3499              	.LASF75:
 3500 0020 52784275 		.ascii	"RxBuffer\000"
 3500      66666572 
 3500      00
 3501              	.LASF26:
 3502 0029 53595354 		.ascii	"SYSTEM_CHECK\000"
 3502      454D5F43 
 3502      4845434B 
 3502      00
 3503              	.LASF33:
 3504 0036 53544154 		.ascii	"STATES\000"
 3504      455300
 3505              	.LASF57:
 3506 003d 73646275 		.ascii	"sdbuf\000"
 3506      6600
 3507              	.LASF62:
 3508 0043 41646472 		.ascii	"Addr\000"
 3508      00
 3509              	.LASF60:
 3510 0048 64657641 		.ascii	"devAddr\000"
 3510      64647200 
 3511              	.LASF80:
 3512 0050 7472616E 		.ascii	"transmit_flag\000"
 3512      736D6974 
 3512      5F666C61 
 3512      6700
 3513              	.LASF54:
 3514 005e 6F6E6573 		.ascii	"ones\000"
 3514      00
 3515              	.LASF29:
 3516 0063 4C414E44 		.ascii	"LANDED\000"
 3516      454400
 3517              	.LASF79:
 3518 006a 64617461 		.ascii	"dataflag\000"
 3518      666C6167 
 3518      00
 3519              	.LASF91:
 3520 0073 66696C65 		.ascii	"filename\000"
 3520      6E616D65 
 3520      00
 3521              	.LASF34:
 3522 007c 4D6F6973 		.ascii	"Moisture_ISR_Handler\000"
 3522      74757265 
 3522      5F495352 
 3522      5F48616E 
 3522      646C6572 
 3523              	.LASF48:
 3524 0091 76616375 		.ascii	"vacuumbuf\000"
 3524      756D6275 
 3524      6600
 3525              	.LASF83:
 3526 009b 66696C65 		.ascii	"file\000"
 3526      00
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 76


 3527              	.LASF43:
 3528 00a0 70726573 		.ascii	"pressure_avg\000"
 3528      73757265 
 3528      5F617667 
 3528      00
 3529              	.LASF4:
 3530 00ad 73686F72 		.ascii	"short int\000"
 3530      7420696E 
 3530      7400
 3531              	.LASF70:
 3532 00b7 50414E49 		.ascii	"PANIC_flag\000"
 3532      435F666C 
 3532      616700
 3533              	.LASF13:
 3534 00c2 75696E74 		.ascii	"uint8_t\000"
 3534      385F7400 
 3535              	.LASF56:
 3536 00ca 70756C73 		.ascii	"pulse\000"
 3536      6500
 3537              	.LASF18:
 3538 00d0 696E7431 		.ascii	"int16\000"
 3538      3600
 3539              	.LASF39:
 3540 00d6 64656369 		.ascii	"decimals\000"
 3540      6D616C73 
 3540      00
 3541              	.LASF19:
 3542 00df 666C6F61 		.ascii	"float\000"
 3542      7400
 3543              	.LASF51:
 3544 00e5 73746174 		.ascii	"stateMsgCount\000"
 3544      654D7367 
 3544      436F756E 
 3544      7400
 3545              	.LASF10:
 3546 00f3 6C6F6E67 		.ascii	"long long int\000"
 3546      206C6F6E 
 3546      6720696E 
 3546      7400
 3547              	.LASF66:
 3548 0101 61766572 		.ascii	"average\000"
 3548      61676500 
 3549              	.LASF31:
 3550 0109 5452414E 		.ascii	"TRANSMIT\000"
 3550      534D4954 
 3550      00
 3551              	.LASF86:
 3552 0112 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3552      4320342E 
 3552      392E3320 
 3552      32303135 
 3552      30333033 
 3553 0145 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3553      20726576 
 3553      6973696F 
 3553      6E203232 
 3553      31323230 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 77


 3554 0178 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3554      66756E63 
 3554      74696F6E 
 3554      2D736563 
 3554      74696F6E 
 3555              	.LASF53:
 3556 01a0 74656E73 		.ascii	"tens\000"
 3556      00
 3557              	.LASF40:
 3558 01a5 766F6C74 		.ascii	"voltage\000"
 3558      61676500 
 3559              	.LASF84:
 3560 01ad 766F6C75 		.ascii	"volume\000"
 3560      6D6500
 3561              	.LASF63:
 3562 01b4 70726573 		.ascii	"press_id\000"
 3562      735F6964 
 3562      00
 3563              	.LASF50:
 3564 01bd 7472616E 		.ascii	"transbuf\000"
 3564      73627566 
 3564      00
 3565              	.LASF32:
 3566 01c6 4552524F 		.ascii	"ERROR\000"
 3566      5200
 3567              	.LASF65:
 3568 01cc 70726573 		.ascii	"pressure_sum\000"
 3568      73757265 
 3568      5F73756D 
 3568      00
 3569              	.LASF25:
 3570 01d9 6C6F6E67 		.ascii	"long double\000"
 3570      20646F75 
 3570      626C6500 
 3571              	.LASF27:
 3572 01e5 57414954 		.ascii	"WAIT_TO_LAUNCH\000"
 3572      5F544F5F 
 3572      4C41554E 
 3572      434800
 3573              	.LASF1:
 3574 01f4 756E7369 		.ascii	"unsigned char\000"
 3574      676E6564 
 3574      20636861 
 3574      7200
 3575              	.LASF24:
 3576 0202 46535F46 		.ascii	"FS_FILE\000"
 3576      494C4500 
 3577              	.LASF73:
 3578 020a 636F756E 		.ascii	"countdown\000"
 3578      74646F77 
 3578      6E00
 3579              	.LASF0:
 3580 0214 7369676E 		.ascii	"signed char\000"
 3580      65642063 
 3580      68617200 
 3581              	.LASF11:
 3582 0220 6C6F6E67 		.ascii	"long long unsigned int\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 78


 3582      206C6F6E 
 3582      6720756E 
 3582      7369676E 
 3582      65642069 
 3583              	.LASF16:
 3584 0237 75696E74 		.ascii	"uint32_t\000"
 3584      33325F74 
 3584      00
 3585              	.LASF64:
 3586 0240 64617461 		.ascii	"data_time\000"
 3586      5F74696D 
 3586      6500
 3587              	.LASF12:
 3588 024a 756E7369 		.ascii	"unsigned int\000"
 3588      676E6564 
 3588      20696E74 
 3588      00
 3589              	.LASF41:
 3590 0257 74656D70 		.ascii	"temp\000"
 3590      00
 3591              	.LASF72:
 3592 025c 74657374 		.ascii	"testnum\000"
 3592      6E756D00 
 3593              	.LASF88:
 3594 0264 433A5C55 		.ascii	"C:\\Users\\gstoll\\Desktop\\Project_O-Vac\\OVac.cyd"
 3594      73657273 
 3594      5C677374 
 3594      6F6C6C5C 
 3594      4465736B 
 3595 0292 736E00   		.ascii	"sn\000"
 3596              	.LASF21:
 3597 0295 63686172 		.ascii	"char\000"
 3597      00
 3598              	.LASF7:
 3599 029a 6C6F6E67 		.ascii	"long int\000"
 3599      20696E74 
 3599      00
 3600              	.LASF89:
 3601 02a3 6D61696E 		.ascii	"main\000"
 3601      00
 3602              	.LASF15:
 3603 02a8 696E7433 		.ascii	"int32_t\000"
 3603      325F7400 
 3604              	.LASF5:
 3605 02b0 73686F72 		.ascii	"short unsigned int\000"
 3605      7420756E 
 3605      7369676E 
 3605      65642069 
 3605      6E7400
 3606              	.LASF14:
 3607 02c3 696E7431 		.ascii	"int16_t\000"
 3607      365F7400 
 3608              	.LASF17:
 3609 02cb 75696E74 		.ascii	"uint8\000"
 3609      3800
 3610              	.LASF68:
 3611 02d1 5F426F6F 		.ascii	"_Bool\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 79


 3611      6C00
 3612              	.LASF82:
 3613 02d7 72657365 		.ascii	"reset\000"
 3613      7400
 3614              	.LASF45:
 3615 02dd 63757253 		.ascii	"curState\000"
 3615      74617465 
 3615      00
 3616              	.LASF81:
 3617 02e6 64657074 		.ascii	"depth\000"
 3617      6800
 3618              	.LASF52:
 3619 02ec 7A5F6F66 		.ascii	"z_offset\000"
 3619      66736574 
 3619      00
 3620              	.LASF49:
 3621 02f5 72657375 		.ascii	"resurfbuf\000"
 3621      72666275 
 3621      6600
 3622              	.LASF77:
 3623 02ff 7278666C 		.ascii	"rxflag\000"
 3623      616700
 3624              	.LASF61:
 3625 0306 62756666 		.ascii	"buffer\000"
 3625      657200
 3626              	.LASF36:
 3627 030d 436F756E 		.ascii	"Countdown_ISR_Handler\000"
 3627      74646F77 
 3627      6E5F4953 
 3627      525F4861 
 3627      6E646C65 
 3628              	.LASF87:
 3629 0323 6D61696E 		.ascii	"main.c\000"
 3629      2E6300
 3630              	.LASF22:
 3631 032a 72656738 		.ascii	"reg8\000"
 3631      00
 3632              	.LASF9:
 3633 032f 6C6F6E67 		.ascii	"long unsigned int\000"
 3633      20756E73 
 3633      69676E65 
 3633      6420696E 
 3633      7400
 3634              	.LASF28:
 3635 0341 44455343 		.ascii	"DESCENDING\000"
 3635      454E4449 
 3635      4E4700
 3636              	.LASF78:
 3637 034c 62797465 		.ascii	"bytes\000"
 3637      7300
 3638              	.LASF20:
 3639 0352 646F7562 		.ascii	"double\000"
 3639      6C6500
 3640              	.LASF8:
 3641 0359 5F5F7569 		.ascii	"__uint32_t\000"
 3641      6E743332 
 3641      5F7400
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 80


 3642              	.LASF44:
 3643 0364 74656D70 		.ascii	"tempbuf\000"
 3643      62756600 
 3644              	.LASF6:
 3645 036c 5F5F696E 		.ascii	"__int32_t\000"
 3645      7433325F 
 3645      7400
 3646              	.LASF3:
 3647 0376 5F5F696E 		.ascii	"__int16_t\000"
 3647      7431365F 
 3647      7400
 3648              	.LASF46:
 3649 0380 64657363 		.ascii	"descendbuf\000"
 3649      656E6462 
 3649      756600
 3650              	.LASF23:
 3651 038b 73697A65 		.ascii	"sizetype\000"
 3651      74797065 
 3651      00
 3652              	.LASF55:
 3653 0394 53445F52 		.ascii	"SD_Result\000"
 3653      6573756C 
 3653      7400
 3654              	.LASF71:
 3655 039e 53544154 		.ascii	"STATE\000"
 3655      4500
 3656              	.LASF38:
 3657 03a4 74656D70 		.ascii	"temp_interrupt\000"
 3657      5F696E74 
 3657      65727275 
 3657      707400
 3658              	.LASF42:
 3659 03b3 6F757470 		.ascii	"output\000"
 3659      757400
 3660              	.LASF67:
 3661 03ba 636F6C6C 		.ascii	"collect_flag\000"
 3661      6563745F 
 3661      666C6167 
 3661      00
 3662              	.LASF37:
 3663 03c7 72785F69 		.ascii	"rx_interrupt\000"
 3663      6E746572 
 3663      72757074 
 3663      00
 3664              	.LASF59:
 3665 03d4 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3665      52784275 
 3665      66666572 
 3665      00
 3666              	.LASF90:
 3667 03e1 53445F53 		.ascii	"SD_SETUP\000"
 3667      45545550 
 3667      00
 3668              	.LASF58:
 3669 03ea 73756363 		.ascii	"success\000"
 3669      65737300 
 3670              	.LASF69:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\cctvRUxC.s 			page 81


 3671 03f2 77616974 		.ascii	"wait_flag\000"
 3671      5F666C61 
 3671      6700
 3672              	.LASF35:
 3673 03fc 53616D70 		.ascii	"Sample_ISR_Handler\000"
 3673      6C655F49 
 3673      53525F48 
 3673      616E646C 
 3673      657200
 3674              	.LASF85:
 3675 040f 66736669 		.ascii	"fsfile\000"
 3675      6C6500
 3676              	.LASF47:
 3677 0416 6C616E64 		.ascii	"landedbuf\000"
 3677      65646275 
 3677      6600
 3678              	.LASF2:
 3679 0420 5F5F7569 		.ascii	"__uint8_t\000"
 3679      6E74385F 
 3679      7400
 3680              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

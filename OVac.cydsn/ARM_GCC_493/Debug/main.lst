ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	devAddr,1,1
  19              		.comm	buffer,22,4
  20              		.global	Addr
  21              		.data
  22              		.align	2
  23              		.type	Addr, %object
  24              		.size	Addr, 4
  25              	Addr:
  26 0000 3F000000 		.word	63
  27              		.global	id
  28              		.align	2
  29              		.type	id, %object
  30              		.size	id, 4
  31              	id:
  32 0004 01000000 		.word	1
  33              		.global	press_id
  34              		.align	2
  35              		.type	press_id, %object
  36              		.size	press_id, 4
  37              	press_id:
  38 0008 01000000 		.word	1
  39              		.global	data_time
  40              		.bss
  41              		.align	2
  42              		.type	data_time, %object
  43              		.size	data_time, 4
  44              	data_time:
  45 0000 00000000 		.space	4
  46              		.global	sum
  47              		.align	2
  48              		.type	sum, %object
  49              		.size	sum, 4
  50              	sum:
  51 0004 00000000 		.space	4
  52              		.global	pressure_sum
  53              		.align	2
  54              		.type	pressure_sum, %object
  55              		.size	pressure_sum, 4
  56              	pressure_sum:
  57 0008 00000000 		.space	4
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 2


  58              		.global	average
  59              		.align	1
  60              		.type	average, %object
  61              		.size	average, 2
  62              	average:
  63 000c 0000     		.space	2
  64              		.global	collect_flag
  65              		.type	collect_flag, %object
  66              		.size	collect_flag, 1
  67              	collect_flag:
  68 000e 00       		.space	1
  69              		.global	wait_flag
  70              		.type	wait_flag, %object
  71              		.size	wait_flag, 1
  72              	wait_flag:
  73 000f 00       		.space	1
  74              		.global	PANIC_flag
  75              		.type	PANIC_flag, %object
  76              		.size	PANIC_flag, 1
  77              	PANIC_flag:
  78 0010 00       		.space	1
  79              		.global	STATE
  80              		.data
  81              		.type	STATE, %object
  82              		.size	STATE, 1
  83              	STATE:
  84 000c 01       		.byte	1
  85              		.global	testnum
  86              		.type	testnum, %object
  87              		.size	testnum, 1
  88              	testnum:
  89 000d 01       		.byte	1
  90              		.global	countdown
  91              		.bss
  92              		.type	countdown, %object
  93              		.size	countdown, 1
  94              	countdown:
  95 0011 00       		.space	1
  96              		.global	update_Data
  97              		.type	update_Data, %object
  98              		.size	update_Data, 1
  99              	update_Data:
 100 0012 00       		.space	1
 101              		.global	RxBuffer
 102 0013 00       		.align	2
 103              		.type	RxBuffer, %object
 104              		.size	RxBuffer, 64
 105              	RxBuffer:
 106 0014 00000000 		.space	64
 106      00000000 
 106      00000000 
 106      00000000 
 106      00000000 
 107              		.global	msg_count
 108              		.align	2
 109              		.type	msg_count, %object
 110              		.size	msg_count, 4
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 3


 111              	msg_count:
 112 0054 00000000 		.space	4
 113              		.global	rxflag
 114              		.align	2
 115              		.type	rxflag, %object
 116              		.size	rxflag, 4
 117              	rxflag:
 118 0058 00000000 		.space	4
 119              		.global	bytes
 120              		.align	2
 121              		.type	bytes, %object
 122              		.size	bytes, 4
 123              	bytes:
 124 005c 00000000 		.space	4
 125              		.global	dataflag
 126              		.align	2
 127              		.type	dataflag, %object
 128              		.size	dataflag, 4
 129              	dataflag:
 130 0060 00000000 		.space	4
 131              		.global	transmit_flag
 132              		.align	2
 133              		.type	transmit_flag, %object
 134              		.size	transmit_flag, 4
 135              	transmit_flag:
 136 0064 00000000 		.space	4
 137              		.global	depth
 138              		.align	2
 139              		.type	depth, %object
 140              		.size	depth, 4
 141              	depth:
 142 0068 00000000 		.space	4
 143              		.global	reset
 144              		.align	2
 145              		.type	reset, %object
 146              		.size	reset, 4
 147              	reset:
 148 006c 00000000 		.space	4
 149              		.global	file
 150              		.data
 151 000e 0000     		.align	2
 152              		.type	file, %object
 153              		.size	file, 11
 154              	file:
 155 0010 74657374 		.ascii	"test_1.txt\000"
 155      5F312E74 
 155      787400
 156              		.global	volume
 157 001b 00       		.bss
 158              		.align	2
 159              		.type	volume, %object
 160              		.size	volume, 10
 161              	volume:
 162 0070 00000000 		.space	10
 162      00000000 
 162      0000
 163              		.comm	fsfile,4,4
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 4


 164 007a 0000     		.section	.text.Moisture_ISR_Handler,"ax",%progbits
 165              		.align	2
 166              		.global	Moisture_ISR_Handler
 167              		.thumb
 168              		.thumb_func
 169              		.type	Moisture_ISR_Handler, %function
 170              	Moisture_ISR_Handler:
 171              	.LFB63:
 172              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 2.20
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   This is a source code for example project of ADC single ended mode.
   8:main.c        **** *
   9:main.c        **** *   Variable resistor(pot) is connected to +ve input of ADC using the I/O pin.
  10:main.c        **** *   P0.0. When voltage to positive terminal of ADC is 0, the output displayed
  11:main.c        **** *   on the LCD pannel is 0x0000. As voltage on positive terminal goes on
  12:main.c        **** *   increasing, the  converted value goes on increasing from 0x0000 and reaches
  13:main.c        **** *   0xFFFF when voltage becomes 1.024V. Futher increase in voltage value,
  14:main.c        **** *   doesn't cause any changes to values displayed in the LCD.
  15:main.c        **** *
  16:main.c        **** * Hardware Connections: 
  17:main.c        **** *  Connect analog input from Variable resistor to port P0[0] of DVK1 board.
  18:main.c        **** *
  19:main.c        **** ********************************************************************************
  20:main.c        **** * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  21:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  22:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  23:main.c        **** * Therefore, you may use this software only as provided in the license agreement
  24:main.c        **** * accompanying the software package from which you obtained this software.
  25:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  26:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  27:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <project.h>
  31:main.c        **** #include <mpu6050.h>
  32:main.c        **** #include <stdio.h>
  33:main.c        **** #include <string.h>
  34:main.c        **** #include <FS.h>
  35:main.c        **** #include "LiquidCrystal_I2C.h"
  36:main.c        **** #include "functions.h"
  37:main.c        **** 
  38:main.c        **** #define MPU6050 
  39:main.c        **** #define LCD
  40:main.c        **** #define SD
  41:main.c        **** #define BT
  42:main.c        **** 
  43:main.c        **** #define MA_WINDOW 15                    // Number of samples in the moving average window.
  44:main.c        **** #define BOT_THRESHOLD 20000             // Z-Aacceleration threshold for transition into LANDED sta
  45:main.c        **** #define WAIT_TIME 1000                  // Number of ISR calls until transition into DESCENDING sta
  46:main.c        **** #define DATA_TIME 5000                  // Number of ISR calls until transition into WAIT_TO_LAUNCH
  47:main.c        **** #define BUFFER_LEN  64u                 // Buffer length for UART rx
  48:main.c        **** 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 5


  49:main.c        **** 
  50:main.c        **** uint32_t Addr = 0x3F;                       // I2C address of LCD.
  51:main.c        **** long id = 1, press_id = 1;                 // Interrupt count.
  52:main.c        **** long data_time = 0;                        // data point num
  53:main.c        **** 
  54:main.c        **** long sum = 0;                               // Sum of accelerometer values
  55:main.c        **** float pressure_sum = 0;                     // Sum of pressure values. 
  56:main.c        **** int16_t average = 0;                        // Moving average variable, accelerometer.
  57:main.c        **** bool collect_flag = 0;                      // flag indicating when to record acceleration sample.
  58:main.c        **** bool wait_flag = 0;                         // flag indicating when to increment interrupt counter.
  59:main.c        **** bool PANIC_flag = 0;                        // flag indicating water is present in housing.
  60:main.c        **** //bool first_test = 1;                        // flag indicating first test(longer countdown)
  61:main.c        **** STATES STATE = WAIT_TO_LAUNCH;                  // Set initial state. 
  62:main.c        **** uint8_t testnum = 1, countdown = 0, update_Data = 0;
  63:main.c        **** uint8_t RxBuffer[BUFFER_LEN] = {};            // Rx Buffer
  64:main.c        **** int msg_count = 0, rxflag = 0, bytes = 0, dataflag = 0, transmit_flag = 0;    // UART variables
  65:main.c        **** int depth = 0, reset = 0;                                                  // Variable depth
  66:main.c        **** char file[11] = "test_1.txt";
  67:main.c        **** char volume[10] = {};
  68:main.c        **** FS_FILE *fsfile;
  69:main.c        **** 
  70:main.c        **** /*******************************************************************************
  71:main.c        **** * Function Name: main
  72:main.c        **** ********************************************************************************
  73:main.c        **** *
  74:main.c        **** * Summary:
  75:main.c        **** *  main() performs following functions:
  76:main.c        **** *  1: Initializes the LCD.
  77:main.c        **** *  2: Initializes timer module and sampling interrupt.
  78:main.c        **** *  3: Initializes MPU6050 Accelerometer/Gyroscope module.
  79:main.c        **** *  4: Samples Z-axis acceleration data from module @ 500hz.
  80:main.c        **** *  5: Computes moving average of Z-axis acceleration values.
  81:main.c        **** *  6: Transitions from DESCENDING to LANDED state when sudden acceleration occurs
  82:main.c        **** *     (ie. moving average > 200000).
  83:main.c        **** *
  84:main.c        **** * Parameters:
  85:main.c        **** *  None.
  86:main.c        **** *
  87:main.c        **** * Return:
  88:main.c        **** *  None.
  89:main.c        **** *
  90:main.c        **** *******************************************************************************/
  91:main.c        **** 
  92:main.c        **** 
  93:main.c        **** /* Moisture sensor ISR */
  94:main.c        **** CY_ISR (Moisture_ISR_Handler){
 173              		.loc 1 94 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 1, uses_anonymous_args = 0
 177 0000 80B5     		push	{r7, lr}
 178              		.cfi_def_cfa_offset 8
 179              		.cfi_offset 7, -8
 180              		.cfi_offset 14, -4
 181 0002 00AF     		add	r7, sp, #0
 182              		.cfi_def_cfa_register 7
  95:main.c        ****     PANIC_flag = 1;                             // Set flag to indicate water
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 6


 183              		.loc 1 95 0
 184 0004 044B     		ldr	r3, .L2
 185 0006 0122     		movs	r2, #1
 186 0008 1A70     		strb	r2, [r3]
  96:main.c        ****     STATE = RESURFACE;                          // Go to surface
 187              		.loc 1 96 0
 188 000a 044B     		ldr	r3, .L2+4
 189 000c 0422     		movs	r2, #4
 190 000e 1A70     		strb	r2, [r3]
  97:main.c        ****     Comp_Stop();                                // Stop comparator for interrupt
 191              		.loc 1 97 0
 192 0010 FFF7FEFF 		bl	Comp_Stop
  98:main.c        **** }
 193              		.loc 1 98 0
 194 0014 80BD     		pop	{r7, pc}
 195              	.L3:
 196 0016 00BF     		.align	2
 197              	.L2:
 198 0018 00000000 		.word	PANIC_flag
 199 001c 00000000 		.word	STATE
 200              		.cfi_endproc
 201              	.LFE63:
 202              		.size	Moisture_ISR_Handler, .-Moisture_ISR_Handler
 203              		.section	.text.Sample_ISR_Handler,"ax",%progbits
 204              		.align	2
 205              		.global	Sample_ISR_Handler
 206              		.thumb
 207              		.thumb_func
 208              		.type	Sample_ISR_Handler, %function
 209              	Sample_ISR_Handler:
 210              	.LFB64:
  99:main.c        **** 
 100:main.c        **** /* Sampling ISR */
 101:main.c        **** CY_ISR (Sample_ISR_Handler){
 211              		.loc 1 101 0
 212              		.cfi_startproc
 213              		@ args = 0, pretend = 0, frame = 0
 214              		@ frame_needed = 1, uses_anonymous_args = 0
 215              		@ link register save eliminated.
 216 0000 80B4     		push	{r7}
 217              		.cfi_def_cfa_offset 4
 218              		.cfi_offset 7, -4
 219 0002 00AF     		add	r7, sp, #0
 220              		.cfi_def_cfa_register 7
 102:main.c        ****     Sample_Timer_STATUS;                        // Clears interrupt by accessing timer status regis
 221              		.loc 1 102 0
 222 0004 084B     		ldr	r3, .L6
 223 0006 1B78     		ldrb	r3, [r3]
 103:main.c        ****     if (STATE == DESCENDING){ 
 224              		.loc 1 103 0
 225 0008 084B     		ldr	r3, .L6+4
 226 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 227 000c 022B     		cmp	r3, #2
 228 000e 07D1     		bne	.L4
 104:main.c        ****         collect_flag = 1;
 229              		.loc 1 104 0
 230 0010 074B     		ldr	r3, .L6+8
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 7


 231 0012 0122     		movs	r2, #1
 232 0014 1A70     		strb	r2, [r3]
 105:main.c        ****         data_time++;
 233              		.loc 1 105 0
 234 0016 074B     		ldr	r3, .L6+12
 235 0018 1B68     		ldr	r3, [r3]
 236 001a 0133     		adds	r3, r3, #1
 237 001c 054A     		ldr	r2, .L6+12
 238 001e 1360     		str	r3, [r2]
 239              	.L4:
 106:main.c        ****     }
 107:main.c        **** }
 240              		.loc 1 107 0
 241 0020 BD46     		mov	sp, r7
 242              		.cfi_def_cfa_register 13
 243              		@ sp needed
 244 0022 5DF8047B 		ldr	r7, [sp], #4
 245              		.cfi_restore 7
 246              		.cfi_def_cfa_offset 0
 247 0026 7047     		bx	lr
 248              	.L7:
 249              		.align	2
 250              	.L6:
 251 0028 034F0040 		.word	1073762051
 252 002c 00000000 		.word	STATE
 253 0030 00000000 		.word	collect_flag
 254 0034 00000000 		.word	data_time
 255              		.cfi_endproc
 256              	.LFE64:
 257              		.size	Sample_ISR_Handler, .-Sample_ISR_Handler
 258              		.section	.text.Countdown_ISR_Handler,"ax",%progbits
 259              		.align	2
 260              		.global	Countdown_ISR_Handler
 261              		.thumb
 262              		.thumb_func
 263              		.type	Countdown_ISR_Handler, %function
 264              	Countdown_ISR_Handler:
 265              	.LFB65:
 108:main.c        **** 
 109:main.c        **** /* Countdown ISR*/
 110:main.c        **** CY_ISR (Countdown_ISR_Handler){
 266              		.loc 1 110 0
 267              		.cfi_startproc
 268              		@ args = 0, pretend = 0, frame = 0
 269              		@ frame_needed = 1, uses_anonymous_args = 0
 270              		@ link register save eliminated.
 271 0000 80B4     		push	{r7}
 272              		.cfi_def_cfa_offset 4
 273              		.cfi_offset 7, -4
 274 0002 00AF     		add	r7, sp, #0
 275              		.cfi_def_cfa_register 7
 111:main.c        ****     Countdown_timer_STATUS;                        // Clears interrupt by accessing timer status re
 276              		.loc 1 111 0
 277 0004 184B     		ldr	r3, .L13
 278 0006 1B78     		ldrb	r3, [r3]
 112:main.c        ****     if (STATE == DESCENDING || STATE == LANDED || STATE == RESURFACE){
 279              		.loc 1 112 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 8


 280 0008 184B     		ldr	r3, .L13+4
 281 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 282 000c 022B     		cmp	r3, #2
 283 000e 07D0     		beq	.L9
 284              		.loc 1 112 0 is_stmt 0 discriminator 1
 285 0010 164B     		ldr	r3, .L13+4
 286 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 287 0014 032B     		cmp	r3, #3
 288 0016 03D0     		beq	.L9
 289              		.loc 1 112 0 discriminator 2
 290 0018 144B     		ldr	r3, .L13+4
 291 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 292 001c 042B     		cmp	r3, #4
 293 001e 02D1     		bne	.L10
 294              	.L9:
 113:main.c        ****         wait_flag = 1;
 295              		.loc 1 113 0 is_stmt 1
 296 0020 134B     		ldr	r3, .L13+8
 297 0022 0122     		movs	r2, #1
 298 0024 1A70     		strb	r2, [r3]
 299              	.L10:
 114:main.c        ****     }
 115:main.c        ****     #ifdef BT
 116:main.c        ****         if (STATE == TRANSMIT || (STATE == WAIT_TO_LAUNCH && !dataflag)){
 300              		.loc 1 116 0
 301 0026 114B     		ldr	r3, .L13+4
 302 0028 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 303 002a 052B     		cmp	r3, #5
 304 002c 07D0     		beq	.L11
 305              		.loc 1 116 0 is_stmt 0 discriminator 1
 306 002e 0F4B     		ldr	r3, .L13+4
 307 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 308 0032 012B     		cmp	r3, #1
 309 0034 13D1     		bne	.L8
 310              		.loc 1 116 0 discriminator 2
 311 0036 0F4B     		ldr	r3, .L13+12
 312 0038 1B68     		ldr	r3, [r3]
 313 003a 002B     		cmp	r3, #0
 314 003c 0FD1     		bne	.L8
 315              	.L11:
 117:main.c        ****             update_Data++;
 316              		.loc 1 117 0 is_stmt 1
 317 003e 0E4B     		ldr	r3, .L13+16
 318 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 319 0042 0133     		adds	r3, r3, #1
 320 0044 DAB2     		uxtb	r2, r3
 321 0046 0C4B     		ldr	r3, .L13+16
 322 0048 1A70     		strb	r2, [r3]
 118:main.c        ****             if (update_Data == 100){
 323              		.loc 1 118 0
 324 004a 0B4B     		ldr	r3, .L13+16
 325 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 326 004e 642B     		cmp	r3, #100
 327 0050 05D1     		bne	.L8
 119:main.c        ****                 transmit_flag = 1;
 328              		.loc 1 119 0
 329 0052 0A4B     		ldr	r3, .L13+20
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 9


 330 0054 0122     		movs	r2, #1
 331 0056 1A60     		str	r2, [r3]
 120:main.c        ****                 update_Data = 0;
 332              		.loc 1 120 0
 333 0058 074B     		ldr	r3, .L13+16
 334 005a 0022     		movs	r2, #0
 335 005c 1A70     		strb	r2, [r3]
 336              	.L8:
 121:main.c        ****             }
 122:main.c        ****         }
 123:main.c        ****             
 124:main.c        ****     #endif
 125:main.c        **** }
 337              		.loc 1 125 0
 338 005e BD46     		mov	sp, r7
 339              		.cfi_def_cfa_register 13
 340              		@ sp needed
 341 0060 5DF8047B 		ldr	r7, [sp], #4
 342              		.cfi_restore 7
 343              		.cfi_def_cfa_offset 0
 344 0064 7047     		bx	lr
 345              	.L14:
 346 0066 00BF     		.align	2
 347              	.L13:
 348 0068 6D640040 		.word	1073767533
 349 006c 00000000 		.word	STATE
 350 0070 00000000 		.word	wait_flag
 351 0074 00000000 		.word	dataflag
 352 0078 00000000 		.word	update_Data
 353 007c 00000000 		.word	transmit_flag
 354              		.cfi_endproc
 355              	.LFE65:
 356              		.size	Countdown_ISR_Handler, .-Countdown_ISR_Handler
 357              		.section	.text.rx_interrupt,"ax",%progbits
 358              		.align	2
 359              		.global	rx_interrupt
 360              		.thumb
 361              		.thumb_func
 362              		.type	rx_interrupt, %function
 363              	rx_interrupt:
 364              	.LFB66:
 126:main.c        **** 
 127:main.c        **** CY_ISR(rx_interrupt){
 365              		.loc 1 127 0
 366              		.cfi_startproc
 367              		@ args = 0, pretend = 0, frame = 0
 368              		@ frame_needed = 1, uses_anonymous_args = 0
 369 0000 98B5     		push	{r3, r4, r7, lr}
 370              		.cfi_def_cfa_offset 16
 371              		.cfi_offset 3, -16
 372              		.cfi_offset 4, -12
 373              		.cfi_offset 7, -8
 374              		.cfi_offset 14, -4
 375 0002 00AF     		add	r7, sp, #0
 376              		.cfi_def_cfa_register 7
 128:main.c        ****     #ifdef BT
 129:main.c        ****     while (UART_ReadRxStatus() & UART_RX_STS_FIFO_NOTEMPTY){
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 10


 377              		.loc 1 129 0
 378 0004 14E0     		b	.L16
 379              	.L17:
 130:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 380              		.loc 1 130 0
 381 0006 0E4B     		ldr	r3, .L18
 382 0008 1C68     		ldr	r4, [r3]
 383 000a 631C     		adds	r3, r4, #1
 384 000c 0C4A     		ldr	r2, .L18
 385 000e 1360     		str	r3, [r2]
 386 0010 FFF7FEFF 		bl	UART_GetChar
 387 0014 0346     		mov	r3, r0
 388 0016 1A46     		mov	r2, r3
 389 0018 0A4B     		ldr	r3, .L18+4
 390 001a 1A55     		strb	r2, [r3, r4]
 131:main.c        ****         if ((msg_count - 3) >= bytes)
 391              		.loc 1 131 0
 392 001c 084B     		ldr	r3, .L18
 393 001e 1B68     		ldr	r3, [r3]
 394 0020 DA1E     		subs	r2, r3, #3
 395 0022 094B     		ldr	r3, .L18+8
 396 0024 1B68     		ldr	r3, [r3]
 397 0026 9A42     		cmp	r2, r3
 398 0028 02DB     		blt	.L16
 132:main.c        ****             rxflag = 1;
 399              		.loc 1 132 0
 400 002a 084B     		ldr	r3, .L18+12
 401 002c 0122     		movs	r2, #1
 402 002e 1A60     		str	r2, [r3]
 403              	.L16:
 129:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 404              		.loc 1 129 0
 405 0030 FFF7FEFF 		bl	UART_ReadRxStatus
 406 0034 0346     		mov	r3, r0
 407 0036 03F02003 		and	r3, r3, #32
 408 003a 002B     		cmp	r3, #0
 409 003c E3D1     		bne	.L17
 133:main.c        ****     }
 134:main.c        ****     #endif
 135:main.c        **** }
 410              		.loc 1 135 0
 411 003e 98BD     		pop	{r3, r4, r7, pc}
 412              	.L19:
 413              		.align	2
 414              	.L18:
 415 0040 00000000 		.word	msg_count
 416 0044 00000000 		.word	RxBuffer
 417 0048 00000000 		.word	bytes
 418 004c 00000000 		.word	rxflag
 419              		.cfi_endproc
 420              	.LFE66:
 421              		.size	rx_interrupt, .-rx_interrupt
 422              		.section	.text.temp_interrupt,"ax",%progbits
 423              		.align	2
 424              		.global	temp_interrupt
 425              		.thumb
 426              		.thumb_func
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 11


 427              		.type	temp_interrupt, %function
 428              	temp_interrupt:
 429              	.LFB67:
 136:main.c        **** 
 137:main.c        **** CY_ISR(temp_interrupt){
 430              		.loc 1 137 0
 431              		.cfi_startproc
 432              		@ args = 0, pretend = 0, frame = 0
 433              		@ frame_needed = 1, uses_anonymous_args = 0
 434              		@ link register save eliminated.
 435 0000 80B4     		push	{r7}
 436              		.cfi_def_cfa_offset 4
 437              		.cfi_offset 7, -4
 438 0002 00AF     		add	r7, sp, #0
 439              		.cfi_def_cfa_register 7
 138:main.c        ****     adjust_timer_STATUS;
 440              		.loc 1 138 0
 441 0004 0F4B     		ldr	r3, .L24
 442 0006 1B78     		ldrb	r3, [r3]
 139:main.c        ****     if ((STATE == WAIT_TO_LAUNCH && depth != 0) || STATE == LANDED || STATE == RESURFACE){ 
 443              		.loc 1 139 0
 444 0008 0F4B     		ldr	r3, .L24+4
 445 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 446 000c 012B     		cmp	r3, #1
 447 000e 03D1     		bne	.L21
 448              		.loc 1 139 0 is_stmt 0 discriminator 1
 449 0010 0E4B     		ldr	r3, .L24+8
 450 0012 1B68     		ldr	r3, [r3]
 451 0014 002B     		cmp	r3, #0
 452 0016 07D1     		bne	.L22
 453              	.L21:
 454              		.loc 1 139 0 discriminator 3
 455 0018 0B4B     		ldr	r3, .L24+4
 456 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 457 001c 032B     		cmp	r3, #3
 458 001e 03D0     		beq	.L22
 459              		.loc 1 139 0 discriminator 4
 460 0020 094B     		ldr	r3, .L24+4
 461 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 462 0024 042B     		cmp	r3, #4
 463 0026 08D1     		bne	.L20
 464              	.L22:
 140:main.c        ****         wait_flag = 1;
 465              		.loc 1 140 0 is_stmt 1
 466 0028 094B     		ldr	r3, .L24+12
 467 002a 0122     		movs	r2, #1
 468 002c 1A70     		strb	r2, [r3]
 141:main.c        ****         countdown++;
 469              		.loc 1 141 0
 470 002e 094B     		ldr	r3, .L24+16
 471 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 472 0032 0133     		adds	r3, r3, #1
 473 0034 DAB2     		uxtb	r2, r3
 474 0036 074B     		ldr	r3, .L24+16
 475 0038 1A70     		strb	r2, [r3]
 476              	.L20:
 142:main.c        ****     }
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 12


 143:main.c        **** }
 477              		.loc 1 143 0
 478 003a BD46     		mov	sp, r7
 479              		.cfi_def_cfa_register 13
 480              		@ sp needed
 481 003c 5DF8047B 		ldr	r7, [sp], #4
 482              		.cfi_restore 7
 483              		.cfi_def_cfa_offset 0
 484 0040 7047     		bx	lr
 485              	.L25:
 486 0042 00BF     		.align	2
 487              	.L24:
 488 0044 67650040 		.word	1073767783
 489 0048 00000000 		.word	STATE
 490 004c 00000000 		.word	depth
 491 0050 00000000 		.word	wait_flag
 492 0054 00000000 		.word	countdown
 493              		.cfi_endproc
 494              	.LFE67:
 495              		.size	temp_interrupt, .-temp_interrupt
 496              		.section	.rodata
 497              		.align	2
 498              	.LC6:
 499 0000 50536F43 		.ascii	"PSoC 5LP: O-Vac\000"
 499      20354C50 
 499      3A204F2D 
 499      56616300 
 500              		.align	2
 501              	.LC7:
 502 0010 49324320 		.ascii	"I2C Working\000"
 502      576F726B 
 502      696E6700 
 503              		.align	2
 504              	.LC8:
 505 001c 53642076 		.ascii	"Sd vol succeed\000"
 505      6F6C2073 
 505      75636365 
 505      656400
 506 002b 00       		.align	2
 507              	.LC9:
 508 002c 53642076 		.ascii	"Sd vol failed\000"
 508      6F6C2066 
 508      61696C65 
 508      6400
 509 003a 0000     		.align	2
 510              	.LC10:
 511 003c 666F726D 		.ascii	"format Succeeded\000"
 511      61742053 
 511      75636365 
 511      65646564 
 511      00
 512 004d 000000   		.align	2
 513              	.LC11:
 514 0050 666F726D 		.ascii	"format Failed\000"
 514      61742046 
 514      61696C65 
 514      6400
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 13


 515 005e 0000     		.align	2
 516              	.LC12:
 517 0060 7700     		.ascii	"w\000"
 518 0062 0000     		.align	2
 519              	.LC13:
 520 0064 46696C65 		.ascii	"File \000"
 520      2000
 521 006a 0000     		.align	2
 522              	.LC14:
 523 006c 77617320 		.ascii	"was opened\000"
 523      6F70656E 
 523      656400
 524 0077 00       		.align	2
 525              	.LC15:
 526 0078 77726974 		.ascii	"written to file\000"
 526      74656E20 
 526      746F2066 
 526      696C6500 
 527              		.align	2
 528              	.LC16:
 529 0088 4661696C 		.ascii	"Failed to write\000"
 529      65642074 
 529      6F207772 
 529      69746500 
 530              		.align	2
 531              	.LC17:
 532 0098 66696C65 		.ascii	"file not created\000"
 532      206E6F74 
 532      20637265 
 532      61746564 
 532      00
 533 00a9 000000   		.align	2
 534              	.LC18:
 535 00ac 0A2D2D2D 		.ascii	"\012------------\012\000"
 535      2D2D2D2D 
 535      2D2D2D2D 
 535      2D0A00
 536              		.global	__aeabi_i2f
 537              		.global	__aeabi_f2d
 538              		.global	__aeabi_dmul
 539              		.global	__aeabi_d2f
 540              		.global	__aeabi_fadd
 541              		.global	__aeabi_fdiv
 542              		.global	__aeabi_f2iz
 543              		.global	__aeabi_fsub
 544              		.global	__aeabi_fmul
 545 00bb 00       		.align	2
 546              	.LC19:
 547 00bc 70726573 		.ascii	"pressure: %d.%04d, %d\012\000"
 547      73757265 
 547      3A202564 
 547      2E253034 
 547      642C2025 
 548 00d3 00       		.align	2
 549              	.LC20:
 550 00d4 542D6D69 		.ascii	"T-minus %d seconds\012\000"
 550      6E757320 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 14


 550      25642073 
 550      65636F6E 
 550      64730A00 
 551              		.align	2
 552              	.LC21:
 553 00e8 0A256420 		.ascii	"\012%d seconds remaining\000"
 553      7365636F 
 553      6E647320 
 553      72656D61 
 553      696E696E 
 554 00fe 0000     		.align	2
 555              	.LC22:
 556 0100 53544154 		.ascii	"STATE: DESCENT\000"
 556      453A2044 
 556      45534345 
 556      4E5400
 557 010f 00       		.align	2
 558              	.LC23:
 559 0110 53544154 		.ascii	"STATE: LANDED\000"
 559      453A204C 
 559      414E4445 
 559      4400
 560 011e 0000     		.align	2
 561              	.LC24:
 562 0120 53544154 		.ascii	"STATE: LANDED ***********\012\000"
 562      453A204C 
 562      414E4445 
 562      44202A2A 
 562      2A2A2A2A 
 563 013b 00       		.align	2
 564              	.LC25:
 565 013c 56414355 		.ascii	"VACUUMING\000"
 565      554D494E 
 565      4700
 566 0146 0000     		.align	2
 567              	.LC26:
 568 0148 53544154 		.ascii	"STATE: VACUUMING ***********\012\000"
 568      453A2056 
 568      41435555 
 568      4D494E47 
 568      202A2A2A 
 569 0166 0000     		.align	2
 570              	.LC27:
 571 0168 53544154 		.ascii	"STATE: WAIT\000"
 571      453A2057 
 571      41495400 
 572              		.align	2
 573              	.LC28:
 574 0174 53544154 		.ascii	"STATE: RESURFACING\000"
 574      453A2052 
 574      45535552 
 574      46414349 
 574      4E4700
 575 0187 00       		.align	2
 576              	.LC29:
 577 0188 53544154 		.ascii	"STATE: RESURFACING ***********\012\000"
 577      453A2052 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 15


 577      45535552 
 577      46414349 
 577      4E47202A 
 578              		.align	2
 579              	.LC30:
 580 01a8 57415445 		.ascii	"WATER DETECTED\000"
 580      52204445 
 580      54454354 
 580      454400
 581 01b7 00       		.align	2
 582              	.LC31:
 583 01b8 5452414E 		.ascii	"TRANSMIT\000"
 583      534D4954 
 583      00
 584 01c1 000000   		.align	2
 585              	.LC32:
 586 01c4 53544154 		.ascii	"STATE: TRANSMIT ***********\012\000"
 586      453A2054 
 586      52414E53 
 586      4D495420 
 586      2A2A2A2A 
 587 01e1 000000   		.align	2
 588              	.LC0:
 589 01e4 53595354 		.ascii	"SYSTEM_CHECK\000"
 589      454D5F43 
 589      4845434B 
 589      00
 590 01f1 00       		.space	1
 591 01f2 0000     		.align	2
 592              	.LC1:
 593 01f4 0A535441 		.ascii	"\012STATE: DESCENDING\012\000"
 593      54453A20 
 593      44455343 
 593      454E4449 
 593      4E470A00 
 594              		.align	2
 595              	.LC2:
 596 0208 53544154 		.ascii	"STATE: LANDED\012\000"
 596      453A204C 
 596      414E4445 
 596      440A00
 597 0217 00       		.align	2
 598              	.LC3:
 599 0218 53544154 		.ascii	"STATE: VACUUMING\012\000"
 599      453A2056 
 599      41435555 
 599      4D494E47 
 599      0A00
 600 022a 0000     		.align	2
 601              	.LC4:
 602 022c 53544154 		.ascii	"STATE: RESURFACE\012\000"
 602      453A2052 
 602      45535552 
 602      46414345 
 602      0A00
 603 023e 0000     		.align	2
 604              	.LC5:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 16


 605 0240 53544154 		.ascii	"STATE: TRANSMIT\012\000"
 605      453A2054 
 605      52414E53 
 605      4D49540A 
 605      00
 606 0251 000000   		.section	.text.main,"ax",%progbits
 607              		.align	2
 608              		.global	main
 609              		.thumb
 610              		.thumb_func
 611              		.type	main, %function
 612              	main:
 613              	.LFB68:
 144:main.c        **** 
 145:main.c        **** int main()
 146:main.c        **** {
 614              		.loc 1 146 0
 615              		.cfi_startproc
 616              		@ args = 0, pretend = 0, frame = 288
 617              		@ frame_needed = 1, uses_anonymous_args = 0
 618 0000 B0B5     		push	{r4, r5, r7, lr}
 619              		.cfi_def_cfa_offset 16
 620              		.cfi_offset 4, -16
 621              		.cfi_offset 5, -12
 622              		.cfi_offset 7, -8
 623              		.cfi_offset 14, -4
 624 0002 CAB0     		sub	sp, sp, #296
 625              		.cfi_def_cfa_offset 312
 626 0004 02AF     		add	r7, sp, #8
 627              		.cfi_def_cfa 7, 304
 147:main.c        ****     int num = 0, decimals = 0;                                       // ADC Voltage conversion plac
 628              		.loc 1 147 0
 629 0006 0023     		movs	r3, #0
 630 0008 C7F81031 		str	r3, [r7, #272]
 631 000c 0023     		movs	r3, #0
 632 000e C7F80C31 		str	r3, [r7, #268]
 148:main.c        ****     float voltage = 0, temp = 0, output = 0, pressure_avg = 0;       // ADC Voltage conversion vari
 633              		.loc 1 148 0
 634 0012 4FF00003 		mov	r3, #0
 635 0016 C7F80831 		str	r3, [r7, #264]	@ float
 636 001a 4FF00003 		mov	r3, #0
 637 001e C7F80431 		str	r3, [r7, #260]	@ float
 638 0022 4FF00003 		mov	r3, #0
 639 0026 C7F80031 		str	r3, [r7, #256]	@ float
 640 002a 4FF00003 		mov	r3, #0
 641 002e C7F81C31 		str	r3, [r7, #284]	@ float
 149:main.c        ****     char buf[50], tempbuf[20] = {}, curState[14] = "SYSTEM_CHECK";  // buffers, UART and initial st
 642              		.loc 1 149 0
 643 0032 07F1B003 		add	r3, r7, #176
 644 0036 0022     		movs	r2, #0
 645 0038 1A60     		str	r2, [r3]
 646 003a 0433     		adds	r3, r3, #4
 647 003c 0022     		movs	r2, #0
 648 003e 1A60     		str	r2, [r3]
 649 0040 0433     		adds	r3, r3, #4
 650 0042 0022     		movs	r2, #0
 651 0044 1A60     		str	r2, [r3]
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 17


 652 0046 0433     		adds	r3, r3, #4
 653 0048 0022     		movs	r2, #0
 654 004a 1A60     		str	r2, [r3]
 655 004c 0433     		adds	r3, r3, #4
 656 004e 0022     		movs	r2, #0
 657 0050 1A60     		str	r2, [r3]
 658 0052 0433     		adds	r3, r3, #4
 659 0054 A44B     		ldr	r3, .L92+8
 660 0056 07F1A004 		add	r4, r7, #160
 661 005a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 662 005c 07C4     		stmia	r4!, {r0, r1, r2}
 663 005e 2370     		strb	r3, [r4]
 664 0060 0023     		movs	r3, #0
 665 0062 87F8AD30 		strb	r3, [r7, #173]
 150:main.c        ****     char descendbuf[DESCENDING_LEN] = STATE_DESCENDING;             // buffers for transmitting sta
 666              		.loc 1 150 0
 667 0066 A14B     		ldr	r3, .L92+12
 668 0068 07F18C04 		add	r4, r7, #140
 669 006c 1D46     		mov	r5, r3
 670 006e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 671 0070 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 672 0072 2B68     		ldr	r3, [r5]
 673 0074 1A46     		mov	r2, r3	@ movhi
 674 0076 2280     		strh	r2, [r4]	@ movhi
 675 0078 0234     		adds	r4, r4, #2
 676 007a 1B0C     		lsrs	r3, r3, #16
 677 007c 2370     		strb	r3, [r4]
 151:main.c        ****     char landedbuf[LANDED_LEN] = STATE_LANDED;              
 678              		.loc 1 151 0
 679 007e 9C4B     		ldr	r3, .L92+16
 680 0080 07F17C04 		add	r4, r7, #124
 681 0084 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 682 0086 07C4     		stmia	r4!, {r0, r1, r2}
 683 0088 2380     		strh	r3, [r4]	@ movhi
 152:main.c        ****     char vacuumbuf[VACUUM_LEN] = STATE_VACUUM;
 684              		.loc 1 152 0
 685 008a 9A4B     		ldr	r3, .L92+20
 686 008c 07F16804 		add	r4, r7, #104
 687 0090 1D46     		mov	r5, r3
 688 0092 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 689 0094 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 690 0096 2B68     		ldr	r3, [r5]
 691 0098 2370     		strb	r3, [r4]
 153:main.c        ****     char resurfbuf[RESURFACE_LEN] = STATE_RESURFACE;
 692              		.loc 1 153 0
 693 009a 974B     		ldr	r3, .L92+24
 694 009c 07F15404 		add	r4, r7, #84
 695 00a0 1D46     		mov	r5, r3
 696 00a2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 697 00a4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 698 00a6 2B68     		ldr	r3, [r5]
 699 00a8 2370     		strb	r3, [r4]
 154:main.c        ****     char transbuf[TRANSMIT_LEN] = STATE_TRANSMIT;
 700              		.loc 1 154 0
 701 00aa 944B     		ldr	r3, .L92+28
 702 00ac 07F14404 		add	r4, r7, #68
 703 00b0 0FCB     		ldmia	r3, {r0, r1, r2, r3}
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 18


 704 00b2 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 155:main.c        ****     int stateMsgCount = 0;
 705              		.loc 1 155 0
 706 00b6 0023     		movs	r3, #0
 707 00b8 C7F81831 		str	r3, [r7, #280]
 156:main.c        ****     
 157:main.c        ****     int16_t ax, ay, az, i;
 158:main.c        ****     int16_t gx, gy, gz;
 159:main.c        ****     int16_t z_offset = 0;
 708              		.loc 1 159 0
 709 00bc 0023     		movs	r3, #0
 710 00be A7F8FE30 		strh	r3, [r7, #254]	@ movhi
 160:main.c        ****     int tens = 0, ones = 0;                     // digit place variables for message len of bluetoo
 711              		.loc 1 160 0
 712 00c2 0023     		movs	r3, #0
 713 00c4 3B64     		str	r3, [r7, #64]
 714 00c6 0023     		movs	r3, #0
 715 00c8 C7F8F830 		str	r3, [r7, #248]
 161:main.c        ****     
 162:main.c        ****     /* Start the components */
 163:main.c        ****     CYGlobalIntEnable;                          // enable global interrupts
 716              		.loc 1 163 0
 717              	@ 163 "main.c" 1
 718 00cc 62B6     		CPSIE   i
 719              	@ 0 "" 2
 164:main.c        ****     I2C_Master_Start(); 
 720              		.loc 1 164 0
 721              		.thumb
 722 00ce FFF7FEFF 		bl	I2C_Master_Start
 165:main.c        ****     ADC_Start();
 723              		.loc 1 165 0
 724 00d2 FFF7FEFF 		bl	ADC_Start
 166:main.c        ****     Sample_Timer_Start();                       // start timer module
 725              		.loc 1 166 0
 726 00d6 FFF7FEFF 		bl	Sample_Timer_Start
 167:main.c        ****     Sample_ISR_StartEx(Sample_ISR_Handler);     // reference ISR function
 727              		.loc 1 167 0
 728 00da 8948     		ldr	r0, .L92+32
 729 00dc FFF7FEFF 		bl	Sample_ISR_StartEx
 168:main.c        ****     rx_interrupt_StartEx(rx_interrupt);
 730              		.loc 1 168 0
 731 00e0 8848     		ldr	r0, .L92+36
 732 00e2 FFF7FEFF 		bl	rx_interrupt_StartEx
 169:main.c        ****     //moisture_isr_StartEx(Moisture_ISR_Handler); // moisture isr start
 170:main.c        ****     //Comp_Start();                               // comparator for moisture start
 171:main.c        ****     UART_Start();
 733              		.loc 1 171 0
 734 00e6 FFF7FEFF 		bl	UART_Start
 172:main.c        ****     
 173:main.c        ****     
 174:main.c        ****     #ifdef LCD
 175:main.c        ****         LiquidCrystal_I2C_init(Addr,16,2,0);        // initialize I2C communication with LCD
 735              		.loc 1 175 0
 736 00ea 874B     		ldr	r3, .L92+40
 737 00ec 1B68     		ldr	r3, [r3]
 738 00ee DBB2     		uxtb	r3, r3
 739 00f0 1846     		mov	r0, r3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 19


 740 00f2 1021     		movs	r1, #16
 741 00f4 0222     		movs	r2, #2
 742 00f6 0023     		movs	r3, #0
 743 00f8 FFF7FEFF 		bl	LiquidCrystal_I2C_init
 176:main.c        ****         begin(); 
 744              		.loc 1 176 0
 745 00fc FFF7FEFF 		bl	begin
 177:main.c        ****     
 178:main.c        ****     #endif
 179:main.c        ****    
 180:main.c        ****     /* initialize MPU6050 */
 181:main.c        ****     #ifdef MPU6050
 182:main.c        ****         MPU6050_init();    
 746              		.loc 1 182 0
 747 0100 FFF7FEFF 		bl	MPU6050_init
 183:main.c        **** 	    MPU6050_initialize(); 
 748              		.loc 1 183 0
 749 0104 FFF7FEFF 		bl	MPU6050_initialize
 184:main.c        ****     #endif
 185:main.c        ****         
 186:main.c        ****     #ifdef LCD
 187:main.c        ****         /* Startup Display */
 188:main.c        ****         LCD_print("PSoC 5LP: O-Vac");
 750              		.loc 1 188 0
 751 0108 8048     		ldr	r0, .L92+44
 752 010a FFF7FEFF 		bl	LCD_print
 189:main.c        ****         setCursor(0,1);
 753              		.loc 1 189 0
 754 010e 0020     		movs	r0, #0
 755 0110 0121     		movs	r1, #1
 756 0112 FFF7FEFF 		bl	setCursor
 190:main.c        ****         LCD_print("I2C Working");
 757              		.loc 1 190 0
 758 0116 7E48     		ldr	r0, .L92+48
 759 0118 FFF7FEFF 		bl	LCD_print
 191:main.c        ****         
 192:main.c        ****         CyDelay(1000u);   
 760              		.loc 1 192 0
 761 011c 4FF47A70 		mov	r0, #1000
 762 0120 FFF7FEFF 		bl	CyDelay
 193:main.c        ****         clear();
 763              		.loc 1 193 0
 764 0124 FFF7FEFF 		bl	clear
 194:main.c        ****     #endif
 195:main.c        ****     
 196:main.c        ****     /* Start the ADC conversion */
 197:main.c        ****     ADC_StartConvert();
 765              		.loc 1 197 0
 766 0128 FFF7FEFF 		bl	ADC_StartConvert
 198:main.c        **** 
 199:main.c        ****     /* Start SD card*/
 200:main.c        ****     #ifdef SD
 201:main.c        ****         {
 202:main.c        ****             FS_Init();
 767              		.loc 1 202 0
 768 012c FFF7FEFF 		bl	FS_Init
 203:main.c        ****             FS_Mount(volume);
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 20


 769              		.loc 1 203 0
 770 0130 7848     		ldr	r0, .L92+52
 771 0132 FFF7FEFF 		bl	FS_Mount
 204:main.c        ****             if(0 != FS_GetVolumeName(0u, volume, 9u))
 772              		.loc 1 204 0
 773 0136 0020     		movs	r0, #0
 774 0138 7649     		ldr	r1, .L92+52
 775 013a 0922     		movs	r2, #9
 776 013c FFF7FEFF 		bl	FS_GetVolumeName
 777 0140 0346     		mov	r3, r0
 778 0142 002B     		cmp	r3, #0
 779 0144 03D0     		beq	.L27
 205:main.c        ****                 /* Getting volume name succeeded so prompt it on the LCD */
 206:main.c        ****                 LCD_print("Sd vol succeed");
 780              		.loc 1 206 0
 781 0146 7448     		ldr	r0, .L92+56
 782 0148 FFF7FEFF 		bl	LCD_print
 783 014c 02E0     		b	.L28
 784              	.L27:
 207:main.c        ****             else
 208:main.c        ****                 LCD_print("Sd vol failed");
 785              		.loc 1 208 0
 786 014e 7348     		ldr	r0, .L92+60
 787 0150 FFF7FEFF 		bl	LCD_print
 788              	.L28:
 209:main.c        ****                 
 210:main.c        ****             CyDelay(500u);
 789              		.loc 1 210 0
 790 0154 4FF4FA70 		mov	r0, #500
 791 0158 FFF7FEFF 		bl	CyDelay
 211:main.c        ****             clear();
 792              		.loc 1 211 0
 793 015c FFF7FEFF 		bl	clear
 212:main.c        ****             if(0 == FS_FormatSD(volume))
 794              		.loc 1 212 0
 795 0160 6C48     		ldr	r0, .L92+52
 796 0162 FFF7FEFF 		bl	FS_FormatSD
 797 0166 0346     		mov	r3, r0
 798 0168 002B     		cmp	r3, #0
 799 016a 03D1     		bne	.L29
 213:main.c        ****                 LCD_print("format Succeeded");
 800              		.loc 1 213 0
 801 016c 6C48     		ldr	r0, .L92+64
 802 016e FFF7FEFF 		bl	LCD_print
 803 0172 02E0     		b	.L30
 804              	.L29:
 214:main.c        ****             else
 215:main.c        ****                 LCD_print("format Failed");
 805              		.loc 1 215 0
 806 0174 6B48     		ldr	r0, .L92+68
 807 0176 FFF7FEFF 		bl	LCD_print
 808              	.L30:
 216:main.c        ****           
 217:main.c        ****             CyDelay(500u);
 809              		.loc 1 217 0
 810 017a 4FF4FA70 		mov	r0, #500
 811 017e FFF7FEFF 		bl	CyDelay
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 21


 218:main.c        ****             clear();
 812              		.loc 1 218 0
 813 0182 FFF7FEFF 		bl	clear
 219:main.c        ****             
 220:main.c        ****             fsfile = FS_FOpen(file, "w");
 814              		.loc 1 220 0
 815 0186 6848     		ldr	r0, .L92+72
 816 0188 6849     		ldr	r1, .L92+76
 817 018a FFF7FEFF 		bl	FS_FOpen
 818 018e 0246     		mov	r2, r0
 819 0190 674B     		ldr	r3, .L92+80
 820 0192 1A60     		str	r2, [r3]
 221:main.c        ****             if(fsfile)
 821              		.loc 1 221 0
 822 0194 664B     		ldr	r3, .L92+80
 823 0196 1B68     		ldr	r3, [r3]
 824 0198 002B     		cmp	r3, #0
 825 019a 27D0     		beq	.L31
 222:main.c        ****             {
 223:main.c        ****                 /* Indicate successful file creation message */
 224:main.c        ****                 LCD_print("File ");
 826              		.loc 1 224 0
 827 019c 6548     		ldr	r0, .L92+84
 828 019e FFF7FEFF 		bl	LCD_print
 225:main.c        ****                 LCD_print("was opened");
 829              		.loc 1 225 0
 830 01a2 6548     		ldr	r0, .L92+88
 831 01a4 FFF7FEFF 		bl	LCD_print
 226:main.c        ****                 /* Need some delay to indicate output on the LCD */
 227:main.c        ****                 CyDelay(500u);
 832              		.loc 1 227 0
 833 01a8 4FF4FA70 		mov	r0, #500
 834 01ac FFF7FEFF 		bl	CyDelay
 228:main.c        ****                 clear();
 835              		.loc 1 228 0
 836 01b0 FFF7FEFF 		bl	clear
 229:main.c        ****                 
 230:main.c        ****                 if(0 != FS_Write(fsfile, file, strlen(file))) 
 837              		.loc 1 230 0
 838 01b4 5E4B     		ldr	r3, .L92+80
 839 01b6 1C68     		ldr	r4, [r3]
 840 01b8 5B48     		ldr	r0, .L92+72
 841 01ba FFF7FEFF 		bl	strlen
 842 01be 0346     		mov	r3, r0
 843 01c0 2046     		mov	r0, r4
 844 01c2 5949     		ldr	r1, .L92+72
 845 01c4 1A46     		mov	r2, r3
 846 01c6 FFF7FEFF 		bl	FS_Write
 847 01ca 0346     		mov	r3, r0
 848 01cc 002B     		cmp	r3, #0
 849 01ce 03D0     		beq	.L32
 231:main.c        ****                     /* Inditate that data was written to a file */
 232:main.c        ****                     LCD_print("written to file");
 850              		.loc 1 232 0
 851 01d0 5A48     		ldr	r0, .L92+92
 852 01d2 FFF7FEFF 		bl	LCD_print
 853 01d6 02E0     		b	.L33
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 22


 854              	.L32:
 233:main.c        ****                 else
 234:main.c        ****                     LCD_print("Failed to write");
 855              		.loc 1 234 0
 856 01d8 5948     		ldr	r0, .L92+96
 857 01da FFF7FEFF 		bl	LCD_print
 858              	.L33:
 235:main.c        ****                     clear();
 859              		.loc 1 235 0
 860 01de FFF7FEFF 		bl	clear
 236:main.c        ****                 CyDelay(500u);
 861              		.loc 1 236 0
 862 01e2 4FF4FA70 		mov	r0, #500
 863 01e6 FFF7FEFF 		bl	CyDelay
 864 01ea 02E0     		b	.L34
 865              	.L31:
 237:main.c        ****             }
 238:main.c        ****             else
 239:main.c        ****                 LCD_print("file not created");
 866              		.loc 1 239 0
 867 01ec 5548     		ldr	r0, .L92+100
 868 01ee FFF7FEFF 		bl	LCD_print
 869              	.L34:
 240:main.c        ****         }
 241:main.c        ****         FS_Write(fsfile, "\n------------\n", 14);
 870              		.loc 1 241 0
 871 01f2 4F4B     		ldr	r3, .L92+80
 872 01f4 1B68     		ldr	r3, [r3]
 873 01f6 1846     		mov	r0, r3
 874 01f8 5349     		ldr	r1, .L92+104
 875 01fa 0E22     		movs	r2, #14
 876 01fc FFF7FEFF 		bl	FS_Write
 242:main.c        ****     #endif
 243:main.c        ****     
 244:main.c        ****     #ifdef LCD
 245:main.c        ****         /* Display the current State */
 246:main.c        ****         setCursor(0,0);    
 877              		.loc 1 246 0
 878 0200 0020     		movs	r0, #0
 879 0202 0021     		movs	r1, #0
 880 0204 FFF7FEFF 		bl	setCursor
 247:main.c        ****         LCD_print(curState);
 881              		.loc 1 247 0
 882 0208 07F1A003 		add	r3, r7, #160
 883 020c 1846     		mov	r0, r3
 884 020e FFF7FEFF 		bl	LCD_print
 248:main.c        ****     #endif
 249:main.c        ****     STATE = WAIT_TO_LAUNCH;
 885              		.loc 1 249 0
 886 0212 4E4B     		ldr	r3, .L92+108
 887 0214 0122     		movs	r2, #1
 888 0216 1A70     		strb	r2, [r3]
 250:main.c        ****     
 251:main.c        ****     Countdown_timer_Start();
 889              		.loc 1 251 0
 890 0218 FFF7FEFF 		bl	Countdown_timer_Start
 252:main.c        ****     adjust_timer_Start();
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 23


 891              		.loc 1 252 0
 892 021c FFF7FEFF 		bl	adjust_timer_Start
 253:main.c        ****     countdown_StartEx(Countdown_ISR_Handler);
 893              		.loc 1 253 0
 894 0220 4B48     		ldr	r0, .L92+112
 895 0222 FFF7FEFF 		bl	countdown_StartEx
 254:main.c        ****     temp_isr_StartEx(temp_interrupt);
 896              		.loc 1 254 0
 897 0226 4B48     		ldr	r0, .L92+116
 898 0228 FFF7FEFF 		bl	temp_isr_StartEx
 255:main.c        ****     int pulse = 0;
 899              		.loc 1 255 0
 900 022c 0023     		movs	r3, #0
 901 022e C7F81431 		str	r3, [r7, #276]
 902              	.L90:
 903              	.LBB2:
 256:main.c        ****     for(;;)
 257:main.c        ****     {
 258:main.c        ****         
 259:main.c        ****         if(ADC_IsEndConversion(ADC_RETURN_STATUS))
 904              		.loc 1 259 0
 905 0232 0120     		movs	r0, #1
 906 0234 FFF7FEFF 		bl	ADC_IsEndConversion
 907 0238 0346     		mov	r3, r0
 908 023a 002B     		cmp	r3, #0
 909 023c 00F0EA80 		beq	.L35
 260:main.c        ****         {
 261:main.c        ****             output = ADC_GetResult32();
 910              		.loc 1 261 0
 911 0240 FFF7FEFF 		bl	ADC_GetResult32
 912 0244 0346     		mov	r3, r0
 913 0246 1846     		mov	r0, r3
 914 0248 FFF7FEFF 		bl	__aeabi_i2f
 915 024c 0346     		mov	r3, r0
 916 024e C7F80031 		str	r3, [r7, #256]	@ float
 262:main.c        **** 
 263:main.c        ****             voltage = output * (3.32 / 4096);
 917              		.loc 1 263 0
 918 0252 D7F80001 		ldr	r0, [r7, #256]	@ float
 919 0256 FFF7FEFF 		bl	__aeabi_f2d
 920 025a 0246     		mov	r2, r0
 921 025c 0B46     		mov	r3, r1
 922 025e 1046     		mov	r0, r2
 923 0260 1946     		mov	r1, r3
 924 0262 1FA3     		adr	r3, .L92
 925 0264 D3E90023 		ldrd	r2, [r3]
 926 0268 FFF7FEFF 		bl	__aeabi_dmul
 927 026c 0246     		mov	r2, r0
 928 026e 0B46     		mov	r3, r1
 929 0270 1046     		mov	r0, r2
 930 0272 1946     		mov	r1, r3
 931 0274 FFF7FEFF 		bl	__aeabi_d2f
 932 0278 0346     		mov	r3, r0
 933 027a C7F80831 		str	r3, [r7, #264]	@ float
 264:main.c        ****             if(wait_flag == 1){
 934              		.loc 1 264 0
 935 027e 364B     		ldr	r3, .L92+120
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 24


 936 0280 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 937 0282 002B     		cmp	r3, #0
 938 0284 00F0C680 		beq	.L35
 265:main.c        ****                 if (press_id < MA_WINDOW){
 939              		.loc 1 265 0
 940 0288 344B     		ldr	r3, .L92+124
 941 028a 1B68     		ldr	r3, [r3]
 942 028c 0E2B     		cmp	r3, #14
 943 028e 0BDC     		bgt	.L36
 266:main.c        ****                     pressure_sum += voltage;     
 944              		.loc 1 266 0
 945 0290 334B     		ldr	r3, .L92+128
 946 0292 1B68     		ldr	r3, [r3]	@ float
 947 0294 1846     		mov	r0, r3
 948 0296 D7F80811 		ldr	r1, [r7, #264]	@ float
 949 029a FFF7FEFF 		bl	__aeabi_fadd
 950 029e 0346     		mov	r3, r0
 951 02a0 1A46     		mov	r2, r3
 952 02a2 2F4B     		ldr	r3, .L92+128
 953 02a4 1A60     		str	r2, [r3]	@ float
 954 02a6 ADE0     		b	.L37
 955              	.L36:
 267:main.c        ****                 }
 268:main.c        ****                 else if(press_id == MA_WINDOW){
 956              		.loc 1 268 0
 957 02a8 2C4B     		ldr	r3, .L92+124
 958 02aa 1B68     		ldr	r3, [r3]
 959 02ac 0F2B     		cmp	r3, #15
 960 02ae 5BD1     		bne	.L38
 269:main.c        ****                     pressure_sum += voltage;
 961              		.loc 1 269 0
 962 02b0 2B4B     		ldr	r3, .L92+128
 963 02b2 1B68     		ldr	r3, [r3]	@ float
 964 02b4 1846     		mov	r0, r3
 965 02b6 D7F80811 		ldr	r1, [r7, #264]	@ float
 966 02ba FFF7FEFF 		bl	__aeabi_fadd
 967 02be 0346     		mov	r3, r0
 968 02c0 1A46     		mov	r2, r3
 969 02c2 274B     		ldr	r3, .L92+128
 970 02c4 1A60     		str	r2, [r3]	@ float
 270:main.c        ****                     pressure_avg = pressure_sum/MA_WINDOW;                            // compute ba
 971              		.loc 1 270 0
 972 02c6 264B     		ldr	r3, .L92+128
 973 02c8 1B68     		ldr	r3, [r3]	@ float
 974 02ca 1846     		mov	r0, r3
 975 02cc 2549     		ldr	r1, .L92+132
 976 02ce FFF7FEFF 		bl	__aeabi_fdiv
 977 02d2 0346     		mov	r3, r0
 978 02d4 C7F81C31 		str	r3, [r7, #284]	@ float
 979 02d8 94E0     		b	.L37
 980              	.L93:
 981 02da 00BFAFF3 		.align	3
 981      0080
 982              	.L92:
 983 02e0 8FC2F528 		.word	687194767
 984 02e4 5C8F4A3F 		.word	1061850972
 985 02e8 E4010000 		.word	.LC0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 25


 986 02ec F4010000 		.word	.LC1
 987 02f0 08020000 		.word	.LC2
 988 02f4 18020000 		.word	.LC3
 989 02f8 2C020000 		.word	.LC4
 990 02fc 40020000 		.word	.LC5
 991 0300 00000000 		.word	Sample_ISR_Handler
 992 0304 00000000 		.word	rx_interrupt
 993 0308 00000000 		.word	Addr
 994 030c 00000000 		.word	.LC6
 995 0310 10000000 		.word	.LC7
 996 0314 00000000 		.word	volume
 997 0318 1C000000 		.word	.LC8
 998 031c 2C000000 		.word	.LC9
 999 0320 3C000000 		.word	.LC10
 1000 0324 50000000 		.word	.LC11
 1001 0328 00000000 		.word	file
 1002 032c 60000000 		.word	.LC12
 1003 0330 00000000 		.word	fsfile
 1004 0334 64000000 		.word	.LC13
 1005 0338 6C000000 		.word	.LC14
 1006 033c 78000000 		.word	.LC15
 1007 0340 88000000 		.word	.LC16
 1008 0344 98000000 		.word	.LC17
 1009 0348 AC000000 		.word	.LC18
 1010 034c 00000000 		.word	STATE
 1011 0350 00000000 		.word	Countdown_ISR_Handler
 1012 0354 00000000 		.word	temp_interrupt
 1013 0358 00000000 		.word	wait_flag
 1014 035c 00000000 		.word	press_id
 1015 0360 00000000 		.word	pressure_sum
 1016 0364 00007041 		.word	1097859072
 1017              	.L38:
 1018              	.LBB3:
 271:main.c        ****                 }
 272:main.c        ****                 else{
 273:main.c        ****                     pressure_avg = ComputeMA(pressure_avg, MA_WINDOW, voltage);
 1019              		.loc 1 273 0
 1020 0368 D7F81C01 		ldr	r0, [r7, #284]	@ float
 1021 036c 0F21     		movs	r1, #15
 1022 036e D7F80821 		ldr	r2, [r7, #264]	@ float
 1023 0372 FFF7FEFF 		bl	ComputeMA
 1024 0376 C7F81C01 		str	r0, [r7, #284]	@ float
 274:main.c        ****                     num = pressure_avg;
 1025              		.loc 1 274 0
 1026 037a D7F81C01 		ldr	r0, [r7, #284]	@ float
 1027 037e FFF7FEFF 		bl	__aeabi_f2iz
 1028 0382 0346     		mov	r3, r0
 1029 0384 C7F81031 		str	r3, [r7, #272]
 275:main.c        ****                     temp = pressure_avg - num;
 1030              		.loc 1 275 0
 1031 0388 D7F81001 		ldr	r0, [r7, #272]
 1032 038c FFF7FEFF 		bl	__aeabi_i2f
 1033 0390 0346     		mov	r3, r0
 1034 0392 D7F81C01 		ldr	r0, [r7, #284]	@ float
 1035 0396 1946     		mov	r1, r3
 1036 0398 FFF7FEFF 		bl	__aeabi_fsub
 1037 039c 0346     		mov	r3, r0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 26


 1038 039e C7F80431 		str	r3, [r7, #260]	@ float
 276:main.c        ****                     decimals = temp * 10000;
 1039              		.loc 1 276 0
 1040 03a2 D7F80401 		ldr	r0, [r7, #260]	@ float
 1041 03a6 B749     		ldr	r1, .L94
 1042 03a8 FFF7FEFF 		bl	__aeabi_fmul
 1043 03ac 0346     		mov	r3, r0
 1044 03ae 1846     		mov	r0, r3
 1045 03b0 FFF7FEFF 		bl	__aeabi_f2iz
 1046 03b4 0346     		mov	r3, r0
 1047 03b6 C7F80C31 		str	r3, [r7, #268]
 277:main.c        ****                     char sdbuf[60] = {};
 1048              		.loc 1 277 0
 1049 03ba 3B46     		mov	r3, r7
 1050 03bc 1A46     		mov	r2, r3
 1051 03be 3C23     		movs	r3, #60
 1052 03c0 1046     		mov	r0, r2
 1053 03c2 0021     		movs	r1, #0
 1054 03c4 1A46     		mov	r2, r3
 1055 03c6 FFF7FEFF 		bl	memset
 278:main.c        ****                     #ifdef SD
 279:main.c        ****                         sprintf(sdbuf, "pressure: %d.%04d, %d\n", num, decimals, (int16)output); //
 1056              		.loc 1 279 0
 1057 03ca D7F80001 		ldr	r0, [r7, #256]	@ float
 1058 03ce FFF7FEFF 		bl	__aeabi_f2iz
 1059 03d2 0346     		mov	r3, r0
 1060 03d4 9BB2     		uxth	r3, r3
 1061 03d6 1BB2     		sxth	r3, r3
 1062 03d8 3A46     		mov	r2, r7
 1063 03da 0093     		str	r3, [sp]
 1064 03dc 1046     		mov	r0, r2
 1065 03de AA49     		ldr	r1, .L94+4
 1066 03e0 D7F81021 		ldr	r2, [r7, #272]
 1067 03e4 D7F80C31 		ldr	r3, [r7, #268]
 1068 03e8 FFF7FEFF 		bl	sprintf
 280:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 1069              		.loc 1 280 0
 1070 03ec A74B     		ldr	r3, .L94+8
 1071 03ee 1C68     		ldr	r4, [r3]
 1072 03f0 3B46     		mov	r3, r7
 1073 03f2 1846     		mov	r0, r3
 1074 03f4 FFF7FEFF 		bl	strlen
 1075 03f8 0246     		mov	r2, r0
 1076 03fa 3B46     		mov	r3, r7
 1077 03fc 2046     		mov	r0, r4
 1078 03fe 1946     		mov	r1, r3
 1079 0400 FFF7FEFF 		bl	FS_Write
 1080              	.L37:
 1081              	.LBE3:
 281:main.c        ****                     #endif 
 282:main.c        ****                 }
 283:main.c        ****                 wait_flag = 0;
 1082              		.loc 1 283 0
 1083 0404 A24B     		ldr	r3, .L94+12
 1084 0406 0022     		movs	r2, #0
 1085 0408 1A70     		strb	r2, [r3]
 284:main.c        ****                 press_id++;
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 27


 1086              		.loc 1 284 0
 1087 040a A24B     		ldr	r3, .L94+16
 1088 040c 1B68     		ldr	r3, [r3]
 1089 040e 0133     		adds	r3, r3, #1
 1090 0410 A04A     		ldr	r2, .L94+16
 1091 0412 1360     		str	r3, [r2]
 1092              	.L35:
 285:main.c        ****             }
 286:main.c        ****             
 287:main.c        ****         }
 288:main.c        ****         
 289:main.c        ****     /* Bluetooth message response*/
 290:main.c        ****     #ifdef BT
 291:main.c        ****         if (msg_count >= 2){
 1093              		.loc 1 291 0
 1094 0414 A04B     		ldr	r3, .L94+20
 1095 0416 1B68     		ldr	r3, [r3]
 1096 0418 012B     		cmp	r3, #1
 1097 041a 13DD     		ble	.L39
 292:main.c        ****             tens = RxBuffer[0] - 48;
 1098              		.loc 1 292 0
 1099 041c 9F4B     		ldr	r3, .L94+24
 1100 041e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1101 0420 303B     		subs	r3, r3, #48
 1102 0422 3B64     		str	r3, [r7, #64]
 293:main.c        ****             ones = RxBuffer[1] - 48;
 1103              		.loc 1 293 0
 1104 0424 9D4B     		ldr	r3, .L94+24
 1105 0426 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 1106 0428 303B     		subs	r3, r3, #48
 1107 042a C7F8F830 		str	r3, [r7, #248]
 294:main.c        ****             bytes = (tens * 10) + ones;
 1108              		.loc 1 294 0
 1109 042e 3A6C     		ldr	r2, [r7, #64]
 1110 0430 1346     		mov	r3, r2
 1111 0432 9B00     		lsls	r3, r3, #2
 1112 0434 1344     		add	r3, r3, r2
 1113 0436 5B00     		lsls	r3, r3, #1
 1114 0438 1A46     		mov	r2, r3
 1115 043a D7F8F830 		ldr	r3, [r7, #248]
 1116 043e 1344     		add	r3, r3, r2
 1117 0440 974A     		ldr	r2, .L94+28
 1118 0442 1360     		str	r3, [r2]
 1119              	.L39:
 295:main.c        ****         } 
 296:main.c        ****         
 297:main.c        ****         if(rxflag) {
 1120              		.loc 1 297 0
 1121 0444 974B     		ldr	r3, .L94+32
 1122 0446 1B68     		ldr	r3, [r3]
 1123 0448 002B     		cmp	r3, #0
 1124 044a 2DD0     		beq	.L40
 298:main.c        ****             uint8_to_char(RxBuffer, &tempbuf[0], 20);
 1125              		.loc 1 298 0
 1126 044c 07F1B003 		add	r3, r7, #176
 1127 0450 9248     		ldr	r0, .L94+24
 1128 0452 1946     		mov	r1, r3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 28


 1129 0454 1422     		movs	r2, #20
 1130 0456 FFF7FEFF 		bl	uint8_to_char
 299:main.c        ****             depth = BT_Process(&tempbuf[3], &STATE, bytes, &dataflag, &reset);
 1131              		.loc 1 299 0
 1132 045a 914B     		ldr	r3, .L94+28
 1133 045c 1A68     		ldr	r2, [r3]
 1134 045e 07F1B003 		add	r3, r7, #176
 1135 0462 D91C     		adds	r1, r3, #3
 1136 0464 904B     		ldr	r3, .L94+36
 1137 0466 0093     		str	r3, [sp]
 1138 0468 0846     		mov	r0, r1
 1139 046a 9049     		ldr	r1, .L94+40
 1140 046c 904B     		ldr	r3, .L94+44
 1141 046e FFF7FEFF 		bl	BT_Process
 1142 0472 0246     		mov	r2, r0
 1143 0474 8F4B     		ldr	r3, .L94+48
 1144 0476 1A60     		str	r2, [r3]
 300:main.c        ****             
 301:main.c        ****             msg_count = 0; bytes = 0;
 1145              		.loc 1 301 0
 1146 0478 874B     		ldr	r3, .L94+20
 1147 047a 0022     		movs	r2, #0
 1148 047c 1A60     		str	r2, [r3]
 1149 047e 884B     		ldr	r3, .L94+28
 1150 0480 0022     		movs	r2, #0
 1151 0482 1A60     		str	r2, [r3]
 302:main.c        ****             memset(RxBuffer, 0, BUFFER_LEN);
 1152              		.loc 1 302 0
 1153 0484 8548     		ldr	r0, .L94+24
 1154 0486 0021     		movs	r1, #0
 1155 0488 4022     		movs	r2, #64
 1156 048a FFF7FEFF 		bl	memset
 303:main.c        ****             memset(tempbuf, 0, 20);
 1157              		.loc 1 303 0
 1158 048e 07F1B003 		add	r3, r7, #176
 1159 0492 1846     		mov	r0, r3
 1160 0494 0021     		movs	r1, #0
 1161 0496 1422     		movs	r2, #20
 1162 0498 FFF7FEFF 		bl	memset
 304:main.c        ****             countdown = 0;
 1163              		.loc 1 304 0
 1164 049c 864B     		ldr	r3, .L94+52
 1165 049e 0022     		movs	r2, #0
 1166 04a0 1A70     		strb	r2, [r3]
 305:main.c        ****             rxflag = 0;
 1167              		.loc 1 305 0
 1168 04a2 804B     		ldr	r3, .L94+32
 1169 04a4 0022     		movs	r2, #0
 1170 04a6 1A60     		str	r2, [r3]
 1171              	.L40:
 306:main.c        ****         }
 307:main.c        ****     #endif
 308:main.c        ****     
 309:main.c        ****         /* Display Z-Acceleration */
 310:main.c        **** 
 311:main.c        ****         az = MPU6050_getAccelerationZ();
 1172              		.loc 1 311 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 29


 1173 04a8 FFF7FEFF 		bl	MPU6050_getAccelerationZ
 1174 04ac 0346     		mov	r3, r0
 1175 04ae A7F8F630 		strh	r3, [r7, #246]	@ movhi
 312:main.c        **** 
 313:main.c        ****         int t = 1;
 1176              		.loc 1 313 0
 1177 04b2 0123     		movs	r3, #1
 1178 04b4 FB63     		str	r3, [r7, #60]
 314:main.c        ****         /* State Machine */
 315:main.c        ****         switch (STATE){
 1179              		.loc 1 315 0
 1180 04b6 7D4B     		ldr	r3, .L94+40
 1181 04b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1182 04ba 013B     		subs	r3, r3, #1
 1183 04bc 042B     		cmp	r3, #4
 1184 04be 00F25283 		bhi	.L91
 1185 04c2 01A2     		adr	r2, .L43
 1186 04c4 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 1187              		.p2align 2
 1188              	.L43:
 1189 04c8 DD040000 		.word	.L42+1
 1190 04cc 63060000 		.word	.L44+1
 1191 04d0 FD080000 		.word	.L45+1
 1192 04d4 430A0000 		.word	.L46+1
 1193 04d8 330B0000 		.word	.L47+1
 1194              		.p2align 1
 1195              	.L42:
 316:main.c        ****     
 317:main.c        ****             case WAIT_TO_LAUNCH:
 318:main.c        ****                 if (reset){
 1196              		.loc 1 318 0
 1197 04dc 724B     		ldr	r3, .L94+36
 1198 04de 1B68     		ldr	r3, [r3]
 1199 04e0 002B     		cmp	r3, #0
 1200 04e2 26D0     		beq	.L48
 319:main.c        ****                     id = 1;                                // Interrupt count.
 1201              		.loc 1 319 0
 1202 04e4 754B     		ldr	r3, .L94+56
 1203 04e6 0122     		movs	r2, #1
 1204 04e8 1A60     		str	r2, [r3]
 320:main.c        ****                     data_time = 0;                        // data point num
 1205              		.loc 1 320 0
 1206 04ea 754B     		ldr	r3, .L94+60
 1207 04ec 0022     		movs	r2, #0
 1208 04ee 1A60     		str	r2, [r3]
 321:main.c        ****                     sum = 0;                               // Sum of accelerometer values. 
 1209              		.loc 1 321 0
 1210 04f0 744B     		ldr	r3, .L94+64
 1211 04f2 0022     		movs	r2, #0
 1212 04f4 1A60     		str	r2, [r3]
 322:main.c        ****                     average = 0;                        // Moving average variable.
 1213              		.loc 1 322 0
 1214 04f6 744B     		ldr	r3, .L94+68
 1215 04f8 0022     		movs	r2, #0
 1216 04fa 1A80     		strh	r2, [r3]	@ movhi
 323:main.c        ****                     collect_flag = 0;                      // flag indicating when to record accele
 1217              		.loc 1 323 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 30


 1218 04fc 734B     		ldr	r3, .L94+72
 1219 04fe 0022     		movs	r2, #0
 1220 0500 1A70     		strb	r2, [r3]
 324:main.c        ****                     wait_flag = 0;                         // flag indicating when to increment int
 1221              		.loc 1 324 0
 1222 0502 634B     		ldr	r3, .L94+12
 1223 0504 0022     		movs	r2, #0
 1224 0506 1A70     		strb	r2, [r3]
 325:main.c        ****                     PANIC_flag = 0;                        // flag indicating water is present in h
 1225              		.loc 1 325 0
 1226 0508 714B     		ldr	r3, .L94+76
 1227 050a 0022     		movs	r2, #0
 1228 050c 1A70     		strb	r2, [r3]
 326:main.c        ****                     //bool first_test = 1;                        // flag indicating first test(lon
 327:main.c        ****                     testnum = 1;
 1229              		.loc 1 327 0
 1230 050e 714B     		ldr	r3, .L94+80
 1231 0510 0122     		movs	r2, #1
 1232 0512 1A70     		strb	r2, [r3]
 328:main.c        ****                     depth = 0; countdown = 0; msg_count = 0; dataflag = 0;
 1233              		.loc 1 328 0
 1234 0514 674B     		ldr	r3, .L94+48
 1235 0516 0022     		movs	r2, #0
 1236 0518 1A60     		str	r2, [r3]
 1237 051a 674B     		ldr	r3, .L94+52
 1238 051c 0022     		movs	r2, #0
 1239 051e 1A70     		strb	r2, [r3]
 1240 0520 5D4B     		ldr	r3, .L94+20
 1241 0522 0022     		movs	r2, #0
 1242 0524 1A60     		str	r2, [r3]
 1243 0526 624B     		ldr	r3, .L94+44
 1244 0528 0022     		movs	r2, #0
 1245 052a 1A60     		str	r2, [r3]
 329:main.c        ****                     reset = 0;
 1246              		.loc 1 329 0
 1247 052c 5E4B     		ldr	r3, .L94+36
 1248 052e 0022     		movs	r2, #0
 1249 0530 1A60     		str	r2, [r3]
 1250              	.L48:
 330:main.c        ****                 }
 331:main.c        ****             
 332:main.c        ****                 if (transmit_flag){
 1251              		.loc 1 332 0
 1252 0532 694B     		ldr	r3, .L94+84
 1253 0534 1B68     		ldr	r3, [r3]
 1254 0536 002B     		cmp	r3, #0
 1255 0538 0BD0     		beq	.L49
 333:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &tens); // Here, the STATE variable only matte
 1256              		.loc 1 333 0
 1257 053a 07F1B002 		add	r2, r7, #176
 1258 053e 07F14003 		add	r3, r7, #64
 1259 0542 1046     		mov	r0, r2
 1260 0544 5949     		ldr	r1, .L94+40
 1261 0546 0A22     		movs	r2, #10
 1262 0548 FFF7FEFF 		bl	BT_Send
 334:main.c        ****                     transmit_flag = 0;
 1263              		.loc 1 334 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 31


 1264 054c 624B     		ldr	r3, .L94+84
 1265 054e 0022     		movs	r2, #0
 1266 0550 1A60     		str	r2, [r3]
 1267              	.L49:
 335:main.c        ****                 }
 336:main.c        ****                 if(wait_flag == 1){
 1268              		.loc 1 336 0
 1269 0552 4F4B     		ldr	r3, .L94+12
 1270 0554 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1271 0556 002B     		cmp	r3, #0
 1272 0558 00F08280 		beq	.L50
 337:main.c        ****                     #ifdef LCD
 338:main.c        ****                         setCursor(0,0);
 1273              		.loc 1 338 0
 1274 055c 0020     		movs	r0, #0
 1275 055e 0021     		movs	r1, #0
 1276 0560 FFF7FEFF 		bl	setCursor
 339:main.c        ****                         clear();
 1277              		.loc 1 339 0
 1278 0564 FFF7FEFF 		bl	clear
 340:main.c        ****                         
 341:main.c        ****                         sprintf(buf, "T-minus %d seconds\n", (10 - countdown)); // countdown
 1279              		.loc 1 341 0
 1280 0568 534B     		ldr	r3, .L94+52
 1281 056a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1282 056c C3F10A03 		rsb	r3, r3, #10
 1283 0570 07F1C402 		add	r2, r7, #196
 1284 0574 1046     		mov	r0, r2
 1285 0576 5949     		ldr	r1, .L94+88
 1286 0578 1A46     		mov	r2, r3
 1287 057a FFF7FEFF 		bl	sprintf
 342:main.c        ****                         LCD_print(buf);
 1288              		.loc 1 342 0
 1289 057e 07F1C403 		add	r3, r7, #196
 1290 0582 1846     		mov	r0, r3
 1291 0584 FFF7FEFF 		bl	LCD_print
 343:main.c        ****                     #endif
 344:main.c        ****                     #ifdef BT
 345:main.c        ****                         stateMsgCount = 0;
 1292              		.loc 1 345 0
 1293 0588 0023     		movs	r3, #0
 1294 058a C7F81831 		str	r3, [r7, #280]
 346:main.c        ****                         sprintf(buf, "\n%d seconds remaining", (10 - countdown));
 1295              		.loc 1 346 0
 1296 058e 4A4B     		ldr	r3, .L94+52
 1297 0590 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1298 0592 C3F10A03 		rsb	r3, r3, #10
 1299 0596 07F1C402 		add	r2, r7, #196
 1300 059a 1046     		mov	r0, r2
 1301 059c 5049     		ldr	r1, .L94+92
 1302 059e 1A46     		mov	r2, r3
 1303 05a0 FFF7FEFF 		bl	sprintf
 347:main.c        ****                         while (stateMsgCount < 21){
 1304              		.loc 1 347 0
 1305 05a4 19E0     		b	.L51
 1306              	.L54:
 348:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 32


 1307              		.loc 1 348 0
 1308 05a6 11E0     		b	.L52
 1309              	.L53:
 349:main.c        ****                                 UART_PutChar(buf[stateMsgCount++]);
 1310              		.loc 1 349 0
 1311 05a8 D7F81831 		ldr	r3, [r7, #280]
 1312 05ac 5A1C     		adds	r2, r3, #1
 1313 05ae C7F81821 		str	r2, [r7, #280]
 1314 05b2 07F59072 		add	r2, r7, #288
 1315 05b6 1344     		add	r3, r3, r2
 1316 05b8 13F85C3C 		ldrb	r3, [r3, #-92]	@ zero_extendqisi2
 1317 05bc 1846     		mov	r0, r3
 1318 05be FFF7FEFF 		bl	UART_PutChar
 350:main.c        ****                                 if (stateMsgCount >= 21) break;
 1319              		.loc 1 350 0
 1320 05c2 D7F81831 		ldr	r3, [r7, #280]
 1321 05c6 142B     		cmp	r3, #20
 1322 05c8 00DD     		ble	.L52
 1323 05ca 06E0     		b	.L51
 1324              	.L52:
 348:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1325              		.loc 1 348 0
 1326 05cc FFF7FEFF 		bl	UART_ReadTxStatus
 1327 05d0 0346     		mov	r3, r0
 1328 05d2 03F00803 		and	r3, r3, #8
 1329 05d6 002B     		cmp	r3, #0
 1330 05d8 E6D1     		bne	.L53
 1331              	.L51:
 347:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1332              		.loc 1 347 0
 1333 05da D7F81831 		ldr	r3, [r7, #280]
 1334 05de 142B     		cmp	r3, #20
 1335 05e0 E1DD     		ble	.L54
 351:main.c        ****                             }
 352:main.c        ****                         }
 353:main.c        ****                     #endif
 354:main.c        ****                     if(countdown == 10){
 1336              		.loc 1 354 0
 1337 05e2 354B     		ldr	r3, .L94+52
 1338 05e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1339 05e6 0A2B     		cmp	r3, #10
 1340 05e8 36D1     		bne	.L55
 355:main.c        ****                         STATE = DESCENDING;
 1341              		.loc 1 355 0
 1342 05ea 304B     		ldr	r3, .L94+40
 1343 05ec 0222     		movs	r2, #2
 1344 05ee 1A70     		strb	r2, [r3]
 356:main.c        ****                         #ifdef LCD
 357:main.c        ****                             setCursor(0,0);
 1345              		.loc 1 357 0
 1346 05f0 0020     		movs	r0, #0
 1347 05f2 0021     		movs	r1, #0
 1348 05f4 FFF7FEFF 		bl	setCursor
 358:main.c        ****                             clear();
 1349              		.loc 1 358 0
 1350 05f8 FFF7FEFF 		bl	clear
 359:main.c        ****                             LCD_print("STATE: DESCENT");
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 33


 1351              		.loc 1 359 0
 1352 05fc 3948     		ldr	r0, .L94+96
 1353 05fe FFF7FEFF 		bl	LCD_print
 360:main.c        ****                         #endif
 361:main.c        ****                         #ifdef BT
 362:main.c        ****                             stateMsgCount = 0;
 1354              		.loc 1 362 0
 1355 0602 0023     		movs	r3, #0
 1356 0604 C7F81831 		str	r3, [r7, #280]
 363:main.c        ****                             while (stateMsgCount < DESCENDING_LEN){
 1357              		.loc 1 363 0
 1358 0608 19E0     		b	.L56
 1359              	.L59:
 364:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1360              		.loc 1 364 0
 1361 060a 11E0     		b	.L57
 1362              	.L58:
 365:main.c        ****                                     UART_PutChar(descendbuf[stateMsgCount++]);
 1363              		.loc 1 365 0
 1364 060c D7F81831 		ldr	r3, [r7, #280]
 1365 0610 5A1C     		adds	r2, r3, #1
 1366 0612 C7F81821 		str	r2, [r7, #280]
 1367 0616 07F59072 		add	r2, r7, #288
 1368 061a 1344     		add	r3, r3, r2
 1369 061c 13F8943C 		ldrb	r3, [r3, #-148]	@ zero_extendqisi2
 1370 0620 1846     		mov	r0, r3
 1371 0622 FFF7FEFF 		bl	UART_PutChar
 366:main.c        ****                                     if (stateMsgCount >= DESCENDING_LEN) break;
 1372              		.loc 1 366 0
 1373 0626 D7F81831 		ldr	r3, [r7, #280]
 1374 062a 122B     		cmp	r3, #18
 1375 062c 00DD     		ble	.L57
 1376 062e 06E0     		b	.L56
 1377              	.L57:
 364:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1378              		.loc 1 364 0
 1379 0630 FFF7FEFF 		bl	UART_ReadTxStatus
 1380 0634 0346     		mov	r3, r0
 1381 0636 03F00803 		and	r3, r3, #8
 1382 063a 002B     		cmp	r3, #0
 1383 063c E6D1     		bne	.L58
 1384              	.L56:
 363:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1385              		.loc 1 363 0
 1386 063e D7F81831 		ldr	r3, [r7, #280]
 1387 0642 122B     		cmp	r3, #18
 1388 0644 E1DD     		ble	.L59
 367:main.c        ****                                 }
 368:main.c        ****                             }
 369:main.c        ****                         #endif
 370:main.c        ****                         id=0;
 1389              		.loc 1 370 0
 1390 0646 1D4B     		ldr	r3, .L94+56
 1391 0648 0022     		movs	r2, #0
 1392 064a 1A60     		str	r2, [r3]
 371:main.c        ****                         data_time = 0;
 1393              		.loc 1 371 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 34


 1394 064c 1C4B     		ldr	r3, .L94+60
 1395 064e 0022     		movs	r2, #0
 1396 0650 1A60     		str	r2, [r3]
 372:main.c        ****                         countdown = 0; 
 1397              		.loc 1 372 0
 1398 0652 194B     		ldr	r3, .L94+52
 1399 0654 0022     		movs	r2, #0
 1400 0656 1A70     		strb	r2, [r3]
 1401              	.L55:
 373:main.c        ****                     }
 374:main.c        ****                     wait_flag = 0; 
 1402              		.loc 1 374 0
 1403 0658 0D4B     		ldr	r3, .L94+12
 1404 065a 0022     		movs	r2, #0
 1405 065c 1A70     		strb	r2, [r3]
 375:main.c        ****                 }
 376:main.c        ****                 break;
 1406              		.loc 1 376 0
 1407 065e 83E2     		b	.L60
 1408              	.L50:
 1409 0660 82E2     		b	.L60
 1410              	.L44:
 377:main.c        ****                 
 378:main.c        ****             case DESCENDING:
 379:main.c        ****                 if(collect_flag == 1){
 1411              		.loc 1 379 0
 1412 0662 1A4B     		ldr	r3, .L94+72
 1413 0664 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1414 0666 002B     		cmp	r3, #0
 1415 0668 00F04781 		beq	.L61
 380:main.c        ****                     if (id < MA_WINDOW){
 1416              		.loc 1 380 0
 1417 066c 134B     		ldr	r3, .L94+56
 1418 066e 1B68     		ldr	r3, [r3]
 1419 0670 0E2B     		cmp	r3, #14
 1420 0672 39DC     		bgt	.L62
 381:main.c        ****                         sum += az;     
 1421              		.loc 1 381 0
 1422 0674 B7F9F620 		ldrsh	r2, [r7, #246]
 1423 0678 124B     		ldr	r3, .L94+64
 1424 067a 1B68     		ldr	r3, [r3]
 1425 067c 1344     		add	r3, r3, r2
 1426 067e 114A     		ldr	r2, .L94+64
 1427 0680 1360     		str	r3, [r2]
 1428 0682 63E0     		b	.L63
 1429              	.L95:
 1430              		.align	2
 1431              	.L94:
 1432 0684 00401C46 		.word	1176256512
 1433 0688 BC000000 		.word	.LC19
 1434 068c 00000000 		.word	fsfile
 1435 0690 00000000 		.word	wait_flag
 1436 0694 00000000 		.word	press_id
 1437 0698 00000000 		.word	msg_count
 1438 069c 00000000 		.word	RxBuffer
 1439 06a0 00000000 		.word	bytes
 1440 06a4 00000000 		.word	rxflag
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 35


 1441 06a8 00000000 		.word	reset
 1442 06ac 00000000 		.word	STATE
 1443 06b0 00000000 		.word	dataflag
 1444 06b4 00000000 		.word	depth
 1445 06b8 00000000 		.word	countdown
 1446 06bc 00000000 		.word	id
 1447 06c0 00000000 		.word	data_time
 1448 06c4 00000000 		.word	sum
 1449 06c8 00000000 		.word	average
 1450 06cc 00000000 		.word	collect_flag
 1451 06d0 00000000 		.word	PANIC_flag
 1452 06d4 00000000 		.word	testnum
 1453 06d8 00000000 		.word	transmit_flag
 1454 06dc D4000000 		.word	.LC20
 1455 06e0 E8000000 		.word	.LC21
 1456 06e4 00010000 		.word	.LC22
 1457              	.L62:
 382:main.c        ****                     }
 383:main.c        ****                     else if(id == MA_WINDOW){
 1458              		.loc 1 383 0
 1459 06e8 BC4B     		ldr	r3, .L96
 1460 06ea 1B68     		ldr	r3, [r3]
 1461 06ec 0F2B     		cmp	r3, #15
 1462 06ee 13D1     		bne	.L64
 384:main.c        ****                         sum += az;
 1463              		.loc 1 384 0
 1464 06f0 B7F9F620 		ldrsh	r2, [r7, #246]
 1465 06f4 BA4B     		ldr	r3, .L96+4
 1466 06f6 1B68     		ldr	r3, [r3]
 1467 06f8 1344     		add	r3, r3, r2
 1468 06fa B94A     		ldr	r2, .L96+4
 1469 06fc 1360     		str	r3, [r2]
 385:main.c        ****                         average = sum/MA_WINDOW;                            //compute baseline aver
 1470              		.loc 1 385 0
 1471 06fe B84B     		ldr	r3, .L96+4
 1472 0700 1B68     		ldr	r3, [r3]
 1473 0702 B84A     		ldr	r2, .L96+8
 1474 0704 82FB0312 		smull	r1, r2, r2, r3
 1475 0708 1A44     		add	r2, r2, r3
 1476 070a D210     		asrs	r2, r2, #3
 1477 070c DB17     		asrs	r3, r3, #31
 1478 070e D31A     		subs	r3, r2, r3
 1479 0710 9AB2     		uxth	r2, r3
 1480 0712 B54B     		ldr	r3, .L96+12
 1481 0714 1A80     		strh	r2, [r3]	@ movhi
 1482 0716 19E0     		b	.L63
 1483              	.L64:
 386:main.c        ****                     }
 387:main.c        ****                     else{
 388:main.c        ****                         average = ComputeMA(average, MA_WINDOW, az);
 1484              		.loc 1 388 0
 1485 0718 B34B     		ldr	r3, .L96+12
 1486 071a 1B88     		ldrh	r3, [r3]
 1487 071c 1BB2     		sxth	r3, r3
 1488 071e 1846     		mov	r0, r3
 1489 0720 FFF7FEFF 		bl	__aeabi_i2f
 1490 0724 0446     		mov	r4, r0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 36


 1491 0726 B7F9F630 		ldrsh	r3, [r7, #246]
 1492 072a 1846     		mov	r0, r3
 1493 072c FFF7FEFF 		bl	__aeabi_i2f
 1494 0730 0346     		mov	r3, r0
 1495 0732 2046     		mov	r0, r4
 1496 0734 0F21     		movs	r1, #15
 1497 0736 1A46     		mov	r2, r3
 1498 0738 FFF7FEFF 		bl	ComputeMA
 1499 073c 0346     		mov	r3, r0
 1500 073e 1846     		mov	r0, r3
 1501 0740 FFF7FEFF 		bl	__aeabi_f2iz
 1502 0744 0346     		mov	r3, r0
 1503 0746 9AB2     		uxth	r2, r3
 1504 0748 A74B     		ldr	r3, .L96+12
 1505 074a 1A80     		strh	r2, [r3]	@ movhi
 1506              	.L63:
 389:main.c        ****                     }
 390:main.c        ****                     
 391:main.c        ****                     if(average > BOT_THRESHOLD){                        
 1507              		.loc 1 391 0
 1508 074c A64B     		ldr	r3, .L96+12
 1509 074e 1B88     		ldrh	r3, [r3]
 1510 0750 1BB2     		sxth	r3, r3
 1511 0752 44F62062 		movw	r2, #20000
 1512 0756 9342     		cmp	r3, r2
 1513 0758 40F3A580 		ble	.L65
 1514              	.LBB4:
 392:main.c        ****                         STATE = LANDED;                                     //Switch to LANDED stat
 1515              		.loc 1 392 0
 1516 075c A34B     		ldr	r3, .L96+16
 1517 075e 0322     		movs	r2, #3
 1518 0760 1A70     		strb	r2, [r3]
 393:main.c        ****                         #ifdef LCD
 394:main.c        ****                             setCursor(0,0);
 1519              		.loc 1 394 0
 1520 0762 0020     		movs	r0, #0
 1521 0764 0021     		movs	r1, #0
 1522 0766 FFF7FEFF 		bl	setCursor
 395:main.c        ****                             clear();
 1523              		.loc 1 395 0
 1524 076a FFF7FEFF 		bl	clear
 396:main.c        ****                             LCD_print("STATE: LANDED");  
 1525              		.loc 1 396 0
 1526 076e A048     		ldr	r0, .L96+20
 1527 0770 FFF7FEFF 		bl	LCD_print
 397:main.c        ****                         #endif
 398:main.c        ****                         char sdbuf[60] = {};
 1528              		.loc 1 398 0
 1529 0774 3B46     		mov	r3, r7
 1530 0776 1A46     		mov	r2, r3
 1531 0778 3C23     		movs	r3, #60
 1532 077a 1046     		mov	r0, r2
 1533 077c 0021     		movs	r1, #0
 1534 077e 1A46     		mov	r2, r3
 1535 0780 FFF7FEFF 		bl	memset
 399:main.c        ****                         #ifdef SD
 400:main.c        ****                             sprintf(sdbuf, "STATE: LANDED ***********\n");
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 37


 1536              		.loc 1 400 0
 1537 0784 3B46     		mov	r3, r7
 1538 0786 9B4A     		ldr	r2, .L96+24
 1539 0788 1C46     		mov	r4, r3
 1540 078a 1546     		mov	r5, r2
 1541 078c 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1542 078e 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1543 0790 95E80700 		ldmia	r5, {r0, r1, r2}
 1544 0794 03C4     		stmia	r4!, {r0, r1}
 1545 0796 2280     		strh	r2, [r4]	@ movhi
 1546 0798 0234     		adds	r4, r4, #2
 1547 079a 130C     		lsrs	r3, r2, #16
 1548 079c 2370     		strb	r3, [r4]
 401:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 1549              		.loc 1 401 0
 1550 079e 964B     		ldr	r3, .L96+28
 1551 07a0 1C68     		ldr	r4, [r3]
 1552 07a2 3B46     		mov	r3, r7
 1553 07a4 1846     		mov	r0, r3
 1554 07a6 FFF7FEFF 		bl	strlen
 1555 07aa 0246     		mov	r2, r0
 1556 07ac 3B46     		mov	r3, r7
 1557 07ae 2046     		mov	r0, r4
 1558 07b0 1946     		mov	r1, r3
 1559 07b2 FFF7FEFF 		bl	FS_Write
 402:main.c        ****                         #endif
 403:main.c        ****                         #ifdef BT
 404:main.c        ****                             stateMsgCount = 0;
 1560              		.loc 1 404 0
 1561 07b6 0023     		movs	r3, #0
 1562 07b8 C7F81831 		str	r3, [r7, #280]
 405:main.c        ****                             while (stateMsgCount < LANDED_LEN){
 1563              		.loc 1 405 0
 1564 07bc 19E0     		b	.L66
 1565              	.L69:
 406:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1566              		.loc 1 406 0
 1567 07be 11E0     		b	.L67
 1568              	.L68:
 407:main.c        ****                                     UART_PutChar(landedbuf[stateMsgCount++]);
 1569              		.loc 1 407 0
 1570 07c0 D7F81831 		ldr	r3, [r7, #280]
 1571 07c4 5A1C     		adds	r2, r3, #1
 1572 07c6 C7F81821 		str	r2, [r7, #280]
 1573 07ca 07F59072 		add	r2, r7, #288
 1574 07ce 1344     		add	r3, r3, r2
 1575 07d0 13F8A43C 		ldrb	r3, [r3, #-164]	@ zero_extendqisi2
 1576 07d4 1846     		mov	r0, r3
 1577 07d6 FFF7FEFF 		bl	UART_PutChar
 408:main.c        ****                                     if (stateMsgCount >= LANDED_LEN) break;
 1578              		.loc 1 408 0
 1579 07da D7F81831 		ldr	r3, [r7, #280]
 1580 07de 0D2B     		cmp	r3, #13
 1581 07e0 00DD     		ble	.L67
 1582 07e2 06E0     		b	.L66
 1583              	.L67:
 406:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 38


 1584              		.loc 1 406 0
 1585 07e4 FFF7FEFF 		bl	UART_ReadTxStatus
 1586 07e8 0346     		mov	r3, r0
 1587 07ea 03F00803 		and	r3, r3, #8
 1588 07ee 002B     		cmp	r3, #0
 1589 07f0 E6D1     		bne	.L68
 1590              	.L66:
 405:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1591              		.loc 1 405 0
 1592 07f2 D7F81831 		ldr	r3, [r7, #280]
 1593 07f6 0D2B     		cmp	r3, #13
 1594 07f8 E1DD     		ble	.L69
 409:main.c        ****                                 }
 410:main.c        ****                             }
 411:main.c        ****                         #endif
 412:main.c        ****                         #ifdef LCD
 413:main.c        ****                             setCursor(0,0);
 1595              		.loc 1 413 0
 1596 07fa 0020     		movs	r0, #0
 1597 07fc 0021     		movs	r1, #0
 1598 07fe FFF7FEFF 		bl	setCursor
 414:main.c        ****                             clear();
 1599              		.loc 1 414 0
 1600 0802 FFF7FEFF 		bl	clear
 415:main.c        ****                             LCD_print("VACUUMING");  
 1601              		.loc 1 415 0
 1602 0806 7D48     		ldr	r0, .L96+32
 1603 0808 FFF7FEFF 		bl	LCD_print
 416:main.c        ****                         #endif
 417:main.c        ****                         
 418:main.c        ****                         #ifdef SD
 419:main.c        ****                                 memset(sdbuf, 0, 40);
 1604              		.loc 1 419 0
 1605 080c 3B46     		mov	r3, r7
 1606 080e 1846     		mov	r0, r3
 1607 0810 0021     		movs	r1, #0
 1608 0812 2822     		movs	r2, #40
 1609 0814 FFF7FEFF 		bl	memset
 420:main.c        ****                                 sprintf(sdbuf, "STATE: VACUUMING ***********\n");
 1610              		.loc 1 420 0
 1611 0818 3B46     		mov	r3, r7
 1612 081a 794A     		ldr	r2, .L96+36
 1613 081c 1C46     		mov	r4, r3
 1614 081e 1546     		mov	r5, r2
 1615 0820 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1616 0822 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1617 0824 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1618 0828 07C4     		stmia	r4!, {r0, r1, r2}
 1619 082a 2380     		strh	r3, [r4]	@ movhi
 421:main.c        ****                                 FS_Write(fsfile, sdbuf, strlen(sdbuf));
 1620              		.loc 1 421 0
 1621 082c 724B     		ldr	r3, .L96+28
 1622 082e 1C68     		ldr	r4, [r3]
 1623 0830 3B46     		mov	r3, r7
 1624 0832 1846     		mov	r0, r3
 1625 0834 FFF7FEFF 		bl	strlen
 1626 0838 0246     		mov	r2, r0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 39


 1627 083a 3B46     		mov	r3, r7
 1628 083c 2046     		mov	r0, r4
 1629 083e 1946     		mov	r1, r3
 1630 0840 FFF7FEFF 		bl	FS_Write
 422:main.c        ****                         #endif
 423:main.c        ****                         #ifdef BT
 424:main.c        ****                             stateMsgCount = 0;
 1631              		.loc 1 424 0
 1632 0844 0023     		movs	r3, #0
 1633 0846 C7F81831 		str	r3, [r7, #280]
 425:main.c        ****                             while (stateMsgCount < VACUUM_LEN){
 1634              		.loc 1 425 0
 1635 084a 19E0     		b	.L70
 1636              	.L73:
 426:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1637              		.loc 1 426 0
 1638 084c 11E0     		b	.L71
 1639              	.L72:
 427:main.c        ****                                     UART_PutChar(vacuumbuf[stateMsgCount++]);
 1640              		.loc 1 427 0
 1641 084e D7F81831 		ldr	r3, [r7, #280]
 1642 0852 5A1C     		adds	r2, r3, #1
 1643 0854 C7F81821 		str	r2, [r7, #280]
 1644 0858 07F59072 		add	r2, r7, #288
 1645 085c 1344     		add	r3, r3, r2
 1646 085e 13F8B83C 		ldrb	r3, [r3, #-184]	@ zero_extendqisi2
 1647 0862 1846     		mov	r0, r3
 1648 0864 FFF7FEFF 		bl	UART_PutChar
 428:main.c        ****                                     if (stateMsgCount >= VACUUM_LEN) break;
 1649              		.loc 1 428 0
 1650 0868 D7F81831 		ldr	r3, [r7, #280]
 1651 086c 102B     		cmp	r3, #16
 1652 086e 00DD     		ble	.L71
 1653 0870 06E0     		b	.L70
 1654              	.L71:
 426:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1655              		.loc 1 426 0
 1656 0872 FFF7FEFF 		bl	UART_ReadTxStatus
 1657 0876 0346     		mov	r3, r0
 1658 0878 03F00803 		and	r3, r3, #8
 1659 087c 002B     		cmp	r3, #0
 1660 087e E6D1     		bne	.L72
 1661              	.L70:
 425:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1662              		.loc 1 425 0
 1663 0880 D7F81831 		ldr	r3, [r7, #280]
 1664 0884 102B     		cmp	r3, #16
 1665 0886 E1DD     		ble	.L73
 429:main.c        ****                                 }
 430:main.c        ****                             }
 431:main.c        ****                         #endif
 432:main.c        ****                             id=0;                                                   //reset sample 
 1666              		.loc 1 432 0
 1667 0888 544B     		ldr	r3, .L96
 1668 088a 0022     		movs	r2, #0
 1669 088c 1A60     		str	r2, [r3]
 433:main.c        ****                             data_time = 0;
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 40


 1670              		.loc 1 433 0
 1671 088e 5D4B     		ldr	r3, .L96+40
 1672 0890 0022     		movs	r2, #0
 1673 0892 1A60     		str	r2, [r3]
 434:main.c        ****                             sum = 0;
 1674              		.loc 1 434 0
 1675 0894 524B     		ldr	r3, .L96+4
 1676 0896 0022     		movs	r2, #0
 1677 0898 1A60     		str	r2, [r3]
 435:main.c        ****                             average = 0; 
 1678              		.loc 1 435 0
 1679 089a 534B     		ldr	r3, .L96+12
 1680 089c 0022     		movs	r2, #0
 1681 089e 1A80     		strh	r2, [r3]	@ movhi
 436:main.c        ****                         countdown = 0;
 1682              		.loc 1 436 0
 1683 08a0 594B     		ldr	r3, .L96+44
 1684 08a2 0022     		movs	r2, #0
 1685 08a4 1A70     		strb	r2, [r3]
 1686              	.L65:
 1687              	.LBE4:
 437:main.c        ****                     }
 438:main.c        ****                     id++;     
 1688              		.loc 1 438 0
 1689 08a6 4D4B     		ldr	r3, .L96
 1690 08a8 1B68     		ldr	r3, [r3]
 1691 08aa 0133     		adds	r3, r3, #1
 1692 08ac 4B4A     		ldr	r2, .L96
 1693 08ae 1360     		str	r3, [r2]
 439:main.c        ****                     
 440:main.c        ****                     /*if desired amount of samples have been collected, switch states*/
 441:main.c        ****                     if(data_time >= DATA_TIME * 2){
 1694              		.loc 1 441 0
 1695 08b0 544B     		ldr	r3, .L96+40
 1696 08b2 1B68     		ldr	r3, [r3]
 1697 08b4 42F20F72 		movw	r2, #9999
 1698 08b8 9342     		cmp	r3, r2
 1699 08ba 1ADD     		ble	.L74
 442:main.c        ****                         LED2_Write(0);                                          //turn LED off
 1700              		.loc 1 442 0
 1701 08bc 0020     		movs	r0, #0
 1702 08be FFF7FEFF 		bl	LED2_Write
 443:main.c        ****                                                             
 444:main.c        ****                         STATE = WAIT_TO_LAUNCH;                                //Switch to Waiting 
 1703              		.loc 1 444 0
 1704 08c2 4A4B     		ldr	r3, .L96+16
 1705 08c4 0122     		movs	r2, #1
 1706 08c6 1A70     		strb	r2, [r3]
 445:main.c        ****                         #ifdef LCD
 446:main.c        ****                             setCursor(0,0);
 1707              		.loc 1 446 0
 1708 08c8 0020     		movs	r0, #0
 1709 08ca 0021     		movs	r1, #0
 1710 08cc FFF7FEFF 		bl	setCursor
 447:main.c        ****                             clear();
 1711              		.loc 1 447 0
 1712 08d0 FFF7FEFF 		bl	clear
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 41


 448:main.c        ****                             LCD_print("STATE: WAIT");  
 1713              		.loc 1 448 0
 1714 08d4 4D48     		ldr	r0, .L96+48
 1715 08d6 FFF7FEFF 		bl	LCD_print
 449:main.c        ****                         #endif
 450:main.c        ****                         id=0;                                                  //reset sample count
 1716              		.loc 1 450 0
 1717 08da 404B     		ldr	r3, .L96
 1718 08dc 0022     		movs	r2, #0
 1719 08de 1A60     		str	r2, [r3]
 451:main.c        ****                         data_time = 0;
 1720              		.loc 1 451 0
 1721 08e0 484B     		ldr	r3, .L96+40
 1722 08e2 0022     		movs	r2, #0
 1723 08e4 1A60     		str	r2, [r3]
 452:main.c        ****                         sum = 0;                                               //reset sum 
 1724              		.loc 1 452 0
 1725 08e6 3E4B     		ldr	r3, .L96+4
 1726 08e8 0022     		movs	r2, #0
 1727 08ea 1A60     		str	r2, [r3]
 453:main.c        ****                         average = 0;
 1728              		.loc 1 453 0
 1729 08ec 3E4B     		ldr	r3, .L96+12
 1730 08ee 0022     		movs	r2, #0
 1731 08f0 1A80     		strh	r2, [r3]	@ movhi
 1732              	.L74:
 454:main.c        ****                        
 455:main.c        ****                     }
 456:main.c        ****                     collect_flag = 0;
 1733              		.loc 1 456 0
 1734 08f2 474B     		ldr	r3, .L96+52
 1735 08f4 0022     		movs	r2, #0
 1736 08f6 1A70     		strb	r2, [r3]
 457:main.c        ****                 }
 458:main.c        ****                 break;
 1737              		.loc 1 458 0
 1738 08f8 36E1     		b	.L60
 1739              	.L61:
 1740              		.loc 1 458 0 is_stmt 0 discriminator 2
 1741 08fa 35E1     		b	.L60
 1742              	.L45:
 459:main.c        ****                 
 460:main.c        ****                 case LANDED:
 461:main.c        ****                     if (countdown == 7) {countdown = 0; pulse = 1; Solenoid_1_Write(1);} //turn on 
 1743              		.loc 1 461 0 is_stmt 1
 1744 08fc 424B     		ldr	r3, .L96+44
 1745 08fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1746 0900 072B     		cmp	r3, #7
 1747 0902 08D1     		bne	.L75
 1748              		.loc 1 461 0 is_stmt 0 discriminator 1
 1749 0904 404B     		ldr	r3, .L96+44
 1750 0906 0022     		movs	r2, #0
 1751 0908 1A70     		strb	r2, [r3]
 1752 090a 0123     		movs	r3, #1
 1753 090c C7F81431 		str	r3, [r7, #276]
 1754 0910 0120     		movs	r0, #1
 1755 0912 FFF7FEFF 		bl	Solenoid_1_Write
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 42


 1756              	.L75:
 462:main.c        ****                     
 463:main.c        ****                     
 464:main.c        ****                     if (countdown == 5 && pulse){
 1757              		.loc 1 464 0 is_stmt 1
 1758 0916 3C4B     		ldr	r3, .L96+44
 1759 0918 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1760 091a 052B     		cmp	r3, #5
 1761 091c 0ED1     		bne	.L76
 1762              		.loc 1 464 0 is_stmt 0 discriminator 1
 1763 091e D7F81431 		ldr	r3, [r7, #276]
 1764 0922 002B     		cmp	r3, #0
 1765 0924 0AD0     		beq	.L76
 465:main.c        ****                         pulse++;
 1766              		.loc 1 465 0 is_stmt 1
 1767 0926 D7F81431 		ldr	r3, [r7, #276]
 1768 092a 0133     		adds	r3, r3, #1
 1769 092c C7F81431 		str	r3, [r7, #276]
 466:main.c        ****                         Solenoid_1_Write(0); //turn off soleniod 1
 1770              		.loc 1 466 0
 1771 0930 0020     		movs	r0, #0
 1772 0932 FFF7FEFF 		bl	Solenoid_1_Write
 467:main.c        ****                         countdown = 0;
 1773              		.loc 1 467 0
 1774 0936 344B     		ldr	r3, .L96+44
 1775 0938 0022     		movs	r2, #0
 1776 093a 1A70     		strb	r2, [r3]
 1777              	.L76:
 468:main.c        ****                         
 469:main.c        ****                     }
 470:main.c        ****                     if (countdown == 3 && pulse == 2){
 1778              		.loc 1 470 0
 1779 093c 324B     		ldr	r3, .L96+44
 1780 093e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1781 0940 032B     		cmp	r3, #3
 1782 0942 7DD1     		bne	.L77
 1783              		.loc 1 470 0 is_stmt 0 discriminator 1
 1784 0944 D7F81431 		ldr	r3, [r7, #276]
 1785 0948 022B     		cmp	r3, #2
 1786 094a 79D1     		bne	.L77
 1787              	.LBB5:
 471:main.c        ****                         STATE = RESURFACE;
 1788              		.loc 1 471 0 is_stmt 1
 1789 094c 274B     		ldr	r3, .L96+16
 1790 094e 0422     		movs	r2, #4
 1791 0950 1A70     		strb	r2, [r3]
 472:main.c        ****                         char sdbuf[60] = {};
 1792              		.loc 1 472 0
 1793 0952 3B46     		mov	r3, r7
 1794 0954 1A46     		mov	r2, r3
 1795 0956 3C23     		movs	r3, #60
 1796 0958 1046     		mov	r0, r2
 1797 095a 0021     		movs	r1, #0
 1798 095c 1A46     		mov	r2, r3
 1799 095e FFF7FEFF 		bl	memset
 473:main.c        ****                         #ifdef LCD
 474:main.c        ****                             setCursor(0,0);
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 43


 1800              		.loc 1 474 0
 1801 0962 0020     		movs	r0, #0
 1802 0964 0021     		movs	r1, #0
 1803 0966 FFF7FEFF 		bl	setCursor
 475:main.c        ****                             clear();
 1804              		.loc 1 475 0
 1805 096a FFF7FEFF 		bl	clear
 476:main.c        ****                             LCD_print("STATE: RESURFACING");  
 1806              		.loc 1 476 0
 1807 096e 2948     		ldr	r0, .L96+56
 1808 0970 FFF7FEFF 		bl	LCD_print
 477:main.c        ****                         #endif
 478:main.c        ****                         #ifdef SD
 479:main.c        ****                             memset(sdbuf, 0, 40);
 1809              		.loc 1 479 0
 1810 0974 3B46     		mov	r3, r7
 1811 0976 1846     		mov	r0, r3
 1812 0978 0021     		movs	r1, #0
 1813 097a 2822     		movs	r2, #40
 1814 097c FFF7FEFF 		bl	memset
 480:main.c        ****                             sprintf(sdbuf, "STATE: RESURFACING ***********\n");
 1815              		.loc 1 480 0
 1816 0980 3B46     		mov	r3, r7
 1817 0982 254A     		ldr	r2, .L96+60
 1818 0984 1C46     		mov	r4, r3
 1819 0986 1546     		mov	r5, r2
 1820 0988 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1821 098a 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1822 098c 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1823 0990 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 481:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 1824              		.loc 1 481 0
 1825 0994 184B     		ldr	r3, .L96+28
 1826 0996 1C68     		ldr	r4, [r3]
 1827 0998 3B46     		mov	r3, r7
 1828 099a 1846     		mov	r0, r3
 1829 099c FFF7FEFF 		bl	strlen
 1830 09a0 0246     		mov	r2, r0
 1831 09a2 3B46     		mov	r3, r7
 1832 09a4 2046     		mov	r0, r4
 1833 09a6 1946     		mov	r1, r3
 1834 09a8 FFF7FEFF 		bl	FS_Write
 482:main.c        ****                         #endif
 483:main.c        ****                         #ifdef BT
 484:main.c        ****                             stateMsgCount = 0;
 1835              		.loc 1 484 0
 1836 09ac 0023     		movs	r3, #0
 1837 09ae C7F81831 		str	r3, [r7, #280]
 485:main.c        ****                             while (stateMsgCount < RESURFACE_LEN){
 1838              		.loc 1 485 0
 1839 09b2 3AE0     		b	.L78
 1840              	.L81:
 486:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1841              		.loc 1 486 0
 1842 09b4 32E0     		b	.L79
 1843              	.L80:
 487:main.c        ****                                     UART_PutChar(resurfbuf[stateMsgCount++]);
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 44


 1844              		.loc 1 487 0
 1845 09b6 D7F81831 		ldr	r3, [r7, #280]
 1846 09ba 5A1C     		adds	r2, r3, #1
 1847 09bc C7F81821 		str	r2, [r7, #280]
 1848 09c0 07F59072 		add	r2, r7, #288
 1849 09c4 1344     		add	r3, r3, r2
 1850 09c6 13F8CC3C 		ldrb	r3, [r3, #-204]	@ zero_extendqisi2
 1851 09ca 1846     		mov	r0, r3
 1852 09cc FFF7FEFF 		bl	UART_PutChar
 488:main.c        ****                                     if (stateMsgCount >= RESURFACE_LEN) break;
 1853              		.loc 1 488 0
 1854 09d0 D7F81831 		ldr	r3, [r7, #280]
 1855 09d4 102B     		cmp	r3, #16
 1856 09d6 21DD     		ble	.L79
 1857 09d8 27E0     		b	.L78
 1858              	.L97:
 1859 09da 00BF     		.align	2
 1860              	.L96:
 1861 09dc 00000000 		.word	id
 1862 09e0 00000000 		.word	sum
 1863 09e4 89888888 		.word	-2004318071
 1864 09e8 00000000 		.word	average
 1865 09ec 00000000 		.word	STATE
 1866 09f0 10010000 		.word	.LC23
 1867 09f4 20010000 		.word	.LC24
 1868 09f8 00000000 		.word	fsfile
 1869 09fc 3C010000 		.word	.LC25
 1870 0a00 48010000 		.word	.LC26
 1871 0a04 00000000 		.word	data_time
 1872 0a08 00000000 		.word	countdown
 1873 0a0c 68010000 		.word	.LC27
 1874 0a10 00000000 		.word	collect_flag
 1875 0a14 74010000 		.word	.LC28
 1876 0a18 88010000 		.word	.LC29
 1877              	.L79:
 486:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1878              		.loc 1 486 0
 1879 0a1c FFF7FEFF 		bl	UART_ReadTxStatus
 1880 0a20 0346     		mov	r3, r0
 1881 0a22 03F00803 		and	r3, r3, #8
 1882 0a26 002B     		cmp	r3, #0
 1883 0a28 C5D1     		bne	.L80
 1884              	.L78:
 485:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1885              		.loc 1 485 0
 1886 0a2a D7F81831 		ldr	r3, [r7, #280]
 1887 0a2e 102B     		cmp	r3, #16
 1888 0a30 C0DD     		ble	.L81
 489:main.c        ****                                 }
 490:main.c        ****                             }
 491:main.c        ****                         #endif
 492:main.c        ****                         pulse = 0;
 1889              		.loc 1 492 0
 1890 0a32 0023     		movs	r3, #0
 1891 0a34 C7F81431 		str	r3, [r7, #276]
 493:main.c        ****                         countdown = 0;
 1892              		.loc 1 493 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 45


 1893 0a38 4C4B     		ldr	r3, .L98
 1894 0a3a 0022     		movs	r2, #0
 1895 0a3c 1A70     		strb	r2, [r3]
 1896              	.LBE5:
 494:main.c        ****                     }
 495:main.c        ****                 break;
 1897              		.loc 1 495 0
 1898 0a3e 93E0     		b	.L60
 1899              	.L77:
 1900              		.loc 1 495 0 is_stmt 0 discriminator 3
 1901 0a40 92E0     		b	.L60
 1902              	.L46:
 496:main.c        ****                 
 497:main.c        ****             case RESURFACE:
 498:main.c        ****                 if (PANIC_flag)
 1903              		.loc 1 498 0 is_stmt 1
 1904 0a42 4B4B     		ldr	r3, .L98+4
 1905 0a44 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1906 0a46 002B     		cmp	r3, #0
 1907 0a48 02D0     		beq	.L82
 499:main.c        ****                     LCD_print("WATER DETECTED");
 1908              		.loc 1 499 0
 1909 0a4a 4A48     		ldr	r0, .L98+8
 1910 0a4c FFF7FEFF 		bl	LCD_print
 1911              	.L82:
 500:main.c        ****                 Solenoid_2_Write(1);
 1912              		.loc 1 500 0
 1913 0a50 0120     		movs	r0, #1
 1914 0a52 FFF7FEFF 		bl	Solenoid_2_Write
 501:main.c        ****                 
 502:main.c        ****                 //check pressure sensor to confirm we are at the surface
 503:main.c        ****                 if (countdown == 3){
 1915              		.loc 1 503 0
 1916 0a56 454B     		ldr	r3, .L98
 1917 0a58 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1918 0a5a 032B     		cmp	r3, #3
 1919 0a5c 0ED1     		bne	.L83
 504:main.c        ****                     Solenoid_2_Write(0);
 1920              		.loc 1 504 0
 1921 0a5e 0020     		movs	r0, #0
 1922 0a60 FFF7FEFF 		bl	Solenoid_2_Write
 505:main.c        ****                     CyDelay(1000u);
 1923              		.loc 1 505 0
 1924 0a64 4FF47A70 		mov	r0, #1000
 1925 0a68 FFF7FEFF 		bl	CyDelay
 506:main.c        ****                     pulse++;
 1926              		.loc 1 506 0
 1927 0a6c D7F81431 		ldr	r3, [r7, #276]
 1928 0a70 0133     		adds	r3, r3, #1
 1929 0a72 C7F81431 		str	r3, [r7, #276]
 507:main.c        ****                     countdown = 0;
 1930              		.loc 1 507 0
 1931 0a76 3D4B     		ldr	r3, .L98
 1932 0a78 0022     		movs	r2, #0
 1933 0a7a 1A70     		strb	r2, [r3]
 1934              	.L83:
 508:main.c        ****                 }
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 46


 509:main.c        ****                 if (pulse == 2){
 1935              		.loc 1 509 0
 1936 0a7c D7F81431 		ldr	r3, [r7, #276]
 1937 0a80 022B     		cmp	r3, #2
 1938 0a82 55D1     		bne	.L84
 1939              	.LBB6:
 510:main.c        ****                     char sdbuf[60] = {};
 1940              		.loc 1 510 0
 1941 0a84 3B46     		mov	r3, r7
 1942 0a86 1A46     		mov	r2, r3
 1943 0a88 3C23     		movs	r3, #60
 1944 0a8a 1046     		mov	r0, r2
 1945 0a8c 0021     		movs	r1, #0
 1946 0a8e 1A46     		mov	r2, r3
 1947 0a90 FFF7FEFF 		bl	memset
 511:main.c        ****                                                    //wait 10 seconds to lift, for testing in pool
 512:main.c        ****                     STATE = TRANSMIT;
 1948              		.loc 1 512 0
 1949 0a94 384B     		ldr	r3, .L98+12
 1950 0a96 0522     		movs	r2, #5
 1951 0a98 1A70     		strb	r2, [r3]
 513:main.c        ****                     #ifdef LCD
 514:main.c        ****                         setCursor(0,0);
 1952              		.loc 1 514 0
 1953 0a9a 0020     		movs	r0, #0
 1954 0a9c 0021     		movs	r1, #0
 1955 0a9e FFF7FEFF 		bl	setCursor
 515:main.c        ****                         clear();
 1956              		.loc 1 515 0
 1957 0aa2 FFF7FEFF 		bl	clear
 516:main.c        ****                         LCD_print("TRANSMIT");  
 1958              		.loc 1 516 0
 1959 0aa6 3548     		ldr	r0, .L98+16
 1960 0aa8 FFF7FEFF 		bl	LCD_print
 517:main.c        ****                     #endif
 518:main.c        ****                     #ifdef SD
 519:main.c        ****                         memset(sdbuf, 0, 40);
 1961              		.loc 1 519 0
 1962 0aac 3B46     		mov	r3, r7
 1963 0aae 1846     		mov	r0, r3
 1964 0ab0 0021     		movs	r1, #0
 1965 0ab2 2822     		movs	r2, #40
 1966 0ab4 FFF7FEFF 		bl	memset
 520:main.c        ****                         sprintf(sdbuf, "STATE: TRANSMIT ***********\n");
 1967              		.loc 1 520 0
 1968 0ab8 3B46     		mov	r3, r7
 1969 0aba 314A     		ldr	r2, .L98+20
 1970 0abc 1C46     		mov	r4, r3
 1971 0abe 1546     		mov	r5, r2
 1972 0ac0 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 1973 0ac2 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 1974 0ac4 95E80F00 		ldmia	r5, {r0, r1, r2, r3}
 1975 0ac8 07C4     		stmia	r4!, {r0, r1, r2}
 1976 0aca 2370     		strb	r3, [r4]
 521:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));
 1977              		.loc 1 521 0
 1978 0acc 2D4B     		ldr	r3, .L98+24
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 47


 1979 0ace 1C68     		ldr	r4, [r3]
 1980 0ad0 3B46     		mov	r3, r7
 1981 0ad2 1846     		mov	r0, r3
 1982 0ad4 FFF7FEFF 		bl	strlen
 1983 0ad8 0246     		mov	r2, r0
 1984 0ada 3B46     		mov	r3, r7
 1985 0adc 2046     		mov	r0, r4
 1986 0ade 1946     		mov	r1, r3
 1987 0ae0 FFF7FEFF 		bl	FS_Write
 522:main.c        ****                     #endif
 523:main.c        ****                     #ifdef BT
 524:main.c        ****                         stateMsgCount = 0;
 1988              		.loc 1 524 0
 1989 0ae4 0023     		movs	r3, #0
 1990 0ae6 C7F81831 		str	r3, [r7, #280]
 525:main.c        ****                         while (stateMsgCount < TRANSMIT_LEN){
 1991              		.loc 1 525 0
 1992 0aea 19E0     		b	.L85
 1993              	.L88:
 526:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1994              		.loc 1 526 0
 1995 0aec 11E0     		b	.L86
 1996              	.L87:
 527:main.c        ****                                 UART_PutChar(transbuf[stateMsgCount++]);
 1997              		.loc 1 527 0
 1998 0aee D7F81831 		ldr	r3, [r7, #280]
 1999 0af2 5A1C     		adds	r2, r3, #1
 2000 0af4 C7F81821 		str	r2, [r7, #280]
 2001 0af8 07F59072 		add	r2, r7, #288
 2002 0afc 1344     		add	r3, r3, r2
 2003 0afe 13F8DC3C 		ldrb	r3, [r3, #-220]	@ zero_extendqisi2
 2004 0b02 1846     		mov	r0, r3
 2005 0b04 FFF7FEFF 		bl	UART_PutChar
 528:main.c        ****                                 if (stateMsgCount >= TRANSMIT_LEN) break;
 2006              		.loc 1 528 0
 2007 0b08 D7F81831 		ldr	r3, [r7, #280]
 2008 0b0c 0F2B     		cmp	r3, #15
 2009 0b0e 00DD     		ble	.L86
 2010 0b10 06E0     		b	.L85
 2011              	.L86:
 526:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 2012              		.loc 1 526 0
 2013 0b12 FFF7FEFF 		bl	UART_ReadTxStatus
 2014 0b16 0346     		mov	r3, r0
 2015 0b18 03F00803 		and	r3, r3, #8
 2016 0b1c 002B     		cmp	r3, #0
 2017 0b1e E6D1     		bne	.L87
 2018              	.L85:
 525:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 2019              		.loc 1 525 0
 2020 0b20 D7F81831 		ldr	r3, [r7, #280]
 2021 0b24 0F2B     		cmp	r3, #15
 2022 0b26 E1DD     		ble	.L88
 529:main.c        ****                             }
 530:main.c        ****                         }
 531:main.c        ****                     #endif
 532:main.c        ****                     countdown = 0;
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 48


 2023              		.loc 1 532 0
 2024 0b28 104B     		ldr	r3, .L98
 2025 0b2a 0022     		movs	r2, #0
 2026 0b2c 1A70     		strb	r2, [r3]
 2027              	.LBE6:
 533:main.c        ****                 }
 534:main.c        ****                 break;
 2028              		.loc 1 534 0
 2029 0b2e 1BE0     		b	.L60
 2030              	.L84:
 2031              		.loc 1 534 0 is_stmt 0 discriminator 5
 2032 0b30 1AE0     		b	.L60
 2033              	.L47:
 535:main.c        ****                 
 536:main.c        ****             case TRANSMIT:
 537:main.c        ****                 if (transmit_flag){
 2034              		.loc 1 537 0 is_stmt 1
 2035 0b32 154B     		ldr	r3, .L98+28
 2036 0b34 1B68     		ldr	r3, [r3]
 2037 0b36 002B     		cmp	r3, #0
 2038 0b38 0BD0     		beq	.L89
 538:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &t); // Here, the STATE variable only matters,
 2039              		.loc 1 538 0
 2040 0b3a 07F1B002 		add	r2, r7, #176
 2041 0b3e 07F13C03 		add	r3, r7, #60
 2042 0b42 1046     		mov	r0, r2
 2043 0b44 0C49     		ldr	r1, .L98+12
 2044 0b46 0A22     		movs	r2, #10
 2045 0b48 FFF7FEFF 		bl	BT_Send
 539:main.c        ****                     transmit_flag = 0;
 2046              		.loc 1 539 0
 2047 0b4c 0E4B     		ldr	r3, .L98+28
 2048 0b4e 0022     		movs	r2, #0
 2049 0b50 1A60     		str	r2, [r3]
 2050              	.L89:
 540:main.c        ****                 }
 541:main.c        ****                 countdown = 0;
 2051              		.loc 1 541 0
 2052 0b52 064B     		ldr	r3, .L98
 2053 0b54 0022     		movs	r2, #0
 2054 0b56 1A70     		strb	r2, [r3]
 542:main.c        ****                 pulse = 0;
 2055              		.loc 1 542 0
 2056 0b58 0023     		movs	r3, #0
 2057 0b5a C7F81431 		str	r3, [r7, #276]
 543:main.c        ****                 depth = 0;
 2058              		.loc 1 543 0
 2059 0b5e 0B4B     		ldr	r3, .L98+32
 2060 0b60 0022     		movs	r2, #0
 2061 0b62 1A60     		str	r2, [r3]
 544:main.c        ****                 
 545:main.c        ****                 //FS_Read(fsfile, 4);
 546:main.c        **** //                #ifdef SD                                   //close old file, open new one
 547:main.c        **** //                    FS_FClose(fsfile);
 548:main.c        **** //                    sprintf(file, "test%d.txt", ++testnum);
 549:main.c        **** //                    fsfile = FS_FOpen(file, "w");
 550:main.c        **** //                #endif 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 49


 551:main.c        ****                 //CyDelay(15000u);
 552:main.c        ****                 
 553:main.c        ****                 break;
 2062              		.loc 1 553 0
 2063 0b64 00E0     		b	.L60
 2064              	.L91:
 554:main.c        ****                 
 555:main.c        ****             default:
 556:main.c        ****                 break;
 2065              		.loc 1 556 0
 2066 0b66 00BF     		nop
 2067              	.L60:
 2068              	.LBE2:
 557:main.c        ****         
 558:main.c        ****         
 559:main.c        ****         }
 560:main.c        ****         
 561:main.c        ****     }
 2069              		.loc 1 561 0 discriminator 6
 2070 0b68 FFF763BB 		b	.L90
 2071              	.L99:
 2072              		.align	2
 2073              	.L98:
 2074 0b6c 00000000 		.word	countdown
 2075 0b70 00000000 		.word	PANIC_flag
 2076 0b74 A8010000 		.word	.LC30
 2077 0b78 00000000 		.word	STATE
 2078 0b7c B8010000 		.word	.LC31
 2079 0b80 C4010000 		.word	.LC32
 2080 0b84 00000000 		.word	fsfile
 2081 0b88 00000000 		.word	transmit_flag
 2082 0b8c 00000000 		.word	depth
 2083              		.cfi_endproc
 2084              	.LFE68:
 2085              		.size	main, .-main
 2086              		.text
 2087              	.Letext0:
 2088              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2089              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2090              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2091              		.file 5 ".\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 2092              		.file 6 "functions.h"
 2093              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2094              		.file 8 "./mpu6050.h"
 2095              		.section	.debug_info,"",%progbits
 2096              	.Ldebug_info0:
 2097 0000 4E060000 		.4byte	0x64e
 2098 0004 0400     		.2byte	0x4
 2099 0006 00000000 		.4byte	.Ldebug_abbrev0
 2100 000a 04       		.byte	0x4
 2101 000b 01       		.uleb128 0x1
 2102 000c 0F010000 		.4byte	.LASF84
 2103 0010 01       		.byte	0x1
 2104 0011 1B030000 		.4byte	.LASF85
 2105 0015 9E020000 		.4byte	.LASF86
 2106 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2107 001d 00000000 		.4byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 50


 2108 0021 00000000 		.4byte	.Ldebug_line0
 2109 0025 02       		.uleb128 0x2
 2110 0026 01       		.byte	0x1
 2111 0027 06       		.byte	0x6
 2112 0028 11020000 		.4byte	.LASF0
 2113 002c 03       		.uleb128 0x3
 2114 002d FD030000 		.4byte	.LASF2
 2115 0031 02       		.byte	0x2
 2116 0032 1D       		.byte	0x1d
 2117 0033 37000000 		.4byte	0x37
 2118 0037 02       		.uleb128 0x2
 2119 0038 01       		.byte	0x1
 2120 0039 08       		.byte	0x8
 2121 003a F1010000 		.4byte	.LASF1
 2122 003e 03       		.uleb128 0x3
 2123 003f 6E030000 		.4byte	.LASF3
 2124 0043 02       		.byte	0x2
 2125 0044 29       		.byte	0x29
 2126 0045 49000000 		.4byte	0x49
 2127 0049 02       		.uleb128 0x2
 2128 004a 02       		.byte	0x2
 2129 004b 05       		.byte	0x5
 2130 004c AA000000 		.4byte	.LASF4
 2131 0050 02       		.uleb128 0x2
 2132 0051 02       		.byte	0x2
 2133 0052 07       		.byte	0x7
 2134 0053 61020000 		.4byte	.LASF5
 2135 0057 03       		.uleb128 0x3
 2136 0058 64030000 		.4byte	.LASF6
 2137 005c 02       		.byte	0x2
 2138 005d 3F       		.byte	0x3f
 2139 005e 62000000 		.4byte	0x62
 2140 0062 02       		.uleb128 0x2
 2141 0063 04       		.byte	0x4
 2142 0064 05       		.byte	0x5
 2143 0065 79020000 		.4byte	.LASF7
 2144 0069 03       		.uleb128 0x3
 2145 006a 51030000 		.4byte	.LASF8
 2146 006e 02       		.byte	0x2
 2147 006f 41       		.byte	0x41
 2148 0070 74000000 		.4byte	0x74
 2149 0074 02       		.uleb128 0x2
 2150 0075 04       		.byte	0x4
 2151 0076 07       		.byte	0x7
 2152 0077 27030000 		.4byte	.LASF9
 2153 007b 02       		.uleb128 0x2
 2154 007c 08       		.byte	0x8
 2155 007d 05       		.byte	0x5
 2156 007e F0000000 		.4byte	.LASF10
 2157 0082 02       		.uleb128 0x2
 2158 0083 08       		.byte	0x8
 2159 0084 07       		.byte	0x7
 2160 0085 1D020000 		.4byte	.LASF11
 2161 0089 04       		.uleb128 0x4
 2162 008a 04       		.byte	0x4
 2163 008b 05       		.byte	0x5
 2164 008c 696E7400 		.ascii	"int\000"
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 51


 2165 0090 02       		.uleb128 0x2
 2166 0091 04       		.byte	0x4
 2167 0092 07       		.byte	0x7
 2168 0093 47020000 		.4byte	.LASF12
 2169 0097 03       		.uleb128 0x3
 2170 0098 BF000000 		.4byte	.LASF13
 2171 009c 03       		.byte	0x3
 2172 009d 15       		.byte	0x15
 2173 009e 2C000000 		.4byte	0x2c
 2174 00a2 03       		.uleb128 0x3
 2175 00a3 8A020000 		.4byte	.LASF14
 2176 00a7 03       		.byte	0x3
 2177 00a8 20       		.byte	0x20
 2178 00a9 3E000000 		.4byte	0x3e
 2179 00ad 03       		.uleb128 0x3
 2180 00ae 82020000 		.4byte	.LASF15
 2181 00b2 03       		.byte	0x3
 2182 00b3 2C       		.byte	0x2c
 2183 00b4 57000000 		.4byte	0x57
 2184 00b8 03       		.uleb128 0x3
 2185 00b9 34020000 		.4byte	.LASF16
 2186 00bd 03       		.byte	0x3
 2187 00be 2D       		.byte	0x2d
 2188 00bf 69000000 		.4byte	0x69
 2189 00c3 05       		.uleb128 0x5
 2190 00c4 92020000 		.4byte	.LASF17
 2191 00c8 04       		.byte	0x4
 2192 00c9 9201     		.2byte	0x192
 2193 00cb 37000000 		.4byte	0x37
 2194 00cf 05       		.uleb128 0x5
 2195 00d0 CD000000 		.4byte	.LASF18
 2196 00d4 04       		.byte	0x4
 2197 00d5 9601     		.2byte	0x196
 2198 00d7 49000000 		.4byte	0x49
 2199 00db 02       		.uleb128 0x2
 2200 00dc 04       		.byte	0x4
 2201 00dd 04       		.byte	0x4
 2202 00de DC000000 		.4byte	.LASF19
 2203 00e2 02       		.uleb128 0x2
 2204 00e3 08       		.byte	0x8
 2205 00e4 04       		.byte	0x4
 2206 00e5 4A030000 		.4byte	.LASF20
 2207 00e9 02       		.uleb128 0x2
 2208 00ea 01       		.byte	0x1
 2209 00eb 08       		.byte	0x8
 2210 00ec 74020000 		.4byte	.LASF21
 2211 00f0 05       		.uleb128 0x5
 2212 00f1 22030000 		.4byte	.LASF22
 2213 00f5 04       		.byte	0x4
 2214 00f6 3C02     		.2byte	0x23c
 2215 00f8 FC000000 		.4byte	0xfc
 2216 00fc 06       		.uleb128 0x6
 2217 00fd C3000000 		.4byte	0xc3
 2218 0101 02       		.uleb128 0x2
 2219 0102 04       		.byte	0x4
 2220 0103 07       		.byte	0x7
 2221 0104 83030000 		.4byte	.LASF23
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 52


 2222 0108 03       		.uleb128 0x3
 2223 0109 FF010000 		.4byte	.LASF24
 2224 010d 05       		.byte	0x5
 2225 010e 7E       		.byte	0x7e
 2226 010f 13010000 		.4byte	0x113
 2227 0113 07       		.uleb128 0x7
 2228 0114 FF010000 		.4byte	.LASF24
 2229 0118 08       		.uleb128 0x8
 2230 0119 04       		.byte	0x4
 2231 011a 08010000 		.4byte	0x108
 2232 011e 02       		.uleb128 0x2
 2233 011f 08       		.byte	0x8
 2234 0120 04       		.byte	0x4
 2235 0121 D6010000 		.4byte	.LASF25
 2236 0125 09       		.uleb128 0x9
 2237 0126 36000000 		.4byte	.LASF33
 2238 012a 01       		.byte	0x1
 2239 012b 06       		.byte	0x6
 2240 012c 35       		.byte	0x35
 2241 012d 5C010000 		.4byte	0x15c
 2242 0131 0A       		.uleb128 0xa
 2243 0132 29000000 		.4byte	.LASF26
 2244 0136 00       		.sleb128 0
 2245 0137 0A       		.uleb128 0xa
 2246 0138 E2010000 		.4byte	.LASF27
 2247 013c 01       		.sleb128 1
 2248 013d 0A       		.uleb128 0xa
 2249 013e 39030000 		.4byte	.LASF28
 2250 0142 02       		.sleb128 2
 2251 0143 0A       		.uleb128 0xa
 2252 0144 64000000 		.4byte	.LASF29
 2253 0148 03       		.sleb128 3
 2254 0149 0A       		.uleb128 0xa
 2255 014a 00000000 		.4byte	.LASF30
 2256 014e 04       		.sleb128 4
 2257 014f 0A       		.uleb128 0xa
 2258 0150 06010000 		.4byte	.LASF31
 2259 0154 05       		.sleb128 5
 2260 0155 0A       		.uleb128 0xa
 2261 0156 C3010000 		.4byte	.LASF32
 2262 015a 06       		.sleb128 6
 2263 015b 00       		.byte	0
 2264 015c 03       		.uleb128 0x3
 2265 015d 36000000 		.4byte	.LASF33
 2266 0161 06       		.byte	0x6
 2267 0162 3D       		.byte	0x3d
 2268 0163 25010000 		.4byte	0x125
 2269 0167 0B       		.uleb128 0xb
 2270 0168 79000000 		.4byte	.LASF34
 2271 016c 01       		.byte	0x1
 2272 016d 5E       		.byte	0x5e
 2273 016e 00000000 		.4byte	.LFB63
 2274 0172 20000000 		.4byte	.LFE63-.LFB63
 2275 0176 01       		.uleb128 0x1
 2276 0177 9C       		.byte	0x9c
 2277 0178 0C       		.uleb128 0xc
 2278 0179 D9030000 		.4byte	.LASF35
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 53


 2279 017d 01       		.byte	0x1
 2280 017e 65       		.byte	0x65
 2281 017f 00000000 		.4byte	.LFB64
 2282 0183 38000000 		.4byte	.LFE64-.LFB64
 2283 0187 01       		.uleb128 0x1
 2284 0188 9C       		.byte	0x9c
 2285 0189 0C       		.uleb128 0xc
 2286 018a 05030000 		.4byte	.LASF36
 2287 018e 01       		.byte	0x1
 2288 018f 6E       		.byte	0x6e
 2289 0190 00000000 		.4byte	.LFB65
 2290 0194 80000000 		.4byte	.LFE65-.LFB65
 2291 0198 01       		.uleb128 0x1
 2292 0199 9C       		.byte	0x9c
 2293 019a 0B       		.uleb128 0xb
 2294 019b B5030000 		.4byte	.LASF37
 2295 019f 01       		.byte	0x1
 2296 01a0 7F       		.byte	0x7f
 2297 01a1 00000000 		.4byte	.LFB66
 2298 01a5 50000000 		.4byte	.LFE66-.LFB66
 2299 01a9 01       		.uleb128 0x1
 2300 01aa 9C       		.byte	0x9c
 2301 01ab 0C       		.uleb128 0xc
 2302 01ac 92030000 		.4byte	.LASF38
 2303 01b0 01       		.byte	0x1
 2304 01b1 89       		.byte	0x89
 2305 01b2 00000000 		.4byte	.LFB67
 2306 01b6 58000000 		.4byte	.LFE67-.LFB67
 2307 01ba 01       		.uleb128 0x1
 2308 01bb 9C       		.byte	0x9c
 2309 01bc 0D       		.uleb128 0xd
 2310 01bd 74000000 		.4byte	.LASF87
 2311 01c1 01       		.byte	0x1
 2312 01c2 91       		.byte	0x91
 2313 01c3 89000000 		.4byte	0x89
 2314 01c7 00000000 		.4byte	.LFB68
 2315 01cb 900B0000 		.4byte	.LFE68-.LFB68
 2316 01cf 01       		.uleb128 0x1
 2317 01d0 9C       		.byte	0x9c
 2318 01d1 BD030000 		.4byte	0x3bd
 2319 01d5 0E       		.uleb128 0xe
 2320 01d6 6E756D00 		.ascii	"num\000"
 2321 01da 01       		.byte	0x1
 2322 01db 93       		.byte	0x93
 2323 01dc 89000000 		.4byte	0x89
 2324 01e0 02       		.uleb128 0x2
 2325 01e1 91       		.byte	0x91
 2326 01e2 60       		.sleb128 -32
 2327 01e3 0F       		.uleb128 0xf
 2328 01e4 D3000000 		.4byte	.LASF39
 2329 01e8 01       		.byte	0x1
 2330 01e9 93       		.byte	0x93
 2331 01ea 89000000 		.4byte	0x89
 2332 01ee 02       		.uleb128 0x2
 2333 01ef 91       		.byte	0x91
 2334 01f0 5C       		.sleb128 -36
 2335 01f1 0F       		.uleb128 0xf
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 54


 2336 01f2 A2010000 		.4byte	.LASF40
 2337 01f6 01       		.byte	0x1
 2338 01f7 94       		.byte	0x94
 2339 01f8 DB000000 		.4byte	0xdb
 2340 01fc 02       		.uleb128 0x2
 2341 01fd 91       		.byte	0x91
 2342 01fe 58       		.sleb128 -40
 2343 01ff 0F       		.uleb128 0xf
 2344 0200 54020000 		.4byte	.LASF41
 2345 0204 01       		.byte	0x1
 2346 0205 94       		.byte	0x94
 2347 0206 DB000000 		.4byte	0xdb
 2348 020a 02       		.uleb128 0x2
 2349 020b 91       		.byte	0x91
 2350 020c 54       		.sleb128 -44
 2351 020d 0F       		.uleb128 0xf
 2352 020e A1030000 		.4byte	.LASF42
 2353 0212 01       		.byte	0x1
 2354 0213 94       		.byte	0x94
 2355 0214 DB000000 		.4byte	0xdb
 2356 0218 02       		.uleb128 0x2
 2357 0219 91       		.byte	0x91
 2358 021a 50       		.sleb128 -48
 2359 021b 0F       		.uleb128 0xf
 2360 021c 9D000000 		.4byte	.LASF43
 2361 0220 01       		.byte	0x1
 2362 0221 94       		.byte	0x94
 2363 0222 DB000000 		.4byte	0xdb
 2364 0226 02       		.uleb128 0x2
 2365 0227 91       		.byte	0x91
 2366 0228 6C       		.sleb128 -20
 2367 0229 0E       		.uleb128 0xe
 2368 022a 62756600 		.ascii	"buf\000"
 2369 022e 01       		.byte	0x1
 2370 022f 95       		.byte	0x95
 2371 0230 BD030000 		.4byte	0x3bd
 2372 0234 03       		.uleb128 0x3
 2373 0235 91       		.byte	0x91
 2374 0236 947F     		.sleb128 -108
 2375 0238 0F       		.uleb128 0xf
 2376 0239 5C030000 		.4byte	.LASF44
 2377 023d 01       		.byte	0x1
 2378 023e 95       		.byte	0x95
 2379 023f CD030000 		.4byte	0x3cd
 2380 0243 03       		.uleb128 0x3
 2381 0244 91       		.byte	0x91
 2382 0245 807F     		.sleb128 -128
 2383 0247 0F       		.uleb128 0xf
 2384 0248 D5020000 		.4byte	.LASF45
 2385 024c 01       		.byte	0x1
 2386 024d 95       		.byte	0x95
 2387 024e DD030000 		.4byte	0x3dd
 2388 0252 03       		.uleb128 0x3
 2389 0253 91       		.byte	0x91
 2390 0254 F07E     		.sleb128 -144
 2391 0256 0F       		.uleb128 0xf
 2392 0257 78030000 		.4byte	.LASF46
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 55


 2393 025b 01       		.byte	0x1
 2394 025c 96       		.byte	0x96
 2395 025d ED030000 		.4byte	0x3ed
 2396 0261 03       		.uleb128 0x3
 2397 0262 91       		.byte	0x91
 2398 0263 DC7E     		.sleb128 -164
 2399 0265 0F       		.uleb128 0xf
 2400 0266 F3030000 		.4byte	.LASF47
 2401 026a 01       		.byte	0x1
 2402 026b 97       		.byte	0x97
 2403 026c DD030000 		.4byte	0x3dd
 2404 0270 03       		.uleb128 0x3
 2405 0271 91       		.byte	0x91
 2406 0272 CC7E     		.sleb128 -180
 2407 0274 0F       		.uleb128 0xf
 2408 0275 8E000000 		.4byte	.LASF48
 2409 0279 01       		.byte	0x1
 2410 027a 98       		.byte	0x98
 2411 027b FD030000 		.4byte	0x3fd
 2412 027f 03       		.uleb128 0x3
 2413 0280 91       		.byte	0x91
 2414 0281 B87E     		.sleb128 -200
 2415 0283 0F       		.uleb128 0xf
 2416 0284 ED020000 		.4byte	.LASF49
 2417 0288 01       		.byte	0x1
 2418 0289 99       		.byte	0x99
 2419 028a FD030000 		.4byte	0x3fd
 2420 028e 03       		.uleb128 0x3
 2421 028f 91       		.byte	0x91
 2422 0290 A47E     		.sleb128 -220
 2423 0292 0F       		.uleb128 0xf
 2424 0293 BA010000 		.4byte	.LASF50
 2425 0297 01       		.byte	0x1
 2426 0298 9A       		.byte	0x9a
 2427 0299 0D040000 		.4byte	0x40d
 2428 029d 03       		.uleb128 0x3
 2429 029e 91       		.byte	0x91
 2430 029f 947E     		.sleb128 -236
 2431 02a1 0F       		.uleb128 0xf
 2432 02a2 E2000000 		.4byte	.LASF51
 2433 02a6 01       		.byte	0x1
 2434 02a7 9B       		.byte	0x9b
 2435 02a8 89000000 		.4byte	0x89
 2436 02ac 02       		.uleb128 0x2
 2437 02ad 91       		.byte	0x91
 2438 02ae 68       		.sleb128 -24
 2439 02af 10       		.uleb128 0x10
 2440 02b0 617800   		.ascii	"ax\000"
 2441 02b3 01       		.byte	0x1
 2442 02b4 9D       		.byte	0x9d
 2443 02b5 A2000000 		.4byte	0xa2
 2444 02b9 10       		.uleb128 0x10
 2445 02ba 617900   		.ascii	"ay\000"
 2446 02bd 01       		.byte	0x1
 2447 02be 9D       		.byte	0x9d
 2448 02bf A2000000 		.4byte	0xa2
 2449 02c3 0E       		.uleb128 0xe
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 56


 2450 02c4 617A00   		.ascii	"az\000"
 2451 02c7 01       		.byte	0x1
 2452 02c8 9D       		.byte	0x9d
 2453 02c9 A2000000 		.4byte	0xa2
 2454 02cd 02       		.uleb128 0x2
 2455 02ce 91       		.byte	0x91
 2456 02cf 46       		.sleb128 -58
 2457 02d0 10       		.uleb128 0x10
 2458 02d1 6900     		.ascii	"i\000"
 2459 02d3 01       		.byte	0x1
 2460 02d4 9D       		.byte	0x9d
 2461 02d5 A2000000 		.4byte	0xa2
 2462 02d9 10       		.uleb128 0x10
 2463 02da 677800   		.ascii	"gx\000"
 2464 02dd 01       		.byte	0x1
 2465 02de 9E       		.byte	0x9e
 2466 02df A2000000 		.4byte	0xa2
 2467 02e3 10       		.uleb128 0x10
 2468 02e4 677900   		.ascii	"gy\000"
 2469 02e7 01       		.byte	0x1
 2470 02e8 9E       		.byte	0x9e
 2471 02e9 A2000000 		.4byte	0xa2
 2472 02ed 10       		.uleb128 0x10
 2473 02ee 677A00   		.ascii	"gz\000"
 2474 02f1 01       		.byte	0x1
 2475 02f2 9E       		.byte	0x9e
 2476 02f3 A2000000 		.4byte	0xa2
 2477 02f7 0F       		.uleb128 0xf
 2478 02f8 E4020000 		.4byte	.LASF52
 2479 02fc 01       		.byte	0x1
 2480 02fd 9F       		.byte	0x9f
 2481 02fe A2000000 		.4byte	0xa2
 2482 0302 02       		.uleb128 0x2
 2483 0303 91       		.byte	0x91
 2484 0304 4E       		.sleb128 -50
 2485 0305 0F       		.uleb128 0xf
 2486 0306 9D010000 		.4byte	.LASF53
 2487 030a 01       		.byte	0x1
 2488 030b A0       		.byte	0xa0
 2489 030c 89000000 		.4byte	0x89
 2490 0310 03       		.uleb128 0x3
 2491 0311 91       		.byte	0x91
 2492 0312 907E     		.sleb128 -240
 2493 0314 0F       		.uleb128 0xf
 2494 0315 D0020000 		.4byte	.LASF54
 2495 0319 01       		.byte	0x1
 2496 031a A0       		.byte	0xa0
 2497 031b 89000000 		.4byte	0x89
 2498 031f 02       		.uleb128 0x2
 2499 0320 91       		.byte	0x91
 2500 0321 48       		.sleb128 -56
 2501 0322 0F       		.uleb128 0xf
 2502 0323 C7000000 		.4byte	.LASF55
 2503 0327 01       		.byte	0x1
 2504 0328 FF       		.byte	0xff
 2505 0329 89000000 		.4byte	0x89
 2506 032d 02       		.uleb128 0x2
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 57


 2507 032e 91       		.byte	0x91
 2508 032f 64       		.sleb128 -28
 2509 0330 11       		.uleb128 0x11
 2510 0331 32020000 		.4byte	.LBB2
 2511 0335 36090000 		.4byte	.LBE2-.LBB2
 2512 0339 12       		.uleb128 0x12
 2513 033a 7400     		.ascii	"t\000"
 2514 033c 01       		.byte	0x1
 2515 033d 3901     		.2byte	0x139
 2516 033f 89000000 		.4byte	0x89
 2517 0343 03       		.uleb128 0x3
 2518 0344 91       		.byte	0x91
 2519 0345 8C7E     		.sleb128 -244
 2520 0347 13       		.uleb128 0x13
 2521 0348 68030000 		.4byte	.LBB3
 2522 034c 9C000000 		.4byte	.LBE3-.LBB3
 2523 0350 65030000 		.4byte	0x365
 2524 0354 14       		.uleb128 0x14
 2525 0355 3D000000 		.4byte	.LASF56
 2526 0359 01       		.byte	0x1
 2527 035a 1501     		.2byte	0x115
 2528 035c 1D040000 		.4byte	0x41d
 2529 0360 03       		.uleb128 0x3
 2530 0361 91       		.byte	0x91
 2531 0362 D07D     		.sleb128 -304
 2532 0364 00       		.byte	0
 2533 0365 13       		.uleb128 0x13
 2534 0366 5C070000 		.4byte	.LBB4
 2535 036a 4A010000 		.4byte	.LBE4-.LBB4
 2536 036e 83030000 		.4byte	0x383
 2537 0372 14       		.uleb128 0x14
 2538 0373 3D000000 		.4byte	.LASF56
 2539 0377 01       		.byte	0x1
 2540 0378 8E01     		.2byte	0x18e
 2541 037a 1D040000 		.4byte	0x41d
 2542 037e 03       		.uleb128 0x3
 2543 037f 91       		.byte	0x91
 2544 0380 D07D     		.sleb128 -304
 2545 0382 00       		.byte	0
 2546 0383 13       		.uleb128 0x13
 2547 0384 4C090000 		.4byte	.LBB5
 2548 0388 F2000000 		.4byte	.LBE5-.LBB5
 2549 038c A1030000 		.4byte	0x3a1
 2550 0390 14       		.uleb128 0x14
 2551 0391 3D000000 		.4byte	.LASF56
 2552 0395 01       		.byte	0x1
 2553 0396 D801     		.2byte	0x1d8
 2554 0398 1D040000 		.4byte	0x41d
 2555 039c 03       		.uleb128 0x3
 2556 039d 91       		.byte	0x91
 2557 039e D07D     		.sleb128 -304
 2558 03a0 00       		.byte	0
 2559 03a1 11       		.uleb128 0x11
 2560 03a2 840A0000 		.4byte	.LBB6
 2561 03a6 AA000000 		.4byte	.LBE6-.LBB6
 2562 03aa 14       		.uleb128 0x14
 2563 03ab 3D000000 		.4byte	.LASF56
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 58


 2564 03af 01       		.byte	0x1
 2565 03b0 FE01     		.2byte	0x1fe
 2566 03b2 1D040000 		.4byte	0x41d
 2567 03b6 03       		.uleb128 0x3
 2568 03b7 91       		.byte	0x91
 2569 03b8 D07D     		.sleb128 -304
 2570 03ba 00       		.byte	0
 2571 03bb 00       		.byte	0
 2572 03bc 00       		.byte	0
 2573 03bd 15       		.uleb128 0x15
 2574 03be E9000000 		.4byte	0xe9
 2575 03c2 CD030000 		.4byte	0x3cd
 2576 03c6 16       		.uleb128 0x16
 2577 03c7 01010000 		.4byte	0x101
 2578 03cb 31       		.byte	0x31
 2579 03cc 00       		.byte	0
 2580 03cd 15       		.uleb128 0x15
 2581 03ce E9000000 		.4byte	0xe9
 2582 03d2 DD030000 		.4byte	0x3dd
 2583 03d6 16       		.uleb128 0x16
 2584 03d7 01010000 		.4byte	0x101
 2585 03db 13       		.byte	0x13
 2586 03dc 00       		.byte	0
 2587 03dd 15       		.uleb128 0x15
 2588 03de E9000000 		.4byte	0xe9
 2589 03e2 ED030000 		.4byte	0x3ed
 2590 03e6 16       		.uleb128 0x16
 2591 03e7 01010000 		.4byte	0x101
 2592 03eb 0D       		.byte	0xd
 2593 03ec 00       		.byte	0
 2594 03ed 15       		.uleb128 0x15
 2595 03ee E9000000 		.4byte	0xe9
 2596 03f2 FD030000 		.4byte	0x3fd
 2597 03f6 16       		.uleb128 0x16
 2598 03f7 01010000 		.4byte	0x101
 2599 03fb 12       		.byte	0x12
 2600 03fc 00       		.byte	0
 2601 03fd 15       		.uleb128 0x15
 2602 03fe E9000000 		.4byte	0xe9
 2603 0402 0D040000 		.4byte	0x40d
 2604 0406 16       		.uleb128 0x16
 2605 0407 01010000 		.4byte	0x101
 2606 040b 10       		.byte	0x10
 2607 040c 00       		.byte	0
 2608 040d 15       		.uleb128 0x15
 2609 040e E9000000 		.4byte	0xe9
 2610 0412 1D040000 		.4byte	0x41d
 2611 0416 16       		.uleb128 0x16
 2612 0417 01010000 		.4byte	0x101
 2613 041b 0F       		.byte	0xf
 2614 041c 00       		.byte	0
 2615 041d 15       		.uleb128 0x15
 2616 041e E9000000 		.4byte	0xe9
 2617 0422 2D040000 		.4byte	0x42d
 2618 0426 16       		.uleb128 0x16
 2619 0427 01010000 		.4byte	0x101
 2620 042b 3B       		.byte	0x3b
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 59


 2621 042c 00       		.byte	0
 2622 042d 17       		.uleb128 0x17
 2623 042e C2030000 		.4byte	.LASF57
 2624 0432 07       		.byte	0x7
 2625 0433 9606     		.2byte	0x696
 2626 0435 39040000 		.4byte	0x439
 2627 0439 06       		.uleb128 0x6
 2628 043a AD000000 		.4byte	0xad
 2629 043e 18       		.uleb128 0x18
 2630 043f 48000000 		.4byte	.LASF58
 2631 0443 08       		.byte	0x8
 2632 0444 9101     		.2byte	0x191
 2633 0446 97000000 		.4byte	0x97
 2634 044a 05       		.uleb128 0x5
 2635 044b 03       		.byte	0x3
 2636 044c 00000000 		.4byte	devAddr
 2637 0450 15       		.uleb128 0x15
 2638 0451 97000000 		.4byte	0x97
 2639 0455 60040000 		.4byte	0x460
 2640 0459 16       		.uleb128 0x16
 2641 045a 01010000 		.4byte	0x101
 2642 045e 15       		.byte	0x15
 2643 045f 00       		.byte	0
 2644 0460 18       		.uleb128 0x18
 2645 0461 FE020000 		.4byte	.LASF59
 2646 0465 08       		.byte	0x8
 2647 0466 9201     		.2byte	0x192
 2648 0468 50040000 		.4byte	0x450
 2649 046c 05       		.uleb128 0x5
 2650 046d 03       		.byte	0x3
 2651 046e 00000000 		.4byte	buffer
 2652 0472 19       		.uleb128 0x19
 2653 0473 43000000 		.4byte	.LASF60
 2654 0477 01       		.byte	0x1
 2655 0478 32       		.byte	0x32
 2656 0479 B8000000 		.4byte	0xb8
 2657 047d 05       		.uleb128 0x5
 2658 047e 03       		.byte	0x3
 2659 047f 00000000 		.4byte	Addr
 2660 0483 1A       		.uleb128 0x1a
 2661 0484 696400   		.ascii	"id\000"
 2662 0487 01       		.byte	0x1
 2663 0488 33       		.byte	0x33
 2664 0489 62000000 		.4byte	0x62
 2665 048d 05       		.uleb128 0x5
 2666 048e 03       		.byte	0x3
 2667 048f 00000000 		.4byte	id
 2668 0493 19       		.uleb128 0x19
 2669 0494 B1010000 		.4byte	.LASF61
 2670 0498 01       		.byte	0x1
 2671 0499 33       		.byte	0x33
 2672 049a 62000000 		.4byte	0x62
 2673 049e 05       		.uleb128 0x5
 2674 049f 03       		.byte	0x3
 2675 04a0 00000000 		.4byte	press_id
 2676 04a4 19       		.uleb128 0x19
 2677 04a5 3D020000 		.4byte	.LASF62
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 60


 2678 04a9 01       		.byte	0x1
 2679 04aa 34       		.byte	0x34
 2680 04ab 62000000 		.4byte	0x62
 2681 04af 05       		.uleb128 0x5
 2682 04b0 03       		.byte	0x3
 2683 04b1 00000000 		.4byte	data_time
 2684 04b5 1A       		.uleb128 0x1a
 2685 04b6 73756D00 		.ascii	"sum\000"
 2686 04ba 01       		.byte	0x1
 2687 04bb 36       		.byte	0x36
 2688 04bc 62000000 		.4byte	0x62
 2689 04c0 05       		.uleb128 0x5
 2690 04c1 03       		.byte	0x3
 2691 04c2 00000000 		.4byte	sum
 2692 04c6 19       		.uleb128 0x19
 2693 04c7 C9010000 		.4byte	.LASF63
 2694 04cb 01       		.byte	0x1
 2695 04cc 37       		.byte	0x37
 2696 04cd DB000000 		.4byte	0xdb
 2697 04d1 05       		.uleb128 0x5
 2698 04d2 03       		.byte	0x3
 2699 04d3 00000000 		.4byte	pressure_sum
 2700 04d7 19       		.uleb128 0x19
 2701 04d8 FE000000 		.4byte	.LASF64
 2702 04dc 01       		.byte	0x1
 2703 04dd 38       		.byte	0x38
 2704 04de A2000000 		.4byte	0xa2
 2705 04e2 05       		.uleb128 0x5
 2706 04e3 03       		.byte	0x3
 2707 04e4 00000000 		.4byte	average
 2708 04e8 19       		.uleb128 0x19
 2709 04e9 A8030000 		.4byte	.LASF65
 2710 04ed 01       		.byte	0x1
 2711 04ee 39       		.byte	0x39
 2712 04ef F9040000 		.4byte	0x4f9
 2713 04f3 05       		.uleb128 0x5
 2714 04f4 03       		.byte	0x3
 2715 04f5 00000000 		.4byte	collect_flag
 2716 04f9 02       		.uleb128 0x2
 2717 04fa 01       		.byte	0x1
 2718 04fb 02       		.byte	0x2
 2719 04fc 98020000 		.4byte	.LASF66
 2720 0500 19       		.uleb128 0x19
 2721 0501 CF030000 		.4byte	.LASF67
 2722 0505 01       		.byte	0x1
 2723 0506 3A       		.byte	0x3a
 2724 0507 F9040000 		.4byte	0x4f9
 2725 050b 05       		.uleb128 0x5
 2726 050c 03       		.byte	0x3
 2727 050d 00000000 		.4byte	wait_flag
 2728 0511 19       		.uleb128 0x19
 2729 0512 B4000000 		.4byte	.LASF68
 2730 0516 01       		.byte	0x1
 2731 0517 3B       		.byte	0x3b
 2732 0518 F9040000 		.4byte	0x4f9
 2733 051c 05       		.uleb128 0x5
 2734 051d 03       		.byte	0x3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 61


 2735 051e 00000000 		.4byte	PANIC_flag
 2736 0522 19       		.uleb128 0x19
 2737 0523 8C030000 		.4byte	.LASF69
 2738 0527 01       		.byte	0x1
 2739 0528 3D       		.byte	0x3d
 2740 0529 5C010000 		.4byte	0x15c
 2741 052d 05       		.uleb128 0x5
 2742 052e 03       		.byte	0x3
 2743 052f 00000000 		.4byte	STATE
 2744 0533 19       		.uleb128 0x19
 2745 0534 59020000 		.4byte	.LASF70
 2746 0538 01       		.byte	0x1
 2747 0539 3E       		.byte	0x3e
 2748 053a 97000000 		.4byte	0x97
 2749 053e 05       		.uleb128 0x5
 2750 053f 03       		.byte	0x3
 2751 0540 00000000 		.4byte	testnum
 2752 0544 19       		.uleb128 0x19
 2753 0545 07020000 		.4byte	.LASF71
 2754 0549 01       		.byte	0x1
 2755 054a 3E       		.byte	0x3e
 2756 054b 97000000 		.4byte	0x97
 2757 054f 05       		.uleb128 0x5
 2758 0550 03       		.byte	0x3
 2759 0551 00000000 		.4byte	countdown
 2760 0555 19       		.uleb128 0x19
 2761 0556 14000000 		.4byte	.LASF72
 2762 055a 01       		.byte	0x1
 2763 055b 3E       		.byte	0x3e
 2764 055c 97000000 		.4byte	0x97
 2765 0560 05       		.uleb128 0x5
 2766 0561 03       		.byte	0x3
 2767 0562 00000000 		.4byte	update_Data
 2768 0566 15       		.uleb128 0x15
 2769 0567 97000000 		.4byte	0x97
 2770 056b 76050000 		.4byte	0x576
 2771 056f 16       		.uleb128 0x16
 2772 0570 01010000 		.4byte	0x101
 2773 0574 3F       		.byte	0x3f
 2774 0575 00       		.byte	0
 2775 0576 19       		.uleb128 0x19
 2776 0577 20000000 		.4byte	.LASF73
 2777 057b 01       		.byte	0x1
 2778 057c 3F       		.byte	0x3f
 2779 057d 66050000 		.4byte	0x566
 2780 0581 05       		.uleb128 0x5
 2781 0582 03       		.byte	0x3
 2782 0583 00000000 		.4byte	RxBuffer
 2783 0587 19       		.uleb128 0x19
 2784 0588 0A000000 		.4byte	.LASF74
 2785 058c 01       		.byte	0x1
 2786 058d 40       		.byte	0x40
 2787 058e 89000000 		.4byte	0x89
 2788 0592 05       		.uleb128 0x5
 2789 0593 03       		.byte	0x3
 2790 0594 00000000 		.4byte	msg_count
 2791 0598 19       		.uleb128 0x19
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 62


 2792 0599 F7020000 		.4byte	.LASF75
 2793 059d 01       		.byte	0x1
 2794 059e 40       		.byte	0x40
 2795 059f 89000000 		.4byte	0x89
 2796 05a3 05       		.uleb128 0x5
 2797 05a4 03       		.byte	0x3
 2798 05a5 00000000 		.4byte	rxflag
 2799 05a9 19       		.uleb128 0x19
 2800 05aa 44030000 		.4byte	.LASF76
 2801 05ae 01       		.byte	0x1
 2802 05af 40       		.byte	0x40
 2803 05b0 89000000 		.4byte	0x89
 2804 05b4 05       		.uleb128 0x5
 2805 05b5 03       		.byte	0x3
 2806 05b6 00000000 		.4byte	bytes
 2807 05ba 19       		.uleb128 0x19
 2808 05bb 6B000000 		.4byte	.LASF77
 2809 05bf 01       		.byte	0x1
 2810 05c0 40       		.byte	0x40
 2811 05c1 89000000 		.4byte	0x89
 2812 05c5 05       		.uleb128 0x5
 2813 05c6 03       		.byte	0x3
 2814 05c7 00000000 		.4byte	dataflag
 2815 05cb 19       		.uleb128 0x19
 2816 05cc 50000000 		.4byte	.LASF78
 2817 05d0 01       		.byte	0x1
 2818 05d1 40       		.byte	0x40
 2819 05d2 89000000 		.4byte	0x89
 2820 05d6 05       		.uleb128 0x5
 2821 05d7 03       		.byte	0x3
 2822 05d8 00000000 		.4byte	transmit_flag
 2823 05dc 19       		.uleb128 0x19
 2824 05dd DE020000 		.4byte	.LASF79
 2825 05e1 01       		.byte	0x1
 2826 05e2 41       		.byte	0x41
 2827 05e3 89000000 		.4byte	0x89
 2828 05e7 05       		.uleb128 0x5
 2829 05e8 03       		.byte	0x3
 2830 05e9 00000000 		.4byte	depth
 2831 05ed 19       		.uleb128 0x19
 2832 05ee 5E000000 		.4byte	.LASF80
 2833 05f2 01       		.byte	0x1
 2834 05f3 41       		.byte	0x41
 2835 05f4 89000000 		.4byte	0x89
 2836 05f8 05       		.uleb128 0x5
 2837 05f9 03       		.byte	0x3
 2838 05fa 00000000 		.4byte	reset
 2839 05fe 15       		.uleb128 0x15
 2840 05ff E9000000 		.4byte	0xe9
 2841 0603 0E060000 		.4byte	0x60e
 2842 0607 16       		.uleb128 0x16
 2843 0608 01010000 		.4byte	0x101
 2844 060c 0A       		.byte	0xa
 2845 060d 00       		.byte	0
 2846 060e 19       		.uleb128 0x19
 2847 060f 98000000 		.4byte	.LASF81
 2848 0613 01       		.byte	0x1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 63


 2849 0614 42       		.byte	0x42
 2850 0615 FE050000 		.4byte	0x5fe
 2851 0619 05       		.uleb128 0x5
 2852 061a 03       		.byte	0x3
 2853 061b 00000000 		.4byte	file
 2854 061f 15       		.uleb128 0x15
 2855 0620 E9000000 		.4byte	0xe9
 2856 0624 2F060000 		.4byte	0x62f
 2857 0628 16       		.uleb128 0x16
 2858 0629 01010000 		.4byte	0x101
 2859 062d 09       		.byte	0x9
 2860 062e 00       		.byte	0
 2861 062f 19       		.uleb128 0x19
 2862 0630 AA010000 		.4byte	.LASF82
 2863 0634 01       		.byte	0x1
 2864 0635 43       		.byte	0x43
 2865 0636 1F060000 		.4byte	0x61f
 2866 063a 05       		.uleb128 0x5
 2867 063b 03       		.byte	0x3
 2868 063c 00000000 		.4byte	volume
 2869 0640 19       		.uleb128 0x19
 2870 0641 EC030000 		.4byte	.LASF83
 2871 0645 01       		.byte	0x1
 2872 0646 44       		.byte	0x44
 2873 0647 18010000 		.4byte	0x118
 2874 064b 05       		.uleb128 0x5
 2875 064c 03       		.byte	0x3
 2876 064d 00000000 		.4byte	fsfile
 2877 0651 00       		.byte	0
 2878              		.section	.debug_abbrev,"",%progbits
 2879              	.Ldebug_abbrev0:
 2880 0000 01       		.uleb128 0x1
 2881 0001 11       		.uleb128 0x11
 2882 0002 01       		.byte	0x1
 2883 0003 25       		.uleb128 0x25
 2884 0004 0E       		.uleb128 0xe
 2885 0005 13       		.uleb128 0x13
 2886 0006 0B       		.uleb128 0xb
 2887 0007 03       		.uleb128 0x3
 2888 0008 0E       		.uleb128 0xe
 2889 0009 1B       		.uleb128 0x1b
 2890 000a 0E       		.uleb128 0xe
 2891 000b 55       		.uleb128 0x55
 2892 000c 17       		.uleb128 0x17
 2893 000d 11       		.uleb128 0x11
 2894 000e 01       		.uleb128 0x1
 2895 000f 10       		.uleb128 0x10
 2896 0010 17       		.uleb128 0x17
 2897 0011 00       		.byte	0
 2898 0012 00       		.byte	0
 2899 0013 02       		.uleb128 0x2
 2900 0014 24       		.uleb128 0x24
 2901 0015 00       		.byte	0
 2902 0016 0B       		.uleb128 0xb
 2903 0017 0B       		.uleb128 0xb
 2904 0018 3E       		.uleb128 0x3e
 2905 0019 0B       		.uleb128 0xb
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 64


 2906 001a 03       		.uleb128 0x3
 2907 001b 0E       		.uleb128 0xe
 2908 001c 00       		.byte	0
 2909 001d 00       		.byte	0
 2910 001e 03       		.uleb128 0x3
 2911 001f 16       		.uleb128 0x16
 2912 0020 00       		.byte	0
 2913 0021 03       		.uleb128 0x3
 2914 0022 0E       		.uleb128 0xe
 2915 0023 3A       		.uleb128 0x3a
 2916 0024 0B       		.uleb128 0xb
 2917 0025 3B       		.uleb128 0x3b
 2918 0026 0B       		.uleb128 0xb
 2919 0027 49       		.uleb128 0x49
 2920 0028 13       		.uleb128 0x13
 2921 0029 00       		.byte	0
 2922 002a 00       		.byte	0
 2923 002b 04       		.uleb128 0x4
 2924 002c 24       		.uleb128 0x24
 2925 002d 00       		.byte	0
 2926 002e 0B       		.uleb128 0xb
 2927 002f 0B       		.uleb128 0xb
 2928 0030 3E       		.uleb128 0x3e
 2929 0031 0B       		.uleb128 0xb
 2930 0032 03       		.uleb128 0x3
 2931 0033 08       		.uleb128 0x8
 2932 0034 00       		.byte	0
 2933 0035 00       		.byte	0
 2934 0036 05       		.uleb128 0x5
 2935 0037 16       		.uleb128 0x16
 2936 0038 00       		.byte	0
 2937 0039 03       		.uleb128 0x3
 2938 003a 0E       		.uleb128 0xe
 2939 003b 3A       		.uleb128 0x3a
 2940 003c 0B       		.uleb128 0xb
 2941 003d 3B       		.uleb128 0x3b
 2942 003e 05       		.uleb128 0x5
 2943 003f 49       		.uleb128 0x49
 2944 0040 13       		.uleb128 0x13
 2945 0041 00       		.byte	0
 2946 0042 00       		.byte	0
 2947 0043 06       		.uleb128 0x6
 2948 0044 35       		.uleb128 0x35
 2949 0045 00       		.byte	0
 2950 0046 49       		.uleb128 0x49
 2951 0047 13       		.uleb128 0x13
 2952 0048 00       		.byte	0
 2953 0049 00       		.byte	0
 2954 004a 07       		.uleb128 0x7
 2955 004b 13       		.uleb128 0x13
 2956 004c 00       		.byte	0
 2957 004d 03       		.uleb128 0x3
 2958 004e 0E       		.uleb128 0xe
 2959 004f 3C       		.uleb128 0x3c
 2960 0050 19       		.uleb128 0x19
 2961 0051 00       		.byte	0
 2962 0052 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 65


 2963 0053 08       		.uleb128 0x8
 2964 0054 0F       		.uleb128 0xf
 2965 0055 00       		.byte	0
 2966 0056 0B       		.uleb128 0xb
 2967 0057 0B       		.uleb128 0xb
 2968 0058 49       		.uleb128 0x49
 2969 0059 13       		.uleb128 0x13
 2970 005a 00       		.byte	0
 2971 005b 00       		.byte	0
 2972 005c 09       		.uleb128 0x9
 2973 005d 04       		.uleb128 0x4
 2974 005e 01       		.byte	0x1
 2975 005f 03       		.uleb128 0x3
 2976 0060 0E       		.uleb128 0xe
 2977 0061 0B       		.uleb128 0xb
 2978 0062 0B       		.uleb128 0xb
 2979 0063 3A       		.uleb128 0x3a
 2980 0064 0B       		.uleb128 0xb
 2981 0065 3B       		.uleb128 0x3b
 2982 0066 0B       		.uleb128 0xb
 2983 0067 01       		.uleb128 0x1
 2984 0068 13       		.uleb128 0x13
 2985 0069 00       		.byte	0
 2986 006a 00       		.byte	0
 2987 006b 0A       		.uleb128 0xa
 2988 006c 28       		.uleb128 0x28
 2989 006d 00       		.byte	0
 2990 006e 03       		.uleb128 0x3
 2991 006f 0E       		.uleb128 0xe
 2992 0070 1C       		.uleb128 0x1c
 2993 0071 0D       		.uleb128 0xd
 2994 0072 00       		.byte	0
 2995 0073 00       		.byte	0
 2996 0074 0B       		.uleb128 0xb
 2997 0075 2E       		.uleb128 0x2e
 2998 0076 00       		.byte	0
 2999 0077 3F       		.uleb128 0x3f
 3000 0078 19       		.uleb128 0x19
 3001 0079 03       		.uleb128 0x3
 3002 007a 0E       		.uleb128 0xe
 3003 007b 3A       		.uleb128 0x3a
 3004 007c 0B       		.uleb128 0xb
 3005 007d 3B       		.uleb128 0x3b
 3006 007e 0B       		.uleb128 0xb
 3007 007f 27       		.uleb128 0x27
 3008 0080 19       		.uleb128 0x19
 3009 0081 11       		.uleb128 0x11
 3010 0082 01       		.uleb128 0x1
 3011 0083 12       		.uleb128 0x12
 3012 0084 06       		.uleb128 0x6
 3013 0085 40       		.uleb128 0x40
 3014 0086 18       		.uleb128 0x18
 3015 0087 9642     		.uleb128 0x2116
 3016 0089 19       		.uleb128 0x19
 3017 008a 00       		.byte	0
 3018 008b 00       		.byte	0
 3019 008c 0C       		.uleb128 0xc
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 66


 3020 008d 2E       		.uleb128 0x2e
 3021 008e 00       		.byte	0
 3022 008f 3F       		.uleb128 0x3f
 3023 0090 19       		.uleb128 0x19
 3024 0091 03       		.uleb128 0x3
 3025 0092 0E       		.uleb128 0xe
 3026 0093 3A       		.uleb128 0x3a
 3027 0094 0B       		.uleb128 0xb
 3028 0095 3B       		.uleb128 0x3b
 3029 0096 0B       		.uleb128 0xb
 3030 0097 27       		.uleb128 0x27
 3031 0098 19       		.uleb128 0x19
 3032 0099 11       		.uleb128 0x11
 3033 009a 01       		.uleb128 0x1
 3034 009b 12       		.uleb128 0x12
 3035 009c 06       		.uleb128 0x6
 3036 009d 40       		.uleb128 0x40
 3037 009e 18       		.uleb128 0x18
 3038 009f 9742     		.uleb128 0x2117
 3039 00a1 19       		.uleb128 0x19
 3040 00a2 00       		.byte	0
 3041 00a3 00       		.byte	0
 3042 00a4 0D       		.uleb128 0xd
 3043 00a5 2E       		.uleb128 0x2e
 3044 00a6 01       		.byte	0x1
 3045 00a7 3F       		.uleb128 0x3f
 3046 00a8 19       		.uleb128 0x19
 3047 00a9 03       		.uleb128 0x3
 3048 00aa 0E       		.uleb128 0xe
 3049 00ab 3A       		.uleb128 0x3a
 3050 00ac 0B       		.uleb128 0xb
 3051 00ad 3B       		.uleb128 0x3b
 3052 00ae 0B       		.uleb128 0xb
 3053 00af 49       		.uleb128 0x49
 3054 00b0 13       		.uleb128 0x13
 3055 00b1 11       		.uleb128 0x11
 3056 00b2 01       		.uleb128 0x1
 3057 00b3 12       		.uleb128 0x12
 3058 00b4 06       		.uleb128 0x6
 3059 00b5 40       		.uleb128 0x40
 3060 00b6 18       		.uleb128 0x18
 3061 00b7 9642     		.uleb128 0x2116
 3062 00b9 19       		.uleb128 0x19
 3063 00ba 01       		.uleb128 0x1
 3064 00bb 13       		.uleb128 0x13
 3065 00bc 00       		.byte	0
 3066 00bd 00       		.byte	0
 3067 00be 0E       		.uleb128 0xe
 3068 00bf 34       		.uleb128 0x34
 3069 00c0 00       		.byte	0
 3070 00c1 03       		.uleb128 0x3
 3071 00c2 08       		.uleb128 0x8
 3072 00c3 3A       		.uleb128 0x3a
 3073 00c4 0B       		.uleb128 0xb
 3074 00c5 3B       		.uleb128 0x3b
 3075 00c6 0B       		.uleb128 0xb
 3076 00c7 49       		.uleb128 0x49
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 67


 3077 00c8 13       		.uleb128 0x13
 3078 00c9 02       		.uleb128 0x2
 3079 00ca 18       		.uleb128 0x18
 3080 00cb 00       		.byte	0
 3081 00cc 00       		.byte	0
 3082 00cd 0F       		.uleb128 0xf
 3083 00ce 34       		.uleb128 0x34
 3084 00cf 00       		.byte	0
 3085 00d0 03       		.uleb128 0x3
 3086 00d1 0E       		.uleb128 0xe
 3087 00d2 3A       		.uleb128 0x3a
 3088 00d3 0B       		.uleb128 0xb
 3089 00d4 3B       		.uleb128 0x3b
 3090 00d5 0B       		.uleb128 0xb
 3091 00d6 49       		.uleb128 0x49
 3092 00d7 13       		.uleb128 0x13
 3093 00d8 02       		.uleb128 0x2
 3094 00d9 18       		.uleb128 0x18
 3095 00da 00       		.byte	0
 3096 00db 00       		.byte	0
 3097 00dc 10       		.uleb128 0x10
 3098 00dd 34       		.uleb128 0x34
 3099 00de 00       		.byte	0
 3100 00df 03       		.uleb128 0x3
 3101 00e0 08       		.uleb128 0x8
 3102 00e1 3A       		.uleb128 0x3a
 3103 00e2 0B       		.uleb128 0xb
 3104 00e3 3B       		.uleb128 0x3b
 3105 00e4 0B       		.uleb128 0xb
 3106 00e5 49       		.uleb128 0x49
 3107 00e6 13       		.uleb128 0x13
 3108 00e7 00       		.byte	0
 3109 00e8 00       		.byte	0
 3110 00e9 11       		.uleb128 0x11
 3111 00ea 0B       		.uleb128 0xb
 3112 00eb 01       		.byte	0x1
 3113 00ec 11       		.uleb128 0x11
 3114 00ed 01       		.uleb128 0x1
 3115 00ee 12       		.uleb128 0x12
 3116 00ef 06       		.uleb128 0x6
 3117 00f0 00       		.byte	0
 3118 00f1 00       		.byte	0
 3119 00f2 12       		.uleb128 0x12
 3120 00f3 34       		.uleb128 0x34
 3121 00f4 00       		.byte	0
 3122 00f5 03       		.uleb128 0x3
 3123 00f6 08       		.uleb128 0x8
 3124 00f7 3A       		.uleb128 0x3a
 3125 00f8 0B       		.uleb128 0xb
 3126 00f9 3B       		.uleb128 0x3b
 3127 00fa 05       		.uleb128 0x5
 3128 00fb 49       		.uleb128 0x49
 3129 00fc 13       		.uleb128 0x13
 3130 00fd 02       		.uleb128 0x2
 3131 00fe 18       		.uleb128 0x18
 3132 00ff 00       		.byte	0
 3133 0100 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 68


 3134 0101 13       		.uleb128 0x13
 3135 0102 0B       		.uleb128 0xb
 3136 0103 01       		.byte	0x1
 3137 0104 11       		.uleb128 0x11
 3138 0105 01       		.uleb128 0x1
 3139 0106 12       		.uleb128 0x12
 3140 0107 06       		.uleb128 0x6
 3141 0108 01       		.uleb128 0x1
 3142 0109 13       		.uleb128 0x13
 3143 010a 00       		.byte	0
 3144 010b 00       		.byte	0
 3145 010c 14       		.uleb128 0x14
 3146 010d 34       		.uleb128 0x34
 3147 010e 00       		.byte	0
 3148 010f 03       		.uleb128 0x3
 3149 0110 0E       		.uleb128 0xe
 3150 0111 3A       		.uleb128 0x3a
 3151 0112 0B       		.uleb128 0xb
 3152 0113 3B       		.uleb128 0x3b
 3153 0114 05       		.uleb128 0x5
 3154 0115 49       		.uleb128 0x49
 3155 0116 13       		.uleb128 0x13
 3156 0117 02       		.uleb128 0x2
 3157 0118 18       		.uleb128 0x18
 3158 0119 00       		.byte	0
 3159 011a 00       		.byte	0
 3160 011b 15       		.uleb128 0x15
 3161 011c 01       		.uleb128 0x1
 3162 011d 01       		.byte	0x1
 3163 011e 49       		.uleb128 0x49
 3164 011f 13       		.uleb128 0x13
 3165 0120 01       		.uleb128 0x1
 3166 0121 13       		.uleb128 0x13
 3167 0122 00       		.byte	0
 3168 0123 00       		.byte	0
 3169 0124 16       		.uleb128 0x16
 3170 0125 21       		.uleb128 0x21
 3171 0126 00       		.byte	0
 3172 0127 49       		.uleb128 0x49
 3173 0128 13       		.uleb128 0x13
 3174 0129 2F       		.uleb128 0x2f
 3175 012a 0B       		.uleb128 0xb
 3176 012b 00       		.byte	0
 3177 012c 00       		.byte	0
 3178 012d 17       		.uleb128 0x17
 3179 012e 34       		.uleb128 0x34
 3180 012f 00       		.byte	0
 3181 0130 03       		.uleb128 0x3
 3182 0131 0E       		.uleb128 0xe
 3183 0132 3A       		.uleb128 0x3a
 3184 0133 0B       		.uleb128 0xb
 3185 0134 3B       		.uleb128 0x3b
 3186 0135 05       		.uleb128 0x5
 3187 0136 49       		.uleb128 0x49
 3188 0137 13       		.uleb128 0x13
 3189 0138 3F       		.uleb128 0x3f
 3190 0139 19       		.uleb128 0x19
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 69


 3191 013a 3C       		.uleb128 0x3c
 3192 013b 19       		.uleb128 0x19
 3193 013c 00       		.byte	0
 3194 013d 00       		.byte	0
 3195 013e 18       		.uleb128 0x18
 3196 013f 34       		.uleb128 0x34
 3197 0140 00       		.byte	0
 3198 0141 03       		.uleb128 0x3
 3199 0142 0E       		.uleb128 0xe
 3200 0143 3A       		.uleb128 0x3a
 3201 0144 0B       		.uleb128 0xb
 3202 0145 3B       		.uleb128 0x3b
 3203 0146 05       		.uleb128 0x5
 3204 0147 49       		.uleb128 0x49
 3205 0148 13       		.uleb128 0x13
 3206 0149 3F       		.uleb128 0x3f
 3207 014a 19       		.uleb128 0x19
 3208 014b 02       		.uleb128 0x2
 3209 014c 18       		.uleb128 0x18
 3210 014d 00       		.byte	0
 3211 014e 00       		.byte	0
 3212 014f 19       		.uleb128 0x19
 3213 0150 34       		.uleb128 0x34
 3214 0151 00       		.byte	0
 3215 0152 03       		.uleb128 0x3
 3216 0153 0E       		.uleb128 0xe
 3217 0154 3A       		.uleb128 0x3a
 3218 0155 0B       		.uleb128 0xb
 3219 0156 3B       		.uleb128 0x3b
 3220 0157 0B       		.uleb128 0xb
 3221 0158 49       		.uleb128 0x49
 3222 0159 13       		.uleb128 0x13
 3223 015a 3F       		.uleb128 0x3f
 3224 015b 19       		.uleb128 0x19
 3225 015c 02       		.uleb128 0x2
 3226 015d 18       		.uleb128 0x18
 3227 015e 00       		.byte	0
 3228 015f 00       		.byte	0
 3229 0160 1A       		.uleb128 0x1a
 3230 0161 34       		.uleb128 0x34
 3231 0162 00       		.byte	0
 3232 0163 03       		.uleb128 0x3
 3233 0164 08       		.uleb128 0x8
 3234 0165 3A       		.uleb128 0x3a
 3235 0166 0B       		.uleb128 0xb
 3236 0167 3B       		.uleb128 0x3b
 3237 0168 0B       		.uleb128 0xb
 3238 0169 49       		.uleb128 0x49
 3239 016a 13       		.uleb128 0x13
 3240 016b 3F       		.uleb128 0x3f
 3241 016c 19       		.uleb128 0x19
 3242 016d 02       		.uleb128 0x2
 3243 016e 18       		.uleb128 0x18
 3244 016f 00       		.byte	0
 3245 0170 00       		.byte	0
 3246 0171 00       		.byte	0
 3247              		.section	.debug_aranges,"",%progbits
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 70


 3248 0000 44000000 		.4byte	0x44
 3249 0004 0200     		.2byte	0x2
 3250 0006 00000000 		.4byte	.Ldebug_info0
 3251 000a 04       		.byte	0x4
 3252 000b 00       		.byte	0
 3253 000c 0000     		.2byte	0
 3254 000e 0000     		.2byte	0
 3255 0010 00000000 		.4byte	.LFB63
 3256 0014 20000000 		.4byte	.LFE63-.LFB63
 3257 0018 00000000 		.4byte	.LFB64
 3258 001c 38000000 		.4byte	.LFE64-.LFB64
 3259 0020 00000000 		.4byte	.LFB65
 3260 0024 80000000 		.4byte	.LFE65-.LFB65
 3261 0028 00000000 		.4byte	.LFB66
 3262 002c 50000000 		.4byte	.LFE66-.LFB66
 3263 0030 00000000 		.4byte	.LFB67
 3264 0034 58000000 		.4byte	.LFE67-.LFB67
 3265 0038 00000000 		.4byte	.LFB68
 3266 003c 900B0000 		.4byte	.LFE68-.LFB68
 3267 0040 00000000 		.4byte	0
 3268 0044 00000000 		.4byte	0
 3269              		.section	.debug_ranges,"",%progbits
 3270              	.Ldebug_ranges0:
 3271 0000 00000000 		.4byte	.LFB63
 3272 0004 20000000 		.4byte	.LFE63
 3273 0008 00000000 		.4byte	.LFB64
 3274 000c 38000000 		.4byte	.LFE64
 3275 0010 00000000 		.4byte	.LFB65
 3276 0014 80000000 		.4byte	.LFE65
 3277 0018 00000000 		.4byte	.LFB66
 3278 001c 50000000 		.4byte	.LFE66
 3279 0020 00000000 		.4byte	.LFB67
 3280 0024 58000000 		.4byte	.LFE67
 3281 0028 00000000 		.4byte	.LFB68
 3282 002c 900B0000 		.4byte	.LFE68
 3283 0030 00000000 		.4byte	0
 3284 0034 00000000 		.4byte	0
 3285              		.section	.debug_line,"",%progbits
 3286              	.Ldebug_line0:
 3287 0000 75030000 		.section	.debug_str,"MS",%progbits,1
 3287      02009501 
 3287      00000201 
 3287      FB0E0D00 
 3287      01010101 
 3288              	.LASF30:
 3289 0000 52455355 		.ascii	"RESURFACE\000"
 3289      52464143 
 3289      4500
 3290              	.LASF74:
 3291 000a 6D73675F 		.ascii	"msg_count\000"
 3291      636F756E 
 3291      7400
 3292              	.LASF72:
 3293 0014 75706461 		.ascii	"update_Data\000"
 3293      74655F44 
 3293      61746100 
 3294              	.LASF73:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 71


 3295 0020 52784275 		.ascii	"RxBuffer\000"
 3295      66666572 
 3295      00
 3296              	.LASF26:
 3297 0029 53595354 		.ascii	"SYSTEM_CHECK\000"
 3297      454D5F43 
 3297      4845434B 
 3297      00
 3298              	.LASF33:
 3299 0036 53544154 		.ascii	"STATES\000"
 3299      455300
 3300              	.LASF56:
 3301 003d 73646275 		.ascii	"sdbuf\000"
 3301      6600
 3302              	.LASF60:
 3303 0043 41646472 		.ascii	"Addr\000"
 3303      00
 3304              	.LASF58:
 3305 0048 64657641 		.ascii	"devAddr\000"
 3305      64647200 
 3306              	.LASF78:
 3307 0050 7472616E 		.ascii	"transmit_flag\000"
 3307      736D6974 
 3307      5F666C61 
 3307      6700
 3308              	.LASF80:
 3309 005e 72657365 		.ascii	"reset\000"
 3309      7400
 3310              	.LASF29:
 3311 0064 4C414E44 		.ascii	"LANDED\000"
 3311      454400
 3312              	.LASF77:
 3313 006b 64617461 		.ascii	"dataflag\000"
 3313      666C6167 
 3313      00
 3314              	.LASF87:
 3315 0074 6D61696E 		.ascii	"main\000"
 3315      00
 3316              	.LASF34:
 3317 0079 4D6F6973 		.ascii	"Moisture_ISR_Handler\000"
 3317      74757265 
 3317      5F495352 
 3317      5F48616E 
 3317      646C6572 
 3318              	.LASF48:
 3319 008e 76616375 		.ascii	"vacuumbuf\000"
 3319      756D6275 
 3319      6600
 3320              	.LASF81:
 3321 0098 66696C65 		.ascii	"file\000"
 3321      00
 3322              	.LASF43:
 3323 009d 70726573 		.ascii	"pressure_avg\000"
 3323      73757265 
 3323      5F617667 
 3323      00
 3324              	.LASF4:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 72


 3325 00aa 73686F72 		.ascii	"short int\000"
 3325      7420696E 
 3325      7400
 3326              	.LASF68:
 3327 00b4 50414E49 		.ascii	"PANIC_flag\000"
 3327      435F666C 
 3327      616700
 3328              	.LASF13:
 3329 00bf 75696E74 		.ascii	"uint8_t\000"
 3329      385F7400 
 3330              	.LASF55:
 3331 00c7 70756C73 		.ascii	"pulse\000"
 3331      6500
 3332              	.LASF18:
 3333 00cd 696E7431 		.ascii	"int16\000"
 3333      3600
 3334              	.LASF39:
 3335 00d3 64656369 		.ascii	"decimals\000"
 3335      6D616C73 
 3335      00
 3336              	.LASF19:
 3337 00dc 666C6F61 		.ascii	"float\000"
 3337      7400
 3338              	.LASF51:
 3339 00e2 73746174 		.ascii	"stateMsgCount\000"
 3339      654D7367 
 3339      436F756E 
 3339      7400
 3340              	.LASF10:
 3341 00f0 6C6F6E67 		.ascii	"long long int\000"
 3341      206C6F6E 
 3341      6720696E 
 3341      7400
 3342              	.LASF64:
 3343 00fe 61766572 		.ascii	"average\000"
 3343      61676500 
 3344              	.LASF31:
 3345 0106 5452414E 		.ascii	"TRANSMIT\000"
 3345      534D4954 
 3345      00
 3346              	.LASF84:
 3347 010f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3347      4320342E 
 3347      392E3320 
 3347      32303135 
 3347      30333033 
 3348 0142 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3348      20726576 
 3348      6973696F 
 3348      6E203232 
 3348      31323230 
 3349 0175 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3349      66756E63 
 3349      74696F6E 
 3349      2D736563 
 3349      74696F6E 
 3350              	.LASF53:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 73


 3351 019d 74656E73 		.ascii	"tens\000"
 3351      00
 3352              	.LASF40:
 3353 01a2 766F6C74 		.ascii	"voltage\000"
 3353      61676500 
 3354              	.LASF82:
 3355 01aa 766F6C75 		.ascii	"volume\000"
 3355      6D6500
 3356              	.LASF61:
 3357 01b1 70726573 		.ascii	"press_id\000"
 3357      735F6964 
 3357      00
 3358              	.LASF50:
 3359 01ba 7472616E 		.ascii	"transbuf\000"
 3359      73627566 
 3359      00
 3360              	.LASF32:
 3361 01c3 4552524F 		.ascii	"ERROR\000"
 3361      5200
 3362              	.LASF63:
 3363 01c9 70726573 		.ascii	"pressure_sum\000"
 3363      73757265 
 3363      5F73756D 
 3363      00
 3364              	.LASF25:
 3365 01d6 6C6F6E67 		.ascii	"long double\000"
 3365      20646F75 
 3365      626C6500 
 3366              	.LASF27:
 3367 01e2 57414954 		.ascii	"WAIT_TO_LAUNCH\000"
 3367      5F544F5F 
 3367      4C41554E 
 3367      434800
 3368              	.LASF1:
 3369 01f1 756E7369 		.ascii	"unsigned char\000"
 3369      676E6564 
 3369      20636861 
 3369      7200
 3370              	.LASF24:
 3371 01ff 46535F46 		.ascii	"FS_FILE\000"
 3371      494C4500 
 3372              	.LASF71:
 3373 0207 636F756E 		.ascii	"countdown\000"
 3373      74646F77 
 3373      6E00
 3374              	.LASF0:
 3375 0211 7369676E 		.ascii	"signed char\000"
 3375      65642063 
 3375      68617200 
 3376              	.LASF11:
 3377 021d 6C6F6E67 		.ascii	"long long unsigned int\000"
 3377      206C6F6E 
 3377      6720756E 
 3377      7369676E 
 3377      65642069 
 3378              	.LASF16:
 3379 0234 75696E74 		.ascii	"uint32_t\000"
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 74


 3379      33325F74 
 3379      00
 3380              	.LASF62:
 3381 023d 64617461 		.ascii	"data_time\000"
 3381      5F74696D 
 3381      6500
 3382              	.LASF12:
 3383 0247 756E7369 		.ascii	"unsigned int\000"
 3383      676E6564 
 3383      20696E74 
 3383      00
 3384              	.LASF41:
 3385 0254 74656D70 		.ascii	"temp\000"
 3385      00
 3386              	.LASF70:
 3387 0259 74657374 		.ascii	"testnum\000"
 3387      6E756D00 
 3388              	.LASF5:
 3389 0261 73686F72 		.ascii	"short unsigned int\000"
 3389      7420756E 
 3389      7369676E 
 3389      65642069 
 3389      6E7400
 3390              	.LASF21:
 3391 0274 63686172 		.ascii	"char\000"
 3391      00
 3392              	.LASF7:
 3393 0279 6C6F6E67 		.ascii	"long int\000"
 3393      20696E74 
 3393      00
 3394              	.LASF15:
 3395 0282 696E7433 		.ascii	"int32_t\000"
 3395      325F7400 
 3396              	.LASF14:
 3397 028a 696E7431 		.ascii	"int16_t\000"
 3397      365F7400 
 3398              	.LASF17:
 3399 0292 75696E74 		.ascii	"uint8\000"
 3399      3800
 3400              	.LASF66:
 3401 0298 5F426F6F 		.ascii	"_Bool\000"
 3401      6C00
 3402              	.LASF86:
 3403 029e 433A5C55 		.ascii	"C:\\Users\\gding\\Documents\\Project_O-Vac\\OVac.cy"
 3403      73657273 
 3403      5C676469 
 3403      6E675C44 
 3403      6F63756D 
 3404 02cc 64736E00 		.ascii	"dsn\000"
 3405              	.LASF54:
 3406 02d0 6F6E6573 		.ascii	"ones\000"
 3406      00
 3407              	.LASF45:
 3408 02d5 63757253 		.ascii	"curState\000"
 3408      74617465 
 3408      00
 3409              	.LASF79:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 75


 3410 02de 64657074 		.ascii	"depth\000"
 3410      6800
 3411              	.LASF52:
 3412 02e4 7A5F6F66 		.ascii	"z_offset\000"
 3412      66736574 
 3412      00
 3413              	.LASF49:
 3414 02ed 72657375 		.ascii	"resurfbuf\000"
 3414      72666275 
 3414      6600
 3415              	.LASF75:
 3416 02f7 7278666C 		.ascii	"rxflag\000"
 3416      616700
 3417              	.LASF59:
 3418 02fe 62756666 		.ascii	"buffer\000"
 3418      657200
 3419              	.LASF36:
 3420 0305 436F756E 		.ascii	"Countdown_ISR_Handler\000"
 3420      74646F77 
 3420      6E5F4953 
 3420      525F4861 
 3420      6E646C65 
 3421              	.LASF85:
 3422 031b 6D61696E 		.ascii	"main.c\000"
 3422      2E6300
 3423              	.LASF22:
 3424 0322 72656738 		.ascii	"reg8\000"
 3424      00
 3425              	.LASF9:
 3426 0327 6C6F6E67 		.ascii	"long unsigned int\000"
 3426      20756E73 
 3426      69676E65 
 3426      6420696E 
 3426      7400
 3427              	.LASF28:
 3428 0339 44455343 		.ascii	"DESCENDING\000"
 3428      454E4449 
 3428      4E4700
 3429              	.LASF76:
 3430 0344 62797465 		.ascii	"bytes\000"
 3430      7300
 3431              	.LASF20:
 3432 034a 646F7562 		.ascii	"double\000"
 3432      6C6500
 3433              	.LASF8:
 3434 0351 5F5F7569 		.ascii	"__uint32_t\000"
 3434      6E743332 
 3434      5F7400
 3435              	.LASF44:
 3436 035c 74656D70 		.ascii	"tempbuf\000"
 3436      62756600 
 3437              	.LASF6:
 3438 0364 5F5F696E 		.ascii	"__int32_t\000"
 3438      7433325F 
 3438      7400
 3439              	.LASF3:
 3440 036e 5F5F696E 		.ascii	"__int16_t\000"
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 76


 3440      7431365F 
 3440      7400
 3441              	.LASF46:
 3442 0378 64657363 		.ascii	"descendbuf\000"
 3442      656E6462 
 3442      756600
 3443              	.LASF23:
 3444 0383 73697A65 		.ascii	"sizetype\000"
 3444      74797065 
 3444      00
 3445              	.LASF69:
 3446 038c 53544154 		.ascii	"STATE\000"
 3446      4500
 3447              	.LASF38:
 3448 0392 74656D70 		.ascii	"temp_interrupt\000"
 3448      5F696E74 
 3448      65727275 
 3448      707400
 3449              	.LASF42:
 3450 03a1 6F757470 		.ascii	"output\000"
 3450      757400
 3451              	.LASF65:
 3452 03a8 636F6C6C 		.ascii	"collect_flag\000"
 3452      6563745F 
 3452      666C6167 
 3452      00
 3453              	.LASF37:
 3454 03b5 72785F69 		.ascii	"rx_interrupt\000"
 3454      6E746572 
 3454      72757074 
 3454      00
 3455              	.LASF57:
 3456 03c2 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3456      52784275 
 3456      66666572 
 3456      00
 3457              	.LASF67:
 3458 03cf 77616974 		.ascii	"wait_flag\000"
 3458      5F666C61 
 3458      6700
 3459              	.LASF35:
 3460 03d9 53616D70 		.ascii	"Sample_ISR_Handler\000"
 3460      6C655F49 
 3460      53525F48 
 3460      616E646C 
 3460      657200
 3461              	.LASF83:
 3462 03ec 66736669 		.ascii	"fsfile\000"
 3462      6C6500
 3463              	.LASF47:
 3464 03f3 6C616E64 		.ascii	"landedbuf\000"
 3464      65646275 
 3464      6600
 3465              	.LASF2:
 3466 03fd 5F5F7569 		.ascii	"__uint8_t\000"
 3466      6E74385F 
 3466      7400
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccxUFrHj.s 			page 77


 3467              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	devAddr,1,1
  19              		.comm	buffer,22,4
  20              		.global	Addr
  21              		.data
  22              		.align	2
  23              		.type	Addr, %object
  24              		.size	Addr, 4
  25              	Addr:
  26 0000 3F000000 		.word	63
  27              		.global	id
  28              		.align	2
  29              		.type	id, %object
  30              		.size	id, 4
  31              	id:
  32 0004 01000000 		.word	1
  33              		.global	press_id
  34              		.align	2
  35              		.type	press_id, %object
  36              		.size	press_id, 4
  37              	press_id:
  38 0008 01000000 		.word	1
  39              		.global	data_time
  40              		.bss
  41              		.align	2
  42              		.type	data_time, %object
  43              		.size	data_time, 4
  44              	data_time:
  45 0000 00000000 		.space	4
  46              		.global	descent_time
  47              		.align	2
  48              		.type	descent_time, %object
  49              		.size	descent_time, 4
  50              	descent_time:
  51 0004 00000000 		.space	4
  52              		.global	sum
  53              		.align	2
  54              		.type	sum, %object
  55              		.size	sum, 4
  56              	sum:
  57 0008 00000000 		.space	4
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 2


  58              		.global	pressure_sum
  59              		.align	2
  60              		.type	pressure_sum, %object
  61              		.size	pressure_sum, 4
  62              	pressure_sum:
  63 000c 00000000 		.space	4
  64              		.global	average
  65              		.align	1
  66              		.type	average, %object
  67              		.size	average, 2
  68              	average:
  69 0010 0000     		.space	2
  70              		.global	collect_flag
  71              		.type	collect_flag, %object
  72              		.size	collect_flag, 1
  73              	collect_flag:
  74 0012 00       		.space	1
  75              		.global	wait_flag
  76              		.type	wait_flag, %object
  77              		.size	wait_flag, 1
  78              	wait_flag:
  79 0013 00       		.space	1
  80              		.global	PANIC_flag
  81              		.type	PANIC_flag, %object
  82              		.size	PANIC_flag, 1
  83              	PANIC_flag:
  84 0014 00       		.space	1
  85              		.global	STATE
  86              		.data
  87              		.type	STATE, %object
  88              		.size	STATE, 1
  89              	STATE:
  90 000c 01       		.byte	1
  91              		.global	countdown
  92              		.bss
  93              		.type	countdown, %object
  94              		.size	countdown, 1
  95              	countdown:
  96 0015 00       		.space	1
  97              		.global	update_Data
  98              		.type	update_Data, %object
  99              		.size	update_Data, 1
 100              	update_Data:
 101 0016 00       		.space	1
 102              		.global	RxBuffer
 103 0017 00       		.align	2
 104              		.type	RxBuffer, %object
 105              		.size	RxBuffer, 64
 106              	RxBuffer:
 107 0018 00000000 		.space	64
 107      00000000 
 107      00000000 
 107      00000000 
 107      00000000 
 108              		.global	msg_count
 109              		.align	2
 110              		.type	msg_count, %object
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 3


 111              		.size	msg_count, 4
 112              	msg_count:
 113 0058 00000000 		.space	4
 114              		.global	rxflag
 115              		.align	2
 116              		.type	rxflag, %object
 117              		.size	rxflag, 4
 118              	rxflag:
 119 005c 00000000 		.space	4
 120              		.global	bytes
 121              		.align	2
 122              		.type	bytes, %object
 123              		.size	bytes, 4
 124              	bytes:
 125 0060 00000000 		.space	4
 126              		.global	dataflag
 127              		.align	2
 128              		.type	dataflag, %object
 129              		.size	dataflag, 4
 130              	dataflag:
 131 0064 00000000 		.space	4
 132              		.global	transmit_flag
 133              		.align	2
 134              		.type	transmit_flag, %object
 135              		.size	transmit_flag, 4
 136              	transmit_flag:
 137 0068 00000000 		.space	4
 138              		.global	depth
 139              		.align	2
 140              		.type	depth, %object
 141              		.size	depth, 4
 142              	depth:
 143 006c 00000000 		.space	4
 144              		.global	reset
 145              		.align	2
 146              		.type	reset, %object
 147              		.size	reset, 4
 148              	reset:
 149 0070 00000000 		.space	4
 150              		.global	xavg
 151              		.align	2
 152              		.type	xavg, %object
 153              		.size	xavg, 4
 154              	xavg:
 155 0074 00000000 		.space	4
 156              		.global	yavg
 157              		.align	2
 158              		.type	yavg, %object
 159              		.size	yavg, 4
 160              	yavg:
 161 0078 00000000 		.space	4
 162              		.global	xsum
 163              		.align	2
 164              		.type	xsum, %object
 165              		.size	xsum, 4
 166              	xsum:
 167 007c 00000000 		.space	4
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 4


 168              		.global	ysum
 169              		.align	2
 170              		.type	ysum, %object
 171              		.size	ysum, 4
 172              	ysum:
 173 0080 00000000 		.space	4
 174              		.global	file
 175              		.data
 176 000d 000000   		.align	2
 177              		.type	file, %object
 178              		.size	file, 11
 179              	file:
 180 0010 74657374 		.ascii	"test_1.txt\000"
 180      5F312E74 
 180      787400
 181              		.global	volume
 182 001b 00       		.bss
 183              		.align	2
 184              		.type	volume, %object
 185              		.size	volume, 10
 186              	volume:
 187 0084 00000000 		.space	10
 187      00000000 
 187      0000
 188              		.comm	fsfile,4,4
 189 008e 0000     		.section	.text.Moisture_ISR_Handler,"ax",%progbits
 190              		.align	2
 191              		.global	Moisture_ISR_Handler
 192              		.thumb
 193              		.thumb_func
 194              		.type	Moisture_ISR_Handler, %function
 195              	Moisture_ISR_Handler:
 196              	.LFB63:
 197              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 2.20
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   This is a source code for example project of ADC single ended mode.
   8:main.c        **** *
   9:main.c        **** *   Variable resistor(pot) is connected to +ve input of ADC using the I/O pin.
  10:main.c        **** *   P0.0. When voltage to positive terminal of ADC is 0, the output displayed
  11:main.c        **** *   on the LCD pannel is 0x0000. As voltage on positive terminal goes on
  12:main.c        **** *   increasing, the  converted value goes on increasing from 0x0000 and reaches
  13:main.c        **** *   0xFFFF when voltage becomes 1.024V. Futher increase in voltage value,
  14:main.c        **** *   doesn't cause any changes to values displayed in the LCD.
  15:main.c        **** *
  16:main.c        **** * Hardware Connections: 
  17:main.c        **** *  Connect analog input from Variable resistor to port P0[0] of DVK1 board.
  18:main.c        **** *
  19:main.c        **** ********************************************************************************
  20:main.c        **** * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  21:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  22:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  23:main.c        **** * Therefore, you may use this software only as provided in the license agreement
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 5


  24:main.c        **** * accompanying the software package from which you obtained this software.
  25:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  26:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  27:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <project.h>
  31:main.c        **** #include <mpu6050.h>
  32:main.c        **** #include <stdio.h>
  33:main.c        **** #include <stdlib.h>
  34:main.c        **** #include <string.h>
  35:main.c        **** #include <FS.h>
  36:main.c        **** #include "LiquidCrystal_I2C.h"
  37:main.c        **** #include "functions.h"
  38:main.c        **** 
  39:main.c        **** #define MPU6050 
  40:main.c        **** #define LCD
  41:main.c        **** //#define SD
  42:main.c        **** #define BT
  43:main.c        **** 
  44:main.c        **** #define MA_WINDOW 15                    // Number of samples in the moving average window.
  45:main.c        **** #define BOT_THRESHOLD 20000             // Z-Aacceleration threshold for transition into LANDED sta
  46:main.c        **** #define WAIT_TIME 1000                  // Number of ISR calls until transition into DESCENDING sta
  47:main.c        **** #define BUFFER_LEN  64u                 // Buffer length for UART rx
  48:main.c        **** #define DEGREES_30 (131 * 30)           // Gyro value corresponding to 30 degrees. Default setting 
  49:main.c        **** #define DEGREES_50 (131 * 50)           // So every 131 in gyro value equals 1 degree of rotational
  50:main.c        **** 
  51:main.c        **** 
  52:main.c        **** uint32_t Addr = 0x3F;                   // I2C address of LCD.
  53:main.c        **** long id = 1, press_id = 1;              // Interrupt count.
  54:main.c        **** long data_time = 0;                     // data point num
  55:main.c        **** long descent_time = 0;                  // Max number of seconds allowed for descent, x 500 because
  56:main.c        **** 
  57:main.c        **** long sum = 0;                           // Sum of accelerometer values
  58:main.c        **** float pressure_sum = 0;                 // Sum of pressure values. 
  59:main.c        **** int16_t average = 0;                    // Moving average variable, accelerometer.
  60:main.c        **** bool collect_flag = 0;                  // flag indicating when to record acceleration sample.
  61:main.c        **** bool wait_flag = 0;                     // flag indicating when to increment interrupt counter.
  62:main.c        **** bool PANIC_flag = 0;                    // flag indicating water is present in housing.
  63:main.c        **** //bool first_test = 1;                  // flag indicating first test(longer countdown)
  64:main.c        **** STATES STATE = WAIT_TO_LAUNCH;                      // Set initial state. 
  65:main.c        **** uint8_t countdown = 0, update_Data = 0;             // Counting variables, one for countdowns, one 
  66:main.c        **** uint8_t RxBuffer[BUFFER_LEN] = {};                  // Rx Buffer
  67:main.c        **** int msg_count = 0, rxflag = 0, bytes = 0, dataflag = 0, transmit_flag = 0;    // UART variables
  68:main.c        **** int depth = 0, reset = 0;                                                     // Variable depth, re
  69:main.c        **** float xavg = 0, yavg = 0, xsum = 0, ysum = 0;                                 // gyro avg/sum value
  70:main.c        **** char file[11] = "test_1.txt";
  71:main.c        **** char volume[10] = {};
  72:main.c        **** FS_FILE *fsfile;
  73:main.c        **** 
  74:main.c        **** /*******************************************************************************
  75:main.c        **** * Function Name: main
  76:main.c        **** ********************************************************************************
  77:main.c        **** *
  78:main.c        **** * Summary:
  79:main.c        **** *  main() performs following functions:
  80:main.c        **** *  1: Initializes all necessary components on board (accelerometer/gyro, SD card, LCD, timers, inte
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 6


  81:main.c        **** *       Bluetooth).
  82:main.c        **** *  2: Begins at state: WAIT_FOR_LAUNCH. Waits for a bluetooth command to start, then prompts for a 
  83:main.c        **** *       completion, starts a countdown for which the device should be thrown in the water before it
  84:main.c        **** *       DESCENDING state.
  85:main.c        **** *  3: Samples Z-axis acceleration data from module @ 500hz. Computes moving average of Z-axis accel
  86:main.c        **** *       for gyro data in the case that the system flips somehow. If the moving average has breached
  87:main.c        **** *       20000), we know it has landed on the bottom. If the time of descent has gone over the max d
  88:main.c        **** *       from the depth earlier, then we go to resurfacing. 
  89:main.c        **** *  4: At the LANDED state, we delay to let the system settle, then turn on solenoid 1. This solenoi
  90:main.c        **** *       in the legs. The suction occurs for 5 seconds, then turns off. Switch to RESURFACING.
  91:main.c        **** *  5: To resurface, we pulse the solenoids at a rate of 3 seconds on to 1 second off. The number of
  92:main.c        **** *       by the depth. Once the number of pulses has finished, we move to TRANSMIT.
  93:main.c        **** *  6: At TRANSMIT, we simply wait for the data command to begin sending out the collected data or f
  94:main.c        **** *       do another run.
  95:main.c        **** *
  96:main.c        **** * Parameters:
  97:main.c        **** *  None.
  98:main.c        **** *
  99:main.c        **** * Return:
 100:main.c        **** *  None.
 101:main.c        **** *
 102:main.c        **** *******************************************************************************/
 103:main.c        **** 
 104:main.c        **** int SD_SETUP(char* filename); //SD card setup function
 105:main.c        **** 
 106:main.c        **** /* Moisture sensor ISR */
 107:main.c        **** CY_ISR (Moisture_ISR_Handler){
 198              		.loc 1 107 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 0000 80B5     		push	{r7, lr}
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 00AF     		add	r7, sp, #0
 207              		.cfi_def_cfa_register 7
 108:main.c        ****     PANIC_flag = 1;                             // Set flag to indicate water
 208              		.loc 1 108 0
 209 0004 044B     		ldr	r3, .L2
 210 0006 0122     		movs	r2, #1
 211 0008 1A70     		strb	r2, [r3]
 109:main.c        ****     STATE = RESURFACE;                          // Go to surface
 212              		.loc 1 109 0
 213 000a 044B     		ldr	r3, .L2+4
 214 000c 0422     		movs	r2, #4
 215 000e 1A70     		strb	r2, [r3]
 110:main.c        ****     Comp_Stop();                                // Stop comparator for interrupt
 216              		.loc 1 110 0
 217 0010 FFF7FEFF 		bl	Comp_Stop
 111:main.c        **** }
 218              		.loc 1 111 0
 219 0014 80BD     		pop	{r7, pc}
 220              	.L3:
 221 0016 00BF     		.align	2
 222              	.L2:
 223 0018 00000000 		.word	PANIC_flag
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 7


 224 001c 00000000 		.word	STATE
 225              		.cfi_endproc
 226              	.LFE63:
 227              		.size	Moisture_ISR_Handler, .-Moisture_ISR_Handler
 228              		.section	.text.Sample_ISR_Handler,"ax",%progbits
 229              		.align	2
 230              		.global	Sample_ISR_Handler
 231              		.thumb
 232              		.thumb_func
 233              		.type	Sample_ISR_Handler, %function
 234              	Sample_ISR_Handler:
 235              	.LFB64:
 112:main.c        **** 
 113:main.c        **** /* Sampling ISR */
 114:main.c        **** CY_ISR (Sample_ISR_Handler){
 236              		.loc 1 114 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 241 0000 80B4     		push	{r7}
 242              		.cfi_def_cfa_offset 4
 243              		.cfi_offset 7, -4
 244 0002 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 115:main.c        ****     Sample_Timer_STATUS;                        // Clears interrupt by accessing timer status regis
 246              		.loc 1 115 0
 247 0004 0A4B     		ldr	r3, .L7
 248 0006 1B78     		ldrb	r3, [r3]
 116:main.c        ****     if (STATE == DESCENDING || STATE == LANDED){
 249              		.loc 1 116 0
 250 0008 0A4B     		ldr	r3, .L7+4
 251 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 252 000c 022B     		cmp	r3, #2
 253 000e 03D0     		beq	.L5
 254              		.loc 1 116 0 is_stmt 0 discriminator 1
 255 0010 084B     		ldr	r3, .L7+4
 256 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 257 0014 032B     		cmp	r3, #3
 258 0016 04D1     		bne	.L6
 259              	.L5:
 117:main.c        ****         data_time++;
 260              		.loc 1 117 0 is_stmt 1
 261 0018 074B     		ldr	r3, .L7+8
 262 001a 1B68     		ldr	r3, [r3]
 263 001c 0133     		adds	r3, r3, #1
 264 001e 064A     		ldr	r2, .L7+8
 265 0020 1360     		str	r3, [r2]
 266              	.L6:
 118:main.c        ****     }
 119:main.c        ****     collect_flag = 1;
 267              		.loc 1 119 0
 268 0022 064B     		ldr	r3, .L7+12
 269 0024 0122     		movs	r2, #1
 270 0026 1A70     		strb	r2, [r3]
 120:main.c        **** }
 271              		.loc 1 120 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 8


 272 0028 BD46     		mov	sp, r7
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 002a 5DF8047B 		ldr	r7, [sp], #4
 276              		.cfi_restore 7
 277              		.cfi_def_cfa_offset 0
 278 002e 7047     		bx	lr
 279              	.L8:
 280              		.align	2
 281              	.L7:
 282 0030 034F0040 		.word	1073762051
 283 0034 00000000 		.word	STATE
 284 0038 00000000 		.word	data_time
 285 003c 00000000 		.word	collect_flag
 286              		.cfi_endproc
 287              	.LFE64:
 288              		.size	Sample_ISR_Handler, .-Sample_ISR_Handler
 289              		.section	.text.Countdown_ISR_Handler,"ax",%progbits
 290              		.align	2
 291              		.global	Countdown_ISR_Handler
 292              		.thumb
 293              		.thumb_func
 294              		.type	Countdown_ISR_Handler, %function
 295              	Countdown_ISR_Handler:
 296              	.LFB65:
 121:main.c        **** 
 122:main.c        **** /* Countdown ISR*/
 123:main.c        **** CY_ISR (Countdown_ISR_Handler){
 297              		.loc 1 123 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302 0000 80B4     		push	{r7}
 303              		.cfi_def_cfa_offset 4
 304              		.cfi_offset 7, -4
 305 0002 00AF     		add	r7, sp, #0
 306              		.cfi_def_cfa_register 7
 124:main.c        ****     Countdown_timer_STATUS;                        // Clears interrupt by accessing timer status re
 307              		.loc 1 124 0
 308 0004 1D4B     		ldr	r3, .L15
 309 0006 1B78     		ldrb	r3, [r3]
 125:main.c        ****     if ((STATE == WAIT_TO_LAUNCH && depth != 0) || STATE == LANDED || STATE == RESURFACE){ 
 310              		.loc 1 125 0
 311 0008 1D4B     		ldr	r3, .L15+4
 312 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 000c 012B     		cmp	r3, #1
 314 000e 03D1     		bne	.L10
 315              		.loc 1 125 0 is_stmt 0 discriminator 1
 316 0010 1C4B     		ldr	r3, .L15+8
 317 0012 1B68     		ldr	r3, [r3]
 318 0014 002B     		cmp	r3, #0
 319 0016 07D1     		bne	.L11
 320              	.L10:
 321              		.loc 1 125 0 discriminator 3
 322 0018 194B     		ldr	r3, .L15+4
 323 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 9


 324 001c 032B     		cmp	r3, #3
 325 001e 03D0     		beq	.L11
 326              		.loc 1 125 0 discriminator 4
 327 0020 174B     		ldr	r3, .L15+4
 328 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 329 0024 042B     		cmp	r3, #4
 330 0026 08D1     		bne	.L12
 331              	.L11:
 126:main.c        ****         wait_flag = 1;
 332              		.loc 1 126 0 is_stmt 1
 333 0028 174B     		ldr	r3, .L15+12
 334 002a 0122     		movs	r2, #1
 335 002c 1A70     		strb	r2, [r3]
 127:main.c        ****         countdown++;
 336              		.loc 1 127 0
 337 002e 174B     		ldr	r3, .L15+16
 338 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 339 0032 0133     		adds	r3, r3, #1
 340 0034 DAB2     		uxtb	r2, r3
 341 0036 154B     		ldr	r3, .L15+16
 342 0038 1A70     		strb	r2, [r3]
 343              	.L12:
 128:main.c        ****     }
 129:main.c        ****     #ifdef BT
 130:main.c        ****         if (STATE == TRANSMIT || (STATE == WAIT_TO_LAUNCH && !dataflag)){
 344              		.loc 1 130 0
 345 003a 114B     		ldr	r3, .L15+4
 346 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 347 003e 052B     		cmp	r3, #5
 348 0040 07D0     		beq	.L13
 349              		.loc 1 130 0 is_stmt 0 discriminator 1
 350 0042 0F4B     		ldr	r3, .L15+4
 351 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 352 0046 012B     		cmp	r3, #1
 353 0048 13D1     		bne	.L9
 354              		.loc 1 130 0 discriminator 2
 355 004a 114B     		ldr	r3, .L15+20
 356 004c 1B68     		ldr	r3, [r3]
 357 004e 002B     		cmp	r3, #0
 358 0050 0FD1     		bne	.L9
 359              	.L13:
 131:main.c        ****             update_Data++;
 360              		.loc 1 131 0 is_stmt 1
 361 0052 104B     		ldr	r3, .L15+24
 362 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0056 0133     		adds	r3, r3, #1
 364 0058 DAB2     		uxtb	r2, r3
 365 005a 0E4B     		ldr	r3, .L15+24
 366 005c 1A70     		strb	r2, [r3]
 132:main.c        ****             if (update_Data == 10){
 367              		.loc 1 132 0
 368 005e 0D4B     		ldr	r3, .L15+24
 369 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0062 0A2B     		cmp	r3, #10
 371 0064 05D1     		bne	.L9
 133:main.c        ****                 transmit_flag = 1;
 372              		.loc 1 133 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 10


 373 0066 0C4B     		ldr	r3, .L15+28
 374 0068 0122     		movs	r2, #1
 375 006a 1A60     		str	r2, [r3]
 134:main.c        ****                 update_Data = 0;
 376              		.loc 1 134 0
 377 006c 094B     		ldr	r3, .L15+24
 378 006e 0022     		movs	r2, #0
 379 0070 1A70     		strb	r2, [r3]
 380              	.L9:
 135:main.c        ****             }
 136:main.c        ****         }          
 137:main.c        ****     #endif
 138:main.c        **** }
 381              		.loc 1 138 0
 382 0072 BD46     		mov	sp, r7
 383              		.cfi_def_cfa_register 13
 384              		@ sp needed
 385 0074 5DF8047B 		ldr	r7, [sp], #4
 386              		.cfi_restore 7
 387              		.cfi_def_cfa_offset 0
 388 0078 7047     		bx	lr
 389              	.L16:
 390 007a 00BF     		.align	2
 391              	.L15:
 392 007c 67640040 		.word	1073767527
 393 0080 00000000 		.word	STATE
 394 0084 00000000 		.word	depth
 395 0088 00000000 		.word	wait_flag
 396 008c 00000000 		.word	countdown
 397 0090 00000000 		.word	dataflag
 398 0094 00000000 		.word	update_Data
 399 0098 00000000 		.word	transmit_flag
 400              		.cfi_endproc
 401              	.LFE65:
 402              		.size	Countdown_ISR_Handler, .-Countdown_ISR_Handler
 403              		.section	.text.rx_interrupt,"ax",%progbits
 404              		.align	2
 405              		.global	rx_interrupt
 406              		.thumb
 407              		.thumb_func
 408              		.type	rx_interrupt, %function
 409              	rx_interrupt:
 410              	.LFB66:
 139:main.c        **** /* Bluetooth UART Rx ISR*/
 140:main.c        **** CY_ISR(rx_interrupt){
 411              		.loc 1 140 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 1, uses_anonymous_args = 0
 415 0000 98B5     		push	{r3, r4, r7, lr}
 416              		.cfi_def_cfa_offset 16
 417              		.cfi_offset 3, -16
 418              		.cfi_offset 4, -12
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 00AF     		add	r7, sp, #0
 422              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 11


 141:main.c        ****     #ifdef BT
 142:main.c        ****     while (UART_ReadRxStatus() & UART_RX_STS_FIFO_NOTEMPTY){
 423              		.loc 1 142 0
 424 0004 14E0     		b	.L18
 425              	.L19:
 143:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 426              		.loc 1 143 0
 427 0006 0E4B     		ldr	r3, .L20
 428 0008 1C68     		ldr	r4, [r3]
 429 000a 631C     		adds	r3, r4, #1
 430 000c 0C4A     		ldr	r2, .L20
 431 000e 1360     		str	r3, [r2]
 432 0010 FFF7FEFF 		bl	UART_GetChar
 433 0014 0346     		mov	r3, r0
 434 0016 1A46     		mov	r2, r3
 435 0018 0A4B     		ldr	r3, .L20+4
 436 001a 1A55     		strb	r2, [r3, r4]
 144:main.c        ****         if ((msg_count - 3) >= bytes)
 437              		.loc 1 144 0
 438 001c 084B     		ldr	r3, .L20
 439 001e 1B68     		ldr	r3, [r3]
 440 0020 DA1E     		subs	r2, r3, #3
 441 0022 094B     		ldr	r3, .L20+8
 442 0024 1B68     		ldr	r3, [r3]
 443 0026 9A42     		cmp	r2, r3
 444 0028 02DB     		blt	.L18
 145:main.c        ****             rxflag = 1;
 445              		.loc 1 145 0
 446 002a 084B     		ldr	r3, .L20+12
 447 002c 0122     		movs	r2, #1
 448 002e 1A60     		str	r2, [r3]
 449              	.L18:
 142:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 450              		.loc 1 142 0
 451 0030 FFF7FEFF 		bl	UART_ReadRxStatus
 452 0034 0346     		mov	r3, r0
 453 0036 03F02003 		and	r3, r3, #32
 454 003a 002B     		cmp	r3, #0
 455 003c E3D1     		bne	.L19
 146:main.c        ****     }
 147:main.c        ****     #endif
 148:main.c        **** }
 456              		.loc 1 148 0
 457 003e 98BD     		pop	{r3, r4, r7, pc}
 458              	.L21:
 459              		.align	2
 460              	.L20:
 461 0040 00000000 		.word	msg_count
 462 0044 00000000 		.word	RxBuffer
 463 0048 00000000 		.word	bytes
 464 004c 00000000 		.word	rxflag
 465              		.cfi_endproc
 466              	.LFE66:
 467              		.size	rx_interrupt, .-rx_interrupt
 468              		.section	.rodata
 469              		.align	2
 470              	.LC6:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 12


 471 0000 50536F43 		.ascii	"PSoC 5LP: O-Vac\000"
 471      20354C50 
 471      3A204F2D 
 471      56616300 
 472              		.align	2
 473              	.LC7:
 474 0010 49324320 		.ascii	"I2C Working\000"
 474      576F726B 
 474      696E6700 
 475              		.global	__aeabi_i2f
 476              		.global	__aeabi_f2d
 477              		.global	__aeabi_dmul
 478              		.global	__aeabi_d2f
 479              		.global	__aeabi_fadd
 480              		.global	__aeabi_fdiv
 481              		.global	__aeabi_f2iz
 482              		.global	__aeabi_fsub
 483              		.global	__aeabi_fmul
 484              		.align	2
 485              	.LC8:
 486 001c 53544154 		.ascii	"STATE: WAIT\000"
 486      453A2057 
 486      41495400 
 487              		.align	2
 488              	.LC9:
 489 0028 0A256420 		.ascii	"\012%d seconds remaining\000"
 489      7365636F 
 489      6E647320 
 489      72656D61 
 489      696E696E 
 490 003e 0000     		.align	2
 491              	.LC10:
 492 0040 53544154 		.ascii	"STATE: DESCENT\000"
 492      453A2044 
 492      45534345 
 492      4E5400
 493 004f 00       		.align	2
 494              	.LC11:
 495 0050 53544154 		.ascii	"STATE: LANDED\000"
 495      453A204C 
 495      414E4445 
 495      4400
 496 005e 0000     		.align	2
 497              	.LC12:
 498 0060 53544154 		.ascii	"STATE: RESURFACE\000"
 498      453A2052 
 498      45535552 
 498      46414345 
 498      00
 499 0071 000000   		.align	2
 500              	.LC13:
 501 0074 54696C74 		.ascii	"Tilted\000"
 501      656400
 502 007b 00       		.align	2
 503              	.LC14:
 504 007c 53544154 		.ascii	"STATE: RESURFACING\000"
 504      453A2052 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 13


 504      45535552 
 504      46414349 
 504      4E4700
 505 008f 00       		.align	2
 506              	.LC15:
 507 0090 57415445 		.ascii	"WATER DETECTED\000"
 507      52204445 
 507      54454354 
 507      454400
 508 009f 00       		.align	2
 509              	.LC16:
 510 00a0 5452414E 		.ascii	"TRANSMIT\000"
 510      534D4954 
 510      00
 511 00a9 000000   		.align	2
 512              	.LC0:
 513 00ac 53595354 		.ascii	"SYSTEM_CHECK\000"
 513      454D5F43 
 513      4845434B 
 513      00
 514 00b9 00       		.space	1
 515 00ba 0000     		.align	2
 516              	.LC1:
 517 00bc 0A535441 		.ascii	"\012STATE: DESCENDING\012\000"
 517      54453A20 
 517      44455343 
 517      454E4449 
 517      4E470A00 
 518              		.align	2
 519              	.LC2:
 520 00d0 53544154 		.ascii	"STATE: LANDED\012\000"
 520      453A204C 
 520      414E4445 
 520      440A00
 521 00df 00       		.align	2
 522              	.LC3:
 523 00e0 53544154 		.ascii	"STATE: VACUUMING\012\000"
 523      453A2056 
 523      41435555 
 523      4D494E47 
 523      0A00
 524 00f2 0000     		.align	2
 525              	.LC4:
 526 00f4 53544154 		.ascii	"STATE: RESURFACE\012\000"
 526      453A2052 
 526      45535552 
 526      46414345 
 526      0A00
 527 0106 0000     		.align	2
 528              	.LC5:
 529 0108 53544154 		.ascii	"STATE: TRANSMIT\012\000"
 529      453A2054 
 529      52414E53 
 529      4D49540A 
 529      00
 530              		.section	.text.main,"ax",%progbits
 531              		.align	2
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 14


 532              		.global	main
 533              		.thumb
 534              		.thumb_func
 535              		.type	main, %function
 536              	main:
 537              	.LFB67:
 149:main.c        **** 
 150:main.c        **** int main()
 151:main.c        **** {
 538              		.loc 1 151 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 296
 541              		@ frame_needed = 1, uses_anonymous_args = 0
 542 0000 B0B5     		push	{r4, r5, r7, lr}
 543              		.cfi_def_cfa_offset 16
 544              		.cfi_offset 4, -16
 545              		.cfi_offset 5, -12
 546              		.cfi_offset 7, -8
 547              		.cfi_offset 14, -4
 548 0002 CCB0     		sub	sp, sp, #304
 549              		.cfi_def_cfa_offset 320
 550 0004 02AF     		add	r7, sp, #8
 551              		.cfi_def_cfa 7, 312
 152:main.c        ****     int num = 0, decimals = 0;                                       // ADC Voltage conversion plac
 552              		.loc 1 152 0
 553 0006 0023     		movs	r3, #0
 554 0008 C7F81831 		str	r3, [r7, #280]
 555 000c 0023     		movs	r3, #0
 556 000e C7F81431 		str	r3, [r7, #276]
 153:main.c        ****     float voltage = 0, temp = 0, output = 0, pressure_avg = 0;       // ADC Voltage conversion vari
 557              		.loc 1 153 0
 558 0012 4FF00003 		mov	r3, #0
 559 0016 C7F81031 		str	r3, [r7, #272]	@ float
 560 001a 4FF00003 		mov	r3, #0
 561 001e C7F80C31 		str	r3, [r7, #268]	@ float
 562 0022 4FF00003 		mov	r3, #0
 563 0026 C7F80831 		str	r3, [r7, #264]	@ float
 564 002a 4FF00003 		mov	r3, #0
 565 002e C7F82431 		str	r3, [r7, #292]	@ float
 154:main.c        ****     char buf[50], tempbuf[20] = {}, curState[14] = "SYSTEM_CHECK";  // buffers, UART and initial st
 566              		.loc 1 154 0
 567 0032 07F1B803 		add	r3, r7, #184
 568 0036 0022     		movs	r2, #0
 569 0038 1A60     		str	r2, [r3]
 570 003a 0433     		adds	r3, r3, #4
 571 003c 0022     		movs	r2, #0
 572 003e 1A60     		str	r2, [r3]
 573 0040 0433     		adds	r3, r3, #4
 574 0042 0022     		movs	r2, #0
 575 0044 1A60     		str	r2, [r3]
 576 0046 0433     		adds	r3, r3, #4
 577 0048 0022     		movs	r2, #0
 578 004a 1A60     		str	r2, [r3]
 579 004c 0433     		adds	r3, r3, #4
 580 004e 0022     		movs	r2, #0
 581 0050 1A60     		str	r2, [r3]
 582 0052 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 15


 583 0054 BC4B     		ldr	r3, .L72+8
 584 0056 07F1A804 		add	r4, r7, #168
 585 005a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 586 005c 07C4     		stmia	r4!, {r0, r1, r2}
 587 005e 2370     		strb	r3, [r4]
 588 0060 0023     		movs	r3, #0
 589 0062 87F8B530 		strb	r3, [r7, #181]
 155:main.c        ****     char descendbuf[DESCENDING_LEN] = STATE_DESCENDING;             // buffers for transmitting sta
 590              		.loc 1 155 0
 591 0066 B94B     		ldr	r3, .L72+12
 592 0068 07F19404 		add	r4, r7, #148
 593 006c 1D46     		mov	r5, r3
 594 006e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 595 0070 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 596 0072 2B68     		ldr	r3, [r5]
 597 0074 1A46     		mov	r2, r3	@ movhi
 598 0076 2280     		strh	r2, [r4]	@ movhi
 599 0078 0234     		adds	r4, r4, #2
 600 007a 1B0C     		lsrs	r3, r3, #16
 601 007c 2370     		strb	r3, [r4]
 156:main.c        ****     char landedbuf[LANDED_LEN] = STATE_LANDED;              
 602              		.loc 1 156 0
 603 007e B44B     		ldr	r3, .L72+16
 604 0080 07F18404 		add	r4, r7, #132
 605 0084 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 606 0086 07C4     		stmia	r4!, {r0, r1, r2}
 607 0088 2380     		strh	r3, [r4]	@ movhi
 157:main.c        ****     char vacuumbuf[VACUUM_LEN] = STATE_VACUUM;
 608              		.loc 1 157 0
 609 008a B24B     		ldr	r3, .L72+20
 610 008c 07F17004 		add	r4, r7, #112
 611 0090 1D46     		mov	r5, r3
 612 0092 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 613 0094 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 614 0096 2B68     		ldr	r3, [r5]
 615 0098 2370     		strb	r3, [r4]
 158:main.c        ****     char resurfbuf[RESURFACE_LEN] = STATE_RESURFACE;
 616              		.loc 1 158 0
 617 009a AF4B     		ldr	r3, .L72+24
 618 009c 07F15C04 		add	r4, r7, #92
 619 00a0 1D46     		mov	r5, r3
 620 00a2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 621 00a4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 622 00a6 2B68     		ldr	r3, [r5]
 623 00a8 2370     		strb	r3, [r4]
 159:main.c        ****     char transbuf[TRANSMIT_LEN] = STATE_TRANSMIT;
 624              		.loc 1 159 0
 625 00aa AC4B     		ldr	r3, .L72+28
 626 00ac 07F14C04 		add	r4, r7, #76
 627 00b0 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 628 00b2 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 160:main.c        ****     int stateMsgCount = 0, pulse = 0;
 629              		.loc 1 160 0
 630 00b6 0023     		movs	r3, #0
 631 00b8 C7F82031 		str	r3, [r7, #288]
 632 00bc 0023     		movs	r3, #0
 633 00be C7F81C31 		str	r3, [r7, #284]
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 16


 161:main.c        ****     
 162:main.c        ****     int16_t ax, ay, az, i;
 163:main.c        ****     int16_t gx, gy, gz;
 164:main.c        ****     int16_t z_offset = 0;
 634              		.loc 1 164 0
 635 00c2 0023     		movs	r3, #0
 636 00c4 A7F80631 		strh	r3, [r7, #262]	@ movhi
 165:main.c        ****     int tens = 0, ones = 0;                     // digit place variables for message len of bluetoo
 637              		.loc 1 165 0
 638 00c8 0023     		movs	r3, #0
 639 00ca 3B64     		str	r3, [r7, #64]
 640 00cc 0023     		movs	r3, #0
 641 00ce C7F80031 		str	r3, [r7, #256]
 166:main.c        ****     
 167:main.c        ****     /* Start the components */
 168:main.c        ****     CYGlobalIntEnable;                          // enable global interrupts
 642              		.loc 1 168 0
 643              	@ 168 "main.c" 1
 644 00d2 62B6     		CPSIE   i
 645              	@ 0 "" 2
 169:main.c        ****     I2C_Master_Start(); 
 646              		.loc 1 169 0
 647              		.thumb
 648 00d4 FFF7FEFF 		bl	I2C_Master_Start
 170:main.c        ****     ADC_Start();
 649              		.loc 1 170 0
 650 00d8 FFF7FEFF 		bl	ADC_Start
 171:main.c        ****     Sample_Timer_Start();                       // start timer module
 651              		.loc 1 171 0
 652 00dc FFF7FEFF 		bl	Sample_Timer_Start
 172:main.c        ****     Sample_ISR_StartEx(Sample_ISR_Handler);     // reference ISR function
 653              		.loc 1 172 0
 654 00e0 9F48     		ldr	r0, .L72+32
 655 00e2 FFF7FEFF 		bl	Sample_ISR_StartEx
 173:main.c        ****     rx_interrupt_StartEx(rx_interrupt);
 656              		.loc 1 173 0
 657 00e6 9F48     		ldr	r0, .L72+36
 658 00e8 FFF7FEFF 		bl	rx_interrupt_StartEx
 174:main.c        ****     //moisture_isr_StartEx(Moisture_ISR_Handler); // moisture isr start
 175:main.c        ****     //Comp_Start();                               // comparator for moisture start
 176:main.c        ****     UART_Start();
 659              		.loc 1 176 0
 660 00ec FFF7FEFF 		bl	UART_Start
 177:main.c        ****     
 178:main.c        ****     
 179:main.c        ****     #ifdef LCD
 180:main.c        ****         LiquidCrystal_I2C_init(Addr,16,2,0);        // initialize I2C communication with LCD
 661              		.loc 1 180 0
 662 00f0 9D4B     		ldr	r3, .L72+40
 663 00f2 1B68     		ldr	r3, [r3]
 664 00f4 DBB2     		uxtb	r3, r3
 665 00f6 1846     		mov	r0, r3
 666 00f8 1021     		movs	r1, #16
 667 00fa 0222     		movs	r2, #2
 668 00fc 0023     		movs	r3, #0
 669 00fe FFF7FEFF 		bl	LiquidCrystal_I2C_init
 181:main.c        ****         begin(); 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 17


 670              		.loc 1 181 0
 671 0102 FFF7FEFF 		bl	begin
 182:main.c        ****     
 183:main.c        ****     #endif
 184:main.c        ****    
 185:main.c        ****     /* initialize MPU6050 */
 186:main.c        ****     #ifdef MPU6050
 187:main.c        ****         MPU6050_init();    
 672              		.loc 1 187 0
 673 0106 FFF7FEFF 		bl	MPU6050_init
 188:main.c        **** 	    MPU6050_initialize(); 
 674              		.loc 1 188 0
 675 010a FFF7FEFF 		bl	MPU6050_initialize
 189:main.c        ****     #endif
 190:main.c        ****         
 191:main.c        ****     #ifdef LCD
 192:main.c        ****         /* Startup Display */
 193:main.c        ****         LCD_print("PSoC 5LP: O-Vac");
 676              		.loc 1 193 0
 677 010e 9748     		ldr	r0, .L72+44
 678 0110 FFF7FEFF 		bl	LCD_print
 194:main.c        ****         setCursor(0,1);
 679              		.loc 1 194 0
 680 0114 0020     		movs	r0, #0
 681 0116 0121     		movs	r1, #1
 682 0118 FFF7FEFF 		bl	setCursor
 195:main.c        ****         LCD_print("I2C Working");
 683              		.loc 1 195 0
 684 011c 9448     		ldr	r0, .L72+48
 685 011e FFF7FEFF 		bl	LCD_print
 196:main.c        ****         
 197:main.c        ****         CyDelay(1000u);   
 686              		.loc 1 197 0
 687 0122 4FF47A70 		mov	r0, #1000
 688 0126 FFF7FEFF 		bl	CyDelay
 198:main.c        ****         clear();
 689              		.loc 1 198 0
 690 012a FFF7FEFF 		bl	clear
 199:main.c        ****     #endif
 200:main.c        ****     
 201:main.c        ****     /* Start the ADC conversion */
 202:main.c        ****     ADC_StartConvert();
 691              		.loc 1 202 0
 692 012e FFF7FEFF 		bl	ADC_StartConvert
 203:main.c        **** 
 204:main.c        ****     /* Start SD card*/
 205:main.c        ****     #ifdef SD
 206:main.c        ****         int SD_Result = SD_SETUP(file); 
 207:main.c        ****         
 208:main.c        ****     #endif
 209:main.c        ****     
 210:main.c        ****     #ifdef LCD
 211:main.c        ****         /* Display the current State */
 212:main.c        ****         setCursor(0,0);    
 693              		.loc 1 212 0
 694 0132 0020     		movs	r0, #0
 695 0134 0021     		movs	r1, #0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 18


 696 0136 FFF7FEFF 		bl	setCursor
 213:main.c        ****         LCD_print(curState);
 697              		.loc 1 213 0
 698 013a 07F1A803 		add	r3, r7, #168
 699 013e 1846     		mov	r0, r3
 700 0140 FFF7FEFF 		bl	LCD_print
 214:main.c        ****     #endif
 215:main.c        ****     STATE = WAIT_TO_LAUNCH;
 701              		.loc 1 215 0
 702 0144 8B4B     		ldr	r3, .L72+52
 703 0146 0122     		movs	r2, #1
 704 0148 1A70     		strb	r2, [r3]
 216:main.c        ****     
 217:main.c        ****     Countdown_timer_Start();
 705              		.loc 1 217 0
 706 014a FFF7FEFF 		bl	Countdown_timer_Start
 218:main.c        ****     countdown_StartEx(Countdown_ISR_Handler);
 707              		.loc 1 218 0
 708 014e 8A48     		ldr	r0, .L72+56
 709 0150 FFF7FEFF 		bl	countdown_StartEx
 710              	.L70:
 711              	.LBB2:
 219:main.c        ****    
 220:main.c        ****     
 221:main.c        ****     for(;;)
 222:main.c        ****     {
 223:main.c        ****         
 224:main.c        ****         if(ADC_IsEndConversion(ADC_RETURN_STATUS))              // voltage conversion for pressure
 712              		.loc 1 224 0
 713 0154 0120     		movs	r0, #1
 714 0156 FFF7FEFF 		bl	ADC_IsEndConversion
 715 015a 0346     		mov	r3, r0
 716 015c 002B     		cmp	r3, #0
 717 015e 00F08980 		beq	.L23
 225:main.c        ****         {
 226:main.c        ****             output = ADC_GetResult32();
 718              		.loc 1 226 0
 719 0162 FFF7FEFF 		bl	ADC_GetResult32
 720 0166 0346     		mov	r3, r0
 721 0168 1846     		mov	r0, r3
 722 016a FFF7FEFF 		bl	__aeabi_i2f
 723 016e 0346     		mov	r3, r0
 724 0170 C7F80831 		str	r3, [r7, #264]	@ float
 227:main.c        **** 
 228:main.c        ****             voltage = output * (3.32 / 4096);
 725              		.loc 1 228 0
 726 0174 D7F80801 		ldr	r0, [r7, #264]	@ float
 727 0178 FFF7FEFF 		bl	__aeabi_f2d
 728 017c 0246     		mov	r2, r0
 729 017e 0B46     		mov	r3, r1
 730 0180 1046     		mov	r0, r2
 731 0182 1946     		mov	r1, r3
 732 0184 6EA3     		adr	r3, .L72
 733 0186 D3E90023 		ldrd	r2, [r3]
 734 018a FFF7FEFF 		bl	__aeabi_dmul
 735 018e 0246     		mov	r2, r0
 736 0190 0B46     		mov	r3, r1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 19


 737 0192 1046     		mov	r0, r2
 738 0194 1946     		mov	r1, r3
 739 0196 FFF7FEFF 		bl	__aeabi_d2f
 740 019a 0346     		mov	r3, r0
 741 019c C7F81031 		str	r3, [r7, #272]	@ float
 229:main.c        ****             if(collect_flag == 1){
 742              		.loc 1 229 0
 743 01a0 764B     		ldr	r3, .L72+60
 744 01a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 745 01a4 002B     		cmp	r3, #0
 746 01a6 65D0     		beq	.L23
 230:main.c        ****                 if (press_id < MA_WINDOW){
 747              		.loc 1 230 0
 748 01a8 754B     		ldr	r3, .L72+64
 749 01aa 1B68     		ldr	r3, [r3]
 750 01ac 0E2B     		cmp	r3, #14
 751 01ae 0BDC     		bgt	.L24
 231:main.c        ****                     pressure_sum += voltage;     
 752              		.loc 1 231 0
 753 01b0 744B     		ldr	r3, .L72+68
 754 01b2 1B68     		ldr	r3, [r3]	@ float
 755 01b4 1846     		mov	r0, r3
 756 01b6 D7F81011 		ldr	r1, [r7, #272]	@ float
 757 01ba FFF7FEFF 		bl	__aeabi_fadd
 758 01be 0346     		mov	r3, r0
 759 01c0 1A46     		mov	r2, r3
 760 01c2 704B     		ldr	r3, .L72+68
 761 01c4 1A60     		str	r2, [r3]	@ float
 762 01c6 49E0     		b	.L25
 763              	.L24:
 232:main.c        ****                 }
 233:main.c        ****                 else if(press_id == MA_WINDOW){
 764              		.loc 1 233 0
 765 01c8 6D4B     		ldr	r3, .L72+64
 766 01ca 1B68     		ldr	r3, [r3]
 767 01cc 0F2B     		cmp	r3, #15
 768 01ce 14D1     		bne	.L26
 234:main.c        ****                     pressure_sum += voltage;
 769              		.loc 1 234 0
 770 01d0 6C4B     		ldr	r3, .L72+68
 771 01d2 1B68     		ldr	r3, [r3]	@ float
 772 01d4 1846     		mov	r0, r3
 773 01d6 D7F81011 		ldr	r1, [r7, #272]	@ float
 774 01da FFF7FEFF 		bl	__aeabi_fadd
 775 01de 0346     		mov	r3, r0
 776 01e0 1A46     		mov	r2, r3
 777 01e2 684B     		ldr	r3, .L72+68
 778 01e4 1A60     		str	r2, [r3]	@ float
 235:main.c        ****                     pressure_avg = pressure_sum/MA_WINDOW;                            // compute ba
 779              		.loc 1 235 0
 780 01e6 674B     		ldr	r3, .L72+68
 781 01e8 1B68     		ldr	r3, [r3]	@ float
 782 01ea 1846     		mov	r0, r3
 783 01ec 6649     		ldr	r1, .L72+72
 784 01ee FFF7FEFF 		bl	__aeabi_fdiv
 785 01f2 0346     		mov	r3, r0
 786 01f4 C7F82431 		str	r3, [r7, #292]	@ float
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 20


 787 01f8 30E0     		b	.L25
 788              	.L26:
 789              	.LBB3:
 236:main.c        ****                 }
 237:main.c        ****                 else{
 238:main.c        ****                     pressure_avg = ComputeMA(pressure_avg, MA_WINDOW, voltage);
 790              		.loc 1 238 0
 791 01fa D7F82401 		ldr	r0, [r7, #292]	@ float
 792 01fe 0F21     		movs	r1, #15
 793 0200 D7F81021 		ldr	r2, [r7, #272]	@ float
 794 0204 FFF7FEFF 		bl	ComputeMA
 795 0208 C7F82401 		str	r0, [r7, #292]	@ float
 239:main.c        ****                     num = pressure_avg;
 796              		.loc 1 239 0
 797 020c D7F82401 		ldr	r0, [r7, #292]	@ float
 798 0210 FFF7FEFF 		bl	__aeabi_f2iz
 799 0214 0346     		mov	r3, r0
 800 0216 C7F81831 		str	r3, [r7, #280]
 240:main.c        ****                     temp = pressure_avg - num;
 801              		.loc 1 240 0
 802 021a D7F81801 		ldr	r0, [r7, #280]
 803 021e FFF7FEFF 		bl	__aeabi_i2f
 804 0222 0346     		mov	r3, r0
 805 0224 D7F82401 		ldr	r0, [r7, #292]	@ float
 806 0228 1946     		mov	r1, r3
 807 022a FFF7FEFF 		bl	__aeabi_fsub
 808 022e 0346     		mov	r3, r0
 809 0230 C7F80C31 		str	r3, [r7, #268]	@ float
 241:main.c        ****                     decimals = temp * 10000;
 810              		.loc 1 241 0
 811 0234 D7F80C01 		ldr	r0, [r7, #268]	@ float
 812 0238 5449     		ldr	r1, .L72+76
 813 023a FFF7FEFF 		bl	__aeabi_fmul
 814 023e 0346     		mov	r3, r0
 815 0240 1846     		mov	r0, r3
 816 0242 FFF7FEFF 		bl	__aeabi_f2iz
 817 0246 0346     		mov	r3, r0
 818 0248 C7F81431 		str	r3, [r7, #276]
 242:main.c        ****                     char sdbuf[60] = {};
 819              		.loc 1 242 0
 820 024c 3B46     		mov	r3, r7
 821 024e 1A46     		mov	r2, r3
 822 0250 3C23     		movs	r3, #60
 823 0252 1046     		mov	r0, r2
 824 0254 0021     		movs	r1, #0
 825 0256 1A46     		mov	r2, r3
 826 0258 FFF7FEFF 		bl	memset
 827              	.L25:
 828              	.LBE3:
 243:main.c        ****                     #ifdef SD
 244:main.c        ****                         sprintf(sdbuf, "pressure: %d.%04d, %d\n", num, decimals, (int16)output); //
 245:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 246:main.c        ****                     #endif 
 247:main.c        ****                 }
 248:main.c        ****                 if (STATE != DESCENDING) collect_flag = 0;
 829              		.loc 1 248 0
 830 025c 454B     		ldr	r3, .L72+52
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 21


 831 025e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 832 0260 022B     		cmp	r3, #2
 833 0262 02D0     		beq	.L27
 834              		.loc 1 248 0 is_stmt 0 discriminator 1
 835 0264 454B     		ldr	r3, .L72+60
 836 0266 0022     		movs	r2, #0
 837 0268 1A70     		strb	r2, [r3]
 838              	.L27:
 249:main.c        ****                 press_id++;
 839              		.loc 1 249 0 is_stmt 1
 840 026a 454B     		ldr	r3, .L72+64
 841 026c 1B68     		ldr	r3, [r3]
 842 026e 0133     		adds	r3, r3, #1
 843 0270 434A     		ldr	r2, .L72+64
 844 0272 1360     		str	r3, [r2]
 845              	.L23:
 250:main.c        ****             }
 251:main.c        ****             
 252:main.c        ****         }
 253:main.c        ****         
 254:main.c        ****     /* Bluetooth message response, after 2 bytes received, retrieve message from those 2 bytes. Onc
 255:main.c        ****      * has arrived, process it. */
 256:main.c        ****     #ifdef BT
 257:main.c        ****         if (msg_count >= 2){
 846              		.loc 1 257 0
 847 0274 464B     		ldr	r3, .L72+80
 848 0276 1B68     		ldr	r3, [r3]
 849 0278 012B     		cmp	r3, #1
 850 027a 13DD     		ble	.L28
 258:main.c        ****             tens = RxBuffer[0] - 48;
 851              		.loc 1 258 0
 852 027c 454B     		ldr	r3, .L72+84
 853 027e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 854 0280 303B     		subs	r3, r3, #48
 855 0282 3B64     		str	r3, [r7, #64]
 259:main.c        ****             ones = RxBuffer[1] - 48;
 856              		.loc 1 259 0
 857 0284 434B     		ldr	r3, .L72+84
 858 0286 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 859 0288 303B     		subs	r3, r3, #48
 860 028a C7F80031 		str	r3, [r7, #256]
 260:main.c        ****             bytes = (tens * 10) + ones;
 861              		.loc 1 260 0
 862 028e 3A6C     		ldr	r2, [r7, #64]
 863 0290 1346     		mov	r3, r2
 864 0292 9B00     		lsls	r3, r3, #2
 865 0294 1344     		add	r3, r3, r2
 866 0296 5B00     		lsls	r3, r3, #1
 867 0298 1A46     		mov	r2, r3
 868 029a D7F80031 		ldr	r3, [r7, #256]
 869 029e 1344     		add	r3, r3, r2
 870 02a0 3D4A     		ldr	r2, .L72+88
 871 02a2 1360     		str	r3, [r2]
 872              	.L28:
 261:main.c        ****         } 
 262:main.c        ****         
 263:main.c        ****         if(rxflag) {
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 22


 873              		.loc 1 263 0
 874 02a4 3D4B     		ldr	r3, .L72+92
 875 02a6 1B68     		ldr	r3, [r3]
 876 02a8 002B     		cmp	r3, #0
 877 02aa 2DD0     		beq	.L29
 264:main.c        ****             uint8_to_char(RxBuffer, &tempbuf[0], 20);
 878              		.loc 1 264 0
 879 02ac 07F1B803 		add	r3, r7, #184
 880 02b0 3848     		ldr	r0, .L72+84
 881 02b2 1946     		mov	r1, r3
 882 02b4 1422     		movs	r2, #20
 883 02b6 FFF7FEFF 		bl	uint8_to_char
 265:main.c        ****             depth = BT_Process(&tempbuf[3], &STATE, bytes, &dataflag, &reset);
 884              		.loc 1 265 0
 885 02ba 374B     		ldr	r3, .L72+88
 886 02bc 1A68     		ldr	r2, [r3]
 887 02be 07F1B803 		add	r3, r7, #184
 888 02c2 D91C     		adds	r1, r3, #3
 889 02c4 364B     		ldr	r3, .L72+96
 890 02c6 0093     		str	r3, [sp]
 891 02c8 0846     		mov	r0, r1
 892 02ca 2A49     		ldr	r1, .L72+52
 893 02cc 354B     		ldr	r3, .L72+100
 894 02ce FFF7FEFF 		bl	BT_Process
 895 02d2 0246     		mov	r2, r0
 896 02d4 344B     		ldr	r3, .L72+104
 897 02d6 1A60     		str	r2, [r3]
 266:main.c        ****             
 267:main.c        ****             msg_count = 0; bytes = 0;
 898              		.loc 1 267 0
 899 02d8 2D4B     		ldr	r3, .L72+80
 900 02da 0022     		movs	r2, #0
 901 02dc 1A60     		str	r2, [r3]
 902 02de 2E4B     		ldr	r3, .L72+88
 903 02e0 0022     		movs	r2, #0
 904 02e2 1A60     		str	r2, [r3]
 268:main.c        ****             memset(RxBuffer, 0, BUFFER_LEN);
 905              		.loc 1 268 0
 906 02e4 2B48     		ldr	r0, .L72+84
 907 02e6 0021     		movs	r1, #0
 908 02e8 4022     		movs	r2, #64
 909 02ea FFF7FEFF 		bl	memset
 269:main.c        ****             memset(tempbuf, 0, 20);
 910              		.loc 1 269 0
 911 02ee 07F1B803 		add	r3, r7, #184
 912 02f2 1846     		mov	r0, r3
 913 02f4 0021     		movs	r1, #0
 914 02f6 1422     		movs	r2, #20
 915 02f8 FFF7FEFF 		bl	memset
 270:main.c        ****             countdown = 0;
 916              		.loc 1 270 0
 917 02fc 2B4B     		ldr	r3, .L72+108
 918 02fe 0022     		movs	r2, #0
 919 0300 1A70     		strb	r2, [r3]
 271:main.c        ****             rxflag = 0;
 920              		.loc 1 271 0
 921 0302 264B     		ldr	r3, .L72+92
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 23


 922 0304 0022     		movs	r2, #0
 923 0306 1A60     		str	r2, [r3]
 924              	.L29:
 272:main.c        ****         }
 273:main.c        ****     #endif
 274:main.c        ****     
 275:main.c        ****         /* Get Z-Acceleration */
 276:main.c        **** 
 277:main.c        ****         az = MPU6050_getAccelerationZ();
 925              		.loc 1 277 0
 926 0308 FFF7FEFF 		bl	MPU6050_getAccelerationZ
 927 030c 0346     		mov	r3, r0
 928 030e A7F8FE30 		strh	r3, [r7, #254]	@ movhi
 278:main.c        **** 
 279:main.c        ****         int t = 1;
 929              		.loc 1 279 0
 930 0312 0123     		movs	r3, #1
 931 0314 FB63     		str	r3, [r7, #60]
 280:main.c        ****         /* State Machine */
 281:main.c        ****         switch (STATE){
 932              		.loc 1 281 0
 933 0316 174B     		ldr	r3, .L72+52
 934 0318 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 935 031a 013B     		subs	r3, r3, #1
 936 031c 042B     		cmp	r3, #4
 937 031e 00F2DA83 		bhi	.L71
 938 0322 01A2     		adr	r2, .L32
 939 0324 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 940              		.p2align 2
 941              	.L32:
 942 0328 B1030000 		.word	.L31+1
 943 032c 3D050000 		.word	.L33+1
 944 0330 FF070000 		.word	.L34+1
 945 0334 390A0000 		.word	.L35+1
 946 0338 9D0A0000 		.word	.L36+1
 947              		.p2align 1
 948              	.L73:
 949 033c AFF30080 		.align	3
 950              	.L72:
 951 0340 8FC2F528 		.word	687194767
 952 0344 5C8F4A3F 		.word	1061850972
 953 0348 AC000000 		.word	.LC0
 954 034c BC000000 		.word	.LC1
 955 0350 D0000000 		.word	.LC2
 956 0354 E0000000 		.word	.LC3
 957 0358 F4000000 		.word	.LC4
 958 035c 08010000 		.word	.LC5
 959 0360 00000000 		.word	Sample_ISR_Handler
 960 0364 00000000 		.word	rx_interrupt
 961 0368 00000000 		.word	Addr
 962 036c 00000000 		.word	.LC6
 963 0370 10000000 		.word	.LC7
 964 0374 00000000 		.word	STATE
 965 0378 00000000 		.word	Countdown_ISR_Handler
 966 037c 00000000 		.word	collect_flag
 967 0380 00000000 		.word	press_id
 968 0384 00000000 		.word	pressure_sum
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 24


 969 0388 00007041 		.word	1097859072
 970 038c 00401C46 		.word	1176256512
 971 0390 00000000 		.word	msg_count
 972 0394 00000000 		.word	RxBuffer
 973 0398 00000000 		.word	bytes
 974 039c 00000000 		.word	rxflag
 975 03a0 00000000 		.word	reset
 976 03a4 00000000 		.word	dataflag
 977 03a8 00000000 		.word	depth
 978 03ac 00000000 		.word	countdown
 979              	.L31:
 282:main.c        ****     
 283:main.c        ****             /* Waiting for start command and depth*/
 284:main.c        ****             case WAIT_TO_LAUNCH:  
 285:main.c        ****                 if (reset){                         // If reset command was received, reset:
 980              		.loc 1 285 0
 981 03b0 A84B     		ldr	r3, .L74
 982 03b2 1B68     		ldr	r3, [r3]
 983 03b4 002B     		cmp	r3, #0
 984 03b6 37D0     		beq	.L37
 286:main.c        ****                     id = 1;                                // Interrupt count.
 985              		.loc 1 286 0
 986 03b8 A74B     		ldr	r3, .L74+4
 987 03ba 0122     		movs	r2, #1
 988 03bc 1A60     		str	r2, [r3]
 287:main.c        ****                     data_time = 0;                         // data point num
 989              		.loc 1 287 0
 990 03be A74B     		ldr	r3, .L74+8
 991 03c0 0022     		movs	r2, #0
 992 03c2 1A60     		str	r2, [r3]
 288:main.c        ****                     sum = 0;                               // Sum of accelerometer values. 
 993              		.loc 1 288 0
 994 03c4 A64B     		ldr	r3, .L74+12
 995 03c6 0022     		movs	r2, #0
 996 03c8 1A60     		str	r2, [r3]
 289:main.c        ****                     average = 0;                           // Moving average variable.
 997              		.loc 1 289 0
 998 03ca A64B     		ldr	r3, .L74+16
 999 03cc 0022     		movs	r2, #0
 1000 03ce 1A80     		strh	r2, [r3]	@ movhi
 290:main.c        ****                     xavg = 0; yavg = 0;                    // Gyro average variables
 1001              		.loc 1 290 0
 1002 03d0 A54B     		ldr	r3, .L74+20
 1003 03d2 4FF00002 		mov	r2, #0
 1004 03d6 1A60     		str	r2, [r3]	@ float
 1005 03d8 A44B     		ldr	r3, .L74+24
 1006 03da 4FF00002 		mov	r2, #0
 1007 03de 1A60     		str	r2, [r3]	@ float
 291:main.c        ****                     collect_flag = 0;                      // flag indicating when to record accele
 1008              		.loc 1 291 0
 1009 03e0 A34B     		ldr	r3, .L74+28
 1010 03e2 0022     		movs	r2, #0
 1011 03e4 1A70     		strb	r2, [r3]
 292:main.c        ****                     wait_flag = 0;                         // flag indicating when to increment int
 1012              		.loc 1 292 0
 1013 03e6 A34B     		ldr	r3, .L74+32
 1014 03e8 0022     		movs	r2, #0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 25


 1015 03ea 1A70     		strb	r2, [r3]
 293:main.c        ****                     PANIC_flag = 0;                        // flag indicating water is present in h
 1016              		.loc 1 293 0
 1017 03ec A24B     		ldr	r3, .L74+36
 1018 03ee 0022     		movs	r2, #0
 1019 03f0 1A70     		strb	r2, [r3]
 294:main.c        ****                     //bool first_test = 1;                 // flag indicating first test(longer cou
 295:main.c        ****                     depth = 0; countdown = 0;              // Current desired depth, variable for c
 1020              		.loc 1 295 0
 1021 03f2 A24B     		ldr	r3, .L74+40
 1022 03f4 0022     		movs	r2, #0
 1023 03f6 1A60     		str	r2, [r3]
 1024 03f8 A14B     		ldr	r3, .L74+44
 1025 03fa 0022     		movs	r2, #0
 1026 03fc 1A70     		strb	r2, [r3]
 296:main.c        ****                     msg_count = 0; dataflag = 0;           // BT message len variable, data flag 
 1027              		.loc 1 296 0
 1028 03fe A14B     		ldr	r3, .L74+48
 1029 0400 0022     		movs	r2, #0
 1030 0402 1A60     		str	r2, [r3]
 1031 0404 A04B     		ldr	r3, .L74+52
 1032 0406 0022     		movs	r2, #0
 1033 0408 1A60     		str	r2, [r3]
 297:main.c        ****                     reset = 0;                             // indicates whether to reset variables 
 1034              		.loc 1 297 0
 1035 040a 924B     		ldr	r3, .L74
 1036 040c 0022     		movs	r2, #0
 1037 040e 1A60     		str	r2, [r3]
 298:main.c        ****                     pulse = 0;
 1038              		.loc 1 298 0
 1039 0410 0023     		movs	r3, #0
 1040 0412 C7F81C31 		str	r3, [r7, #284]
 299:main.c        ****                     #ifdef LCD
 300:main.c        ****                         setCursor(0,0);
 1041              		.loc 1 300 0
 1042 0416 0020     		movs	r0, #0
 1043 0418 0021     		movs	r1, #0
 1044 041a FFF7FEFF 		bl	setCursor
 301:main.c        ****                         clear();
 1045              		.loc 1 301 0
 1046 041e FFF7FEFF 		bl	clear
 302:main.c        ****                         LCD_print("STATE: WAIT");  
 1047              		.loc 1 302 0
 1048 0422 9A48     		ldr	r0, .L74+56
 1049 0424 FFF7FEFF 		bl	LCD_print
 1050              	.L37:
 303:main.c        ****                     #endif 
 304:main.c        ****                 }
 305:main.c        ****             
 306:main.c        ****                 if (transmit_flag){
 1051              		.loc 1 306 0
 1052 0428 994B     		ldr	r3, .L74+60
 1053 042a 1B68     		ldr	r3, [r3]
 1054 042c 002B     		cmp	r3, #0
 1055 042e 0BD0     		beq	.L38
 307:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &tens); // Here, the STATE variable only matte
 1056              		.loc 1 307 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 26


 1057 0430 07F1B802 		add	r2, r7, #184
 1058 0434 07F14003 		add	r3, r7, #64
 1059 0438 1046     		mov	r0, r2
 1060 043a 9649     		ldr	r1, .L74+64
 1061 043c 0A22     		movs	r2, #10
 1062 043e FFF7FEFF 		bl	BT_Send
 308:main.c        ****                     transmit_flag = 0;
 1063              		.loc 1 308 0
 1064 0442 934B     		ldr	r3, .L74+60
 1065 0444 0022     		movs	r2, #0
 1066 0446 1A60     		str	r2, [r3]
 1067              	.L38:
 309:main.c        ****                 }
 310:main.c        ****                 // Once depth has been entered, can begin countdown into descending
 311:main.c        ****                 if(wait_flag == 1){
 1068              		.loc 1 311 0
 1069 0448 8A4B     		ldr	r3, .L74+32
 1070 044a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1071 044c 002B     		cmp	r3, #0
 1072 044e 74D0     		beq	.L39
 312:main.c        ****                     #ifdef BT
 313:main.c        ****                         stateMsgCount = 0;
 1073              		.loc 1 313 0
 1074 0450 0023     		movs	r3, #0
 1075 0452 C7F82031 		str	r3, [r7, #288]
 314:main.c        ****                         sprintf(buf, "\n%d seconds remaining", (10 - countdown));
 1076              		.loc 1 314 0
 1077 0456 8A4B     		ldr	r3, .L74+44
 1078 0458 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1079 045a C3F10A03 		rsb	r3, r3, #10
 1080 045e 07F1CC02 		add	r2, r7, #204
 1081 0462 1046     		mov	r0, r2
 1082 0464 8C49     		ldr	r1, .L74+68
 1083 0466 1A46     		mov	r2, r3
 1084 0468 FFF7FEFF 		bl	sprintf
 315:main.c        ****                         while (stateMsgCount < 21){
 1085              		.loc 1 315 0
 1086 046c 19E0     		b	.L40
 1087              	.L43:
 316:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1088              		.loc 1 316 0
 1089 046e 11E0     		b	.L41
 1090              	.L42:
 317:main.c        ****                                 UART_PutChar(buf[stateMsgCount++]);
 1091              		.loc 1 317 0
 1092 0470 D7F82031 		ldr	r3, [r7, #288]
 1093 0474 5A1C     		adds	r2, r3, #1
 1094 0476 C7F82021 		str	r2, [r7, #288]
 1095 047a 07F59472 		add	r2, r7, #296
 1096 047e 1344     		add	r3, r3, r2
 1097 0480 13F85C3C 		ldrb	r3, [r3, #-92]	@ zero_extendqisi2
 1098 0484 1846     		mov	r0, r3
 1099 0486 FFF7FEFF 		bl	UART_PutChar
 318:main.c        ****                                 if (stateMsgCount >= 21) break;
 1100              		.loc 1 318 0
 1101 048a D7F82031 		ldr	r3, [r7, #288]
 1102 048e 142B     		cmp	r3, #20
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 27


 1103 0490 00DD     		ble	.L41
 1104 0492 06E0     		b	.L40
 1105              	.L41:
 316:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1106              		.loc 1 316 0
 1107 0494 FFF7FEFF 		bl	UART_ReadTxStatus
 1108 0498 0346     		mov	r3, r0
 1109 049a 03F00803 		and	r3, r3, #8
 1110 049e 002B     		cmp	r3, #0
 1111 04a0 E6D1     		bne	.L42
 1112              	.L40:
 315:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1113              		.loc 1 315 0
 1114 04a2 D7F82031 		ldr	r3, [r7, #288]
 1115 04a6 142B     		cmp	r3, #20
 1116 04a8 E1DD     		ble	.L43
 319:main.c        ****                             }
 320:main.c        ****                         }
 321:main.c        ****                     #endif
 322:main.c        ****                     /* at 10 seconds, change into descending */
 323:main.c        ****                     if(countdown == 10){
 1117              		.loc 1 323 0
 1118 04aa 754B     		ldr	r3, .L74+44
 1119 04ac 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1120 04ae 0A2B     		cmp	r3, #10
 1121 04b0 3FD1     		bne	.L44
 324:main.c        ****                         descent_time = (((depth / 13) + 3) * 2 * 500);
 1122              		.loc 1 324 0
 1123 04b2 724B     		ldr	r3, .L74+40
 1124 04b4 1B68     		ldr	r3, [r3]
 1125 04b6 794A     		ldr	r2, .L74+72
 1126 04b8 82FB0312 		smull	r1, r2, r2, r3
 1127 04bc 9210     		asrs	r2, r2, #2
 1128 04be DB17     		asrs	r3, r3, #31
 1129 04c0 D31A     		subs	r3, r2, r3
 1130 04c2 0333     		adds	r3, r3, #3
 1131 04c4 4FF47A72 		mov	r2, #1000
 1132 04c8 02FB03F3 		mul	r3, r2, r3
 1133 04cc 744A     		ldr	r2, .L74+76
 1134 04ce 1360     		str	r3, [r2]
 325:main.c        ****                         /* descent time takes about 2~3 seconds to go 13 feet, add 3 for extra 10m 
 326:main.c        ****                          * number of ISR calls to get 1 second */ 
 327:main.c        ****                         STATE = DESCENDING;
 1135              		.loc 1 327 0
 1136 04d0 704B     		ldr	r3, .L74+64
 1137 04d2 0222     		movs	r2, #2
 1138 04d4 1A70     		strb	r2, [r3]
 328:main.c        ****                         #ifdef LCD
 329:main.c        ****                             setCursor(0,0);
 1139              		.loc 1 329 0
 1140 04d6 0020     		movs	r0, #0
 1141 04d8 0021     		movs	r1, #0
 1142 04da FFF7FEFF 		bl	setCursor
 330:main.c        ****                             clear();
 1143              		.loc 1 330 0
 1144 04de FFF7FEFF 		bl	clear
 331:main.c        ****                             LCD_print("STATE: DESCENT");
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 28


 1145              		.loc 1 331 0
 1146 04e2 7048     		ldr	r0, .L74+80
 1147 04e4 FFF7FEFF 		bl	LCD_print
 332:main.c        ****                         #endif
 333:main.c        ****                         #ifdef BT
 334:main.c        ****                             stateMsgCount = 0;
 1148              		.loc 1 334 0
 1149 04e8 0023     		movs	r3, #0
 1150 04ea C7F82031 		str	r3, [r7, #288]
 335:main.c        ****                             while (stateMsgCount < DESCENDING_LEN){
 1151              		.loc 1 335 0
 1152 04ee 19E0     		b	.L45
 1153              	.L48:
 336:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1154              		.loc 1 336 0
 1155 04f0 11E0     		b	.L46
 1156              	.L47:
 337:main.c        ****                                     UART_PutChar(descendbuf[stateMsgCount++]);
 1157              		.loc 1 337 0
 1158 04f2 D7F82031 		ldr	r3, [r7, #288]
 1159 04f6 5A1C     		adds	r2, r3, #1
 1160 04f8 C7F82021 		str	r2, [r7, #288]
 1161 04fc 07F59472 		add	r2, r7, #296
 1162 0500 1344     		add	r3, r3, r2
 1163 0502 13F8943C 		ldrb	r3, [r3, #-148]	@ zero_extendqisi2
 1164 0506 1846     		mov	r0, r3
 1165 0508 FFF7FEFF 		bl	UART_PutChar
 338:main.c        ****                                     if (stateMsgCount >= DESCENDING_LEN) break;
 1166              		.loc 1 338 0
 1167 050c D7F82031 		ldr	r3, [r7, #288]
 1168 0510 122B     		cmp	r3, #18
 1169 0512 00DD     		ble	.L46
 1170 0514 06E0     		b	.L45
 1171              	.L46:
 336:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1172              		.loc 1 336 0
 1173 0516 FFF7FEFF 		bl	UART_ReadTxStatus
 1174 051a 0346     		mov	r3, r0
 1175 051c 03F00803 		and	r3, r3, #8
 1176 0520 002B     		cmp	r3, #0
 1177 0522 E6D1     		bne	.L47
 1178              	.L45:
 335:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1179              		.loc 1 335 0
 1180 0524 D7F82031 		ldr	r3, [r7, #288]
 1181 0528 122B     		cmp	r3, #18
 1182 052a E1DD     		ble	.L48
 339:main.c        ****                                 }
 340:main.c        ****                             }
 341:main.c        ****                         #endif
 342:main.c        ****                         countdown = 0; 
 1183              		.loc 1 342 0
 1184 052c 544B     		ldr	r3, .L74+44
 1185 052e 0022     		movs	r2, #0
 1186 0530 1A70     		strb	r2, [r3]
 1187              	.L44:
 343:main.c        ****                     }
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 29


 344:main.c        ****                     wait_flag = 0; 
 1188              		.loc 1 344 0
 1189 0532 504B     		ldr	r3, .L74+32
 1190 0534 0022     		movs	r2, #0
 1191 0536 1A70     		strb	r2, [r3]
 345:main.c        ****                 }
 346:main.c        ****                 break;
 1192              		.loc 1 346 0
 1193 0538 CEE2     		b	.L49
 1194              	.L39:
 1195 053a CDE2     		b	.L49
 1196              	.L33:
 347:main.c        ****                 
 348:main.c        ****             case DESCENDING:
 349:main.c        ****                 MPU6050_getRotation(&gx, &gy, &gz); // gather gyro data
 1197              		.loc 1 349 0
 1198 053c 07F14A01 		add	r1, r7, #74
 1199 0540 07F14802 		add	r2, r7, #72
 1200 0544 07F14603 		add	r3, r7, #70
 1201 0548 0846     		mov	r0, r1
 1202 054a 1146     		mov	r1, r2
 1203 054c 1A46     		mov	r2, r3
 1204 054e FFF7FEFF 		bl	MPU6050_getRotation
 350:main.c        ****                 if(collect_flag == 1){              // Check accelerometer and gyro data
 1205              		.loc 1 350 0
 1206 0552 474B     		ldr	r3, .L74+28
 1207 0554 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1208 0556 002B     		cmp	r3, #0
 1209 0558 00F05081 		beq	.L50
 351:main.c        ****                     if (id < MA_WINDOW){    
 1210              		.loc 1 351 0
 1211 055c 3E4B     		ldr	r3, .L74+4
 1212 055e 1B68     		ldr	r3, [r3]
 1213 0560 0E2B     		cmp	r3, #14
 1214 0562 29DC     		bgt	.L51
 352:main.c        ****                         sum += az;  
 1215              		.loc 1 352 0
 1216 0564 B7F9FE20 		ldrsh	r2, [r7, #254]
 1217 0568 3D4B     		ldr	r3, .L74+12
 1218 056a 1B68     		ldr	r3, [r3]
 1219 056c 1344     		add	r3, r3, r2
 1220 056e 3C4A     		ldr	r2, .L74+12
 1221 0570 1360     		str	r3, [r2]
 353:main.c        ****                         xsum += gx;
 1222              		.loc 1 353 0
 1223 0572 B7F84A30 		ldrh	r3, [r7, #74]
 1224 0576 1BB2     		sxth	r3, r3
 1225 0578 1846     		mov	r0, r3
 1226 057a FFF7FEFF 		bl	__aeabi_i2f
 1227 057e 0246     		mov	r2, r0
 1228 0580 494B     		ldr	r3, .L74+84
 1229 0582 1B68     		ldr	r3, [r3]	@ float
 1230 0584 1046     		mov	r0, r2
 1231 0586 1946     		mov	r1, r3
 1232 0588 FFF7FEFF 		bl	__aeabi_fadd
 1233 058c 0346     		mov	r3, r0
 1234 058e 1A46     		mov	r2, r3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 30


 1235 0590 454B     		ldr	r3, .L74+84
 1236 0592 1A60     		str	r2, [r3]	@ float
 354:main.c        ****                         ysum += gy;
 1237              		.loc 1 354 0
 1238 0594 B7F84830 		ldrh	r3, [r7, #72]
 1239 0598 1BB2     		sxth	r3, r3
 1240 059a 1846     		mov	r0, r3
 1241 059c FFF7FEFF 		bl	__aeabi_i2f
 1242 05a0 0246     		mov	r2, r0
 1243 05a2 424B     		ldr	r3, .L74+88
 1244 05a4 1B68     		ldr	r3, [r3]	@ float
 1245 05a6 1046     		mov	r0, r2
 1246 05a8 1946     		mov	r1, r3
 1247 05aa FFF7FEFF 		bl	__aeabi_fadd
 1248 05ae 0346     		mov	r3, r0
 1249 05b0 1A46     		mov	r2, r3
 1250 05b2 3E4B     		ldr	r3, .L74+88
 1251 05b4 1A60     		str	r2, [r3]	@ float
 1252 05b6 D8E0     		b	.L52
 1253              	.L51:
 355:main.c        ****                     }
 356:main.c        ****                     else if(id == MA_WINDOW){
 1254              		.loc 1 356 0
 1255 05b8 274B     		ldr	r3, .L74+4
 1256 05ba 1B68     		ldr	r3, [r3]
 1257 05bc 0F2B     		cmp	r3, #15
 1258 05be 7BD1     		bne	.L53
 357:main.c        ****                         sum += az;
 1259              		.loc 1 357 0
 1260 05c0 B7F9FE20 		ldrsh	r2, [r7, #254]
 1261 05c4 264B     		ldr	r3, .L74+12
 1262 05c6 1B68     		ldr	r3, [r3]
 1263 05c8 1344     		add	r3, r3, r2
 1264 05ca 254A     		ldr	r2, .L74+12
 1265 05cc 1360     		str	r3, [r2]
 358:main.c        ****                         xsum += gx;
 1266              		.loc 1 358 0
 1267 05ce B7F84A30 		ldrh	r3, [r7, #74]
 1268 05d2 1BB2     		sxth	r3, r3
 1269 05d4 1846     		mov	r0, r3
 1270 05d6 FFF7FEFF 		bl	__aeabi_i2f
 1271 05da 0246     		mov	r2, r0
 1272 05dc 324B     		ldr	r3, .L74+84
 1273 05de 1B68     		ldr	r3, [r3]	@ float
 1274 05e0 1046     		mov	r0, r2
 1275 05e2 1946     		mov	r1, r3
 1276 05e4 FFF7FEFF 		bl	__aeabi_fadd
 1277 05e8 0346     		mov	r3, r0
 1278 05ea 1A46     		mov	r2, r3
 1279 05ec 2E4B     		ldr	r3, .L74+84
 1280 05ee 1A60     		str	r2, [r3]	@ float
 359:main.c        ****                         ysum += gy;
 1281              		.loc 1 359 0
 1282 05f0 B7F84830 		ldrh	r3, [r7, #72]
 1283 05f4 1BB2     		sxth	r3, r3
 1284 05f6 1846     		mov	r0, r3
 1285 05f8 FFF7FEFF 		bl	__aeabi_i2f
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 31


 1286 05fc 0246     		mov	r2, r0
 1287 05fe 2B4B     		ldr	r3, .L74+88
 1288 0600 1B68     		ldr	r3, [r3]	@ float
 1289 0602 1046     		mov	r0, r2
 1290 0604 1946     		mov	r1, r3
 1291 0606 FFF7FEFF 		bl	__aeabi_fadd
 1292 060a 0346     		mov	r3, r0
 1293 060c 1A46     		mov	r2, r3
 1294 060e 274B     		ldr	r3, .L74+88
 1295 0610 1A60     		str	r2, [r3]	@ float
 360:main.c        ****                         average = sum/MA_WINDOW;            //compute baseline averages for x, y ax
 1296              		.loc 1 360 0
 1297 0612 134B     		ldr	r3, .L74+12
 1298 0614 1B68     		ldr	r3, [r3]
 1299 0616 264A     		ldr	r2, .L74+92
 1300 0618 82FB0312 		smull	r1, r2, r2, r3
 1301 061c 1A44     		add	r2, r2, r3
 1302 061e D210     		asrs	r2, r2, #3
 1303 0620 DB17     		asrs	r3, r3, #31
 1304 0622 D31A     		subs	r3, r2, r3
 1305 0624 9AB2     		uxth	r2, r3
 1306 0626 0F4B     		ldr	r3, .L74+16
 1307 0628 1A80     		strh	r2, [r3]	@ movhi
 361:main.c        ****                         xavg = xsum/MA_WINDOW;                            
 1308              		.loc 1 361 0
 1309 062a 1F4B     		ldr	r3, .L74+84
 1310 062c 1B68     		ldr	r3, [r3]	@ float
 1311 062e 1846     		mov	r0, r3
 1312 0630 2049     		ldr	r1, .L74+96
 1313 0632 FFF7FEFF 		bl	__aeabi_fdiv
 1314 0636 0346     		mov	r3, r0
 1315 0638 1A46     		mov	r2, r3
 1316 063a 0B4B     		ldr	r3, .L74+20
 1317 063c 1A60     		str	r2, [r3]	@ float
 362:main.c        ****                         yavg = ysum/MA_WINDOW;
 1318              		.loc 1 362 0
 1319 063e 1B4B     		ldr	r3, .L74+88
 1320 0640 1B68     		ldr	r3, [r3]	@ float
 1321 0642 1846     		mov	r0, r3
 1322 0644 1B49     		ldr	r1, .L74+96
 1323 0646 FFF7FEFF 		bl	__aeabi_fdiv
 1324 064a 0346     		mov	r3, r0
 1325 064c 1A46     		mov	r2, r3
 1326 064e 074B     		ldr	r3, .L74+24
 1327 0650 1A60     		str	r2, [r3]	@ float
 1328 0652 8AE0     		b	.L52
 1329              	.L75:
 1330              		.align	2
 1331              	.L74:
 1332 0654 00000000 		.word	reset
 1333 0658 00000000 		.word	id
 1334 065c 00000000 		.word	data_time
 1335 0660 00000000 		.word	sum
 1336 0664 00000000 		.word	average
 1337 0668 00000000 		.word	xavg
 1338 066c 00000000 		.word	yavg
 1339 0670 00000000 		.word	collect_flag
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 32


 1340 0674 00000000 		.word	wait_flag
 1341 0678 00000000 		.word	PANIC_flag
 1342 067c 00000000 		.word	depth
 1343 0680 00000000 		.word	countdown
 1344 0684 00000000 		.word	msg_count
 1345 0688 00000000 		.word	dataflag
 1346 068c 1C000000 		.word	.LC8
 1347 0690 00000000 		.word	transmit_flag
 1348 0694 00000000 		.word	STATE
 1349 0698 28000000 		.word	.LC9
 1350 069c 4FECC44E 		.word	1321528399
 1351 06a0 00000000 		.word	descent_time
 1352 06a4 40000000 		.word	.LC10
 1353 06a8 00000000 		.word	xsum
 1354 06ac 00000000 		.word	ysum
 1355 06b0 89888888 		.word	-2004318071
 1356 06b4 00007041 		.word	1097859072
 1357              	.L53:
 363:main.c        ****                                                    
 364:main.c        ****                     }
 365:main.c        ****                     else{
 366:main.c        ****                         average = ComputeMA(average, MA_WINDOW, az);                // Compute aver
 1358              		.loc 1 366 0
 1359 06b8 904B     		ldr	r3, .L76
 1360 06ba 1B88     		ldrh	r3, [r3]
 1361 06bc 1BB2     		sxth	r3, r3
 1362 06be 1846     		mov	r0, r3
 1363 06c0 FFF7FEFF 		bl	__aeabi_i2f
 1364 06c4 0446     		mov	r4, r0
 1365 06c6 B7F9FE30 		ldrsh	r3, [r7, #254]
 1366 06ca 1846     		mov	r0, r3
 1367 06cc FFF7FEFF 		bl	__aeabi_i2f
 1368 06d0 0346     		mov	r3, r0
 1369 06d2 2046     		mov	r0, r4
 1370 06d4 0F21     		movs	r1, #15
 1371 06d6 1A46     		mov	r2, r3
 1372 06d8 FFF7FEFF 		bl	ComputeMA
 1373 06dc 0346     		mov	r3, r0
 1374 06de 1846     		mov	r0, r3
 1375 06e0 FFF7FEFF 		bl	__aeabi_f2iz
 1376 06e4 0346     		mov	r3, r0
 1377 06e6 9AB2     		uxth	r2, r3
 1378 06e8 844B     		ldr	r3, .L76
 1379 06ea 1A80     		strh	r2, [r3]	@ movhi
 367:main.c        ****                         xavg = ComputeMA(xavg, MA_WINDOW, gx);
 1380              		.loc 1 367 0
 1381 06ec 844B     		ldr	r3, .L76+4
 1382 06ee 1C68     		ldr	r4, [r3]	@ float
 1383 06f0 B7F84A30 		ldrh	r3, [r7, #74]
 1384 06f4 1BB2     		sxth	r3, r3
 1385 06f6 1846     		mov	r0, r3
 1386 06f8 FFF7FEFF 		bl	__aeabi_i2f
 1387 06fc 0346     		mov	r3, r0
 1388 06fe 2046     		mov	r0, r4
 1389 0700 0F21     		movs	r1, #15
 1390 0702 1A46     		mov	r2, r3
 1391 0704 FFF7FEFF 		bl	ComputeMA
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 33


 1392 0708 0246     		mov	r2, r0
 1393 070a 7D4B     		ldr	r3, .L76+4
 1394 070c 1A60     		str	r2, [r3]	@ float
 368:main.c        ****                         yavg = ComputeMA(yavg, MA_WINDOW, gy);
 1395              		.loc 1 368 0
 1396 070e 7D4B     		ldr	r3, .L76+8
 1397 0710 1C68     		ldr	r4, [r3]	@ float
 1398 0712 B7F84830 		ldrh	r3, [r7, #72]
 1399 0716 1BB2     		sxth	r3, r3
 1400 0718 1846     		mov	r0, r3
 1401 071a FFF7FEFF 		bl	__aeabi_i2f
 1402 071e 0346     		mov	r3, r0
 1403 0720 2046     		mov	r0, r4
 1404 0722 0F21     		movs	r1, #15
 1405 0724 1A46     		mov	r2, r3
 1406 0726 FFF7FEFF 		bl	ComputeMA
 1407 072a 0246     		mov	r2, r0
 1408 072c 754B     		ldr	r3, .L76+8
 1409 072e 1A60     		str	r2, [r3]	@ float
 369:main.c        ****                         if (abs((int)xavg) > DEGREES_50 || abs((int)yavg) > DEGREES_50){ // If gyro
 1410              		.loc 1 369 0
 1411 0730 734B     		ldr	r3, .L76+4
 1412 0732 1B68     		ldr	r3, [r3]	@ float
 1413 0734 1846     		mov	r0, r3
 1414 0736 FFF7FEFF 		bl	__aeabi_f2iz
 1415 073a 0346     		mov	r3, r0
 1416 073c 002B     		cmp	r3, #0
 1417 073e B8BF     		it	lt
 1418 0740 5B42     		rsblt	r3, r3, #0
 1419 0742 41F69612 		movw	r2, #6550
 1420 0746 9342     		cmp	r3, r2
 1421 0748 0CDC     		bgt	.L54
 1422              		.loc 1 369 0 is_stmt 0 discriminator 1
 1423 074a 6E4B     		ldr	r3, .L76+8
 1424 074c 1B68     		ldr	r3, [r3]	@ float
 1425 074e 1846     		mov	r0, r3
 1426 0750 FFF7FEFF 		bl	__aeabi_f2iz
 1427 0754 0346     		mov	r3, r0
 1428 0756 002B     		cmp	r3, #0
 1429 0758 B8BF     		it	lt
 1430 075a 5B42     		rsblt	r3, r3, #0
 1431 075c 41F69612 		movw	r2, #6550
 1432 0760 9342     		cmp	r3, r2
 1433 0762 02DD     		ble	.L52
 1434              	.L54:
 370:main.c        ****                             STATE = RESURFACE;                                        // start lift
 1435              		.loc 1 370 0 is_stmt 1
 1436 0764 684B     		ldr	r3, .L76+12
 1437 0766 0422     		movs	r2, #4
 1438 0768 1A70     		strb	r2, [r3]
 1439              	.L52:
 371:main.c        ****                         }
 372:main.c        ****                     }
 373:main.c        ****                     
 374:main.c        ****                     if(average > BOT_THRESHOLD){                        
 1440              		.loc 1 374 0
 1441 076a 644B     		ldr	r3, .L76
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 34


 1442 076c 1B88     		ldrh	r3, [r3]
 1443 076e 1BB2     		sxth	r3, r3
 1444 0770 44F62062 		movw	r2, #20000
 1445 0774 9342     		cmp	r3, r2
 1446 0776 1ADD     		ble	.L55
 375:main.c        ****                         STATE = LANDED;                                     //Switch to LANDED stat
 1447              		.loc 1 375 0
 1448 0778 634B     		ldr	r3, .L76+12
 1449 077a 0322     		movs	r2, #3
 1450 077c 1A70     		strb	r2, [r3]
 376:main.c        ****                         #ifdef LCD
 377:main.c        ****                             setCursor(0,0);
 1451              		.loc 1 377 0
 1452 077e 0020     		movs	r0, #0
 1453 0780 0021     		movs	r1, #0
 1454 0782 FFF7FEFF 		bl	setCursor
 378:main.c        ****                             clear();
 1455              		.loc 1 378 0
 1456 0786 FFF7FEFF 		bl	clear
 379:main.c        ****                             LCD_print("STATE: LANDED");  
 1457              		.loc 1 379 0
 1458 078a 6048     		ldr	r0, .L76+16
 1459 078c FFF7FEFF 		bl	LCD_print
 380:main.c        ****                         #endif
 381:main.c        ****                         #ifdef SD
 382:main.c        ****                             FS_Write(fsfile, landedbuf, LANDED_LEN);
 383:main.c        ****                         #endif
 384:main.c        ****                         #ifdef SD
 385:main.c        ****                             FS_Write(fsfile, vacuumbuf, VACUUM_LEN);
 386:main.c        ****                         #endif
 387:main.c        ****                         
 388:main.c        ****                         id=0;                                                   //reset sample coun
 1460              		.loc 1 388 0
 1461 0790 5F4B     		ldr	r3, .L76+20
 1462 0792 0022     		movs	r2, #0
 1463 0794 1A60     		str	r2, [r3]
 389:main.c        ****                         data_time = 0;
 1464              		.loc 1 389 0
 1465 0796 5F4B     		ldr	r3, .L76+24
 1466 0798 0022     		movs	r2, #0
 1467 079a 1A60     		str	r2, [r3]
 390:main.c        ****                         sum = 0;
 1468              		.loc 1 390 0
 1469 079c 5E4B     		ldr	r3, .L76+28
 1470 079e 0022     		movs	r2, #0
 1471 07a0 1A60     		str	r2, [r3]
 391:main.c        ****                         average = 0; 
 1472              		.loc 1 391 0
 1473 07a2 564B     		ldr	r3, .L76
 1474 07a4 0022     		movs	r2, #0
 1475 07a6 1A80     		strh	r2, [r3]	@ movhi
 392:main.c        ****                         countdown = 0;
 1476              		.loc 1 392 0
 1477 07a8 5C4B     		ldr	r3, .L76+32
 1478 07aa 0022     		movs	r2, #0
 1479 07ac 1A70     		strb	r2, [r3]
 1480              	.L55:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 35


 393:main.c        ****                     }
 394:main.c        ****                     id++;     
 1481              		.loc 1 394 0
 1482 07ae 584B     		ldr	r3, .L76+20
 1483 07b0 1B68     		ldr	r3, [r3]
 1484 07b2 0133     		adds	r3, r3, #1
 1485 07b4 564A     		ldr	r2, .L76+20
 1486 07b6 1360     		str	r3, [r2]
 395:main.c        ****                     
 396:main.c        ****                     /* if max time allowed for descent has been reached, resurface */
 397:main.c        ****                     if(data_time >= descent_time ){                         // variable descent tim
 1487              		.loc 1 397 0
 1488 07b8 564B     		ldr	r3, .L76+24
 1489 07ba 1A68     		ldr	r2, [r3]
 1490 07bc 584B     		ldr	r3, .L76+36
 1491 07be 1B68     		ldr	r3, [r3]
 1492 07c0 9A42     		cmp	r2, r3
 1493 07c2 17DB     		blt	.L56
 398:main.c        ****                         STATE = RESURFACE;                                      
 1494              		.loc 1 398 0
 1495 07c4 504B     		ldr	r3, .L76+12
 1496 07c6 0422     		movs	r2, #4
 1497 07c8 1A70     		strb	r2, [r3]
 399:main.c        ****                         #ifdef LCD
 400:main.c        ****                             setCursor(0,0);
 1498              		.loc 1 400 0
 1499 07ca 0020     		movs	r0, #0
 1500 07cc 0021     		movs	r1, #0
 1501 07ce FFF7FEFF 		bl	setCursor
 401:main.c        ****                             clear();
 1502              		.loc 1 401 0
 1503 07d2 FFF7FEFF 		bl	clear
 402:main.c        ****                             LCD_print("STATE: RESURFACE");  
 1504              		.loc 1 402 0
 1505 07d6 5348     		ldr	r0, .L76+40
 1506 07d8 FFF7FEFF 		bl	LCD_print
 403:main.c        ****                         #endif
 404:main.c        ****                         id=0;                                               //reset sample counter
 1507              		.loc 1 404 0
 1508 07dc 4C4B     		ldr	r3, .L76+20
 1509 07de 0022     		movs	r2, #0
 1510 07e0 1A60     		str	r2, [r3]
 405:main.c        ****                         data_time = 0;
 1511              		.loc 1 405 0
 1512 07e2 4C4B     		ldr	r3, .L76+24
 1513 07e4 0022     		movs	r2, #0
 1514 07e6 1A60     		str	r2, [r3]
 406:main.c        ****                         sum = 0;                                            //reset sum 
 1515              		.loc 1 406 0
 1516 07e8 4B4B     		ldr	r3, .L76+28
 1517 07ea 0022     		movs	r2, #0
 1518 07ec 1A60     		str	r2, [r3]
 407:main.c        ****                         average = 0;
 1519              		.loc 1 407 0
 1520 07ee 434B     		ldr	r3, .L76
 1521 07f0 0022     		movs	r2, #0
 1522 07f2 1A80     		strh	r2, [r3]	@ movhi
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 36


 1523              	.L56:
 408:main.c        ****                     }
 409:main.c        ****                     
 410:main.c        ****                     collect_flag = 0;
 1524              		.loc 1 410 0
 1525 07f4 4C4B     		ldr	r3, .L76+44
 1526 07f6 0022     		movs	r2, #0
 1527 07f8 1A70     		strb	r2, [r3]
 411:main.c        ****                 }
 412:main.c        ****                 break;
 1528              		.loc 1 412 0
 1529 07fa 6DE1     		b	.L49
 1530              	.L50:
 1531              		.loc 1 412 0 is_stmt 0 discriminator 2
 1532 07fc 6CE1     		b	.L49
 1533              	.L34:
 413:main.c        ****                 
 414:main.c        ****                 case LANDED:
 415:main.c        ****                     if (countdown == 7) {                   // Delay for 7 seconds at bottom
 1534              		.loc 1 415 0 is_stmt 1
 1535 07fe 474B     		ldr	r3, .L76+32
 1536 0800 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1537 0802 072B     		cmp	r3, #7
 1538 0804 08D1     		bne	.L57
 416:main.c        ****                         countdown = 0; 
 1539              		.loc 1 416 0
 1540 0806 454B     		ldr	r3, .L76+32
 1541 0808 0022     		movs	r2, #0
 1542 080a 1A70     		strb	r2, [r3]
 417:main.c        ****                         pulse = 1;                          // next stage of the state
 1543              		.loc 1 417 0
 1544 080c 0123     		movs	r3, #1
 1545 080e C7F81C31 		str	r3, [r7, #284]
 418:main.c        ****                         Solenoid_1_Write(1);                // turn on solenoid 1 for 5 seconds
 1546              		.loc 1 418 0
 1547 0812 0120     		movs	r0, #1
 1548 0814 FFF7FEFF 		bl	Solenoid_1_Write
 1549              	.L57:
 419:main.c        ****                     } 
 420:main.c        ****                     
 421:main.c        ****                     MPU6050_getRotation(&gx, &gy, &gz);     // gather gyro data
 1550              		.loc 1 421 0
 1551 0818 07F14A01 		add	r1, r7, #74
 1552 081c 07F14802 		add	r2, r7, #72
 1553 0820 07F14603 		add	r3, r7, #70
 1554 0824 0846     		mov	r0, r1
 1555 0826 1146     		mov	r1, r2
 1556 0828 1A46     		mov	r2, r3
 1557 082a FFF7FEFF 		bl	MPU6050_getRotation
 422:main.c        ****                     if(collect_flag == 1){                  // Compute gryo data again in case of t
 1558              		.loc 1 422 0
 1559 082e 3E4B     		ldr	r3, .L76+44
 1560 0830 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1561 0832 002B     		cmp	r3, #0
 1562 0834 00F0D180 		beq	.L58
 423:main.c        ****                         if (id < MA_WINDOW){    
 1563              		.loc 1 423 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 37


 1564 0838 354B     		ldr	r3, .L76+20
 1565 083a 1B68     		ldr	r3, [r3]
 1566 083c 0E2B     		cmp	r3, #14
 1567 083e 22DC     		bgt	.L59
 424:main.c        ****                             xsum += gx;
 1568              		.loc 1 424 0
 1569 0840 B7F84A30 		ldrh	r3, [r7, #74]
 1570 0844 1BB2     		sxth	r3, r3
 1571 0846 1846     		mov	r0, r3
 1572 0848 FFF7FEFF 		bl	__aeabi_i2f
 1573 084c 0246     		mov	r2, r0
 1574 084e 374B     		ldr	r3, .L76+48
 1575 0850 1B68     		ldr	r3, [r3]	@ float
 1576 0852 1046     		mov	r0, r2
 1577 0854 1946     		mov	r1, r3
 1578 0856 FFF7FEFF 		bl	__aeabi_fadd
 1579 085a 0346     		mov	r3, r0
 1580 085c 1A46     		mov	r2, r3
 1581 085e 334B     		ldr	r3, .L76+48
 1582 0860 1A60     		str	r2, [r3]	@ float
 425:main.c        ****                             ysum += gy;
 1583              		.loc 1 425 0
 1584 0862 B7F84830 		ldrh	r3, [r7, #72]
 1585 0866 1BB2     		sxth	r3, r3
 1586 0868 1846     		mov	r0, r3
 1587 086a FFF7FEFF 		bl	__aeabi_i2f
 1588 086e 0246     		mov	r2, r0
 1589 0870 2F4B     		ldr	r3, .L76+52
 1590 0872 1B68     		ldr	r3, [r3]	@ float
 1591 0874 1046     		mov	r0, r2
 1592 0876 1946     		mov	r1, r3
 1593 0878 FFF7FEFF 		bl	__aeabi_fadd
 1594 087c 0346     		mov	r3, r0
 1595 087e 1A46     		mov	r2, r3
 1596 0880 2B4B     		ldr	r3, .L76+52
 1597 0882 1A60     		str	r2, [r3]	@ float
 1598 0884 7AE0     		b	.L60
 1599              	.L59:
 426:main.c        ****                         }
 427:main.c        ****                         else if(id == MA_WINDOW){
 1600              		.loc 1 427 0
 1601 0886 224B     		ldr	r3, .L76+20
 1602 0888 1B68     		ldr	r3, [r3]
 1603 088a 0F2B     		cmp	r3, #15
 1604 088c 54D1     		bne	.L61
 428:main.c        ****                             xsum += gx;
 1605              		.loc 1 428 0
 1606 088e B7F84A30 		ldrh	r3, [r7, #74]
 1607 0892 1BB2     		sxth	r3, r3
 1608 0894 1846     		mov	r0, r3
 1609 0896 FFF7FEFF 		bl	__aeabi_i2f
 1610 089a 0246     		mov	r2, r0
 1611 089c 234B     		ldr	r3, .L76+48
 1612 089e 1B68     		ldr	r3, [r3]	@ float
 1613 08a0 1046     		mov	r0, r2
 1614 08a2 1946     		mov	r1, r3
 1615 08a4 FFF7FEFF 		bl	__aeabi_fadd
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 38


 1616 08a8 0346     		mov	r3, r0
 1617 08aa 1A46     		mov	r2, r3
 1618 08ac 1F4B     		ldr	r3, .L76+48
 1619 08ae 1A60     		str	r2, [r3]	@ float
 429:main.c        ****                             ysum += gy;
 1620              		.loc 1 429 0
 1621 08b0 B7F84830 		ldrh	r3, [r7, #72]
 1622 08b4 1BB2     		sxth	r3, r3
 1623 08b6 1846     		mov	r0, r3
 1624 08b8 FFF7FEFF 		bl	__aeabi_i2f
 1625 08bc 0246     		mov	r2, r0
 1626 08be 1C4B     		ldr	r3, .L76+52
 1627 08c0 1B68     		ldr	r3, [r3]	@ float
 1628 08c2 1046     		mov	r0, r2
 1629 08c4 1946     		mov	r1, r3
 1630 08c6 FFF7FEFF 		bl	__aeabi_fadd
 1631 08ca 0346     		mov	r3, r0
 1632 08cc 1A46     		mov	r2, r3
 1633 08ce 184B     		ldr	r3, .L76+52
 1634 08d0 1A60     		str	r2, [r3]	@ float
 430:main.c        ****                             xavg = xsum/MA_WINDOW;                            //compute baseline av
 1635              		.loc 1 430 0
 1636 08d2 164B     		ldr	r3, .L76+48
 1637 08d4 1B68     		ldr	r3, [r3]	@ float
 1638 08d6 1846     		mov	r0, r3
 1639 08d8 1649     		ldr	r1, .L76+56
 1640 08da FFF7FEFF 		bl	__aeabi_fdiv
 1641 08de 0346     		mov	r3, r0
 1642 08e0 1A46     		mov	r2, r3
 1643 08e2 074B     		ldr	r3, .L76+4
 1644 08e4 1A60     		str	r2, [r3]	@ float
 431:main.c        ****                             yavg = ysum/MA_WINDOW;
 1645              		.loc 1 431 0
 1646 08e6 124B     		ldr	r3, .L76+52
 1647 08e8 1B68     		ldr	r3, [r3]	@ float
 1648 08ea 1846     		mov	r0, r3
 1649 08ec 1149     		ldr	r1, .L76+56
 1650 08ee FFF7FEFF 		bl	__aeabi_fdiv
 1651 08f2 0346     		mov	r3, r0
 1652 08f4 1A46     		mov	r2, r3
 1653 08f6 034B     		ldr	r3, .L76+8
 1654 08f8 1A60     		str	r2, [r3]	@ float
 1655 08fa 3FE0     		b	.L60
 1656              	.L77:
 1657              		.align	2
 1658              	.L76:
 1659 08fc 00000000 		.word	average
 1660 0900 00000000 		.word	xavg
 1661 0904 00000000 		.word	yavg
 1662 0908 00000000 		.word	STATE
 1663 090c 50000000 		.word	.LC11
 1664 0910 00000000 		.word	id
 1665 0914 00000000 		.word	data_time
 1666 0918 00000000 		.word	sum
 1667 091c 00000000 		.word	countdown
 1668 0920 00000000 		.word	descent_time
 1669 0924 60000000 		.word	.LC12
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 39


 1670 0928 00000000 		.word	collect_flag
 1671 092c 00000000 		.word	xsum
 1672 0930 00000000 		.word	ysum
 1673 0934 00007041 		.word	1097859072
 1674              	.L61:
 432:main.c        ****                         }
 433:main.c        ****                         else{
 434:main.c        ****                             xavg = ComputeMA(xavg, MA_WINDOW, gx);
 1675              		.loc 1 434 0
 1676 0938 684B     		ldr	r3, .L78
 1677 093a 1C68     		ldr	r4, [r3]	@ float
 1678 093c B7F84A30 		ldrh	r3, [r7, #74]
 1679 0940 1BB2     		sxth	r3, r3
 1680 0942 1846     		mov	r0, r3
 1681 0944 FFF7FEFF 		bl	__aeabi_i2f
 1682 0948 0346     		mov	r3, r0
 1683 094a 2046     		mov	r0, r4
 1684 094c 0F21     		movs	r1, #15
 1685 094e 1A46     		mov	r2, r3
 1686 0950 FFF7FEFF 		bl	ComputeMA
 1687 0954 0246     		mov	r2, r0
 1688 0956 614B     		ldr	r3, .L78
 1689 0958 1A60     		str	r2, [r3]	@ float
 435:main.c        ****                             yavg = ComputeMA(yavg, MA_WINDOW, gy);
 1690              		.loc 1 435 0
 1691 095a 614B     		ldr	r3, .L78+4
 1692 095c 1C68     		ldr	r4, [r3]	@ float
 1693 095e B7F84830 		ldrh	r3, [r7, #72]
 1694 0962 1BB2     		sxth	r3, r3
 1695 0964 1846     		mov	r0, r3
 1696 0966 FFF7FEFF 		bl	__aeabi_i2f
 1697 096a 0346     		mov	r3, r0
 1698 096c 2046     		mov	r0, r4
 1699 096e 0F21     		movs	r1, #15
 1700 0970 1A46     		mov	r2, r3
 1701 0972 FFF7FEFF 		bl	ComputeMA
 1702 0976 0246     		mov	r2, r0
 1703 0978 594B     		ldr	r3, .L78+4
 1704 097a 1A60     		str	r2, [r3]	@ float
 1705              	.L60:
 436:main.c        ****                         }
 437:main.c        ****                         if (abs((int)xavg) > DEGREES_30 || abs((int)yavg) > DEGREES_30){ // If tilt
 1706              		.loc 1 437 0
 1707 097c 574B     		ldr	r3, .L78
 1708 097e 1B68     		ldr	r3, [r3]	@ float
 1709 0980 1846     		mov	r0, r3
 1710 0982 FFF7FEFF 		bl	__aeabi_f2iz
 1711 0986 0346     		mov	r3, r0
 1712 0988 002B     		cmp	r3, #0
 1713 098a B8BF     		it	lt
 1714 098c 5B42     		rsblt	r3, r3, #0
 1715 098e 40F65A72 		movw	r2, #3930
 1716 0992 9342     		cmp	r3, r2
 1717 0994 0CDC     		bgt	.L62
 1718              		.loc 1 437 0 is_stmt 0 discriminator 1
 1719 0996 524B     		ldr	r3, .L78+4
 1720 0998 1B68     		ldr	r3, [r3]	@ float
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 40


 1721 099a 1846     		mov	r0, r3
 1722 099c FFF7FEFF 		bl	__aeabi_f2iz
 1723 09a0 0346     		mov	r3, r0
 1724 09a2 002B     		cmp	r3, #0
 1725 09a4 B8BF     		it	lt
 1726 09a6 5B42     		rsblt	r3, r3, #0
 1727 09a8 40F65A72 		movw	r2, #3930
 1728 09ac 9342     		cmp	r3, r2
 1729 09ae 0CDD     		ble	.L63
 1730              	.L62:
 438:main.c        ****                             STATE = RESURFACE;
 1731              		.loc 1 438 0 is_stmt 1
 1732 09b0 4C4B     		ldr	r3, .L78+8
 1733 09b2 0422     		movs	r2, #4
 1734 09b4 1A70     		strb	r2, [r3]
 439:main.c        ****                             clear();
 1735              		.loc 1 439 0
 1736 09b6 FFF7FEFF 		bl	clear
 440:main.c        ****                             LCD_print("Tilted");
 1737              		.loc 1 440 0
 1738 09ba 4B48     		ldr	r0, .L78+12
 1739 09bc FFF7FEFF 		bl	LCD_print
 441:main.c        ****                             clear();
 1740              		.loc 1 441 0
 1741 09c0 FFF7FEFF 		bl	clear
 442:main.c        ****                             LCD_print("STATE: RESURFACING");
 1742              		.loc 1 442 0
 1743 09c4 4948     		ldr	r0, .L78+16
 1744 09c6 FFF7FEFF 		bl	LCD_print
 1745              	.L63:
 443:main.c        ****                         }
 444:main.c        ****                         collect_flag = 0;
 1746              		.loc 1 444 0
 1747 09ca 494B     		ldr	r3, .L78+20
 1748 09cc 0022     		movs	r2, #0
 1749 09ce 1A70     		strb	r2, [r3]
 445:main.c        ****                         id++;
 1750              		.loc 1 445 0
 1751 09d0 484B     		ldr	r3, .L78+24
 1752 09d2 1B68     		ldr	r3, [r3]
 1753 09d4 0133     		adds	r3, r3, #1
 1754 09d6 474A     		ldr	r2, .L78+24
 1755 09d8 1360     		str	r3, [r2]
 1756              	.L58:
 446:main.c        ****                     }
 447:main.c        ****                     
 448:main.c        ****                     if (countdown == 5 && pulse){           // Second stage, turn off solenoid
 1757              		.loc 1 448 0
 1758 09da 474B     		ldr	r3, .L78+28
 1759 09dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1760 09de 052B     		cmp	r3, #5
 1761 09e0 0ED1     		bne	.L64
 1762              		.loc 1 448 0 is_stmt 0 discriminator 1
 1763 09e2 D7F81C31 		ldr	r3, [r7, #284]
 1764 09e6 002B     		cmp	r3, #0
 1765 09e8 0AD0     		beq	.L64
 449:main.c        ****                         pulse++;
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 41


 1766              		.loc 1 449 0 is_stmt 1
 1767 09ea D7F81C31 		ldr	r3, [r7, #284]
 1768 09ee 0133     		adds	r3, r3, #1
 1769 09f0 C7F81C31 		str	r3, [r7, #284]
 450:main.c        ****                         Solenoid_1_Write(0);                // turn off soleniod 1
 1770              		.loc 1 450 0
 1771 09f4 0020     		movs	r0, #0
 1772 09f6 FFF7FEFF 		bl	Solenoid_1_Write
 451:main.c        ****                         countdown = 0;
 1773              		.loc 1 451 0
 1774 09fa 3F4B     		ldr	r3, .L78+28
 1775 09fc 0022     		movs	r2, #0
 1776 09fe 1A70     		strb	r2, [r3]
 1777              	.L64:
 452:main.c        ****                     }
 453:main.c        ****                     if (countdown == 3 && pulse == 2){      // Delay for 3 seconds then resurface
 1778              		.loc 1 453 0
 1779 0a00 3D4B     		ldr	r3, .L78+28
 1780 0a02 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1781 0a04 032B     		cmp	r3, #3
 1782 0a06 16D1     		bne	.L65
 1783              		.loc 1 453 0 is_stmt 0 discriminator 1
 1784 0a08 D7F81C31 		ldr	r3, [r7, #284]
 1785 0a0c 022B     		cmp	r3, #2
 1786 0a0e 12D1     		bne	.L65
 454:main.c        ****                         STATE = RESURFACE;
 1787              		.loc 1 454 0 is_stmt 1
 1788 0a10 344B     		ldr	r3, .L78+8
 1789 0a12 0422     		movs	r2, #4
 1790 0a14 1A70     		strb	r2, [r3]
 455:main.c        ****                         
 456:main.c        ****                         #ifdef LCD
 457:main.c        ****                             setCursor(0,0);
 1791              		.loc 1 457 0
 1792 0a16 0020     		movs	r0, #0
 1793 0a18 0021     		movs	r1, #0
 1794 0a1a FFF7FEFF 		bl	setCursor
 458:main.c        ****                             clear();
 1795              		.loc 1 458 0
 1796 0a1e FFF7FEFF 		bl	clear
 459:main.c        ****                             LCD_print("STATE: RESURFACING");  
 1797              		.loc 1 459 0
 1798 0a22 3248     		ldr	r0, .L78+16
 1799 0a24 FFF7FEFF 		bl	LCD_print
 460:main.c        ****                         #endif
 461:main.c        ****                         #ifdef SD
 462:main.c        ****                             FS_Write(fsfile, resurfbuf, RESURFACE_LEN);
 463:main.c        ****                         #endif
 464:main.c        ****                         pulse = 0;
 1800              		.loc 1 464 0
 1801 0a28 0023     		movs	r3, #0
 1802 0a2a C7F81C31 		str	r3, [r7, #284]
 465:main.c        ****                         countdown = 0;
 1803              		.loc 1 465 0
 1804 0a2e 324B     		ldr	r3, .L78+28
 1805 0a30 0022     		movs	r2, #0
 1806 0a32 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 42


 466:main.c        ****                     }
 467:main.c        ****                 break;
 1807              		.loc 1 467 0
 1808 0a34 50E0     		b	.L49
 1809              	.L65:
 1810              		.loc 1 467 0 is_stmt 0 discriminator 3
 1811 0a36 4FE0     		b	.L49
 1812              	.L35:
 468:main.c        ****                 
 469:main.c        ****             case RESURFACE:
 470:main.c        ****                 if (PANIC_flag)                 // Display that moisture sensor triggered
 1813              		.loc 1 470 0 is_stmt 1
 1814 0a38 304B     		ldr	r3, .L78+32
 1815 0a3a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1816 0a3c 002B     		cmp	r3, #0
 1817 0a3e 02D0     		beq	.L66
 471:main.c        ****                     LCD_print("WATER DETECTED");
 1818              		.loc 1 471 0
 1819 0a40 2F48     		ldr	r0, .L78+36
 1820 0a42 FFF7FEFF 		bl	LCD_print
 1821              	.L66:
 472:main.c        ****                     
 473:main.c        ****                 Solenoid_2_Write(1);            // turn on lift bag solenoid                
 1822              		.loc 1 473 0
 1823 0a46 0120     		movs	r0, #1
 1824 0a48 FFF7FEFF 		bl	Solenoid_2_Write
 474:main.c        ****                 
 475:main.c        ****                 //check pressure sensor to confirm we are at the surface
 476:main.c        ****                 if (countdown == 3){
 1825              		.loc 1 476 0
 1826 0a4c 2A4B     		ldr	r3, .L78+28
 1827 0a4e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1828 0a50 032B     		cmp	r3, #3
 1829 0a52 0ED1     		bne	.L67
 477:main.c        ****                     Solenoid_2_Write(0);        // Turn off solenoid 2 for 1 second, 
 1830              		.loc 1 477 0
 1831 0a54 0020     		movs	r0, #0
 1832 0a56 FFF7FEFF 		bl	Solenoid_2_Write
 478:main.c        ****                     CyDelay(1000u);
 1833              		.loc 1 478 0
 1834 0a5a 4FF47A70 		mov	r0, #1000
 1835 0a5e FFF7FEFF 		bl	CyDelay
 479:main.c        ****                     pulse++;
 1836              		.loc 1 479 0
 1837 0a62 D7F81C31 		ldr	r3, [r7, #284]
 1838 0a66 0133     		adds	r3, r3, #1
 1839 0a68 C7F81C31 		str	r3, [r7, #284]
 480:main.c        ****                     countdown = 0;
 1840              		.loc 1 480 0
 1841 0a6c 224B     		ldr	r3, .L78+28
 1842 0a6e 0022     		movs	r2, #0
 1843 0a70 1A70     		strb	r2, [r3]
 1844              	.L67:
 481:main.c        ****                 }
 482:main.c        ****                 if (pulse == 2){
 1845              		.loc 1 482 0
 1846 0a72 D7F81C31 		ldr	r3, [r7, #284]
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 43


 1847 0a76 022B     		cmp	r3, #2
 1848 0a78 0FD1     		bne	.L68
 483:main.c        ****                     STATE = TRANSMIT;
 1849              		.loc 1 483 0
 1850 0a7a 1A4B     		ldr	r3, .L78+8
 1851 0a7c 0522     		movs	r2, #5
 1852 0a7e 1A70     		strb	r2, [r3]
 484:main.c        ****                     #ifdef SD                                   //close old file, open new one
 485:main.c        ****                         FS_FClose(fsfile);
 486:main.c        ****                         sprintf(file, "test%d.txt", ++testnum);
 487:main.c        ****                         fsfile = FS_FOpen(file, "w");
 488:main.c        ****                     #endif 
 489:main.c        ****                     
 490:main.c        ****                     #ifdef LCD
 491:main.c        ****                         setCursor(0,0);
 1853              		.loc 1 491 0
 1854 0a80 0020     		movs	r0, #0
 1855 0a82 0021     		movs	r1, #0
 1856 0a84 FFF7FEFF 		bl	setCursor
 492:main.c        ****                         clear();
 1857              		.loc 1 492 0
 1858 0a88 FFF7FEFF 		bl	clear
 493:main.c        ****                         LCD_print("TRANSMIT");  
 1859              		.loc 1 493 0
 1860 0a8c 1D48     		ldr	r0, .L78+40
 1861 0a8e FFF7FEFF 		bl	LCD_print
 494:main.c        ****                     #endif
 495:main.c        ****                     #ifdef SD
 496:main.c        ****                         FS_Write(fsfile, transbuf, TRANSMIT_LEN);
 497:main.c        ****                     #endif
 498:main.c        ****                     countdown = 0;
 1862              		.loc 1 498 0
 1863 0a92 194B     		ldr	r3, .L78+28
 1864 0a94 0022     		movs	r2, #0
 1865 0a96 1A70     		strb	r2, [r3]
 499:main.c        ****                 }
 500:main.c        ****                 break;
 1866              		.loc 1 500 0
 1867 0a98 1EE0     		b	.L49
 1868              	.L68:
 1869              		.loc 1 500 0 is_stmt 0 discriminator 4
 1870 0a9a 1DE0     		b	.L49
 1871              	.L36:
 501:main.c        ****                 
 502:main.c        ****             case TRANSMIT:
 503:main.c        ****                 if (transmit_flag){
 1872              		.loc 1 503 0 is_stmt 1
 1873 0a9c 1A4B     		ldr	r3, .L78+44
 1874 0a9e 1B68     		ldr	r3, [r3]
 1875 0aa0 002B     		cmp	r3, #0
 1876 0aa2 0BD0     		beq	.L69
 504:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &t); // Here, the STATE variable only matters,
 1877              		.loc 1 504 0
 1878 0aa4 07F1B802 		add	r2, r7, #184
 1879 0aa8 07F13C03 		add	r3, r7, #60
 1880 0aac 1046     		mov	r0, r2
 1881 0aae 0D49     		ldr	r1, .L78+8
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 44


 1882 0ab0 0A22     		movs	r2, #10
 1883 0ab2 FFF7FEFF 		bl	BT_Send
 505:main.c        ****                     transmit_flag = 0;
 1884              		.loc 1 505 0
 1885 0ab6 144B     		ldr	r3, .L78+44
 1886 0ab8 0022     		movs	r2, #0
 1887 0aba 1A60     		str	r2, [r3]
 1888              	.L69:
 506:main.c        ****                 }
 507:main.c        ****                 data_time = 0;
 1889              		.loc 1 507 0
 1890 0abc 134B     		ldr	r3, .L78+48
 1891 0abe 0022     		movs	r2, #0
 1892 0ac0 1A60     		str	r2, [r3]
 508:main.c        ****                 countdown = 0;
 1893              		.loc 1 508 0
 1894 0ac2 0D4B     		ldr	r3, .L78+28
 1895 0ac4 0022     		movs	r2, #0
 1896 0ac6 1A70     		strb	r2, [r3]
 509:main.c        ****                 pulse = 0;
 1897              		.loc 1 509 0
 1898 0ac8 0023     		movs	r3, #0
 1899 0aca C7F81C31 		str	r3, [r7, #284]
 510:main.c        ****                 depth = 0;
 1900              		.loc 1 510 0
 1901 0ace 104B     		ldr	r3, .L78+52
 1902 0ad0 0022     		movs	r2, #0
 1903 0ad2 1A60     		str	r2, [r3]
 511:main.c        ****                 
 512:main.c        ****                 break;
 1904              		.loc 1 512 0
 1905 0ad4 00E0     		b	.L49
 1906              	.L71:
 513:main.c        ****                 
 514:main.c        ****             default:
 515:main.c        ****                 break;
 1907              		.loc 1 515 0
 1908 0ad6 00BF     		nop
 1909              	.L49:
 1910              	.LBE2:
 516:main.c        ****         
 517:main.c        ****         }
 518:main.c        ****     }
 1911              		.loc 1 518 0 discriminator 1
 1912 0ad8 FFF73CBB 		b	.L70
 1913              	.L79:
 1914              		.align	2
 1915              	.L78:
 1916 0adc 00000000 		.word	xavg
 1917 0ae0 00000000 		.word	yavg
 1918 0ae4 00000000 		.word	STATE
 1919 0ae8 74000000 		.word	.LC13
 1920 0aec 7C000000 		.word	.LC14
 1921 0af0 00000000 		.word	collect_flag
 1922 0af4 00000000 		.word	id
 1923 0af8 00000000 		.word	countdown
 1924 0afc 00000000 		.word	PANIC_flag
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 45


 1925 0b00 90000000 		.word	.LC15
 1926 0b04 A0000000 		.word	.LC16
 1927 0b08 00000000 		.word	transmit_flag
 1928 0b0c 00000000 		.word	data_time
 1929 0b10 00000000 		.word	depth
 1930              		.cfi_endproc
 1931              	.LFE67:
 1932              		.size	main, .-main
 1933 0b14 AFF30080 		.section	.rodata
 1934 0119 000000   		.align	2
 1935              	.LC17:
 1936 011c 53642076 		.ascii	"Sd vol succeed\000"
 1936      6F6C2073 
 1936      75636365 
 1936      656400
 1937 012b 00       		.align	2
 1938              	.LC18:
 1939 012c 53642076 		.ascii	"Sd vol failed\000"
 1939      6F6C2066 
 1939      61696C65 
 1939      6400
 1940 013a 0000     		.align	2
 1941              	.LC19:
 1942 013c 666F726D 		.ascii	"format Succeeded\000"
 1942      61742053 
 1942      75636365 
 1942      65646564 
 1942      00
 1943 014d 000000   		.align	2
 1944              	.LC20:
 1945 0150 666F726D 		.ascii	"format Failed\000"
 1945      61742046 
 1945      61696C65 
 1945      6400
 1946 015e 0000     		.align	2
 1947              	.LC21:
 1948 0160 7700     		.ascii	"w\000"
 1949 0162 0000     		.align	2
 1950              	.LC22:
 1951 0164 46696C65 		.ascii	"File \000"
 1951      2000
 1952 016a 0000     		.align	2
 1953              	.LC23:
 1954 016c 77617320 		.ascii	"was opened\000"
 1954      6F70656E 
 1954      656400
 1955 0177 00       		.align	2
 1956              	.LC24:
 1957 0178 77726974 		.ascii	"written to file\000"
 1957      74656E20 
 1957      746F2066 
 1957      696C6500 
 1958              		.align	2
 1959              	.LC25:
 1960 0188 4661696C 		.ascii	"Failed to write\000"
 1960      65642074 
 1960      6F207772 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 46


 1960      69746500 
 1961              		.align	2
 1962              	.LC26:
 1963 0198 66696C65 		.ascii	"file not created\000"
 1963      206E6F74 
 1963      20637265 
 1963      61746564 
 1963      00
 1964 01a9 000000   		.align	2
 1965              	.LC27:
 1966 01ac 0A2D2D2D 		.ascii	"\012------------\012\000"
 1966      2D2D2D2D 
 1966      2D2D2D2D 
 1966      2D0A00
 1967 01bb 00       		.section	.text.SD_SETUP,"ax",%progbits
 1968              		.align	2
 1969              		.global	SD_SETUP
 1970              		.thumb
 1971              		.thumb_func
 1972              		.type	SD_SETUP, %function
 1973              	SD_SETUP:
 1974              	.LFB68:
 519:main.c        **** }
 520:main.c        **** 
 521:main.c        **** int SD_SETUP(char* filename){
 1975              		.loc 1 521 0
 1976              		.cfi_startproc
 1977              		@ args = 0, pretend = 0, frame = 16
 1978              		@ frame_needed = 1, uses_anonymous_args = 0
 1979 0000 90B5     		push	{r4, r7, lr}
 1980              		.cfi_def_cfa_offset 12
 1981              		.cfi_offset 4, -12
 1982              		.cfi_offset 7, -8
 1983              		.cfi_offset 14, -4
 1984 0002 85B0     		sub	sp, sp, #20
 1985              		.cfi_def_cfa_offset 32
 1986 0004 00AF     		add	r7, sp, #0
 1987              		.cfi_def_cfa_register 7
 1988 0006 7860     		str	r0, [r7, #4]
 522:main.c        **** int success = 1;
 1989              		.loc 1 522 0
 1990 0008 0123     		movs	r3, #1
 1991 000a FB60     		str	r3, [r7, #12]
 523:main.c        ****       FS_Init();
 1992              		.loc 1 523 0
 1993 000c FFF7FEFF 		bl	FS_Init
 524:main.c        ****             FS_Mount(volume);
 1994              		.loc 1 524 0
 1995 0010 3A48     		ldr	r0, .L90
 1996 0012 FFF7FEFF 		bl	FS_Mount
 525:main.c        ****             if(0 != FS_GetVolumeName(0u, volume, 9u))
 1997              		.loc 1 525 0
 1998 0016 0020     		movs	r0, #0
 1999 0018 3849     		ldr	r1, .L90
 2000 001a 0922     		movs	r2, #9
 2001 001c FFF7FEFF 		bl	FS_GetVolumeName
 2002 0020 0346     		mov	r3, r0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 47


 2003 0022 002B     		cmp	r3, #0
 2004 0024 03D0     		beq	.L81
 526:main.c        ****                 /* Getting volume name succeeded so prompt it on the LCD */
 527:main.c        ****                 LCD_print("Sd vol succeed");
 2005              		.loc 1 527 0
 2006 0026 3648     		ldr	r0, .L90+4
 2007 0028 FFF7FEFF 		bl	LCD_print
 2008 002c 04E0     		b	.L82
 2009              	.L81:
 528:main.c        ****             else{
 529:main.c        ****                 LCD_print("Sd vol failed");
 2010              		.loc 1 529 0
 2011 002e 3548     		ldr	r0, .L90+8
 2012 0030 FFF7FEFF 		bl	LCD_print
 530:main.c        ****                 success = 0;
 2013              		.loc 1 530 0
 2014 0034 0023     		movs	r3, #0
 2015 0036 FB60     		str	r3, [r7, #12]
 2016              	.L82:
 531:main.c        ****             }
 532:main.c        ****             CyDelay(500u);
 2017              		.loc 1 532 0
 2018 0038 4FF4FA70 		mov	r0, #500
 2019 003c FFF7FEFF 		bl	CyDelay
 533:main.c        ****             clear();
 2020              		.loc 1 533 0
 2021 0040 FFF7FEFF 		bl	clear
 534:main.c        ****             if(0 == FS_FormatSD(volume))
 2022              		.loc 1 534 0
 2023 0044 2D48     		ldr	r0, .L90
 2024 0046 FFF7FEFF 		bl	FS_FormatSD
 2025 004a 0346     		mov	r3, r0
 2026 004c 002B     		cmp	r3, #0
 2027 004e 03D1     		bne	.L83
 535:main.c        ****                 LCD_print("format Succeeded");
 2028              		.loc 1 535 0
 2029 0050 2D48     		ldr	r0, .L90+12
 2030 0052 FFF7FEFF 		bl	LCD_print
 2031 0056 04E0     		b	.L84
 2032              	.L83:
 536:main.c        ****             else{
 537:main.c        ****                 LCD_print("format Failed");
 2033              		.loc 1 537 0
 2034 0058 2C48     		ldr	r0, .L90+16
 2035 005a FFF7FEFF 		bl	LCD_print
 538:main.c        ****                 success = 0;
 2036              		.loc 1 538 0
 2037 005e 0023     		movs	r3, #0
 2038 0060 FB60     		str	r3, [r7, #12]
 2039              	.L84:
 539:main.c        ****             }
 540:main.c        ****             
 541:main.c        ****             CyDelay(500u);
 2040              		.loc 1 541 0
 2041 0062 4FF4FA70 		mov	r0, #500
 2042 0066 FFF7FEFF 		bl	CyDelay
 542:main.c        ****             clear();
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 48


 2043              		.loc 1 542 0
 2044 006a FFF7FEFF 		bl	clear
 543:main.c        ****             
 544:main.c        ****             fsfile = FS_FOpen(filename, "w");
 2045              		.loc 1 544 0
 2046 006e 7868     		ldr	r0, [r7, #4]
 2047 0070 2749     		ldr	r1, .L90+20
 2048 0072 FFF7FEFF 		bl	FS_FOpen
 2049 0076 0246     		mov	r2, r0
 2050 0078 264B     		ldr	r3, .L90+24
 2051 007a 1A60     		str	r2, [r3]
 545:main.c        ****             if(fsfile)
 2052              		.loc 1 545 0
 2053 007c 254B     		ldr	r3, .L90+24
 2054 007e 1B68     		ldr	r3, [r3]
 2055 0080 002B     		cmp	r3, #0
 2056 0082 29D0     		beq	.L85
 546:main.c        ****             {
 547:main.c        ****                 /* Indicate successful file creation message */
 548:main.c        ****                 LCD_print("File ");
 2057              		.loc 1 548 0
 2058 0084 2448     		ldr	r0, .L90+28
 2059 0086 FFF7FEFF 		bl	LCD_print
 549:main.c        ****                 LCD_print("was opened");
 2060              		.loc 1 549 0
 2061 008a 2448     		ldr	r0, .L90+32
 2062 008c FFF7FEFF 		bl	LCD_print
 550:main.c        ****                 /* Need some delay to indicate output on the LCD */
 551:main.c        ****                 CyDelay(500u);
 2063              		.loc 1 551 0
 2064 0090 4FF4FA70 		mov	r0, #500
 2065 0094 FFF7FEFF 		bl	CyDelay
 552:main.c        ****                 clear();
 2066              		.loc 1 552 0
 2067 0098 FFF7FEFF 		bl	clear
 553:main.c        ****                 
 554:main.c        ****                 if(0 != FS_Write(fsfile, filename, strlen(filename))) 
 2068              		.loc 1 554 0
 2069 009c 1D4B     		ldr	r3, .L90+24
 2070 009e 1C68     		ldr	r4, [r3]
 2071 00a0 7868     		ldr	r0, [r7, #4]
 2072 00a2 FFF7FEFF 		bl	strlen
 2073 00a6 0346     		mov	r3, r0
 2074 00a8 2046     		mov	r0, r4
 2075 00aa 7968     		ldr	r1, [r7, #4]
 2076 00ac 1A46     		mov	r2, r3
 2077 00ae FFF7FEFF 		bl	FS_Write
 2078 00b2 0346     		mov	r3, r0
 2079 00b4 002B     		cmp	r3, #0
 2080 00b6 03D0     		beq	.L86
 555:main.c        ****                     /* Inditate that data was written to a file */
 556:main.c        ****                     LCD_print("written to file");
 2081              		.loc 1 556 0
 2082 00b8 1948     		ldr	r0, .L90+36
 2083 00ba FFF7FEFF 		bl	LCD_print
 2084 00be 06E0     		b	.L87
 2085              	.L86:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 49


 557:main.c        ****                 else {
 558:main.c        ****                     LCD_print("Failed to write");
 2086              		.loc 1 558 0
 2087 00c0 1848     		ldr	r0, .L90+40
 2088 00c2 FFF7FEFF 		bl	LCD_print
 559:main.c        ****                     success = 0;
 2089              		.loc 1 559 0
 2090 00c6 0023     		movs	r3, #0
 2091 00c8 FB60     		str	r3, [r7, #12]
 560:main.c        ****                     clear();
 2092              		.loc 1 560 0
 2093 00ca FFF7FEFF 		bl	clear
 2094              	.L87:
 561:main.c        ****                 }
 562:main.c        ****                 CyDelay(500u);
 2095              		.loc 1 562 0
 2096 00ce 4FF4FA70 		mov	r0, #500
 2097 00d2 FFF7FEFF 		bl	CyDelay
 2098 00d6 04E0     		b	.L88
 2099              	.L85:
 563:main.c        ****             }
 564:main.c        ****             else{
 565:main.c        ****                 LCD_print("file not created");
 2100              		.loc 1 565 0
 2101 00d8 1348     		ldr	r0, .L90+44
 2102 00da FFF7FEFF 		bl	LCD_print
 566:main.c        ****                 success = 0;
 2103              		.loc 1 566 0
 2104 00de 0023     		movs	r3, #0
 2105 00e0 FB60     		str	r3, [r7, #12]
 2106              	.L88:
 567:main.c        ****             }
 568:main.c        ****         FS_Write(fsfile, "\n------------\n", 14);
 2107              		.loc 1 568 0
 2108 00e2 0C4B     		ldr	r3, .L90+24
 2109 00e4 1B68     		ldr	r3, [r3]
 2110 00e6 1846     		mov	r0, r3
 2111 00e8 1049     		ldr	r1, .L90+48
 2112 00ea 0E22     		movs	r2, #14
 2113 00ec FFF7FEFF 		bl	FS_Write
 569:main.c        **** return success;
 2114              		.loc 1 569 0
 2115 00f0 FB68     		ldr	r3, [r7, #12]
 570:main.c        **** }
 2116              		.loc 1 570 0
 2117 00f2 1846     		mov	r0, r3
 2118 00f4 1437     		adds	r7, r7, #20
 2119              		.cfi_def_cfa_offset 12
 2120 00f6 BD46     		mov	sp, r7
 2121              		.cfi_def_cfa_register 13
 2122              		@ sp needed
 2123 00f8 90BD     		pop	{r4, r7, pc}
 2124              	.L91:
 2125 00fa 00BF     		.align	2
 2126              	.L90:
 2127 00fc 00000000 		.word	volume
 2128 0100 1C010000 		.word	.LC17
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 50


 2129 0104 2C010000 		.word	.LC18
 2130 0108 3C010000 		.word	.LC19
 2131 010c 50010000 		.word	.LC20
 2132 0110 60010000 		.word	.LC21
 2133 0114 00000000 		.word	fsfile
 2134 0118 64010000 		.word	.LC22
 2135 011c 6C010000 		.word	.LC23
 2136 0120 78010000 		.word	.LC24
 2137 0124 88010000 		.word	.LC25
 2138 0128 98010000 		.word	.LC26
 2139 012c AC010000 		.word	.LC27
 2140              		.cfi_endproc
 2141              	.LFE68:
 2142              		.size	SD_SETUP, .-SD_SETUP
 2143              		.text
 2144              	.Letext0:
 2145              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2146              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2147              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2148              		.file 5 ".\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 2149              		.file 6 "functions.h"
 2150              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2151              		.file 8 "./mpu6050.h"
 2152              		.section	.debug_info,"",%progbits
 2153              	.Ldebug_info0:
 2154 0000 65060000 		.4byte	0x665
 2155 0004 0400     		.2byte	0x4
 2156 0006 00000000 		.4byte	.Ldebug_abbrev0
 2157 000a 04       		.byte	0x4
 2158 000b 01       		.uleb128 0x1
 2159 000c 1F010000 		.4byte	.LASF87
 2160 0010 01       		.byte	0x1
 2161 0011 2D030000 		.4byte	.LASF88
 2162 0015 B0020000 		.4byte	.LASF89
 2163 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2164 001d 00000000 		.4byte	0
 2165 0021 00000000 		.4byte	.Ldebug_line0
 2166 0025 02       		.uleb128 0x2
 2167 0026 01       		.byte	0x1
 2168 0027 06       		.byte	0x6
 2169 0028 21020000 		.4byte	.LASF0
 2170 002c 03       		.uleb128 0x3
 2171 002d 1B040000 		.4byte	.LASF2
 2172 0031 02       		.byte	0x2
 2173 0032 1D       		.byte	0x1d
 2174 0033 37000000 		.4byte	0x37
 2175 0037 02       		.uleb128 0x2
 2176 0038 01       		.byte	0x1
 2177 0039 08       		.byte	0x8
 2178 003a 01020000 		.4byte	.LASF1
 2179 003e 03       		.uleb128 0x3
 2180 003f 80030000 		.4byte	.LASF3
 2181 0043 02       		.byte	0x2
 2182 0044 29       		.byte	0x29
 2183 0045 49000000 		.4byte	0x49
 2184 0049 02       		.uleb128 0x2
 2185 004a 02       		.byte	0x2
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 51


 2186 004b 05       		.byte	0x5
 2187 004c BB000000 		.4byte	.LASF4
 2188 0050 02       		.uleb128 0x2
 2189 0051 02       		.byte	0x2
 2190 0052 07       		.byte	0x7
 2191 0053 69020000 		.4byte	.LASF5
 2192 0057 03       		.uleb128 0x3
 2193 0058 76030000 		.4byte	.LASF6
 2194 005c 02       		.byte	0x2
 2195 005d 3F       		.byte	0x3f
 2196 005e 62000000 		.4byte	0x62
 2197 0062 02       		.uleb128 0x2
 2198 0063 04       		.byte	0x4
 2199 0064 05       		.byte	0x5
 2200 0065 86020000 		.4byte	.LASF7
 2201 0069 03       		.uleb128 0x3
 2202 006a 63030000 		.4byte	.LASF8
 2203 006e 02       		.byte	0x2
 2204 006f 41       		.byte	0x41
 2205 0070 74000000 		.4byte	0x74
 2206 0074 02       		.uleb128 0x2
 2207 0075 04       		.byte	0x4
 2208 0076 07       		.byte	0x7
 2209 0077 39030000 		.4byte	.LASF9
 2210 007b 02       		.uleb128 0x2
 2211 007c 08       		.byte	0x8
 2212 007d 05       		.byte	0x5
 2213 007e 00010000 		.4byte	.LASF10
 2214 0082 02       		.uleb128 0x2
 2215 0083 08       		.byte	0x8
 2216 0084 07       		.byte	0x7
 2217 0085 2D020000 		.4byte	.LASF11
 2218 0089 04       		.uleb128 0x4
 2219 008a 04       		.byte	0x4
 2220 008b 05       		.byte	0x5
 2221 008c 696E7400 		.ascii	"int\000"
 2222 0090 02       		.uleb128 0x2
 2223 0091 04       		.byte	0x4
 2224 0092 07       		.byte	0x7
 2225 0093 57020000 		.4byte	.LASF12
 2226 0097 03       		.uleb128 0x3
 2227 0098 D5000000 		.4byte	.LASF13
 2228 009c 03       		.byte	0x3
 2229 009d 15       		.byte	0x15
 2230 009e 2C000000 		.4byte	0x2c
 2231 00a2 03       		.uleb128 0x3
 2232 00a3 9C020000 		.4byte	.LASF14
 2233 00a7 03       		.byte	0x3
 2234 00a8 20       		.byte	0x20
 2235 00a9 3E000000 		.4byte	0x3e
 2236 00ad 03       		.uleb128 0x3
 2237 00ae 94020000 		.4byte	.LASF15
 2238 00b2 03       		.byte	0x3
 2239 00b3 2C       		.byte	0x2c
 2240 00b4 57000000 		.4byte	0x57
 2241 00b8 03       		.uleb128 0x3
 2242 00b9 44020000 		.4byte	.LASF16
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 52


 2243 00bd 03       		.byte	0x3
 2244 00be 2D       		.byte	0x2d
 2245 00bf 69000000 		.4byte	0x69
 2246 00c3 05       		.uleb128 0x5
 2247 00c4 A4020000 		.4byte	.LASF17
 2248 00c8 04       		.byte	0x4
 2249 00c9 9201     		.2byte	0x192
 2250 00cb 37000000 		.4byte	0x37
 2251 00cf 02       		.uleb128 0x2
 2252 00d0 04       		.byte	0x4
 2253 00d1 04       		.byte	0x4
 2254 00d2 EC000000 		.4byte	.LASF18
 2255 00d6 02       		.uleb128 0x2
 2256 00d7 08       		.byte	0x8
 2257 00d8 04       		.byte	0x4
 2258 00d9 5C030000 		.4byte	.LASF19
 2259 00dd 02       		.uleb128 0x2
 2260 00de 01       		.byte	0x1
 2261 00df 08       		.byte	0x8
 2262 00e0 81020000 		.4byte	.LASF20
 2263 00e4 05       		.uleb128 0x5
 2264 00e5 34030000 		.4byte	.LASF21
 2265 00e9 04       		.byte	0x4
 2266 00ea 3C02     		.2byte	0x23c
 2267 00ec F0000000 		.4byte	0xf0
 2268 00f0 06       		.uleb128 0x6
 2269 00f1 C3000000 		.4byte	0xc3
 2270 00f5 02       		.uleb128 0x2
 2271 00f6 04       		.byte	0x4
 2272 00f7 07       		.byte	0x7
 2273 00f8 95030000 		.4byte	.LASF22
 2274 00fc 07       		.uleb128 0x7
 2275 00fd 04       		.byte	0x4
 2276 00fe DD000000 		.4byte	0xdd
 2277 0102 03       		.uleb128 0x3
 2278 0103 0F020000 		.4byte	.LASF23
 2279 0107 05       		.byte	0x5
 2280 0108 7E       		.byte	0x7e
 2281 0109 0D010000 		.4byte	0x10d
 2282 010d 08       		.uleb128 0x8
 2283 010e 0F020000 		.4byte	.LASF23
 2284 0112 07       		.uleb128 0x7
 2285 0113 04       		.byte	0x4
 2286 0114 02010000 		.4byte	0x102
 2287 0118 02       		.uleb128 0x2
 2288 0119 08       		.byte	0x8
 2289 011a 04       		.byte	0x4
 2290 011b E6010000 		.4byte	.LASF24
 2291 011f 09       		.uleb128 0x9
 2292 0120 43000000 		.4byte	.LASF32
 2293 0124 01       		.byte	0x1
 2294 0125 06       		.byte	0x6
 2295 0126 35       		.byte	0x35
 2296 0127 56010000 		.4byte	0x156
 2297 012b 0A       		.uleb128 0xa
 2298 012c 36000000 		.4byte	.LASF25
 2299 0130 00       		.sleb128 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 53


 2300 0131 0A       		.uleb128 0xa
 2301 0132 F2010000 		.4byte	.LASF26
 2302 0136 01       		.sleb128 1
 2303 0137 0A       		.uleb128 0xa
 2304 0138 4B030000 		.4byte	.LASF27
 2305 013c 02       		.sleb128 2
 2306 013d 0A       		.uleb128 0xa
 2307 013e 71000000 		.4byte	.LASF28
 2308 0142 03       		.sleb128 3
 2309 0143 0A       		.uleb128 0xa
 2310 0144 0D000000 		.4byte	.LASF29
 2311 0148 04       		.sleb128 4
 2312 0149 0A       		.uleb128 0xa
 2313 014a 16010000 		.4byte	.LASF30
 2314 014e 05       		.sleb128 5
 2315 014f 0A       		.uleb128 0xa
 2316 0150 D3010000 		.4byte	.LASF31
 2317 0154 06       		.sleb128 6
 2318 0155 00       		.byte	0
 2319 0156 03       		.uleb128 0x3
 2320 0157 43000000 		.4byte	.LASF32
 2321 015b 06       		.byte	0x6
 2322 015c 3D       		.byte	0x3d
 2323 015d 1F010000 		.4byte	0x11f
 2324 0161 0B       		.uleb128 0xb
 2325 0162 8A000000 		.4byte	.LASF33
 2326 0166 01       		.byte	0x1
 2327 0167 6B       		.byte	0x6b
 2328 0168 00000000 		.4byte	.LFB63
 2329 016c 20000000 		.4byte	.LFE63-.LFB63
 2330 0170 01       		.uleb128 0x1
 2331 0171 9C       		.byte	0x9c
 2332 0172 0C       		.uleb128 0xc
 2333 0173 ED030000 		.4byte	.LASF34
 2334 0177 01       		.byte	0x1
 2335 0178 72       		.byte	0x72
 2336 0179 00000000 		.4byte	.LFB64
 2337 017d 40000000 		.4byte	.LFE64-.LFB64
 2338 0181 01       		.uleb128 0x1
 2339 0182 9C       		.byte	0x9c
 2340 0183 0C       		.uleb128 0xc
 2341 0184 17030000 		.4byte	.LASF35
 2342 0188 01       		.byte	0x1
 2343 0189 7B       		.byte	0x7b
 2344 018a 00000000 		.4byte	.LFB65
 2345 018e 9C000000 		.4byte	.LFE65-.LFB65
 2346 0192 01       		.uleb128 0x1
 2347 0193 9C       		.byte	0x9c
 2348 0194 0B       		.uleb128 0xb
 2349 0195 BD030000 		.4byte	.LASF36
 2350 0199 01       		.byte	0x1
 2351 019a 8C       		.byte	0x8c
 2352 019b 00000000 		.4byte	.LFB66
 2353 019f 50000000 		.4byte	.LFE66-.LFB66
 2354 01a3 01       		.uleb128 0x1
 2355 01a4 9C       		.byte	0x9c
 2356 01a5 0D       		.uleb128 0xd
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 54


 2357 01a6 8F020000 		.4byte	.LASF90
 2358 01aa 01       		.byte	0x1
 2359 01ab 96       		.byte	0x96
 2360 01ac 89000000 		.4byte	0x89
 2361 01b0 00000000 		.4byte	.LFB67
 2362 01b4 140B0000 		.4byte	.LFE67-.LFB67
 2363 01b8 01       		.uleb128 0x1
 2364 01b9 9C       		.byte	0x9c
 2365 01ba 57030000 		.4byte	0x357
 2366 01be 0E       		.uleb128 0xe
 2367 01bf 6E756D00 		.ascii	"num\000"
 2368 01c3 01       		.byte	0x1
 2369 01c4 98       		.byte	0x98
 2370 01c5 89000000 		.4byte	0x89
 2371 01c9 02       		.uleb128 0x2
 2372 01ca 91       		.byte	0x91
 2373 01cb 60       		.sleb128 -32
 2374 01cc 0F       		.uleb128 0xf
 2375 01cd E3000000 		.4byte	.LASF37
 2376 01d1 01       		.byte	0x1
 2377 01d2 98       		.byte	0x98
 2378 01d3 89000000 		.4byte	0x89
 2379 01d7 02       		.uleb128 0x2
 2380 01d8 91       		.byte	0x91
 2381 01d9 5C       		.sleb128 -36
 2382 01da 0F       		.uleb128 0xf
 2383 01db B2010000 		.4byte	.LASF38
 2384 01df 01       		.byte	0x1
 2385 01e0 99       		.byte	0x99
 2386 01e1 CF000000 		.4byte	0xcf
 2387 01e5 02       		.uleb128 0x2
 2388 01e6 91       		.byte	0x91
 2389 01e7 58       		.sleb128 -40
 2390 01e8 0F       		.uleb128 0xf
 2391 01e9 64020000 		.4byte	.LASF39
 2392 01ed 01       		.byte	0x1
 2393 01ee 99       		.byte	0x99
 2394 01ef CF000000 		.4byte	0xcf
 2395 01f3 02       		.uleb128 0x2
 2396 01f4 91       		.byte	0x91
 2397 01f5 54       		.sleb128 -44
 2398 01f6 0F       		.uleb128 0xf
 2399 01f7 A4030000 		.4byte	.LASF40
 2400 01fb 01       		.byte	0x1
 2401 01fc 99       		.byte	0x99
 2402 01fd CF000000 		.4byte	0xcf
 2403 0201 02       		.uleb128 0x2
 2404 0202 91       		.byte	0x91
 2405 0203 50       		.sleb128 -48
 2406 0204 0F       		.uleb128 0xf
 2407 0205 AE000000 		.4byte	.LASF41
 2408 0209 01       		.byte	0x1
 2409 020a 99       		.byte	0x99
 2410 020b CF000000 		.4byte	0xcf
 2411 020f 02       		.uleb128 0x2
 2412 0210 91       		.byte	0x91
 2413 0211 6C       		.sleb128 -20
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 55


 2414 0212 0E       		.uleb128 0xe
 2415 0213 62756600 		.ascii	"buf\000"
 2416 0217 01       		.byte	0x1
 2417 0218 9A       		.byte	0x9a
 2418 0219 57030000 		.4byte	0x357
 2419 021d 03       		.uleb128 0x3
 2420 021e 91       		.byte	0x91
 2421 021f 947F     		.sleb128 -108
 2422 0221 0F       		.uleb128 0xf
 2423 0222 6E030000 		.4byte	.LASF42
 2424 0226 01       		.byte	0x1
 2425 0227 9A       		.byte	0x9a
 2426 0228 67030000 		.4byte	0x367
 2427 022c 03       		.uleb128 0x3
 2428 022d 91       		.byte	0x91
 2429 022e 807F     		.sleb128 -128
 2430 0230 0F       		.uleb128 0xf
 2431 0231 E7020000 		.4byte	.LASF43
 2432 0235 01       		.byte	0x1
 2433 0236 9A       		.byte	0x9a
 2434 0237 77030000 		.4byte	0x377
 2435 023b 03       		.uleb128 0x3
 2436 023c 91       		.byte	0x91
 2437 023d F07E     		.sleb128 -144
 2438 023f 0F       		.uleb128 0xf
 2439 0240 8A030000 		.4byte	.LASF44
 2440 0244 01       		.byte	0x1
 2441 0245 9B       		.byte	0x9b
 2442 0246 87030000 		.4byte	0x387
 2443 024a 03       		.uleb128 0x3
 2444 024b 91       		.byte	0x91
 2445 024c DC7E     		.sleb128 -164
 2446 024e 0F       		.uleb128 0xf
 2447 024f 07040000 		.4byte	.LASF45
 2448 0253 01       		.byte	0x1
 2449 0254 9C       		.byte	0x9c
 2450 0255 77030000 		.4byte	0x377
 2451 0259 03       		.uleb128 0x3
 2452 025a 91       		.byte	0x91
 2453 025b CC7E     		.sleb128 -180
 2454 025d 0F       		.uleb128 0xf
 2455 025e 9F000000 		.4byte	.LASF46
 2456 0262 01       		.byte	0x1
 2457 0263 9D       		.byte	0x9d
 2458 0264 97030000 		.4byte	0x397
 2459 0268 03       		.uleb128 0x3
 2460 0269 91       		.byte	0x91
 2461 026a B87E     		.sleb128 -200
 2462 026c 0F       		.uleb128 0xf
 2463 026d FF020000 		.4byte	.LASF47
 2464 0271 01       		.byte	0x1
 2465 0272 9E       		.byte	0x9e
 2466 0273 97030000 		.4byte	0x397
 2467 0277 03       		.uleb128 0x3
 2468 0278 91       		.byte	0x91
 2469 0279 A47E     		.sleb128 -220
 2470 027b 0F       		.uleb128 0xf
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 56


 2471 027c CA010000 		.4byte	.LASF48
 2472 0280 01       		.byte	0x1
 2473 0281 9F       		.byte	0x9f
 2474 0282 A7030000 		.4byte	0x3a7
 2475 0286 03       		.uleb128 0x3
 2476 0287 91       		.byte	0x91
 2477 0288 947E     		.sleb128 -236
 2478 028a 0F       		.uleb128 0xf
 2479 028b F2000000 		.4byte	.LASF49
 2480 028f 01       		.byte	0x1
 2481 0290 A0       		.byte	0xa0
 2482 0291 89000000 		.4byte	0x89
 2483 0295 02       		.uleb128 0x2
 2484 0296 91       		.byte	0x91
 2485 0297 68       		.sleb128 -24
 2486 0298 0F       		.uleb128 0xf
 2487 0299 DD000000 		.4byte	.LASF50
 2488 029d 01       		.byte	0x1
 2489 029e A0       		.byte	0xa0
 2490 029f 89000000 		.4byte	0x89
 2491 02a3 02       		.uleb128 0x2
 2492 02a4 91       		.byte	0x91
 2493 02a5 64       		.sleb128 -28
 2494 02a6 10       		.uleb128 0x10
 2495 02a7 617800   		.ascii	"ax\000"
 2496 02aa 01       		.byte	0x1
 2497 02ab A2       		.byte	0xa2
 2498 02ac A2000000 		.4byte	0xa2
 2499 02b0 10       		.uleb128 0x10
 2500 02b1 617900   		.ascii	"ay\000"
 2501 02b4 01       		.byte	0x1
 2502 02b5 A2       		.byte	0xa2
 2503 02b6 A2000000 		.4byte	0xa2
 2504 02ba 0E       		.uleb128 0xe
 2505 02bb 617A00   		.ascii	"az\000"
 2506 02be 01       		.byte	0x1
 2507 02bf A2       		.byte	0xa2
 2508 02c0 A2000000 		.4byte	0xa2
 2509 02c4 02       		.uleb128 0x2
 2510 02c5 91       		.byte	0x91
 2511 02c6 46       		.sleb128 -58
 2512 02c7 10       		.uleb128 0x10
 2513 02c8 6900     		.ascii	"i\000"
 2514 02ca 01       		.byte	0x1
 2515 02cb A2       		.byte	0xa2
 2516 02cc A2000000 		.4byte	0xa2
 2517 02d0 0E       		.uleb128 0xe
 2518 02d1 677800   		.ascii	"gx\000"
 2519 02d4 01       		.byte	0x1
 2520 02d5 A3       		.byte	0xa3
 2521 02d6 A2000000 		.4byte	0xa2
 2522 02da 03       		.uleb128 0x3
 2523 02db 91       		.byte	0x91
 2524 02dc 927E     		.sleb128 -238
 2525 02de 0E       		.uleb128 0xe
 2526 02df 677900   		.ascii	"gy\000"
 2527 02e2 01       		.byte	0x1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 57


 2528 02e3 A3       		.byte	0xa3
 2529 02e4 A2000000 		.4byte	0xa2
 2530 02e8 03       		.uleb128 0x3
 2531 02e9 91       		.byte	0x91
 2532 02ea 907E     		.sleb128 -240
 2533 02ec 0E       		.uleb128 0xe
 2534 02ed 677A00   		.ascii	"gz\000"
 2535 02f0 01       		.byte	0x1
 2536 02f1 A3       		.byte	0xa3
 2537 02f2 A2000000 		.4byte	0xa2
 2538 02f6 03       		.uleb128 0x3
 2539 02f7 91       		.byte	0x91
 2540 02f8 8E7E     		.sleb128 -242
 2541 02fa 0F       		.uleb128 0xf
 2542 02fb F6020000 		.4byte	.LASF51
 2543 02ff 01       		.byte	0x1
 2544 0300 A4       		.byte	0xa4
 2545 0301 A2000000 		.4byte	0xa2
 2546 0305 02       		.uleb128 0x2
 2547 0306 91       		.byte	0x91
 2548 0307 4E       		.sleb128 -50
 2549 0308 0F       		.uleb128 0xf
 2550 0309 AD010000 		.4byte	.LASF52
 2551 030d 01       		.byte	0x1
 2552 030e A5       		.byte	0xa5
 2553 030f 89000000 		.4byte	0x89
 2554 0313 03       		.uleb128 0x3
 2555 0314 91       		.byte	0x91
 2556 0315 887E     		.sleb128 -248
 2557 0317 0F       		.uleb128 0xf
 2558 0318 E2020000 		.4byte	.LASF53
 2559 031c 01       		.byte	0x1
 2560 031d A5       		.byte	0xa5
 2561 031e 89000000 		.4byte	0x89
 2562 0322 02       		.uleb128 0x2
 2563 0323 91       		.byte	0x91
 2564 0324 48       		.sleb128 -56
 2565 0325 11       		.uleb128 0x11
 2566 0326 54010000 		.4byte	.LBB2
 2567 032a 84090000 		.4byte	.LBE2-.LBB2
 2568 032e 12       		.uleb128 0x12
 2569 032f 7400     		.ascii	"t\000"
 2570 0331 01       		.byte	0x1
 2571 0332 1701     		.2byte	0x117
 2572 0334 89000000 		.4byte	0x89
 2573 0338 03       		.uleb128 0x3
 2574 0339 91       		.byte	0x91
 2575 033a 847E     		.sleb128 -252
 2576 033c 11       		.uleb128 0x11
 2577 033d FA010000 		.4byte	.LBB3
 2578 0341 62000000 		.4byte	.LBE3-.LBB3
 2579 0345 0F       		.uleb128 0xf
 2580 0346 4A000000 		.4byte	.LASF54
 2581 034a 01       		.byte	0x1
 2582 034b F2       		.byte	0xf2
 2583 034c B7030000 		.4byte	0x3b7
 2584 0350 03       		.uleb128 0x3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 58


 2585 0351 91       		.byte	0x91
 2586 0352 C87D     		.sleb128 -312
 2587 0354 00       		.byte	0
 2588 0355 00       		.byte	0
 2589 0356 00       		.byte	0
 2590 0357 13       		.uleb128 0x13
 2591 0358 DD000000 		.4byte	0xdd
 2592 035c 67030000 		.4byte	0x367
 2593 0360 14       		.uleb128 0x14
 2594 0361 F5000000 		.4byte	0xf5
 2595 0365 31       		.byte	0x31
 2596 0366 00       		.byte	0
 2597 0367 13       		.uleb128 0x13
 2598 0368 DD000000 		.4byte	0xdd
 2599 036c 77030000 		.4byte	0x377
 2600 0370 14       		.uleb128 0x14
 2601 0371 F5000000 		.4byte	0xf5
 2602 0375 13       		.byte	0x13
 2603 0376 00       		.byte	0
 2604 0377 13       		.uleb128 0x13
 2605 0378 DD000000 		.4byte	0xdd
 2606 037c 87030000 		.4byte	0x387
 2607 0380 14       		.uleb128 0x14
 2608 0381 F5000000 		.4byte	0xf5
 2609 0385 0D       		.byte	0xd
 2610 0386 00       		.byte	0
 2611 0387 13       		.uleb128 0x13
 2612 0388 DD000000 		.4byte	0xdd
 2613 038c 97030000 		.4byte	0x397
 2614 0390 14       		.uleb128 0x14
 2615 0391 F5000000 		.4byte	0xf5
 2616 0395 12       		.byte	0x12
 2617 0396 00       		.byte	0
 2618 0397 13       		.uleb128 0x13
 2619 0398 DD000000 		.4byte	0xdd
 2620 039c A7030000 		.4byte	0x3a7
 2621 03a0 14       		.uleb128 0x14
 2622 03a1 F5000000 		.4byte	0xf5
 2623 03a5 10       		.byte	0x10
 2624 03a6 00       		.byte	0
 2625 03a7 13       		.uleb128 0x13
 2626 03a8 DD000000 		.4byte	0xdd
 2627 03ac B7030000 		.4byte	0x3b7
 2628 03b0 14       		.uleb128 0x14
 2629 03b1 F5000000 		.4byte	0xf5
 2630 03b5 0F       		.byte	0xf
 2631 03b6 00       		.byte	0
 2632 03b7 13       		.uleb128 0x13
 2633 03b8 DD000000 		.4byte	0xdd
 2634 03bc C7030000 		.4byte	0x3c7
 2635 03c0 14       		.uleb128 0x14
 2636 03c1 F5000000 		.4byte	0xf5
 2637 03c5 3B       		.byte	0x3b
 2638 03c6 00       		.byte	0
 2639 03c7 15       		.uleb128 0x15
 2640 03c8 D7030000 		.4byte	.LASF91
 2641 03cc 01       		.byte	0x1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 59


 2642 03cd 0902     		.2byte	0x209
 2643 03cf 89000000 		.4byte	0x89
 2644 03d3 00000000 		.4byte	.LFB68
 2645 03d7 30010000 		.4byte	.LFE68-.LFB68
 2646 03db 01       		.uleb128 0x1
 2647 03dc 9C       		.byte	0x9c
 2648 03dd 00040000 		.4byte	0x400
 2649 03e1 16       		.uleb128 0x16
 2650 03e2 81000000 		.4byte	.LASF92
 2651 03e6 01       		.byte	0x1
 2652 03e7 0902     		.2byte	0x209
 2653 03e9 FC000000 		.4byte	0xfc
 2654 03ed 02       		.uleb128 0x2
 2655 03ee 91       		.byte	0x91
 2656 03ef 64       		.sleb128 -28
 2657 03f0 17       		.uleb128 0x17
 2658 03f1 E0030000 		.4byte	.LASF55
 2659 03f5 01       		.byte	0x1
 2660 03f6 0A02     		.2byte	0x20a
 2661 03f8 89000000 		.4byte	0x89
 2662 03fc 02       		.uleb128 0x2
 2663 03fd 91       		.byte	0x91
 2664 03fe 6C       		.sleb128 -20
 2665 03ff 00       		.byte	0
 2666 0400 18       		.uleb128 0x18
 2667 0401 CA030000 		.4byte	.LASF56
 2668 0405 07       		.byte	0x7
 2669 0406 9606     		.2byte	0x696
 2670 0408 0C040000 		.4byte	0x40c
 2671 040c 06       		.uleb128 0x6
 2672 040d AD000000 		.4byte	0xad
 2673 0411 19       		.uleb128 0x19
 2674 0412 55000000 		.4byte	.LASF57
 2675 0416 08       		.byte	0x8
 2676 0417 9101     		.2byte	0x191
 2677 0419 97000000 		.4byte	0x97
 2678 041d 05       		.uleb128 0x5
 2679 041e 03       		.byte	0x3
 2680 041f 00000000 		.4byte	devAddr
 2681 0423 13       		.uleb128 0x13
 2682 0424 97000000 		.4byte	0x97
 2683 0428 33040000 		.4byte	0x433
 2684 042c 14       		.uleb128 0x14
 2685 042d F5000000 		.4byte	0xf5
 2686 0431 15       		.byte	0x15
 2687 0432 00       		.byte	0
 2688 0433 19       		.uleb128 0x19
 2689 0434 10030000 		.4byte	.LASF58
 2690 0438 08       		.byte	0x8
 2691 0439 9201     		.2byte	0x192
 2692 043b 23040000 		.4byte	0x423
 2693 043f 05       		.uleb128 0x5
 2694 0440 03       		.byte	0x3
 2695 0441 00000000 		.4byte	buffer
 2696 0445 1A       		.uleb128 0x1a
 2697 0446 50000000 		.4byte	.LASF59
 2698 044a 01       		.byte	0x1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 60


 2699 044b 34       		.byte	0x34
 2700 044c B8000000 		.4byte	0xb8
 2701 0450 05       		.uleb128 0x5
 2702 0451 03       		.byte	0x3
 2703 0452 00000000 		.4byte	Addr
 2704 0456 1B       		.uleb128 0x1b
 2705 0457 696400   		.ascii	"id\000"
 2706 045a 01       		.byte	0x1
 2707 045b 35       		.byte	0x35
 2708 045c 62000000 		.4byte	0x62
 2709 0460 05       		.uleb128 0x5
 2710 0461 03       		.byte	0x3
 2711 0462 00000000 		.4byte	id
 2712 0466 1A       		.uleb128 0x1a
 2713 0467 C1010000 		.4byte	.LASF60
 2714 046b 01       		.byte	0x1
 2715 046c 35       		.byte	0x35
 2716 046d 62000000 		.4byte	0x62
 2717 0471 05       		.uleb128 0x5
 2718 0472 03       		.byte	0x3
 2719 0473 00000000 		.4byte	press_id
 2720 0477 1A       		.uleb128 0x1a
 2721 0478 4D020000 		.4byte	.LASF61
 2722 047c 01       		.byte	0x1
 2723 047d 36       		.byte	0x36
 2724 047e 62000000 		.4byte	0x62
 2725 0482 05       		.uleb128 0x5
 2726 0483 03       		.byte	0x3
 2727 0484 00000000 		.4byte	data_time
 2728 0488 1A       		.uleb128 0x1a
 2729 0489 00000000 		.4byte	.LASF62
 2730 048d 01       		.byte	0x1
 2731 048e 37       		.byte	0x37
 2732 048f 62000000 		.4byte	0x62
 2733 0493 05       		.uleb128 0x5
 2734 0494 03       		.byte	0x3
 2735 0495 00000000 		.4byte	descent_time
 2736 0499 1B       		.uleb128 0x1b
 2737 049a 73756D00 		.ascii	"sum\000"
 2738 049e 01       		.byte	0x1
 2739 049f 39       		.byte	0x39
 2740 04a0 62000000 		.4byte	0x62
 2741 04a4 05       		.uleb128 0x5
 2742 04a5 03       		.byte	0x3
 2743 04a6 00000000 		.4byte	sum
 2744 04aa 1A       		.uleb128 0x1a
 2745 04ab D9010000 		.4byte	.LASF63
 2746 04af 01       		.byte	0x1
 2747 04b0 3A       		.byte	0x3a
 2748 04b1 CF000000 		.4byte	0xcf
 2749 04b5 05       		.uleb128 0x5
 2750 04b6 03       		.byte	0x3
 2751 04b7 00000000 		.4byte	pressure_sum
 2752 04bb 1A       		.uleb128 0x1a
 2753 04bc 0E010000 		.4byte	.LASF64
 2754 04c0 01       		.byte	0x1
 2755 04c1 3B       		.byte	0x3b
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 61


 2756 04c2 A2000000 		.4byte	0xa2
 2757 04c6 05       		.uleb128 0x5
 2758 04c7 03       		.byte	0x3
 2759 04c8 00000000 		.4byte	average
 2760 04cc 1A       		.uleb128 0x1a
 2761 04cd B0030000 		.4byte	.LASF65
 2762 04d1 01       		.byte	0x1
 2763 04d2 3C       		.byte	0x3c
 2764 04d3 DD040000 		.4byte	0x4dd
 2765 04d7 05       		.uleb128 0x5
 2766 04d8 03       		.byte	0x3
 2767 04d9 00000000 		.4byte	collect_flag
 2768 04dd 02       		.uleb128 0x2
 2769 04de 01       		.byte	0x1
 2770 04df 02       		.byte	0x2
 2771 04e0 AA020000 		.4byte	.LASF66
 2772 04e4 1A       		.uleb128 0x1a
 2773 04e5 11040000 		.4byte	.LASF67
 2774 04e9 01       		.byte	0x1
 2775 04ea 3D       		.byte	0x3d
 2776 04eb DD040000 		.4byte	0x4dd
 2777 04ef 05       		.uleb128 0x5
 2778 04f0 03       		.byte	0x3
 2779 04f1 00000000 		.4byte	wait_flag
 2780 04f5 1A       		.uleb128 0x1a
 2781 04f6 C5000000 		.4byte	.LASF68
 2782 04fa 01       		.byte	0x1
 2783 04fb 3E       		.byte	0x3e
 2784 04fc DD040000 		.4byte	0x4dd
 2785 0500 05       		.uleb128 0x5
 2786 0501 03       		.byte	0x3
 2787 0502 00000000 		.4byte	PANIC_flag
 2788 0506 1A       		.uleb128 0x1a
 2789 0507 9E030000 		.4byte	.LASF69
 2790 050b 01       		.byte	0x1
 2791 050c 40       		.byte	0x40
 2792 050d 56010000 		.4byte	0x156
 2793 0511 05       		.uleb128 0x5
 2794 0512 03       		.byte	0x3
 2795 0513 00000000 		.4byte	STATE
 2796 0517 1A       		.uleb128 0x1a
 2797 0518 17020000 		.4byte	.LASF70
 2798 051c 01       		.byte	0x1
 2799 051d 41       		.byte	0x41
 2800 051e 97000000 		.4byte	0x97
 2801 0522 05       		.uleb128 0x5
 2802 0523 03       		.byte	0x3
 2803 0524 00000000 		.4byte	countdown
 2804 0528 1A       		.uleb128 0x1a
 2805 0529 21000000 		.4byte	.LASF71
 2806 052d 01       		.byte	0x1
 2807 052e 41       		.byte	0x41
 2808 052f 97000000 		.4byte	0x97
 2809 0533 05       		.uleb128 0x5
 2810 0534 03       		.byte	0x3
 2811 0535 00000000 		.4byte	update_Data
 2812 0539 13       		.uleb128 0x13
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 62


 2813 053a 97000000 		.4byte	0x97
 2814 053e 49050000 		.4byte	0x549
 2815 0542 14       		.uleb128 0x14
 2816 0543 F5000000 		.4byte	0xf5
 2817 0547 3F       		.byte	0x3f
 2818 0548 00       		.byte	0
 2819 0549 1A       		.uleb128 0x1a
 2820 054a 2D000000 		.4byte	.LASF72
 2821 054e 01       		.byte	0x1
 2822 054f 42       		.byte	0x42
 2823 0550 39050000 		.4byte	0x539
 2824 0554 05       		.uleb128 0x5
 2825 0555 03       		.byte	0x3
 2826 0556 00000000 		.4byte	RxBuffer
 2827 055a 1A       		.uleb128 0x1a
 2828 055b 17000000 		.4byte	.LASF73
 2829 055f 01       		.byte	0x1
 2830 0560 43       		.byte	0x43
 2831 0561 89000000 		.4byte	0x89
 2832 0565 05       		.uleb128 0x5
 2833 0566 03       		.byte	0x3
 2834 0567 00000000 		.4byte	msg_count
 2835 056b 1A       		.uleb128 0x1a
 2836 056c 09030000 		.4byte	.LASF74
 2837 0570 01       		.byte	0x1
 2838 0571 43       		.byte	0x43
 2839 0572 89000000 		.4byte	0x89
 2840 0576 05       		.uleb128 0x5
 2841 0577 03       		.byte	0x3
 2842 0578 00000000 		.4byte	rxflag
 2843 057c 1A       		.uleb128 0x1a
 2844 057d 56030000 		.4byte	.LASF75
 2845 0581 01       		.byte	0x1
 2846 0582 43       		.byte	0x43
 2847 0583 89000000 		.4byte	0x89
 2848 0587 05       		.uleb128 0x5
 2849 0588 03       		.byte	0x3
 2850 0589 00000000 		.4byte	bytes
 2851 058d 1A       		.uleb128 0x1a
 2852 058e 78000000 		.4byte	.LASF76
 2853 0592 01       		.byte	0x1
 2854 0593 43       		.byte	0x43
 2855 0594 89000000 		.4byte	0x89
 2856 0598 05       		.uleb128 0x5
 2857 0599 03       		.byte	0x3
 2858 059a 00000000 		.4byte	dataflag
 2859 059e 1A       		.uleb128 0x1a
 2860 059f 5D000000 		.4byte	.LASF77
 2861 05a3 01       		.byte	0x1
 2862 05a4 43       		.byte	0x43
 2863 05a5 89000000 		.4byte	0x89
 2864 05a9 05       		.uleb128 0x5
 2865 05aa 03       		.byte	0x3
 2866 05ab 00000000 		.4byte	transmit_flag
 2867 05af 1A       		.uleb128 0x1a
 2868 05b0 F0020000 		.4byte	.LASF78
 2869 05b4 01       		.byte	0x1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 63


 2870 05b5 44       		.byte	0x44
 2871 05b6 89000000 		.4byte	0x89
 2872 05ba 05       		.uleb128 0x5
 2873 05bb 03       		.byte	0x3
 2874 05bc 00000000 		.4byte	depth
 2875 05c0 1A       		.uleb128 0x1a
 2876 05c1 6B000000 		.4byte	.LASF79
 2877 05c5 01       		.byte	0x1
 2878 05c6 44       		.byte	0x44
 2879 05c7 89000000 		.4byte	0x89
 2880 05cb 05       		.uleb128 0x5
 2881 05cc 03       		.byte	0x3
 2882 05cd 00000000 		.4byte	reset
 2883 05d1 1A       		.uleb128 0x1a
 2884 05d2 E8030000 		.4byte	.LASF80
 2885 05d6 01       		.byte	0x1
 2886 05d7 45       		.byte	0x45
 2887 05d8 CF000000 		.4byte	0xcf
 2888 05dc 05       		.uleb128 0x5
 2889 05dd 03       		.byte	0x3
 2890 05de 00000000 		.4byte	xavg
 2891 05e2 1A       		.uleb128 0x1a
 2892 05e3 D0000000 		.4byte	.LASF81
 2893 05e7 01       		.byte	0x1
 2894 05e8 45       		.byte	0x45
 2895 05e9 CF000000 		.4byte	0xcf
 2896 05ed 05       		.uleb128 0x5
 2897 05ee 03       		.byte	0x3
 2898 05ef 00000000 		.4byte	yavg
 2899 05f3 1A       		.uleb128 0x1a
 2900 05f4 7C020000 		.4byte	.LASF82
 2901 05f8 01       		.byte	0x1
 2902 05f9 45       		.byte	0x45
 2903 05fa CF000000 		.4byte	0xcf
 2904 05fe 05       		.uleb128 0x5
 2905 05ff 03       		.byte	0x3
 2906 0600 00000000 		.4byte	xsum
 2907 0604 1A       		.uleb128 0x1a
 2908 0605 AB030000 		.4byte	.LASF83
 2909 0609 01       		.byte	0x1
 2910 060a 45       		.byte	0x45
 2911 060b CF000000 		.4byte	0xcf
 2912 060f 05       		.uleb128 0x5
 2913 0610 03       		.byte	0x3
 2914 0611 00000000 		.4byte	ysum
 2915 0615 13       		.uleb128 0x13
 2916 0616 DD000000 		.4byte	0xdd
 2917 061a 25060000 		.4byte	0x625
 2918 061e 14       		.uleb128 0x14
 2919 061f F5000000 		.4byte	0xf5
 2920 0623 0A       		.byte	0xa
 2921 0624 00       		.byte	0
 2922 0625 1A       		.uleb128 0x1a
 2923 0626 A9000000 		.4byte	.LASF84
 2924 062a 01       		.byte	0x1
 2925 062b 46       		.byte	0x46
 2926 062c 15060000 		.4byte	0x615
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 64


 2927 0630 05       		.uleb128 0x5
 2928 0631 03       		.byte	0x3
 2929 0632 00000000 		.4byte	file
 2930 0636 13       		.uleb128 0x13
 2931 0637 DD000000 		.4byte	0xdd
 2932 063b 46060000 		.4byte	0x646
 2933 063f 14       		.uleb128 0x14
 2934 0640 F5000000 		.4byte	0xf5
 2935 0644 09       		.byte	0x9
 2936 0645 00       		.byte	0
 2937 0646 1A       		.uleb128 0x1a
 2938 0647 BA010000 		.4byte	.LASF85
 2939 064b 01       		.byte	0x1
 2940 064c 47       		.byte	0x47
 2941 064d 36060000 		.4byte	0x636
 2942 0651 05       		.uleb128 0x5
 2943 0652 03       		.byte	0x3
 2944 0653 00000000 		.4byte	volume
 2945 0657 1A       		.uleb128 0x1a
 2946 0658 00040000 		.4byte	.LASF86
 2947 065c 01       		.byte	0x1
 2948 065d 48       		.byte	0x48
 2949 065e 12010000 		.4byte	0x112
 2950 0662 05       		.uleb128 0x5
 2951 0663 03       		.byte	0x3
 2952 0664 00000000 		.4byte	fsfile
 2953 0668 00       		.byte	0
 2954              		.section	.debug_abbrev,"",%progbits
 2955              	.Ldebug_abbrev0:
 2956 0000 01       		.uleb128 0x1
 2957 0001 11       		.uleb128 0x11
 2958 0002 01       		.byte	0x1
 2959 0003 25       		.uleb128 0x25
 2960 0004 0E       		.uleb128 0xe
 2961 0005 13       		.uleb128 0x13
 2962 0006 0B       		.uleb128 0xb
 2963 0007 03       		.uleb128 0x3
 2964 0008 0E       		.uleb128 0xe
 2965 0009 1B       		.uleb128 0x1b
 2966 000a 0E       		.uleb128 0xe
 2967 000b 55       		.uleb128 0x55
 2968 000c 17       		.uleb128 0x17
 2969 000d 11       		.uleb128 0x11
 2970 000e 01       		.uleb128 0x1
 2971 000f 10       		.uleb128 0x10
 2972 0010 17       		.uleb128 0x17
 2973 0011 00       		.byte	0
 2974 0012 00       		.byte	0
 2975 0013 02       		.uleb128 0x2
 2976 0014 24       		.uleb128 0x24
 2977 0015 00       		.byte	0
 2978 0016 0B       		.uleb128 0xb
 2979 0017 0B       		.uleb128 0xb
 2980 0018 3E       		.uleb128 0x3e
 2981 0019 0B       		.uleb128 0xb
 2982 001a 03       		.uleb128 0x3
 2983 001b 0E       		.uleb128 0xe
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 65


 2984 001c 00       		.byte	0
 2985 001d 00       		.byte	0
 2986 001e 03       		.uleb128 0x3
 2987 001f 16       		.uleb128 0x16
 2988 0020 00       		.byte	0
 2989 0021 03       		.uleb128 0x3
 2990 0022 0E       		.uleb128 0xe
 2991 0023 3A       		.uleb128 0x3a
 2992 0024 0B       		.uleb128 0xb
 2993 0025 3B       		.uleb128 0x3b
 2994 0026 0B       		.uleb128 0xb
 2995 0027 49       		.uleb128 0x49
 2996 0028 13       		.uleb128 0x13
 2997 0029 00       		.byte	0
 2998 002a 00       		.byte	0
 2999 002b 04       		.uleb128 0x4
 3000 002c 24       		.uleb128 0x24
 3001 002d 00       		.byte	0
 3002 002e 0B       		.uleb128 0xb
 3003 002f 0B       		.uleb128 0xb
 3004 0030 3E       		.uleb128 0x3e
 3005 0031 0B       		.uleb128 0xb
 3006 0032 03       		.uleb128 0x3
 3007 0033 08       		.uleb128 0x8
 3008 0034 00       		.byte	0
 3009 0035 00       		.byte	0
 3010 0036 05       		.uleb128 0x5
 3011 0037 16       		.uleb128 0x16
 3012 0038 00       		.byte	0
 3013 0039 03       		.uleb128 0x3
 3014 003a 0E       		.uleb128 0xe
 3015 003b 3A       		.uleb128 0x3a
 3016 003c 0B       		.uleb128 0xb
 3017 003d 3B       		.uleb128 0x3b
 3018 003e 05       		.uleb128 0x5
 3019 003f 49       		.uleb128 0x49
 3020 0040 13       		.uleb128 0x13
 3021 0041 00       		.byte	0
 3022 0042 00       		.byte	0
 3023 0043 06       		.uleb128 0x6
 3024 0044 35       		.uleb128 0x35
 3025 0045 00       		.byte	0
 3026 0046 49       		.uleb128 0x49
 3027 0047 13       		.uleb128 0x13
 3028 0048 00       		.byte	0
 3029 0049 00       		.byte	0
 3030 004a 07       		.uleb128 0x7
 3031 004b 0F       		.uleb128 0xf
 3032 004c 00       		.byte	0
 3033 004d 0B       		.uleb128 0xb
 3034 004e 0B       		.uleb128 0xb
 3035 004f 49       		.uleb128 0x49
 3036 0050 13       		.uleb128 0x13
 3037 0051 00       		.byte	0
 3038 0052 00       		.byte	0
 3039 0053 08       		.uleb128 0x8
 3040 0054 13       		.uleb128 0x13
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 66


 3041 0055 00       		.byte	0
 3042 0056 03       		.uleb128 0x3
 3043 0057 0E       		.uleb128 0xe
 3044 0058 3C       		.uleb128 0x3c
 3045 0059 19       		.uleb128 0x19
 3046 005a 00       		.byte	0
 3047 005b 00       		.byte	0
 3048 005c 09       		.uleb128 0x9
 3049 005d 04       		.uleb128 0x4
 3050 005e 01       		.byte	0x1
 3051 005f 03       		.uleb128 0x3
 3052 0060 0E       		.uleb128 0xe
 3053 0061 0B       		.uleb128 0xb
 3054 0062 0B       		.uleb128 0xb
 3055 0063 3A       		.uleb128 0x3a
 3056 0064 0B       		.uleb128 0xb
 3057 0065 3B       		.uleb128 0x3b
 3058 0066 0B       		.uleb128 0xb
 3059 0067 01       		.uleb128 0x1
 3060 0068 13       		.uleb128 0x13
 3061 0069 00       		.byte	0
 3062 006a 00       		.byte	0
 3063 006b 0A       		.uleb128 0xa
 3064 006c 28       		.uleb128 0x28
 3065 006d 00       		.byte	0
 3066 006e 03       		.uleb128 0x3
 3067 006f 0E       		.uleb128 0xe
 3068 0070 1C       		.uleb128 0x1c
 3069 0071 0D       		.uleb128 0xd
 3070 0072 00       		.byte	0
 3071 0073 00       		.byte	0
 3072 0074 0B       		.uleb128 0xb
 3073 0075 2E       		.uleb128 0x2e
 3074 0076 00       		.byte	0
 3075 0077 3F       		.uleb128 0x3f
 3076 0078 19       		.uleb128 0x19
 3077 0079 03       		.uleb128 0x3
 3078 007a 0E       		.uleb128 0xe
 3079 007b 3A       		.uleb128 0x3a
 3080 007c 0B       		.uleb128 0xb
 3081 007d 3B       		.uleb128 0x3b
 3082 007e 0B       		.uleb128 0xb
 3083 007f 27       		.uleb128 0x27
 3084 0080 19       		.uleb128 0x19
 3085 0081 11       		.uleb128 0x11
 3086 0082 01       		.uleb128 0x1
 3087 0083 12       		.uleb128 0x12
 3088 0084 06       		.uleb128 0x6
 3089 0085 40       		.uleb128 0x40
 3090 0086 18       		.uleb128 0x18
 3091 0087 9642     		.uleb128 0x2116
 3092 0089 19       		.uleb128 0x19
 3093 008a 00       		.byte	0
 3094 008b 00       		.byte	0
 3095 008c 0C       		.uleb128 0xc
 3096 008d 2E       		.uleb128 0x2e
 3097 008e 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 67


 3098 008f 3F       		.uleb128 0x3f
 3099 0090 19       		.uleb128 0x19
 3100 0091 03       		.uleb128 0x3
 3101 0092 0E       		.uleb128 0xe
 3102 0093 3A       		.uleb128 0x3a
 3103 0094 0B       		.uleb128 0xb
 3104 0095 3B       		.uleb128 0x3b
 3105 0096 0B       		.uleb128 0xb
 3106 0097 27       		.uleb128 0x27
 3107 0098 19       		.uleb128 0x19
 3108 0099 11       		.uleb128 0x11
 3109 009a 01       		.uleb128 0x1
 3110 009b 12       		.uleb128 0x12
 3111 009c 06       		.uleb128 0x6
 3112 009d 40       		.uleb128 0x40
 3113 009e 18       		.uleb128 0x18
 3114 009f 9742     		.uleb128 0x2117
 3115 00a1 19       		.uleb128 0x19
 3116 00a2 00       		.byte	0
 3117 00a3 00       		.byte	0
 3118 00a4 0D       		.uleb128 0xd
 3119 00a5 2E       		.uleb128 0x2e
 3120 00a6 01       		.byte	0x1
 3121 00a7 3F       		.uleb128 0x3f
 3122 00a8 19       		.uleb128 0x19
 3123 00a9 03       		.uleb128 0x3
 3124 00aa 0E       		.uleb128 0xe
 3125 00ab 3A       		.uleb128 0x3a
 3126 00ac 0B       		.uleb128 0xb
 3127 00ad 3B       		.uleb128 0x3b
 3128 00ae 0B       		.uleb128 0xb
 3129 00af 49       		.uleb128 0x49
 3130 00b0 13       		.uleb128 0x13
 3131 00b1 11       		.uleb128 0x11
 3132 00b2 01       		.uleb128 0x1
 3133 00b3 12       		.uleb128 0x12
 3134 00b4 06       		.uleb128 0x6
 3135 00b5 40       		.uleb128 0x40
 3136 00b6 18       		.uleb128 0x18
 3137 00b7 9642     		.uleb128 0x2116
 3138 00b9 19       		.uleb128 0x19
 3139 00ba 01       		.uleb128 0x1
 3140 00bb 13       		.uleb128 0x13
 3141 00bc 00       		.byte	0
 3142 00bd 00       		.byte	0
 3143 00be 0E       		.uleb128 0xe
 3144 00bf 34       		.uleb128 0x34
 3145 00c0 00       		.byte	0
 3146 00c1 03       		.uleb128 0x3
 3147 00c2 08       		.uleb128 0x8
 3148 00c3 3A       		.uleb128 0x3a
 3149 00c4 0B       		.uleb128 0xb
 3150 00c5 3B       		.uleb128 0x3b
 3151 00c6 0B       		.uleb128 0xb
 3152 00c7 49       		.uleb128 0x49
 3153 00c8 13       		.uleb128 0x13
 3154 00c9 02       		.uleb128 0x2
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 68


 3155 00ca 18       		.uleb128 0x18
 3156 00cb 00       		.byte	0
 3157 00cc 00       		.byte	0
 3158 00cd 0F       		.uleb128 0xf
 3159 00ce 34       		.uleb128 0x34
 3160 00cf 00       		.byte	0
 3161 00d0 03       		.uleb128 0x3
 3162 00d1 0E       		.uleb128 0xe
 3163 00d2 3A       		.uleb128 0x3a
 3164 00d3 0B       		.uleb128 0xb
 3165 00d4 3B       		.uleb128 0x3b
 3166 00d5 0B       		.uleb128 0xb
 3167 00d6 49       		.uleb128 0x49
 3168 00d7 13       		.uleb128 0x13
 3169 00d8 02       		.uleb128 0x2
 3170 00d9 18       		.uleb128 0x18
 3171 00da 00       		.byte	0
 3172 00db 00       		.byte	0
 3173 00dc 10       		.uleb128 0x10
 3174 00dd 34       		.uleb128 0x34
 3175 00de 00       		.byte	0
 3176 00df 03       		.uleb128 0x3
 3177 00e0 08       		.uleb128 0x8
 3178 00e1 3A       		.uleb128 0x3a
 3179 00e2 0B       		.uleb128 0xb
 3180 00e3 3B       		.uleb128 0x3b
 3181 00e4 0B       		.uleb128 0xb
 3182 00e5 49       		.uleb128 0x49
 3183 00e6 13       		.uleb128 0x13
 3184 00e7 00       		.byte	0
 3185 00e8 00       		.byte	0
 3186 00e9 11       		.uleb128 0x11
 3187 00ea 0B       		.uleb128 0xb
 3188 00eb 01       		.byte	0x1
 3189 00ec 11       		.uleb128 0x11
 3190 00ed 01       		.uleb128 0x1
 3191 00ee 12       		.uleb128 0x12
 3192 00ef 06       		.uleb128 0x6
 3193 00f0 00       		.byte	0
 3194 00f1 00       		.byte	0
 3195 00f2 12       		.uleb128 0x12
 3196 00f3 34       		.uleb128 0x34
 3197 00f4 00       		.byte	0
 3198 00f5 03       		.uleb128 0x3
 3199 00f6 08       		.uleb128 0x8
 3200 00f7 3A       		.uleb128 0x3a
 3201 00f8 0B       		.uleb128 0xb
 3202 00f9 3B       		.uleb128 0x3b
 3203 00fa 05       		.uleb128 0x5
 3204 00fb 49       		.uleb128 0x49
 3205 00fc 13       		.uleb128 0x13
 3206 00fd 02       		.uleb128 0x2
 3207 00fe 18       		.uleb128 0x18
 3208 00ff 00       		.byte	0
 3209 0100 00       		.byte	0
 3210 0101 13       		.uleb128 0x13
 3211 0102 01       		.uleb128 0x1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 69


 3212 0103 01       		.byte	0x1
 3213 0104 49       		.uleb128 0x49
 3214 0105 13       		.uleb128 0x13
 3215 0106 01       		.uleb128 0x1
 3216 0107 13       		.uleb128 0x13
 3217 0108 00       		.byte	0
 3218 0109 00       		.byte	0
 3219 010a 14       		.uleb128 0x14
 3220 010b 21       		.uleb128 0x21
 3221 010c 00       		.byte	0
 3222 010d 49       		.uleb128 0x49
 3223 010e 13       		.uleb128 0x13
 3224 010f 2F       		.uleb128 0x2f
 3225 0110 0B       		.uleb128 0xb
 3226 0111 00       		.byte	0
 3227 0112 00       		.byte	0
 3228 0113 15       		.uleb128 0x15
 3229 0114 2E       		.uleb128 0x2e
 3230 0115 01       		.byte	0x1
 3231 0116 3F       		.uleb128 0x3f
 3232 0117 19       		.uleb128 0x19
 3233 0118 03       		.uleb128 0x3
 3234 0119 0E       		.uleb128 0xe
 3235 011a 3A       		.uleb128 0x3a
 3236 011b 0B       		.uleb128 0xb
 3237 011c 3B       		.uleb128 0x3b
 3238 011d 05       		.uleb128 0x5
 3239 011e 27       		.uleb128 0x27
 3240 011f 19       		.uleb128 0x19
 3241 0120 49       		.uleb128 0x49
 3242 0121 13       		.uleb128 0x13
 3243 0122 11       		.uleb128 0x11
 3244 0123 01       		.uleb128 0x1
 3245 0124 12       		.uleb128 0x12
 3246 0125 06       		.uleb128 0x6
 3247 0126 40       		.uleb128 0x40
 3248 0127 18       		.uleb128 0x18
 3249 0128 9642     		.uleb128 0x2116
 3250 012a 19       		.uleb128 0x19
 3251 012b 01       		.uleb128 0x1
 3252 012c 13       		.uleb128 0x13
 3253 012d 00       		.byte	0
 3254 012e 00       		.byte	0
 3255 012f 16       		.uleb128 0x16
 3256 0130 05       		.uleb128 0x5
 3257 0131 00       		.byte	0
 3258 0132 03       		.uleb128 0x3
 3259 0133 0E       		.uleb128 0xe
 3260 0134 3A       		.uleb128 0x3a
 3261 0135 0B       		.uleb128 0xb
 3262 0136 3B       		.uleb128 0x3b
 3263 0137 05       		.uleb128 0x5
 3264 0138 49       		.uleb128 0x49
 3265 0139 13       		.uleb128 0x13
 3266 013a 02       		.uleb128 0x2
 3267 013b 18       		.uleb128 0x18
 3268 013c 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 70


 3269 013d 00       		.byte	0
 3270 013e 17       		.uleb128 0x17
 3271 013f 34       		.uleb128 0x34
 3272 0140 00       		.byte	0
 3273 0141 03       		.uleb128 0x3
 3274 0142 0E       		.uleb128 0xe
 3275 0143 3A       		.uleb128 0x3a
 3276 0144 0B       		.uleb128 0xb
 3277 0145 3B       		.uleb128 0x3b
 3278 0146 05       		.uleb128 0x5
 3279 0147 49       		.uleb128 0x49
 3280 0148 13       		.uleb128 0x13
 3281 0149 02       		.uleb128 0x2
 3282 014a 18       		.uleb128 0x18
 3283 014b 00       		.byte	0
 3284 014c 00       		.byte	0
 3285 014d 18       		.uleb128 0x18
 3286 014e 34       		.uleb128 0x34
 3287 014f 00       		.byte	0
 3288 0150 03       		.uleb128 0x3
 3289 0151 0E       		.uleb128 0xe
 3290 0152 3A       		.uleb128 0x3a
 3291 0153 0B       		.uleb128 0xb
 3292 0154 3B       		.uleb128 0x3b
 3293 0155 05       		.uleb128 0x5
 3294 0156 49       		.uleb128 0x49
 3295 0157 13       		.uleb128 0x13
 3296 0158 3F       		.uleb128 0x3f
 3297 0159 19       		.uleb128 0x19
 3298 015a 3C       		.uleb128 0x3c
 3299 015b 19       		.uleb128 0x19
 3300 015c 00       		.byte	0
 3301 015d 00       		.byte	0
 3302 015e 19       		.uleb128 0x19
 3303 015f 34       		.uleb128 0x34
 3304 0160 00       		.byte	0
 3305 0161 03       		.uleb128 0x3
 3306 0162 0E       		.uleb128 0xe
 3307 0163 3A       		.uleb128 0x3a
 3308 0164 0B       		.uleb128 0xb
 3309 0165 3B       		.uleb128 0x3b
 3310 0166 05       		.uleb128 0x5
 3311 0167 49       		.uleb128 0x49
 3312 0168 13       		.uleb128 0x13
 3313 0169 3F       		.uleb128 0x3f
 3314 016a 19       		.uleb128 0x19
 3315 016b 02       		.uleb128 0x2
 3316 016c 18       		.uleb128 0x18
 3317 016d 00       		.byte	0
 3318 016e 00       		.byte	0
 3319 016f 1A       		.uleb128 0x1a
 3320 0170 34       		.uleb128 0x34
 3321 0171 00       		.byte	0
 3322 0172 03       		.uleb128 0x3
 3323 0173 0E       		.uleb128 0xe
 3324 0174 3A       		.uleb128 0x3a
 3325 0175 0B       		.uleb128 0xb
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 71


 3326 0176 3B       		.uleb128 0x3b
 3327 0177 0B       		.uleb128 0xb
 3328 0178 49       		.uleb128 0x49
 3329 0179 13       		.uleb128 0x13
 3330 017a 3F       		.uleb128 0x3f
 3331 017b 19       		.uleb128 0x19
 3332 017c 02       		.uleb128 0x2
 3333 017d 18       		.uleb128 0x18
 3334 017e 00       		.byte	0
 3335 017f 00       		.byte	0
 3336 0180 1B       		.uleb128 0x1b
 3337 0181 34       		.uleb128 0x34
 3338 0182 00       		.byte	0
 3339 0183 03       		.uleb128 0x3
 3340 0184 08       		.uleb128 0x8
 3341 0185 3A       		.uleb128 0x3a
 3342 0186 0B       		.uleb128 0xb
 3343 0187 3B       		.uleb128 0x3b
 3344 0188 0B       		.uleb128 0xb
 3345 0189 49       		.uleb128 0x49
 3346 018a 13       		.uleb128 0x13
 3347 018b 3F       		.uleb128 0x3f
 3348 018c 19       		.uleb128 0x19
 3349 018d 02       		.uleb128 0x2
 3350 018e 18       		.uleb128 0x18
 3351 018f 00       		.byte	0
 3352 0190 00       		.byte	0
 3353 0191 00       		.byte	0
 3354              		.section	.debug_aranges,"",%progbits
 3355 0000 44000000 		.4byte	0x44
 3356 0004 0200     		.2byte	0x2
 3357 0006 00000000 		.4byte	.Ldebug_info0
 3358 000a 04       		.byte	0x4
 3359 000b 00       		.byte	0
 3360 000c 0000     		.2byte	0
 3361 000e 0000     		.2byte	0
 3362 0010 00000000 		.4byte	.LFB63
 3363 0014 20000000 		.4byte	.LFE63-.LFB63
 3364 0018 00000000 		.4byte	.LFB64
 3365 001c 40000000 		.4byte	.LFE64-.LFB64
 3366 0020 00000000 		.4byte	.LFB65
 3367 0024 9C000000 		.4byte	.LFE65-.LFB65
 3368 0028 00000000 		.4byte	.LFB66
 3369 002c 50000000 		.4byte	.LFE66-.LFB66
 3370 0030 00000000 		.4byte	.LFB67
 3371 0034 140B0000 		.4byte	.LFE67-.LFB67
 3372 0038 00000000 		.4byte	.LFB68
 3373 003c 30010000 		.4byte	.LFE68-.LFB68
 3374 0040 00000000 		.4byte	0
 3375 0044 00000000 		.4byte	0
 3376              		.section	.debug_ranges,"",%progbits
 3377              	.Ldebug_ranges0:
 3378 0000 00000000 		.4byte	.LFB63
 3379 0004 20000000 		.4byte	.LFE63
 3380 0008 00000000 		.4byte	.LFB64
 3381 000c 40000000 		.4byte	.LFE64
 3382 0010 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 72


 3383 0014 9C000000 		.4byte	.LFE65
 3384 0018 00000000 		.4byte	.LFB66
 3385 001c 50000000 		.4byte	.LFE66
 3386 0020 00000000 		.4byte	.LFB67
 3387 0024 140B0000 		.4byte	.LFE67
 3388 0028 00000000 		.4byte	.LFB68
 3389 002c 30010000 		.4byte	.LFE68
 3390 0030 00000000 		.4byte	0
 3391 0034 00000000 		.4byte	0
 3392              		.section	.debug_line,"",%progbits
 3393              	.Ldebug_line0:
 3394 0000 7E030000 		.section	.debug_str,"MS",%progbits,1
 3394      02009501 
 3394      00000201 
 3394      FB0E0D00 
 3394      01010101 
 3395              	.LASF62:
 3396 0000 64657363 		.ascii	"descent_time\000"
 3396      656E745F 
 3396      74696D65 
 3396      00
 3397              	.LASF29:
 3398 000d 52455355 		.ascii	"RESURFACE\000"
 3398      52464143 
 3398      4500
 3399              	.LASF73:
 3400 0017 6D73675F 		.ascii	"msg_count\000"
 3400      636F756E 
 3400      7400
 3401              	.LASF71:
 3402 0021 75706461 		.ascii	"update_Data\000"
 3402      74655F44 
 3402      61746100 
 3403              	.LASF72:
 3404 002d 52784275 		.ascii	"RxBuffer\000"
 3404      66666572 
 3404      00
 3405              	.LASF25:
 3406 0036 53595354 		.ascii	"SYSTEM_CHECK\000"
 3406      454D5F43 
 3406      4845434B 
 3406      00
 3407              	.LASF32:
 3408 0043 53544154 		.ascii	"STATES\000"
 3408      455300
 3409              	.LASF54:
 3410 004a 73646275 		.ascii	"sdbuf\000"
 3410      6600
 3411              	.LASF59:
 3412 0050 41646472 		.ascii	"Addr\000"
 3412      00
 3413              	.LASF57:
 3414 0055 64657641 		.ascii	"devAddr\000"
 3414      64647200 
 3415              	.LASF77:
 3416 005d 7472616E 		.ascii	"transmit_flag\000"
 3416      736D6974 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 73


 3416      5F666C61 
 3416      6700
 3417              	.LASF79:
 3418 006b 72657365 		.ascii	"reset\000"
 3418      7400
 3419              	.LASF28:
 3420 0071 4C414E44 		.ascii	"LANDED\000"
 3420      454400
 3421              	.LASF76:
 3422 0078 64617461 		.ascii	"dataflag\000"
 3422      666C6167 
 3422      00
 3423              	.LASF92:
 3424 0081 66696C65 		.ascii	"filename\000"
 3424      6E616D65 
 3424      00
 3425              	.LASF33:
 3426 008a 4D6F6973 		.ascii	"Moisture_ISR_Handler\000"
 3426      74757265 
 3426      5F495352 
 3426      5F48616E 
 3426      646C6572 
 3427              	.LASF46:
 3428 009f 76616375 		.ascii	"vacuumbuf\000"
 3428      756D6275 
 3428      6600
 3429              	.LASF84:
 3430 00a9 66696C65 		.ascii	"file\000"
 3430      00
 3431              	.LASF41:
 3432 00ae 70726573 		.ascii	"pressure_avg\000"
 3432      73757265 
 3432      5F617667 
 3432      00
 3433              	.LASF4:
 3434 00bb 73686F72 		.ascii	"short int\000"
 3434      7420696E 
 3434      7400
 3435              	.LASF68:
 3436 00c5 50414E49 		.ascii	"PANIC_flag\000"
 3436      435F666C 
 3436      616700
 3437              	.LASF81:
 3438 00d0 79617667 		.ascii	"yavg\000"
 3438      00
 3439              	.LASF13:
 3440 00d5 75696E74 		.ascii	"uint8_t\000"
 3440      385F7400 
 3441              	.LASF50:
 3442 00dd 70756C73 		.ascii	"pulse\000"
 3442      6500
 3443              	.LASF37:
 3444 00e3 64656369 		.ascii	"decimals\000"
 3444      6D616C73 
 3444      00
 3445              	.LASF18:
 3446 00ec 666C6F61 		.ascii	"float\000"
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 74


 3446      7400
 3447              	.LASF49:
 3448 00f2 73746174 		.ascii	"stateMsgCount\000"
 3448      654D7367 
 3448      436F756E 
 3448      7400
 3449              	.LASF10:
 3450 0100 6C6F6E67 		.ascii	"long long int\000"
 3450      206C6F6E 
 3450      6720696E 
 3450      7400
 3451              	.LASF64:
 3452 010e 61766572 		.ascii	"average\000"
 3452      61676500 
 3453              	.LASF30:
 3454 0116 5452414E 		.ascii	"TRANSMIT\000"
 3454      534D4954 
 3454      00
 3455              	.LASF87:
 3456 011f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3456      4320342E 
 3456      392E3320 
 3456      32303135 
 3456      30333033 
 3457 0152 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3457      20726576 
 3457      6973696F 
 3457      6E203232 
 3457      31323230 
 3458 0185 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3458      66756E63 
 3458      74696F6E 
 3458      2D736563 
 3458      74696F6E 
 3459              	.LASF52:
 3460 01ad 74656E73 		.ascii	"tens\000"
 3460      00
 3461              	.LASF38:
 3462 01b2 766F6C74 		.ascii	"voltage\000"
 3462      61676500 
 3463              	.LASF85:
 3464 01ba 766F6C75 		.ascii	"volume\000"
 3464      6D6500
 3465              	.LASF60:
 3466 01c1 70726573 		.ascii	"press_id\000"
 3466      735F6964 
 3466      00
 3467              	.LASF48:
 3468 01ca 7472616E 		.ascii	"transbuf\000"
 3468      73627566 
 3468      00
 3469              	.LASF31:
 3470 01d3 4552524F 		.ascii	"ERROR\000"
 3470      5200
 3471              	.LASF63:
 3472 01d9 70726573 		.ascii	"pressure_sum\000"
 3472      73757265 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 75


 3472      5F73756D 
 3472      00
 3473              	.LASF24:
 3474 01e6 6C6F6E67 		.ascii	"long double\000"
 3474      20646F75 
 3474      626C6500 
 3475              	.LASF26:
 3476 01f2 57414954 		.ascii	"WAIT_TO_LAUNCH\000"
 3476      5F544F5F 
 3476      4C41554E 
 3476      434800
 3477              	.LASF1:
 3478 0201 756E7369 		.ascii	"unsigned char\000"
 3478      676E6564 
 3478      20636861 
 3478      7200
 3479              	.LASF23:
 3480 020f 46535F46 		.ascii	"FS_FILE\000"
 3480      494C4500 
 3481              	.LASF70:
 3482 0217 636F756E 		.ascii	"countdown\000"
 3482      74646F77 
 3482      6E00
 3483              	.LASF0:
 3484 0221 7369676E 		.ascii	"signed char\000"
 3484      65642063 
 3484      68617200 
 3485              	.LASF11:
 3486 022d 6C6F6E67 		.ascii	"long long unsigned int\000"
 3486      206C6F6E 
 3486      6720756E 
 3486      7369676E 
 3486      65642069 
 3487              	.LASF16:
 3488 0244 75696E74 		.ascii	"uint32_t\000"
 3488      33325F74 
 3488      00
 3489              	.LASF61:
 3490 024d 64617461 		.ascii	"data_time\000"
 3490      5F74696D 
 3490      6500
 3491              	.LASF12:
 3492 0257 756E7369 		.ascii	"unsigned int\000"
 3492      676E6564 
 3492      20696E74 
 3492      00
 3493              	.LASF39:
 3494 0264 74656D70 		.ascii	"temp\000"
 3494      00
 3495              	.LASF5:
 3496 0269 73686F72 		.ascii	"short unsigned int\000"
 3496      7420756E 
 3496      7369676E 
 3496      65642069 
 3496      6E7400
 3497              	.LASF82:
 3498 027c 7873756D 		.ascii	"xsum\000"
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 76


 3498      00
 3499              	.LASF20:
 3500 0281 63686172 		.ascii	"char\000"
 3500      00
 3501              	.LASF7:
 3502 0286 6C6F6E67 		.ascii	"long int\000"
 3502      20696E74 
 3502      00
 3503              	.LASF90:
 3504 028f 6D61696E 		.ascii	"main\000"
 3504      00
 3505              	.LASF15:
 3506 0294 696E7433 		.ascii	"int32_t\000"
 3506      325F7400 
 3507              	.LASF14:
 3508 029c 696E7431 		.ascii	"int16_t\000"
 3508      365F7400 
 3509              	.LASF17:
 3510 02a4 75696E74 		.ascii	"uint8\000"
 3510      3800
 3511              	.LASF66:
 3512 02aa 5F426F6F 		.ascii	"_Bool\000"
 3512      6C00
 3513              	.LASF89:
 3514 02b0 433A5C55 		.ascii	"C:\\Users\\gding\\Documents\\Project_O-Vac\\OVac.cy"
 3514      73657273 
 3514      5C676469 
 3514      6E675C44 
 3514      6F63756D 
 3515 02de 64736E00 		.ascii	"dsn\000"
 3516              	.LASF53:
 3517 02e2 6F6E6573 		.ascii	"ones\000"
 3517      00
 3518              	.LASF43:
 3519 02e7 63757253 		.ascii	"curState\000"
 3519      74617465 
 3519      00
 3520              	.LASF78:
 3521 02f0 64657074 		.ascii	"depth\000"
 3521      6800
 3522              	.LASF51:
 3523 02f6 7A5F6F66 		.ascii	"z_offset\000"
 3523      66736574 
 3523      00
 3524              	.LASF47:
 3525 02ff 72657375 		.ascii	"resurfbuf\000"
 3525      72666275 
 3525      6600
 3526              	.LASF74:
 3527 0309 7278666C 		.ascii	"rxflag\000"
 3527      616700
 3528              	.LASF58:
 3529 0310 62756666 		.ascii	"buffer\000"
 3529      657200
 3530              	.LASF35:
 3531 0317 436F756E 		.ascii	"Countdown_ISR_Handler\000"
 3531      74646F77 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 77


 3531      6E5F4953 
 3531      525F4861 
 3531      6E646C65 
 3532              	.LASF88:
 3533 032d 6D61696E 		.ascii	"main.c\000"
 3533      2E6300
 3534              	.LASF21:
 3535 0334 72656738 		.ascii	"reg8\000"
 3535      00
 3536              	.LASF9:
 3537 0339 6C6F6E67 		.ascii	"long unsigned int\000"
 3537      20756E73 
 3537      69676E65 
 3537      6420696E 
 3537      7400
 3538              	.LASF27:
 3539 034b 44455343 		.ascii	"DESCENDING\000"
 3539      454E4449 
 3539      4E4700
 3540              	.LASF75:
 3541 0356 62797465 		.ascii	"bytes\000"
 3541      7300
 3542              	.LASF19:
 3543 035c 646F7562 		.ascii	"double\000"
 3543      6C6500
 3544              	.LASF8:
 3545 0363 5F5F7569 		.ascii	"__uint32_t\000"
 3545      6E743332 
 3545      5F7400
 3546              	.LASF42:
 3547 036e 74656D70 		.ascii	"tempbuf\000"
 3547      62756600 
 3548              	.LASF6:
 3549 0376 5F5F696E 		.ascii	"__int32_t\000"
 3549      7433325F 
 3549      7400
 3550              	.LASF3:
 3551 0380 5F5F696E 		.ascii	"__int16_t\000"
 3551      7431365F 
 3551      7400
 3552              	.LASF44:
 3553 038a 64657363 		.ascii	"descendbuf\000"
 3553      656E6462 
 3553      756600
 3554              	.LASF22:
 3555 0395 73697A65 		.ascii	"sizetype\000"
 3555      74797065 
 3555      00
 3556              	.LASF69:
 3557 039e 53544154 		.ascii	"STATE\000"
 3557      4500
 3558              	.LASF40:
 3559 03a4 6F757470 		.ascii	"output\000"
 3559      757400
 3560              	.LASF83:
 3561 03ab 7973756D 		.ascii	"ysum\000"
 3561      00
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccumkfhN.s 			page 78


 3562              	.LASF65:
 3563 03b0 636F6C6C 		.ascii	"collect_flag\000"
 3563      6563745F 
 3563      666C6167 
 3563      00
 3564              	.LASF36:
 3565 03bd 72785F69 		.ascii	"rx_interrupt\000"
 3565      6E746572 
 3565      72757074 
 3565      00
 3566              	.LASF56:
 3567 03ca 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3567      52784275 
 3567      66666572 
 3567      00
 3568              	.LASF91:
 3569 03d7 53445F53 		.ascii	"SD_SETUP\000"
 3569      45545550 
 3569      00
 3570              	.LASF55:
 3571 03e0 73756363 		.ascii	"success\000"
 3571      65737300 
 3572              	.LASF80:
 3573 03e8 78617667 		.ascii	"xavg\000"
 3573      00
 3574              	.LASF34:
 3575 03ed 53616D70 		.ascii	"Sample_ISR_Handler\000"
 3575      6C655F49 
 3575      53525F48 
 3575      616E646C 
 3575      657200
 3576              	.LASF86:
 3577 0400 66736669 		.ascii	"fsfile\000"
 3577      6C6500
 3578              	.LASF45:
 3579 0407 6C616E64 		.ascii	"landedbuf\000"
 3579      65646275 
 3579      6600
 3580              	.LASF67:
 3581 0411 77616974 		.ascii	"wait_flag\000"
 3581      5F666C61 
 3581      6700
 3582              	.LASF2:
 3583 041b 5F5F7569 		.ascii	"__uint8_t\000"
 3583      6E74385F 
 3583      7400
 3584              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

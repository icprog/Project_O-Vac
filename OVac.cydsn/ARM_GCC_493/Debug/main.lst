ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	devAddr,1,1
  19              		.comm	buffer,22,4
  20              		.global	Addr
  21              		.data
  22              		.align	2
  23              		.type	Addr, %object
  24              		.size	Addr, 4
  25              	Addr:
  26 0000 3F000000 		.word	63
  27              		.global	id
  28              		.align	2
  29              		.type	id, %object
  30              		.size	id, 4
  31              	id:
  32 0004 01000000 		.word	1
  33              		.global	press_id
  34              		.align	2
  35              		.type	press_id, %object
  36              		.size	press_id, 4
  37              	press_id:
  38 0008 01000000 		.word	1
  39              		.global	data_time
  40              		.bss
  41              		.align	2
  42              		.type	data_time, %object
  43              		.size	data_time, 4
  44              	data_time:
  45 0000 00000000 		.space	4
  46              		.global	descent_time
  47              		.align	2
  48              		.type	descent_time, %object
  49              		.size	descent_time, 4
  50              	descent_time:
  51 0004 00000000 		.space	4
  52              		.global	sum
  53              		.align	2
  54              		.type	sum, %object
  55              		.size	sum, 4
  56              	sum:
  57 0008 00000000 		.space	4
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 2


  58              		.global	pressure_sum
  59              		.align	2
  60              		.type	pressure_sum, %object
  61              		.size	pressure_sum, 4
  62              	pressure_sum:
  63 000c 00000000 		.space	4
  64              		.global	average
  65              		.align	1
  66              		.type	average, %object
  67              		.size	average, 2
  68              	average:
  69 0010 0000     		.space	2
  70              		.global	collect_flag
  71              		.type	collect_flag, %object
  72              		.size	collect_flag, 1
  73              	collect_flag:
  74 0012 00       		.space	1
  75              		.global	wait_flag
  76              		.type	wait_flag, %object
  77              		.size	wait_flag, 1
  78              	wait_flag:
  79 0013 00       		.space	1
  80              		.global	PANIC_flag
  81              		.type	PANIC_flag, %object
  82              		.size	PANIC_flag, 1
  83              	PANIC_flag:
  84 0014 00       		.space	1
  85              		.global	STATE
  86              		.data
  87              		.type	STATE, %object
  88              		.size	STATE, 1
  89              	STATE:
  90 000c 01       		.byte	1
  91              		.global	countdown
  92              		.bss
  93              		.type	countdown, %object
  94              		.size	countdown, 1
  95              	countdown:
  96 0015 00       		.space	1
  97              		.global	update_Data
  98              		.type	update_Data, %object
  99              		.size	update_Data, 1
 100              	update_Data:
 101 0016 00       		.space	1
 102              		.global	RxBuffer
 103 0017 00       		.align	2
 104              		.type	RxBuffer, %object
 105              		.size	RxBuffer, 64
 106              	RxBuffer:
 107 0018 00000000 		.space	64
 107      00000000 
 107      00000000 
 107      00000000 
 107      00000000 
 108              		.global	msg_count
 109              		.align	2
 110              		.type	msg_count, %object
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 3


 111              		.size	msg_count, 4
 112              	msg_count:
 113 0058 00000000 		.space	4
 114              		.global	rxflag
 115              		.align	2
 116              		.type	rxflag, %object
 117              		.size	rxflag, 4
 118              	rxflag:
 119 005c 00000000 		.space	4
 120              		.global	bytes
 121              		.align	2
 122              		.type	bytes, %object
 123              		.size	bytes, 4
 124              	bytes:
 125 0060 00000000 		.space	4
 126              		.global	dataflag
 127              		.align	2
 128              		.type	dataflag, %object
 129              		.size	dataflag, 4
 130              	dataflag:
 131 0064 00000000 		.space	4
 132              		.global	transmit_flag
 133              		.align	2
 134              		.type	transmit_flag, %object
 135              		.size	transmit_flag, 4
 136              	transmit_flag:
 137 0068 00000000 		.space	4
 138              		.global	depth
 139              		.align	2
 140              		.type	depth, %object
 141              		.size	depth, 4
 142              	depth:
 143 006c 00000000 		.space	4
 144              		.global	reset
 145              		.align	2
 146              		.type	reset, %object
 147              		.size	reset, 4
 148              	reset:
 149 0070 00000000 		.space	4
 150              		.global	xavg
 151              		.align	2
 152              		.type	xavg, %object
 153              		.size	xavg, 4
 154              	xavg:
 155 0074 00000000 		.space	4
 156              		.global	yavg
 157              		.align	2
 158              		.type	yavg, %object
 159              		.size	yavg, 4
 160              	yavg:
 161 0078 00000000 		.space	4
 162              		.global	xsum
 163              		.align	2
 164              		.type	xsum, %object
 165              		.size	xsum, 4
 166              	xsum:
 167 007c 00000000 		.space	4
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 4


 168              		.global	ysum
 169              		.align	2
 170              		.type	ysum, %object
 171              		.size	ysum, 4
 172              	ysum:
 173 0080 00000000 		.space	4
 174              		.global	file
 175              		.data
 176 000d 000000   		.align	2
 177              		.type	file, %object
 178              		.size	file, 11
 179              	file:
 180 0010 74657374 		.ascii	"test_1.txt\000"
 180      5F312E74 
 180      787400
 181              		.global	volume
 182 001b 00       		.bss
 183              		.align	2
 184              		.type	volume, %object
 185              		.size	volume, 10
 186              	volume:
 187 0084 00000000 		.space	10
 187      00000000 
 187      0000
 188              		.comm	fsfile,4,4
 189 008e 0000     		.section	.text.Moisture_ISR_Handler,"ax",%progbits
 190              		.align	2
 191              		.global	Moisture_ISR_Handler
 192              		.thumb
 193              		.thumb_func
 194              		.type	Moisture_ISR_Handler, %function
 195              	Moisture_ISR_Handler:
 196              	.LFB63:
 197              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 2.20
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   This is a source code for example project of ADC single ended mode.
   8:main.c        **** *
   9:main.c        **** *   Variable resistor(pot) is connected to +ve input of ADC using the I/O pin.
  10:main.c        **** *   P0.0. When voltage to positive terminal of ADC is 0, the output displayed
  11:main.c        **** *   on the LCD pannel is 0x0000. As voltage on positive terminal goes on
  12:main.c        **** *   increasing, the  converted value goes on increasing from 0x0000 and reaches
  13:main.c        **** *   0xFFFF when voltage becomes 1.024V. Futher increase in voltage value,
  14:main.c        **** *   doesn't cause any changes to values displayed in the LCD.
  15:main.c        **** *
  16:main.c        **** * Hardware Connections: 
  17:main.c        **** *  Connect analog input from Variable resistor to port P0[0] of DVK1 board.
  18:main.c        **** *
  19:main.c        **** ********************************************************************************
  20:main.c        **** * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  21:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  22:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  23:main.c        **** * Therefore, you may use this software only as provided in the license agreement
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 5


  24:main.c        **** * accompanying the software package from which you obtained this software.
  25:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  26:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  27:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <project.h>
  31:main.c        **** #include <mpu6050.h>
  32:main.c        **** #include <stdio.h>
  33:main.c        **** #include <stdlib.h>
  34:main.c        **** #include <string.h>
  35:main.c        **** #include <FS.h>
  36:main.c        **** #include "LiquidCrystal_I2C.h"
  37:main.c        **** #include "functions.h"
  38:main.c        **** 
  39:main.c        **** #define MPU6050 
  40:main.c        **** #define LCD
  41:main.c        **** //#define SD
  42:main.c        **** #define BT
  43:main.c        **** 
  44:main.c        **** #define MA_WINDOW 15                    // Number of samples in the moving average window.
  45:main.c        **** #define BOT_THRESHOLD 20000             // Z-Aacceleration threshold for transition into LANDED sta
  46:main.c        **** #define WAIT_TIME 1000                  // Number of ISR calls until transition into DESCENDING sta
  47:main.c        **** #define BUFFER_LEN  64u                 // Buffer length for UART rx
  48:main.c        **** #define DEGREES_20 (131 * 20)           // Gyro value corresponding to 30 degrees. Default setting 
  49:main.c        **** #define DEGREES_50 (131 * 50)           // So every 131 in gyro value equals 1 degree of rotational
  50:main.c        **** 
  51:main.c        **** 
  52:main.c        **** uint32_t Addr = 0x3F;                   // I2C address of LCD.
  53:main.c        **** long id = 1, press_id = 1;              // Interrupt count.
  54:main.c        **** long data_time = 0;                     // data point num
  55:main.c        **** long descent_time = 0;                  // Max number of seconds allowed for descent, x 500 because
  56:main.c        **** 
  57:main.c        **** long sum = 0;                           // Sum of accelerometer values
  58:main.c        **** float pressure_sum = 0;                 // Sum of pressure values. 
  59:main.c        **** int16_t average = 0;                    // Moving average variable, accelerometer.
  60:main.c        **** bool collect_flag = 0;                  // flag indicating when to record acceleration sample.
  61:main.c        **** bool wait_flag = 0;                     // flag indicating when to increment interrupt counter.
  62:main.c        **** bool PANIC_flag = 0;                    // flag indicating water is present in housing.
  63:main.c        **** //bool first_test = 1;                  // flag indicating first test(longer countdown)
  64:main.c        **** STATES STATE = WAIT_TO_LAUNCH;                      // Set initial state. 
  65:main.c        **** uint8_t countdown = 0, update_Data = 0;             // Counting variables, one for countdowns, one 
  66:main.c        **** uint8_t RxBuffer[BUFFER_LEN] = {};                  // Rx Buffer
  67:main.c        **** int msg_count = 0, rxflag = 0, bytes = 0, dataflag = 0, transmit_flag = 0;    // UART variables
  68:main.c        **** int depth = 0, reset = 0;                                                     // Variable depth, re
  69:main.c        **** float xavg = 0, yavg = 0, xsum = 0, ysum = 0;                                 // gyro avg/sum value
  70:main.c        **** char file[11] = "test_1.txt";
  71:main.c        **** char volume[10] = {};
  72:main.c        **** FS_FILE *fsfile;
  73:main.c        **** 
  74:main.c        **** /*******************************************************************************
  75:main.c        **** * Function Name: main
  76:main.c        **** ********************************************************************************
  77:main.c        **** *
  78:main.c        **** * Summary:
  79:main.c        **** *  main() performs following functions:
  80:main.c        **** *  1: Initializes all necessary components on board (accelerometer/gyro, SD card, LCD, timers, inte
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 6


  81:main.c        **** *       Bluetooth).
  82:main.c        **** *  2: Begins at state: WAIT_FOR_LAUNCH. Waits for a bluetooth command to start, then prompts for a 
  83:main.c        **** *       completion, starts a countdown for which the device should be thrown in the water before it
  84:main.c        **** *       DESCENDING state.
  85:main.c        **** *  3: Samples Z-axis acceleration data from module @ 500hz. Computes moving average of Z-axis accel
  86:main.c        **** *       for gyro data in the case that the system flips somehow. If the moving average has breached
  87:main.c        **** *       20000), we know it has landed on the bottom. If the time of descent has gone over the max d
  88:main.c        **** *       from the depth earlier, then we go to resurfacing. 
  89:main.c        **** *  4: At the LANDED state, we delay to let the system settle, then turn on solenoid 1. This solenoi
  90:main.c        **** *       in the legs. The suction occurs for 5 seconds, then turns off. Switch to RESURFACING.
  91:main.c        **** *  5: To resurface, we pulse the solenoids at a rate of 3 seconds on to 1 second off. The number of
  92:main.c        **** *       by the depth. Once the number of pulses has finished, we move to TRANSMIT.
  93:main.c        **** *  6: At TRANSMIT, we simply wait for the data command to begin sending out the collected data or f
  94:main.c        **** *       do another run.
  95:main.c        **** *
  96:main.c        **** * Parameters:
  97:main.c        **** *  None.
  98:main.c        **** *
  99:main.c        **** * Return:
 100:main.c        **** *  None.
 101:main.c        **** *
 102:main.c        **** *******************************************************************************/
 103:main.c        **** 
 104:main.c        **** int SD_SETUP(char* filename); //SD card setup function
 105:main.c        **** 
 106:main.c        **** /* Moisture sensor ISR */
 107:main.c        **** CY_ISR (Moisture_ISR_Handler){
 198              		.loc 1 107 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 0000 80B5     		push	{r7, lr}
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 00AF     		add	r7, sp, #0
 207              		.cfi_def_cfa_register 7
 108:main.c        ****     PANIC_flag = 1;                             // Set flag to indicate water
 208              		.loc 1 108 0
 209 0004 044B     		ldr	r3, .L2
 210 0006 0122     		movs	r2, #1
 211 0008 1A70     		strb	r2, [r3]
 109:main.c        ****     STATE = RESURFACE;                          // Go to surface
 212              		.loc 1 109 0
 213 000a 044B     		ldr	r3, .L2+4
 214 000c 0422     		movs	r2, #4
 215 000e 1A70     		strb	r2, [r3]
 110:main.c        ****     Comp_Stop();                                // Stop comparator for interrupt
 216              		.loc 1 110 0
 217 0010 FFF7FEFF 		bl	Comp_Stop
 111:main.c        **** }
 218              		.loc 1 111 0
 219 0014 80BD     		pop	{r7, pc}
 220              	.L3:
 221 0016 00BF     		.align	2
 222              	.L2:
 223 0018 00000000 		.word	PANIC_flag
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 7


 224 001c 00000000 		.word	STATE
 225              		.cfi_endproc
 226              	.LFE63:
 227              		.size	Moisture_ISR_Handler, .-Moisture_ISR_Handler
 228              		.section	.text.Sample_ISR_Handler,"ax",%progbits
 229              		.align	2
 230              		.global	Sample_ISR_Handler
 231              		.thumb
 232              		.thumb_func
 233              		.type	Sample_ISR_Handler, %function
 234              	Sample_ISR_Handler:
 235              	.LFB64:
 112:main.c        **** 
 113:main.c        **** /* Sampling ISR */
 114:main.c        **** CY_ISR (Sample_ISR_Handler){
 236              		.loc 1 114 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 241 0000 80B4     		push	{r7}
 242              		.cfi_def_cfa_offset 4
 243              		.cfi_offset 7, -4
 244 0002 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 115:main.c        ****     Sample_Timer_STATUS;                        // Clears interrupt by accessing timer status regis
 246              		.loc 1 115 0
 247 0004 0A4B     		ldr	r3, .L7
 248 0006 1B78     		ldrb	r3, [r3]
 116:main.c        ****     if (STATE == DESCENDING || STATE == LANDED){
 249              		.loc 1 116 0
 250 0008 0A4B     		ldr	r3, .L7+4
 251 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 252 000c 022B     		cmp	r3, #2
 253 000e 03D0     		beq	.L5
 254              		.loc 1 116 0 is_stmt 0 discriminator 1
 255 0010 084B     		ldr	r3, .L7+4
 256 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 257 0014 032B     		cmp	r3, #3
 258 0016 04D1     		bne	.L6
 259              	.L5:
 117:main.c        ****         data_time++;
 260              		.loc 1 117 0 is_stmt 1
 261 0018 074B     		ldr	r3, .L7+8
 262 001a 1B68     		ldr	r3, [r3]
 263 001c 0133     		adds	r3, r3, #1
 264 001e 064A     		ldr	r2, .L7+8
 265 0020 1360     		str	r3, [r2]
 266              	.L6:
 118:main.c        ****     }
 119:main.c        ****     collect_flag = 1;
 267              		.loc 1 119 0
 268 0022 064B     		ldr	r3, .L7+12
 269 0024 0122     		movs	r2, #1
 270 0026 1A70     		strb	r2, [r3]
 120:main.c        **** }
 271              		.loc 1 120 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 8


 272 0028 BD46     		mov	sp, r7
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 002a 5DF8047B 		ldr	r7, [sp], #4
 276              		.cfi_restore 7
 277              		.cfi_def_cfa_offset 0
 278 002e 7047     		bx	lr
 279              	.L8:
 280              		.align	2
 281              	.L7:
 282 0030 034F0040 		.word	1073762051
 283 0034 00000000 		.word	STATE
 284 0038 00000000 		.word	data_time
 285 003c 00000000 		.word	collect_flag
 286              		.cfi_endproc
 287              	.LFE64:
 288              		.size	Sample_ISR_Handler, .-Sample_ISR_Handler
 289              		.section	.text.Countdown_ISR_Handler,"ax",%progbits
 290              		.align	2
 291              		.global	Countdown_ISR_Handler
 292              		.thumb
 293              		.thumb_func
 294              		.type	Countdown_ISR_Handler, %function
 295              	Countdown_ISR_Handler:
 296              	.LFB65:
 121:main.c        **** 
 122:main.c        **** /* Countdown ISR*/
 123:main.c        **** CY_ISR (Countdown_ISR_Handler){
 297              		.loc 1 123 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302 0000 80B4     		push	{r7}
 303              		.cfi_def_cfa_offset 4
 304              		.cfi_offset 7, -4
 305 0002 00AF     		add	r7, sp, #0
 306              		.cfi_def_cfa_register 7
 124:main.c        ****     Countdown_timer_STATUS;                        // Clears interrupt by accessing timer status re
 307              		.loc 1 124 0
 308 0004 1D4B     		ldr	r3, .L15
 309 0006 1B78     		ldrb	r3, [r3]
 125:main.c        ****     if ((STATE == WAIT_TO_LAUNCH && depth != 0) || STATE == LANDED || STATE == RESURFACE){ 
 310              		.loc 1 125 0
 311 0008 1D4B     		ldr	r3, .L15+4
 312 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 000c 012B     		cmp	r3, #1
 314 000e 03D1     		bne	.L10
 315              		.loc 1 125 0 is_stmt 0 discriminator 1
 316 0010 1C4B     		ldr	r3, .L15+8
 317 0012 1B68     		ldr	r3, [r3]
 318 0014 002B     		cmp	r3, #0
 319 0016 07D1     		bne	.L11
 320              	.L10:
 321              		.loc 1 125 0 discriminator 3
 322 0018 194B     		ldr	r3, .L15+4
 323 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 9


 324 001c 032B     		cmp	r3, #3
 325 001e 03D0     		beq	.L11
 326              		.loc 1 125 0 discriminator 4
 327 0020 174B     		ldr	r3, .L15+4
 328 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 329 0024 042B     		cmp	r3, #4
 330 0026 08D1     		bne	.L12
 331              	.L11:
 126:main.c        ****         wait_flag = 1;
 332              		.loc 1 126 0 is_stmt 1
 333 0028 174B     		ldr	r3, .L15+12
 334 002a 0122     		movs	r2, #1
 335 002c 1A70     		strb	r2, [r3]
 127:main.c        ****         countdown++;
 336              		.loc 1 127 0
 337 002e 174B     		ldr	r3, .L15+16
 338 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 339 0032 0133     		adds	r3, r3, #1
 340 0034 DAB2     		uxtb	r2, r3
 341 0036 154B     		ldr	r3, .L15+16
 342 0038 1A70     		strb	r2, [r3]
 343              	.L12:
 128:main.c        ****     }
 129:main.c        ****     #ifdef BT
 130:main.c        ****         if (STATE == TRANSMIT || (STATE == WAIT_TO_LAUNCH && !dataflag)){
 344              		.loc 1 130 0
 345 003a 114B     		ldr	r3, .L15+4
 346 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 347 003e 052B     		cmp	r3, #5
 348 0040 07D0     		beq	.L13
 349              		.loc 1 130 0 is_stmt 0 discriminator 1
 350 0042 0F4B     		ldr	r3, .L15+4
 351 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 352 0046 012B     		cmp	r3, #1
 353 0048 13D1     		bne	.L9
 354              		.loc 1 130 0 discriminator 2
 355 004a 114B     		ldr	r3, .L15+20
 356 004c 1B68     		ldr	r3, [r3]
 357 004e 002B     		cmp	r3, #0
 358 0050 0FD1     		bne	.L9
 359              	.L13:
 131:main.c        ****             update_Data++;
 360              		.loc 1 131 0 is_stmt 1
 361 0052 104B     		ldr	r3, .L15+24
 362 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0056 0133     		adds	r3, r3, #1
 364 0058 DAB2     		uxtb	r2, r3
 365 005a 0E4B     		ldr	r3, .L15+24
 366 005c 1A70     		strb	r2, [r3]
 132:main.c        ****             if (update_Data == 10){
 367              		.loc 1 132 0
 368 005e 0D4B     		ldr	r3, .L15+24
 369 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0062 0A2B     		cmp	r3, #10
 371 0064 05D1     		bne	.L9
 133:main.c        ****                 transmit_flag = 1;
 372              		.loc 1 133 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 10


 373 0066 0C4B     		ldr	r3, .L15+28
 374 0068 0122     		movs	r2, #1
 375 006a 1A60     		str	r2, [r3]
 134:main.c        ****                 update_Data = 0;
 376              		.loc 1 134 0
 377 006c 094B     		ldr	r3, .L15+24
 378 006e 0022     		movs	r2, #0
 379 0070 1A70     		strb	r2, [r3]
 380              	.L9:
 135:main.c        ****             }
 136:main.c        ****         }          
 137:main.c        ****     #endif
 138:main.c        **** }
 381              		.loc 1 138 0
 382 0072 BD46     		mov	sp, r7
 383              		.cfi_def_cfa_register 13
 384              		@ sp needed
 385 0074 5DF8047B 		ldr	r7, [sp], #4
 386              		.cfi_restore 7
 387              		.cfi_def_cfa_offset 0
 388 0078 7047     		bx	lr
 389              	.L16:
 390 007a 00BF     		.align	2
 391              	.L15:
 392 007c 67640040 		.word	1073767527
 393 0080 00000000 		.word	STATE
 394 0084 00000000 		.word	depth
 395 0088 00000000 		.word	wait_flag
 396 008c 00000000 		.word	countdown
 397 0090 00000000 		.word	dataflag
 398 0094 00000000 		.word	update_Data
 399 0098 00000000 		.word	transmit_flag
 400              		.cfi_endproc
 401              	.LFE65:
 402              		.size	Countdown_ISR_Handler, .-Countdown_ISR_Handler
 403              		.section	.text.rx_interrupt,"ax",%progbits
 404              		.align	2
 405              		.global	rx_interrupt
 406              		.thumb
 407              		.thumb_func
 408              		.type	rx_interrupt, %function
 409              	rx_interrupt:
 410              	.LFB66:
 139:main.c        **** /* Bluetooth UART Rx ISR*/
 140:main.c        **** CY_ISR(rx_interrupt){
 411              		.loc 1 140 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 1, uses_anonymous_args = 0
 415 0000 98B5     		push	{r3, r4, r7, lr}
 416              		.cfi_def_cfa_offset 16
 417              		.cfi_offset 3, -16
 418              		.cfi_offset 4, -12
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 00AF     		add	r7, sp, #0
 422              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 11


 141:main.c        ****     #ifdef BT
 142:main.c        ****     while (UART_ReadRxStatus() & UART_RX_STS_FIFO_NOTEMPTY){
 423              		.loc 1 142 0
 424 0004 14E0     		b	.L18
 425              	.L19:
 143:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 426              		.loc 1 143 0
 427 0006 0E4B     		ldr	r3, .L20
 428 0008 1C68     		ldr	r4, [r3]
 429 000a 631C     		adds	r3, r4, #1
 430 000c 0C4A     		ldr	r2, .L20
 431 000e 1360     		str	r3, [r2]
 432 0010 FFF7FEFF 		bl	UART_GetChar
 433 0014 0346     		mov	r3, r0
 434 0016 1A46     		mov	r2, r3
 435 0018 0A4B     		ldr	r3, .L20+4
 436 001a 1A55     		strb	r2, [r3, r4]
 144:main.c        ****         if ((msg_count - 3) > bytes)
 437              		.loc 1 144 0
 438 001c 084B     		ldr	r3, .L20
 439 001e 1B68     		ldr	r3, [r3]
 440 0020 DA1E     		subs	r2, r3, #3
 441 0022 094B     		ldr	r3, .L20+8
 442 0024 1B68     		ldr	r3, [r3]
 443 0026 9A42     		cmp	r2, r3
 444 0028 02DD     		ble	.L18
 145:main.c        ****             rxflag = 1;
 445              		.loc 1 145 0
 446 002a 084B     		ldr	r3, .L20+12
 447 002c 0122     		movs	r2, #1
 448 002e 1A60     		str	r2, [r3]
 449              	.L18:
 142:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 450              		.loc 1 142 0
 451 0030 FFF7FEFF 		bl	UART_ReadRxStatus
 452 0034 0346     		mov	r3, r0
 453 0036 03F02003 		and	r3, r3, #32
 454 003a 002B     		cmp	r3, #0
 455 003c E3D1     		bne	.L19
 146:main.c        ****     }
 147:main.c        ****     #endif
 148:main.c        **** }
 456              		.loc 1 148 0
 457 003e 98BD     		pop	{r3, r4, r7, pc}
 458              	.L21:
 459              		.align	2
 460              	.L20:
 461 0040 00000000 		.word	msg_count
 462 0044 00000000 		.word	RxBuffer
 463 0048 00000000 		.word	bytes
 464 004c 00000000 		.word	rxflag
 465              		.cfi_endproc
 466              	.LFE66:
 467              		.size	rx_interrupt, .-rx_interrupt
 468              		.section	.rodata
 469              		.align	2
 470              	.LC6:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 12


 471 0000 50536F43 		.ascii	"PSoC 5LP: O-Vac\000"
 471      20354C50 
 471      3A204F2D 
 471      56616300 
 472              		.align	2
 473              	.LC7:
 474 0010 49324320 		.ascii	"I2C Working\000"
 474      576F726B 
 474      696E6700 
 475              		.global	__aeabi_i2f
 476              		.global	__aeabi_f2d
 477              		.global	__aeabi_dmul
 478              		.global	__aeabi_d2f
 479              		.global	__aeabi_fadd
 480              		.global	__aeabi_fdiv
 481              		.global	__aeabi_f2iz
 482              		.global	__aeabi_fsub
 483              		.global	__aeabi_fmul
 484              		.align	2
 485              	.LC8:
 486 001c 53544154 		.ascii	"STATE: WAIT\000"
 486      453A2057 
 486      41495400 
 487              		.align	2
 488              	.LC9:
 489 0028 0A256420 		.ascii	"\012%d seconds remaining\000"
 489      7365636F 
 489      6E647320 
 489      72656D61 
 489      696E696E 
 490 003e 0000     		.align	2
 491              	.LC10:
 492 0040 53544154 		.ascii	"STATE: DESCENT\000"
 492      453A2044 
 492      45534345 
 492      4E5400
 493 004f 00       		.align	2
 494              	.LC11:
 495 0050 54696C74 		.ascii	"Tilted\000"
 495      656400
 496 0057 00       		.align	2
 497              	.LC12:
 498 0058 53544154 		.ascii	"STATE: RESURFACING\000"
 498      453A2052 
 498      45535552 
 498      46414349 
 498      4E4700
 499 006b 00       		.align	2
 500              	.LC13:
 501 006c 53544154 		.ascii	"STATE: LANDED\000"
 501      453A204C 
 501      414E4445 
 501      4400
 502 007a 0000     		.align	2
 503              	.LC14:
 504 007c 53544154 		.ascii	"STATE: RESURFACE\000"
 504      453A2052 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 13


 504      45535552 
 504      46414345 
 504      00
 505 008d 000000   		.align	2
 506              	.LC15:
 507 0090 57415445 		.ascii	"WATER DETECTED\000"
 507      52204445 
 507      54454354 
 507      454400
 508 009f 00       		.align	2
 509              	.LC16:
 510 00a0 5452414E 		.ascii	"TRANSMIT\000"
 510      534D4954 
 510      00
 511 00a9 000000   		.align	2
 512              	.LC0:
 513 00ac 53595354 		.ascii	"SYSTEM_CHECK\000"
 513      454D5F43 
 513      4845434B 
 513      00
 514 00b9 00       		.space	1
 515 00ba 0000     		.align	2
 516              	.LC1:
 517 00bc 0A535441 		.ascii	"\012STATE: DESCENDING\012\000"
 517      54453A20 
 517      44455343 
 517      454E4449 
 517      4E470A00 
 518              		.align	2
 519              	.LC2:
 520 00d0 53544154 		.ascii	"STATE: LANDED\012\000"
 520      453A204C 
 520      414E4445 
 520      440A00
 521 00df 00       		.align	2
 522              	.LC3:
 523 00e0 53544154 		.ascii	"STATE: VACUUMING\012\000"
 523      453A2056 
 523      41435555 
 523      4D494E47 
 523      0A00
 524 00f2 0000     		.align	2
 525              	.LC4:
 526 00f4 53544154 		.ascii	"STATE: RESURFACE\012\000"
 526      453A2052 
 526      45535552 
 526      46414345 
 526      0A00
 527 0106 0000     		.align	2
 528              	.LC5:
 529 0108 53544154 		.ascii	"STATE: TRANSMIT\012\000"
 529      453A2054 
 529      52414E53 
 529      4D49540A 
 529      00
 530              		.section	.text.main,"ax",%progbits
 531              		.align	2
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 14


 532              		.global	main
 533              		.thumb
 534              		.thumb_func
 535              		.type	main, %function
 536              	main:
 537              	.LFB67:
 149:main.c        **** 
 150:main.c        **** int main()
 151:main.c        **** {
 538              		.loc 1 151 0
 539              		.cfi_startproc
 540              		@ args = 0, pretend = 0, frame = 304
 541              		@ frame_needed = 1, uses_anonymous_args = 0
 542 0000 B0B5     		push	{r4, r5, r7, lr}
 543              		.cfi_def_cfa_offset 16
 544              		.cfi_offset 4, -16
 545              		.cfi_offset 5, -12
 546              		.cfi_offset 7, -8
 547              		.cfi_offset 14, -4
 548 0002 CEB0     		sub	sp, sp, #312
 549              		.cfi_def_cfa_offset 328
 550 0004 02AF     		add	r7, sp, #8
 551              		.cfi_def_cfa 7, 320
 152:main.c        ****     int num = 0, decimals = 0;                                       // ADC Voltage conversion plac
 552              		.loc 1 152 0
 553 0006 0023     		movs	r3, #0
 554 0008 C7F81C31 		str	r3, [r7, #284]
 555 000c 0023     		movs	r3, #0
 556 000e C7F81831 		str	r3, [r7, #280]
 153:main.c        ****     float voltage = 0, temp = 0, output = 0, pressure_avg = 0;       // ADC Voltage conversion vari
 557              		.loc 1 153 0
 558 0012 4FF00003 		mov	r3, #0
 559 0016 C7F81431 		str	r3, [r7, #276]	@ float
 560 001a 4FF00003 		mov	r3, #0
 561 001e C7F81031 		str	r3, [r7, #272]	@ float
 562 0022 4FF00003 		mov	r3, #0
 563 0026 C7F80C31 		str	r3, [r7, #268]	@ float
 564 002a 4FF00003 		mov	r3, #0
 565 002e C7F82C31 		str	r3, [r7, #300]	@ float
 154:main.c        ****     char buf[50], tempbuf[20] = {}, curState[14] = "SYSTEM_CHECK";  // buffers, UART and initial st
 566              		.loc 1 154 0
 567 0032 07F1BC03 		add	r3, r7, #188
 568 0036 0022     		movs	r2, #0
 569 0038 1A60     		str	r2, [r3]
 570 003a 0433     		adds	r3, r3, #4
 571 003c 0022     		movs	r2, #0
 572 003e 1A60     		str	r2, [r3]
 573 0040 0433     		adds	r3, r3, #4
 574 0042 0022     		movs	r2, #0
 575 0044 1A60     		str	r2, [r3]
 576 0046 0433     		adds	r3, r3, #4
 577 0048 0022     		movs	r2, #0
 578 004a 1A60     		str	r2, [r3]
 579 004c 0433     		adds	r3, r3, #4
 580 004e 0022     		movs	r2, #0
 581 0050 1A60     		str	r2, [r3]
 582 0052 0433     		adds	r3, r3, #4
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 15


 583 0054 BE4B     		ldr	r3, .L72+8
 584 0056 07F1AC04 		add	r4, r7, #172
 585 005a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 586 005c 07C4     		stmia	r4!, {r0, r1, r2}
 587 005e 2370     		strb	r3, [r4]
 588 0060 0023     		movs	r3, #0
 589 0062 87F8B930 		strb	r3, [r7, #185]
 155:main.c        ****     char descendbuf[DESCENDING_LEN] = STATE_DESCENDING;             // buffers for transmitting sta
 590              		.loc 1 155 0
 591 0066 BB4B     		ldr	r3, .L72+12
 592 0068 07F19804 		add	r4, r7, #152
 593 006c 1D46     		mov	r5, r3
 594 006e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 595 0070 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 596 0072 2B68     		ldr	r3, [r5]
 597 0074 1A46     		mov	r2, r3	@ movhi
 598 0076 2280     		strh	r2, [r4]	@ movhi
 599 0078 0234     		adds	r4, r4, #2
 600 007a 1B0C     		lsrs	r3, r3, #16
 601 007c 2370     		strb	r3, [r4]
 156:main.c        ****     char landedbuf[LANDED_LEN] = STATE_LANDED;              
 602              		.loc 1 156 0
 603 007e B64B     		ldr	r3, .L72+16
 604 0080 07F18804 		add	r4, r7, #136
 605 0084 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 606 0086 07C4     		stmia	r4!, {r0, r1, r2}
 607 0088 2380     		strh	r3, [r4]	@ movhi
 157:main.c        ****     char vacuumbuf[VACUUM_LEN] = STATE_VACUUM;
 608              		.loc 1 157 0
 609 008a B44B     		ldr	r3, .L72+20
 610 008c 07F17404 		add	r4, r7, #116
 611 0090 1D46     		mov	r5, r3
 612 0092 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 613 0094 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 614 0096 2B68     		ldr	r3, [r5]
 615 0098 2370     		strb	r3, [r4]
 158:main.c        ****     char resurfbuf[RESURFACE_LEN] = STATE_RESURFACE;
 616              		.loc 1 158 0
 617 009a B14B     		ldr	r3, .L72+24
 618 009c 07F16004 		add	r4, r7, #96
 619 00a0 1D46     		mov	r5, r3
 620 00a2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 621 00a4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 622 00a6 2B68     		ldr	r3, [r5]
 623 00a8 2370     		strb	r3, [r4]
 159:main.c        ****     char transbuf[TRANSMIT_LEN] = STATE_TRANSMIT;
 624              		.loc 1 159 0
 625 00aa AE4B     		ldr	r3, .L72+28
 626 00ac 07F15004 		add	r4, r7, #80
 627 00b0 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 628 00b2 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 160:main.c        ****     int stateMsgCount = 0, pulse = 0, secs_for_tilt = 0;
 629              		.loc 1 160 0
 630 00b6 0023     		movs	r3, #0
 631 00b8 C7F82831 		str	r3, [r7, #296]
 632 00bc 0023     		movs	r3, #0
 633 00be C7F82431 		str	r3, [r7, #292]
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 16


 634 00c2 0023     		movs	r3, #0
 635 00c4 C7F82031 		str	r3, [r7, #288]
 161:main.c        ****     
 162:main.c        ****     int16_t ax, ay, az, i;
 163:main.c        ****     int16_t gx, gy, gz;
 164:main.c        ****     int16_t z_offset = 0;
 636              		.loc 1 164 0
 637 00c8 0023     		movs	r3, #0
 638 00ca A7F80A31 		strh	r3, [r7, #266]	@ movhi
 165:main.c        ****     int tens = 0, ones = 0;                     // digit place variables for message len of bluetoo
 639              		.loc 1 165 0
 640 00ce 0023     		movs	r3, #0
 641 00d0 7B64     		str	r3, [r7, #68]
 642 00d2 0023     		movs	r3, #0
 643 00d4 C7F80431 		str	r3, [r7, #260]
 166:main.c        ****     
 167:main.c        ****     /* Start the components */
 168:main.c        ****     CYGlobalIntEnable;                          // enable global interrupts
 644              		.loc 1 168 0
 645              	@ 168 "main.c" 1
 646 00d8 62B6     		CPSIE   i
 647              	@ 0 "" 2
 169:main.c        ****     I2C_Master_Start(); 
 648              		.loc 1 169 0
 649              		.thumb
 650 00da FFF7FEFF 		bl	I2C_Master_Start
 170:main.c        ****     ADC_Start();
 651              		.loc 1 170 0
 652 00de FFF7FEFF 		bl	ADC_Start
 171:main.c        ****     Sample_Timer_Start();                       // start timer module
 653              		.loc 1 171 0
 654 00e2 FFF7FEFF 		bl	Sample_Timer_Start
 172:main.c        ****     Sample_ISR_StartEx(Sample_ISR_Handler);     // reference ISR function
 655              		.loc 1 172 0
 656 00e6 A048     		ldr	r0, .L72+32
 657 00e8 FFF7FEFF 		bl	Sample_ISR_StartEx
 173:main.c        ****     rx_interrupt_StartEx(rx_interrupt);
 658              		.loc 1 173 0
 659 00ec 9F48     		ldr	r0, .L72+36
 660 00ee FFF7FEFF 		bl	rx_interrupt_StartEx
 174:main.c        ****     //moisture_isr_StartEx(Moisture_ISR_Handler); // moisture isr start
 175:main.c        ****     //Comp_Start();                               // comparator for moisture start
 176:main.c        ****     UART_Start();
 661              		.loc 1 176 0
 662 00f2 FFF7FEFF 		bl	UART_Start
 177:main.c        ****     
 178:main.c        ****     
 179:main.c        ****     #ifdef LCD
 180:main.c        ****         LiquidCrystal_I2C_init(Addr,16,2,0);        // initialize I2C communication with LCD
 663              		.loc 1 180 0
 664 00f6 9E4B     		ldr	r3, .L72+40
 665 00f8 1B68     		ldr	r3, [r3]
 666 00fa DBB2     		uxtb	r3, r3
 667 00fc 1846     		mov	r0, r3
 668 00fe 1021     		movs	r1, #16
 669 0100 0222     		movs	r2, #2
 670 0102 0023     		movs	r3, #0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 17


 671 0104 FFF7FEFF 		bl	LiquidCrystal_I2C_init
 181:main.c        ****         begin(); 
 672              		.loc 1 181 0
 673 0108 FFF7FEFF 		bl	begin
 182:main.c        ****     
 183:main.c        ****     #endif
 184:main.c        ****    
 185:main.c        ****     /* initialize MPU6050 */
 186:main.c        ****     #ifdef MPU6050
 187:main.c        ****         MPU6050_init();    
 674              		.loc 1 187 0
 675 010c FFF7FEFF 		bl	MPU6050_init
 188:main.c        **** 	    MPU6050_initialize(); 
 676              		.loc 1 188 0
 677 0110 FFF7FEFF 		bl	MPU6050_initialize
 189:main.c        ****     #endif
 190:main.c        ****         
 191:main.c        ****     #ifdef LCD
 192:main.c        ****         /* Startup Display */
 193:main.c        ****         LCD_print("PSoC 5LP: O-Vac");
 678              		.loc 1 193 0
 679 0114 9748     		ldr	r0, .L72+44
 680 0116 FFF7FEFF 		bl	LCD_print
 194:main.c        ****         setCursor(0,1);
 681              		.loc 1 194 0
 682 011a 0020     		movs	r0, #0
 683 011c 0121     		movs	r1, #1
 684 011e FFF7FEFF 		bl	setCursor
 195:main.c        ****         LCD_print("I2C Working");
 685              		.loc 1 195 0
 686 0122 9548     		ldr	r0, .L72+48
 687 0124 FFF7FEFF 		bl	LCD_print
 196:main.c        ****         
 197:main.c        ****         CyDelay(1000u);   
 688              		.loc 1 197 0
 689 0128 4FF47A70 		mov	r0, #1000
 690 012c FFF7FEFF 		bl	CyDelay
 198:main.c        ****         clear();
 691              		.loc 1 198 0
 692 0130 FFF7FEFF 		bl	clear
 199:main.c        ****     #endif
 200:main.c        ****     
 201:main.c        ****     /* Start the ADC conversion */
 202:main.c        ****     ADC_StartConvert();
 693              		.loc 1 202 0
 694 0134 FFF7FEFF 		bl	ADC_StartConvert
 203:main.c        **** 
 204:main.c        ****     /* Start SD card*/
 205:main.c        ****     #ifdef SD
 206:main.c        ****         int SD_Result = SD_SETUP(file); 
 207:main.c        ****         
 208:main.c        ****     #endif
 209:main.c        ****     
 210:main.c        ****     #ifdef LCD
 211:main.c        ****         /* Display the current State */
 212:main.c        ****         setCursor(0,0);    
 695              		.loc 1 212 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 18


 696 0138 0020     		movs	r0, #0
 697 013a 0021     		movs	r1, #0
 698 013c FFF7FEFF 		bl	setCursor
 213:main.c        ****         LCD_print(curState);
 699              		.loc 1 213 0
 700 0140 07F1AC03 		add	r3, r7, #172
 701 0144 1846     		mov	r0, r3
 702 0146 FFF7FEFF 		bl	LCD_print
 214:main.c        ****     #endif
 215:main.c        ****     STATE = WAIT_TO_LAUNCH;
 703              		.loc 1 215 0
 704 014a 8C4B     		ldr	r3, .L72+52
 705 014c 0122     		movs	r2, #1
 706 014e 1A70     		strb	r2, [r3]
 216:main.c        ****     
 217:main.c        ****     Countdown_timer_Start();
 707              		.loc 1 217 0
 708 0150 FFF7FEFF 		bl	Countdown_timer_Start
 218:main.c        ****     countdown_StartEx(Countdown_ISR_Handler);
 709              		.loc 1 218 0
 710 0154 8A48     		ldr	r0, .L72+56
 711 0156 FFF7FEFF 		bl	countdown_StartEx
 712              	.L70:
 713              	.LBB2:
 219:main.c        ****    
 220:main.c        ****     
 221:main.c        ****     for(;;)
 222:main.c        ****     {
 223:main.c        ****         
 224:main.c        ****         if(ADC_IsEndConversion(ADC_RETURN_STATUS))              // voltage conversion for pressure
 714              		.loc 1 224 0
 715 015a 0120     		movs	r0, #1
 716 015c FFF7FEFF 		bl	ADC_IsEndConversion
 717 0160 0346     		mov	r3, r0
 718 0162 002B     		cmp	r3, #0
 719 0164 00F08980 		beq	.L23
 225:main.c        ****         {
 226:main.c        ****             output = ADC_GetResult32();
 720              		.loc 1 226 0
 721 0168 FFF7FEFF 		bl	ADC_GetResult32
 722 016c 0346     		mov	r3, r0
 723 016e 1846     		mov	r0, r3
 724 0170 FFF7FEFF 		bl	__aeabi_i2f
 725 0174 0346     		mov	r3, r0
 726 0176 C7F80C31 		str	r3, [r7, #268]	@ float
 227:main.c        ****             voltage = output * (3.32 / 4096);
 727              		.loc 1 227 0
 728 017a D7F80C01 		ldr	r0, [r7, #268]	@ float
 729 017e FFF7FEFF 		bl	__aeabi_f2d
 730 0182 0246     		mov	r2, r0
 731 0184 0B46     		mov	r3, r1
 732 0186 1046     		mov	r0, r2
 733 0188 1946     		mov	r1, r3
 734 018a 6FA3     		adr	r3, .L72
 735 018c D3E90023 		ldrd	r2, [r3]
 736 0190 FFF7FEFF 		bl	__aeabi_dmul
 737 0194 0246     		mov	r2, r0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 19


 738 0196 0B46     		mov	r3, r1
 739 0198 1046     		mov	r0, r2
 740 019a 1946     		mov	r1, r3
 741 019c FFF7FEFF 		bl	__aeabi_d2f
 742 01a0 0346     		mov	r3, r0
 743 01a2 C7F81431 		str	r3, [r7, #276]	@ float
 228:main.c        ****             if(collect_flag == 1){
 744              		.loc 1 228 0
 745 01a6 774B     		ldr	r3, .L72+60
 746 01a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 747 01aa 002B     		cmp	r3, #0
 748 01ac 65D0     		beq	.L23
 229:main.c        ****                 if (press_id < MA_WINDOW){
 749              		.loc 1 229 0
 750 01ae 764B     		ldr	r3, .L72+64
 751 01b0 1B68     		ldr	r3, [r3]
 752 01b2 0E2B     		cmp	r3, #14
 753 01b4 0BDC     		bgt	.L24
 230:main.c        ****                     pressure_sum += voltage;     
 754              		.loc 1 230 0
 755 01b6 754B     		ldr	r3, .L72+68
 756 01b8 1B68     		ldr	r3, [r3]	@ float
 757 01ba 1846     		mov	r0, r3
 758 01bc D7F81411 		ldr	r1, [r7, #276]	@ float
 759 01c0 FFF7FEFF 		bl	__aeabi_fadd
 760 01c4 0346     		mov	r3, r0
 761 01c6 1A46     		mov	r2, r3
 762 01c8 704B     		ldr	r3, .L72+68
 763 01ca 1A60     		str	r2, [r3]	@ float
 764 01cc 49E0     		b	.L25
 765              	.L24:
 231:main.c        ****                 }
 232:main.c        ****                 else if(press_id == MA_WINDOW){
 766              		.loc 1 232 0
 767 01ce 6E4B     		ldr	r3, .L72+64
 768 01d0 1B68     		ldr	r3, [r3]
 769 01d2 0F2B     		cmp	r3, #15
 770 01d4 14D1     		bne	.L26
 233:main.c        ****                     pressure_sum += voltage;
 771              		.loc 1 233 0
 772 01d6 6D4B     		ldr	r3, .L72+68
 773 01d8 1B68     		ldr	r3, [r3]	@ float
 774 01da 1846     		mov	r0, r3
 775 01dc D7F81411 		ldr	r1, [r7, #276]	@ float
 776 01e0 FFF7FEFF 		bl	__aeabi_fadd
 777 01e4 0346     		mov	r3, r0
 778 01e6 1A46     		mov	r2, r3
 779 01e8 684B     		ldr	r3, .L72+68
 780 01ea 1A60     		str	r2, [r3]	@ float
 234:main.c        ****                     pressure_avg = pressure_sum/MA_WINDOW;                            // compute ba
 781              		.loc 1 234 0
 782 01ec 674B     		ldr	r3, .L72+68
 783 01ee 1B68     		ldr	r3, [r3]	@ float
 784 01f0 1846     		mov	r0, r3
 785 01f2 6749     		ldr	r1, .L72+72
 786 01f4 FFF7FEFF 		bl	__aeabi_fdiv
 787 01f8 0346     		mov	r3, r0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 20


 788 01fa C7F82C31 		str	r3, [r7, #300]	@ float
 789 01fe 30E0     		b	.L25
 790              	.L26:
 791              	.LBB3:
 235:main.c        ****                 }
 236:main.c        ****                 else{
 237:main.c        ****                     pressure_avg = ComputeMA(pressure_avg, MA_WINDOW, voltage);
 792              		.loc 1 237 0
 793 0200 D7F82C01 		ldr	r0, [r7, #300]	@ float
 794 0204 0F21     		movs	r1, #15
 795 0206 D7F81421 		ldr	r2, [r7, #276]	@ float
 796 020a FFF7FEFF 		bl	ComputeMA
 797 020e C7F82C01 		str	r0, [r7, #300]	@ float
 238:main.c        ****                     num = pressure_avg;
 798              		.loc 1 238 0
 799 0212 D7F82C01 		ldr	r0, [r7, #300]	@ float
 800 0216 FFF7FEFF 		bl	__aeabi_f2iz
 801 021a 0346     		mov	r3, r0
 802 021c C7F81C31 		str	r3, [r7, #284]
 239:main.c        ****                     temp = pressure_avg - num;
 803              		.loc 1 239 0
 804 0220 D7F81C01 		ldr	r0, [r7, #284]
 805 0224 FFF7FEFF 		bl	__aeabi_i2f
 806 0228 0346     		mov	r3, r0
 807 022a D7F82C01 		ldr	r0, [r7, #300]	@ float
 808 022e 1946     		mov	r1, r3
 809 0230 FFF7FEFF 		bl	__aeabi_fsub
 810 0234 0346     		mov	r3, r0
 811 0236 C7F81031 		str	r3, [r7, #272]	@ float
 240:main.c        ****                     decimals = temp * 10000;
 812              		.loc 1 240 0
 813 023a D7F81001 		ldr	r0, [r7, #272]	@ float
 814 023e 5549     		ldr	r1, .L72+76
 815 0240 FFF7FEFF 		bl	__aeabi_fmul
 816 0244 0346     		mov	r3, r0
 817 0246 1846     		mov	r0, r3
 818 0248 FFF7FEFF 		bl	__aeabi_f2iz
 819 024c 0346     		mov	r3, r0
 820 024e C7F81831 		str	r3, [r7, #280]
 241:main.c        ****                     char sdbuf[60] = {};
 821              		.loc 1 241 0
 822 0252 3B1D     		adds	r3, r7, #4
 823 0254 1A46     		mov	r2, r3
 824 0256 3C23     		movs	r3, #60
 825 0258 1046     		mov	r0, r2
 826 025a 0021     		movs	r1, #0
 827 025c 1A46     		mov	r2, r3
 828 025e FFF7FEFF 		bl	memset
 829              	.L25:
 830              	.LBE3:
 242:main.c        ****                     #ifdef SD
 243:main.c        ****                         sprintf(sdbuf, "pressure: %d.%04d, %d\n", num, decimals, (int16)output); //
 244:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 245:main.c        ****                     #endif 
 246:main.c        ****                 }
 247:main.c        ****                 if (STATE != DESCENDING) collect_flag = 0;
 831              		.loc 1 247 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 21


 832 0262 464B     		ldr	r3, .L72+52
 833 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 834 0266 022B     		cmp	r3, #2
 835 0268 02D0     		beq	.L27
 836              		.loc 1 247 0 is_stmt 0 discriminator 1
 837 026a 464B     		ldr	r3, .L72+60
 838 026c 0022     		movs	r2, #0
 839 026e 1A70     		strb	r2, [r3]
 840              	.L27:
 248:main.c        ****                 press_id++;
 841              		.loc 1 248 0 is_stmt 1
 842 0270 454B     		ldr	r3, .L72+64
 843 0272 1B68     		ldr	r3, [r3]
 844 0274 0133     		adds	r3, r3, #1
 845 0276 444A     		ldr	r2, .L72+64
 846 0278 1360     		str	r3, [r2]
 847              	.L23:
 249:main.c        ****             }
 250:main.c        ****         }
 251:main.c        ****         
 252:main.c        ****     /* Bluetooth message response, after 2 bytes received, retrieve message from those 2 bytes. Onc
 253:main.c        ****      * has arrived, process it. */
 254:main.c        ****     #ifdef BT
 255:main.c        ****         if (msg_count >= 2){
 848              		.loc 1 255 0
 849 027a 474B     		ldr	r3, .L72+80
 850 027c 1B68     		ldr	r3, [r3]
 851 027e 012B     		cmp	r3, #1
 852 0280 13DD     		ble	.L28
 256:main.c        ****             tens = RxBuffer[0] - 48;
 853              		.loc 1 256 0
 854 0282 464B     		ldr	r3, .L72+84
 855 0284 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 856 0286 303B     		subs	r3, r3, #48
 857 0288 7B64     		str	r3, [r7, #68]
 257:main.c        ****             ones = RxBuffer[1] - 48;
 858              		.loc 1 257 0
 859 028a 444B     		ldr	r3, .L72+84
 860 028c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 861 028e 303B     		subs	r3, r3, #48
 862 0290 C7F80431 		str	r3, [r7, #260]
 258:main.c        ****             bytes = (tens * 10) + ones;
 863              		.loc 1 258 0
 864 0294 7A6C     		ldr	r2, [r7, #68]
 865 0296 1346     		mov	r3, r2
 866 0298 9B00     		lsls	r3, r3, #2
 867 029a 1344     		add	r3, r3, r2
 868 029c 5B00     		lsls	r3, r3, #1
 869 029e 1A46     		mov	r2, r3
 870 02a0 D7F80431 		ldr	r3, [r7, #260]
 871 02a4 1344     		add	r3, r3, r2
 872 02a6 3E4A     		ldr	r2, .L72+88
 873 02a8 1360     		str	r3, [r2]
 874              	.L28:
 259:main.c        ****         } 
 260:main.c        ****         
 261:main.c        ****         if(rxflag) {
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 22


 875              		.loc 1 261 0
 876 02aa 3E4B     		ldr	r3, .L72+92
 877 02ac 1B68     		ldr	r3, [r3]
 878 02ae 002B     		cmp	r3, #0
 879 02b0 2DD0     		beq	.L29
 262:main.c        ****             uint8_to_char(RxBuffer, &tempbuf[0], 20);
 880              		.loc 1 262 0
 881 02b2 07F1BC03 		add	r3, r7, #188
 882 02b6 3948     		ldr	r0, .L72+84
 883 02b8 1946     		mov	r1, r3
 884 02ba 1422     		movs	r2, #20
 885 02bc FFF7FEFF 		bl	uint8_to_char
 263:main.c        ****             depth = BT_Process(&tempbuf[3], &STATE, bytes, &dataflag, &reset);
 886              		.loc 1 263 0
 887 02c0 374B     		ldr	r3, .L72+88
 888 02c2 1A68     		ldr	r2, [r3]
 889 02c4 07F1BC03 		add	r3, r7, #188
 890 02c8 D91C     		adds	r1, r3, #3
 891 02ca 374B     		ldr	r3, .L72+96
 892 02cc 0093     		str	r3, [sp]
 893 02ce 0846     		mov	r0, r1
 894 02d0 2A49     		ldr	r1, .L72+52
 895 02d2 364B     		ldr	r3, .L72+100
 896 02d4 FFF7FEFF 		bl	BT_Process
 897 02d8 0246     		mov	r2, r0
 898 02da 354B     		ldr	r3, .L72+104
 899 02dc 1A60     		str	r2, [r3]
 264:main.c        ****             
 265:main.c        ****             msg_count = 0; bytes = 0;
 900              		.loc 1 265 0
 901 02de 2E4B     		ldr	r3, .L72+80
 902 02e0 0022     		movs	r2, #0
 903 02e2 1A60     		str	r2, [r3]
 904 02e4 2E4B     		ldr	r3, .L72+88
 905 02e6 0022     		movs	r2, #0
 906 02e8 1A60     		str	r2, [r3]
 266:main.c        ****             memset(RxBuffer, 0, BUFFER_LEN);
 907              		.loc 1 266 0
 908 02ea 2C48     		ldr	r0, .L72+84
 909 02ec 0021     		movs	r1, #0
 910 02ee 4022     		movs	r2, #64
 911 02f0 FFF7FEFF 		bl	memset
 267:main.c        ****             memset(tempbuf, 0, 20);
 912              		.loc 1 267 0
 913 02f4 07F1BC03 		add	r3, r7, #188
 914 02f8 1846     		mov	r0, r3
 915 02fa 0021     		movs	r1, #0
 916 02fc 1422     		movs	r2, #20
 917 02fe FFF7FEFF 		bl	memset
 268:main.c        ****             countdown = 0;
 918              		.loc 1 268 0
 919 0302 2C4B     		ldr	r3, .L72+108
 920 0304 0022     		movs	r2, #0
 921 0306 1A70     		strb	r2, [r3]
 269:main.c        ****             rxflag = 0;
 922              		.loc 1 269 0
 923 0308 264B     		ldr	r3, .L72+92
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 23


 924 030a 0022     		movs	r2, #0
 925 030c 1A60     		str	r2, [r3]
 926              	.L29:
 270:main.c        ****         }
 271:main.c        ****     #endif
 272:main.c        ****     
 273:main.c        ****         /* Get Z-Acceleration */
 274:main.c        **** 
 275:main.c        ****         az = MPU6050_getAccelerationZ();
 927              		.loc 1 275 0
 928 030e FFF7FEFF 		bl	MPU6050_getAccelerationZ
 929 0312 0346     		mov	r3, r0
 930 0314 A7F80231 		strh	r3, [r7, #258]	@ movhi
 276:main.c        **** 
 277:main.c        ****         int t = 1;
 931              		.loc 1 277 0
 932 0318 0123     		movs	r3, #1
 933 031a 3B64     		str	r3, [r7, #64]
 278:main.c        ****         /* State Machine */
 279:main.c        ****         switch (STATE){
 934              		.loc 1 279 0
 935 031c 174B     		ldr	r3, .L72+52
 936 031e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 937 0320 013B     		subs	r3, r3, #1
 938 0322 042B     		cmp	r3, #4
 939 0324 00F21784 		bhi	.L71
 940 0328 01A2     		adr	r2, .L32
 941 032a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 942 032e 00BF     		.p2align 2
 943              	.L32:
 944 0330 B9030000 		.word	.L31+1
 945 0334 45050000 		.word	.L33+1
 946 0338 3B080000 		.word	.L34+1
 947 033c CF0A0000 		.word	.L35+1
 948 0340 330B0000 		.word	.L36+1
 949              		.p2align 1
 950              	.L73:
 951 0344 AFF30080 		.align	3
 952              	.L72:
 953 0348 8FC2F528 		.word	687194767
 954 034c 5C8F4A3F 		.word	1061850972
 955 0350 AC000000 		.word	.LC0
 956 0354 BC000000 		.word	.LC1
 957 0358 D0000000 		.word	.LC2
 958 035c E0000000 		.word	.LC3
 959 0360 F4000000 		.word	.LC4
 960 0364 08010000 		.word	.LC5
 961 0368 00000000 		.word	Sample_ISR_Handler
 962 036c 00000000 		.word	rx_interrupt
 963 0370 00000000 		.word	Addr
 964 0374 00000000 		.word	.LC6
 965 0378 10000000 		.word	.LC7
 966 037c 00000000 		.word	STATE
 967 0380 00000000 		.word	Countdown_ISR_Handler
 968 0384 00000000 		.word	collect_flag
 969 0388 00000000 		.word	press_id
 970 038c 00000000 		.word	pressure_sum
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 24


 971 0390 00007041 		.word	1097859072
 972 0394 00401C46 		.word	1176256512
 973 0398 00000000 		.word	msg_count
 974 039c 00000000 		.word	RxBuffer
 975 03a0 00000000 		.word	bytes
 976 03a4 00000000 		.word	rxflag
 977 03a8 00000000 		.word	reset
 978 03ac 00000000 		.word	dataflag
 979 03b0 00000000 		.word	depth
 980 03b4 00000000 		.word	countdown
 981              	.L31:
 280:main.c        ****     
 281:main.c        ****             /* Waiting for start command and depth*/
 282:main.c        ****             case WAIT_TO_LAUNCH:  
 283:main.c        ****                 if (reset){                         // If reset command was received, reset:
 982              		.loc 1 283 0
 983 03b8 A84B     		ldr	r3, .L74
 984 03ba 1B68     		ldr	r3, [r3]
 985 03bc 002B     		cmp	r3, #0
 986 03be 37D0     		beq	.L37
 284:main.c        ****                     id = 1;                                // Interrupt count.
 987              		.loc 1 284 0
 988 03c0 A74B     		ldr	r3, .L74+4
 989 03c2 0122     		movs	r2, #1
 990 03c4 1A60     		str	r2, [r3]
 285:main.c        ****                     data_time = 0;                         // data point num
 991              		.loc 1 285 0
 992 03c6 A74B     		ldr	r3, .L74+8
 993 03c8 0022     		movs	r2, #0
 994 03ca 1A60     		str	r2, [r3]
 286:main.c        ****                     sum = 0;                               // Sum of accelerometer values. 
 995              		.loc 1 286 0
 996 03cc A64B     		ldr	r3, .L74+12
 997 03ce 0022     		movs	r2, #0
 998 03d0 1A60     		str	r2, [r3]
 287:main.c        ****                     average = 0;                           // Moving average variable.
 999              		.loc 1 287 0
 1000 03d2 A64B     		ldr	r3, .L74+16
 1001 03d4 0022     		movs	r2, #0
 1002 03d6 1A80     		strh	r2, [r3]	@ movhi
 288:main.c        ****                     xavg = 0; yavg = 0;                    // Gyro average variables
 1003              		.loc 1 288 0
 1004 03d8 A54B     		ldr	r3, .L74+20
 1005 03da 4FF00002 		mov	r2, #0
 1006 03de 1A60     		str	r2, [r3]	@ float
 1007 03e0 A44B     		ldr	r3, .L74+24
 1008 03e2 4FF00002 		mov	r2, #0
 1009 03e6 1A60     		str	r2, [r3]	@ float
 289:main.c        ****                     collect_flag = 0;                      // flag indicating when to record accele
 1010              		.loc 1 289 0
 1011 03e8 A34B     		ldr	r3, .L74+28
 1012 03ea 0022     		movs	r2, #0
 1013 03ec 1A70     		strb	r2, [r3]
 290:main.c        ****                     wait_flag = 0;                         // flag indicating when to increment int
 1014              		.loc 1 290 0
 1015 03ee A34B     		ldr	r3, .L74+32
 1016 03f0 0022     		movs	r2, #0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 25


 1017 03f2 1A70     		strb	r2, [r3]
 291:main.c        ****                     PANIC_flag = 0;                        // flag indicating water is present in h
 1018              		.loc 1 291 0
 1019 03f4 A24B     		ldr	r3, .L74+36
 1020 03f6 0022     		movs	r2, #0
 1021 03f8 1A70     		strb	r2, [r3]
 292:main.c        ****                     //bool first_test = 1;                 // flag indicating first test(longer cou
 293:main.c        ****                     depth = 0; countdown = 0;              // Current desired depth, variable for c
 1022              		.loc 1 293 0
 1023 03fa A24B     		ldr	r3, .L74+40
 1024 03fc 0022     		movs	r2, #0
 1025 03fe 1A60     		str	r2, [r3]
 1026 0400 A14B     		ldr	r3, .L74+44
 1027 0402 0022     		movs	r2, #0
 1028 0404 1A70     		strb	r2, [r3]
 294:main.c        ****                     msg_count = 0; dataflag = 0;           // BT message len variable, data flag 
 1029              		.loc 1 294 0
 1030 0406 A14B     		ldr	r3, .L74+48
 1031 0408 0022     		movs	r2, #0
 1032 040a 1A60     		str	r2, [r3]
 1033 040c A04B     		ldr	r3, .L74+52
 1034 040e 0022     		movs	r2, #0
 1035 0410 1A60     		str	r2, [r3]
 295:main.c        ****                     reset = 0;                             // indicates whether to reset variables 
 1036              		.loc 1 295 0
 1037 0412 924B     		ldr	r3, .L74
 1038 0414 0022     		movs	r2, #0
 1039 0416 1A60     		str	r2, [r3]
 296:main.c        ****                     pulse = 0;
 1040              		.loc 1 296 0
 1041 0418 0023     		movs	r3, #0
 1042 041a C7F82431 		str	r3, [r7, #292]
 297:main.c        ****                     #ifdef LCD
 298:main.c        ****                         setCursor(0,0);
 1043              		.loc 1 298 0
 1044 041e 0020     		movs	r0, #0
 1045 0420 0021     		movs	r1, #0
 1046 0422 FFF7FEFF 		bl	setCursor
 299:main.c        ****                         clear();
 1047              		.loc 1 299 0
 1048 0426 FFF7FEFF 		bl	clear
 300:main.c        ****                         LCD_print("STATE: WAIT");  
 1049              		.loc 1 300 0
 1050 042a 9A48     		ldr	r0, .L74+56
 1051 042c FFF7FEFF 		bl	LCD_print
 1052              	.L37:
 301:main.c        ****                     #endif 
 302:main.c        ****                 }
 303:main.c        ****             
 304:main.c        ****                 if (transmit_flag){
 1053              		.loc 1 304 0
 1054 0430 994B     		ldr	r3, .L74+60
 1055 0432 1B68     		ldr	r3, [r3]
 1056 0434 002B     		cmp	r3, #0
 1057 0436 0BD0     		beq	.L38
 305:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &tens); // Here, the STATE variable only matte
 1058              		.loc 1 305 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 26


 1059 0438 07F1BC02 		add	r2, r7, #188
 1060 043c 07F14403 		add	r3, r7, #68
 1061 0440 1046     		mov	r0, r2
 1062 0442 9649     		ldr	r1, .L74+64
 1063 0444 0A22     		movs	r2, #10
 1064 0446 FFF7FEFF 		bl	BT_Send
 306:main.c        ****                     transmit_flag = 0;
 1065              		.loc 1 306 0
 1066 044a 934B     		ldr	r3, .L74+60
 1067 044c 0022     		movs	r2, #0
 1068 044e 1A60     		str	r2, [r3]
 1069              	.L38:
 307:main.c        ****                 }
 308:main.c        ****                 // Once depth has been entered, can begin countdown into descending
 309:main.c        ****                 if(wait_flag == 1){
 1070              		.loc 1 309 0
 1071 0450 8A4B     		ldr	r3, .L74+32
 1072 0452 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1073 0454 002B     		cmp	r3, #0
 1074 0456 74D0     		beq	.L39
 310:main.c        ****                     #ifdef BT
 311:main.c        ****                         stateMsgCount = 0;
 1075              		.loc 1 311 0
 1076 0458 0023     		movs	r3, #0
 1077 045a C7F82831 		str	r3, [r7, #296]
 312:main.c        ****                         sprintf(buf, "\n%d seconds remaining", (10 - countdown));
 1078              		.loc 1 312 0
 1079 045e 8A4B     		ldr	r3, .L74+44
 1080 0460 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1081 0462 C3F10A03 		rsb	r3, r3, #10
 1082 0466 07F1D002 		add	r2, r7, #208
 1083 046a 1046     		mov	r0, r2
 1084 046c 8C49     		ldr	r1, .L74+68
 1085 046e 1A46     		mov	r2, r3
 1086 0470 FFF7FEFF 		bl	sprintf
 313:main.c        ****                         while (stateMsgCount < 21){
 1087              		.loc 1 313 0
 1088 0474 19E0     		b	.L40
 1089              	.L43:
 314:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1090              		.loc 1 314 0
 1091 0476 11E0     		b	.L41
 1092              	.L42:
 315:main.c        ****                                 UART_PutChar(buf[stateMsgCount++]);
 1093              		.loc 1 315 0
 1094 0478 D7F82831 		ldr	r3, [r7, #296]
 1095 047c 5A1C     		adds	r2, r3, #1
 1096 047e C7F82821 		str	r2, [r7, #296]
 1097 0482 07F59872 		add	r2, r7, #304
 1098 0486 1344     		add	r3, r3, r2
 1099 0488 13F8603C 		ldrb	r3, [r3, #-96]	@ zero_extendqisi2
 1100 048c 1846     		mov	r0, r3
 1101 048e FFF7FEFF 		bl	UART_PutChar
 316:main.c        ****                                 if (stateMsgCount >= 21) break;
 1102              		.loc 1 316 0
 1103 0492 D7F82831 		ldr	r3, [r7, #296]
 1104 0496 142B     		cmp	r3, #20
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 27


 1105 0498 00DD     		ble	.L41
 1106 049a 06E0     		b	.L40
 1107              	.L41:
 314:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1108              		.loc 1 314 0
 1109 049c FFF7FEFF 		bl	UART_ReadTxStatus
 1110 04a0 0346     		mov	r3, r0
 1111 04a2 03F00803 		and	r3, r3, #8
 1112 04a6 002B     		cmp	r3, #0
 1113 04a8 E6D1     		bne	.L42
 1114              	.L40:
 313:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1115              		.loc 1 313 0
 1116 04aa D7F82831 		ldr	r3, [r7, #296]
 1117 04ae 142B     		cmp	r3, #20
 1118 04b0 E1DD     		ble	.L43
 317:main.c        ****                             }
 318:main.c        ****                         }
 319:main.c        ****                     #endif
 320:main.c        ****                     /* at 10 seconds, change into descending */
 321:main.c        ****                     if(countdown == 10){
 1119              		.loc 1 321 0
 1120 04b2 754B     		ldr	r3, .L74+44
 1121 04b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1122 04b6 0A2B     		cmp	r3, #10
 1123 04b8 3FD1     		bne	.L44
 322:main.c        ****                         descent_time = (((depth / 13) + 3) * 2 * 500);
 1124              		.loc 1 322 0
 1125 04ba 724B     		ldr	r3, .L74+40
 1126 04bc 1B68     		ldr	r3, [r3]
 1127 04be 794A     		ldr	r2, .L74+72
 1128 04c0 82FB0312 		smull	r1, r2, r2, r3
 1129 04c4 9210     		asrs	r2, r2, #2
 1130 04c6 DB17     		asrs	r3, r3, #31
 1131 04c8 D31A     		subs	r3, r2, r3
 1132 04ca 0333     		adds	r3, r3, #3
 1133 04cc 4FF47A72 		mov	r2, #1000
 1134 04d0 02FB03F3 		mul	r3, r2, r3
 1135 04d4 744A     		ldr	r2, .L74+76
 1136 04d6 1360     		str	r3, [r2]
 323:main.c        ****                         /* descent time takes about 2~3 seconds to go 13 feet, add 3 for extra 10m 
 324:main.c        ****                          * number of ISR calls to get 1 second */ 
 325:main.c        ****                         STATE = DESCENDING;
 1137              		.loc 1 325 0
 1138 04d8 704B     		ldr	r3, .L74+64
 1139 04da 0222     		movs	r2, #2
 1140 04dc 1A70     		strb	r2, [r3]
 326:main.c        ****                         #ifdef LCD
 327:main.c        ****                             setCursor(0,0);
 1141              		.loc 1 327 0
 1142 04de 0020     		movs	r0, #0
 1143 04e0 0021     		movs	r1, #0
 1144 04e2 FFF7FEFF 		bl	setCursor
 328:main.c        ****                             clear();
 1145              		.loc 1 328 0
 1146 04e6 FFF7FEFF 		bl	clear
 329:main.c        ****                             LCD_print("STATE: DESCENT");
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 28


 1147              		.loc 1 329 0
 1148 04ea 7048     		ldr	r0, .L74+80
 1149 04ec FFF7FEFF 		bl	LCD_print
 330:main.c        ****                         #endif
 331:main.c        ****                         #ifdef BT
 332:main.c        ****                             stateMsgCount = 0;
 1150              		.loc 1 332 0
 1151 04f0 0023     		movs	r3, #0
 1152 04f2 C7F82831 		str	r3, [r7, #296]
 333:main.c        ****                             while (stateMsgCount < DESCENDING_LEN){
 1153              		.loc 1 333 0
 1154 04f6 19E0     		b	.L45
 1155              	.L48:
 334:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1156              		.loc 1 334 0
 1157 04f8 11E0     		b	.L46
 1158              	.L47:
 335:main.c        ****                                     UART_PutChar(descendbuf[stateMsgCount++]);
 1159              		.loc 1 335 0
 1160 04fa D7F82831 		ldr	r3, [r7, #296]
 1161 04fe 5A1C     		adds	r2, r3, #1
 1162 0500 C7F82821 		str	r2, [r7, #296]
 1163 0504 07F59872 		add	r2, r7, #304
 1164 0508 1344     		add	r3, r3, r2
 1165 050a 13F8983C 		ldrb	r3, [r3, #-152]	@ zero_extendqisi2
 1166 050e 1846     		mov	r0, r3
 1167 0510 FFF7FEFF 		bl	UART_PutChar
 336:main.c        ****                                     if (stateMsgCount >= DESCENDING_LEN) break;
 1168              		.loc 1 336 0
 1169 0514 D7F82831 		ldr	r3, [r7, #296]
 1170 0518 122B     		cmp	r3, #18
 1171 051a 00DD     		ble	.L46
 1172 051c 06E0     		b	.L45
 1173              	.L46:
 334:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1174              		.loc 1 334 0
 1175 051e FFF7FEFF 		bl	UART_ReadTxStatus
 1176 0522 0346     		mov	r3, r0
 1177 0524 03F00803 		and	r3, r3, #8
 1178 0528 002B     		cmp	r3, #0
 1179 052a E6D1     		bne	.L47
 1180              	.L45:
 333:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1181              		.loc 1 333 0
 1182 052c D7F82831 		ldr	r3, [r7, #296]
 1183 0530 122B     		cmp	r3, #18
 1184 0532 E1DD     		ble	.L48
 337:main.c        ****                                 }
 338:main.c        ****                             }
 339:main.c        ****                         #endif
 340:main.c        ****                         countdown = 0; 
 1185              		.loc 1 340 0
 1186 0534 544B     		ldr	r3, .L74+44
 1187 0536 0022     		movs	r2, #0
 1188 0538 1A70     		strb	r2, [r3]
 1189              	.L44:
 341:main.c        ****                     }
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 29


 342:main.c        ****                     wait_flag = 0; 
 1190              		.loc 1 342 0
 1191 053a 504B     		ldr	r3, .L74+32
 1192 053c 0022     		movs	r2, #0
 1193 053e 1A70     		strb	r2, [r3]
 343:main.c        ****                 }
 344:main.c        ****                 break;
 1194              		.loc 1 344 0
 1195 0540 0AE3     		b	.L49
 1196              	.L39:
 1197 0542 09E3     		b	.L49
 1198              	.L33:
 345:main.c        ****                 
 346:main.c        ****             case DESCENDING:
 347:main.c        ****                 MPU6050_getRotation(&gx, &gy, &gz); // gather gyro data
 1199              		.loc 1 347 0
 1200 0544 07F14E01 		add	r1, r7, #78
 1201 0548 07F14C02 		add	r2, r7, #76
 1202 054c 07F14A03 		add	r3, r7, #74
 1203 0550 0846     		mov	r0, r1
 1204 0552 1146     		mov	r1, r2
 1205 0554 1A46     		mov	r2, r3
 1206 0556 FFF7FEFF 		bl	MPU6050_getRotation
 348:main.c        ****                 if(collect_flag == 1){              // Check accelerometer and gyro data
 1207              		.loc 1 348 0
 1208 055a 474B     		ldr	r3, .L74+28
 1209 055c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1210 055e 002B     		cmp	r3, #0
 1211 0560 00F06A81 		beq	.L50
 349:main.c        ****                     if (id < MA_WINDOW){    
 1212              		.loc 1 349 0
 1213 0564 3E4B     		ldr	r3, .L74+4
 1214 0566 1B68     		ldr	r3, [r3]
 1215 0568 0E2B     		cmp	r3, #14
 1216 056a 29DC     		bgt	.L51
 350:main.c        ****                         sum += az;  
 1217              		.loc 1 350 0
 1218 056c B7F90221 		ldrsh	r2, [r7, #258]
 1219 0570 3D4B     		ldr	r3, .L74+12
 1220 0572 1B68     		ldr	r3, [r3]
 1221 0574 1344     		add	r3, r3, r2
 1222 0576 3C4A     		ldr	r2, .L74+12
 1223 0578 1360     		str	r3, [r2]
 351:main.c        ****                         xsum += gx;
 1224              		.loc 1 351 0
 1225 057a B7F84E30 		ldrh	r3, [r7, #78]
 1226 057e 1BB2     		sxth	r3, r3
 1227 0580 1846     		mov	r0, r3
 1228 0582 FFF7FEFF 		bl	__aeabi_i2f
 1229 0586 0246     		mov	r2, r0
 1230 0588 494B     		ldr	r3, .L74+84
 1231 058a 1B68     		ldr	r3, [r3]	@ float
 1232 058c 1046     		mov	r0, r2
 1233 058e 1946     		mov	r1, r3
 1234 0590 FFF7FEFF 		bl	__aeabi_fadd
 1235 0594 0346     		mov	r3, r0
 1236 0596 1A46     		mov	r2, r3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 30


 1237 0598 454B     		ldr	r3, .L74+84
 1238 059a 1A60     		str	r2, [r3]	@ float
 352:main.c        ****                         ysum += gy;
 1239              		.loc 1 352 0
 1240 059c B7F84C30 		ldrh	r3, [r7, #76]
 1241 05a0 1BB2     		sxth	r3, r3
 1242 05a2 1846     		mov	r0, r3
 1243 05a4 FFF7FEFF 		bl	__aeabi_i2f
 1244 05a8 0246     		mov	r2, r0
 1245 05aa 424B     		ldr	r3, .L74+88
 1246 05ac 1B68     		ldr	r3, [r3]	@ float
 1247 05ae 1046     		mov	r0, r2
 1248 05b0 1946     		mov	r1, r3
 1249 05b2 FFF7FEFF 		bl	__aeabi_fadd
 1250 05b6 0346     		mov	r3, r0
 1251 05b8 1A46     		mov	r2, r3
 1252 05ba 3E4B     		ldr	r3, .L74+88
 1253 05bc 1A60     		str	r2, [r3]	@ float
 1254 05be F2E0     		b	.L52
 1255              	.L51:
 353:main.c        ****                     }
 354:main.c        ****                     else if(id == MA_WINDOW){
 1256              		.loc 1 354 0
 1257 05c0 274B     		ldr	r3, .L74+4
 1258 05c2 1B68     		ldr	r3, [r3]
 1259 05c4 0F2B     		cmp	r3, #15
 1260 05c6 7BD1     		bne	.L53
 355:main.c        ****                         sum += az;
 1261              		.loc 1 355 0
 1262 05c8 B7F90221 		ldrsh	r2, [r7, #258]
 1263 05cc 264B     		ldr	r3, .L74+12
 1264 05ce 1B68     		ldr	r3, [r3]
 1265 05d0 1344     		add	r3, r3, r2
 1266 05d2 254A     		ldr	r2, .L74+12
 1267 05d4 1360     		str	r3, [r2]
 356:main.c        ****                         xsum += gx;
 1268              		.loc 1 356 0
 1269 05d6 B7F84E30 		ldrh	r3, [r7, #78]
 1270 05da 1BB2     		sxth	r3, r3
 1271 05dc 1846     		mov	r0, r3
 1272 05de FFF7FEFF 		bl	__aeabi_i2f
 1273 05e2 0246     		mov	r2, r0
 1274 05e4 324B     		ldr	r3, .L74+84
 1275 05e6 1B68     		ldr	r3, [r3]	@ float
 1276 05e8 1046     		mov	r0, r2
 1277 05ea 1946     		mov	r1, r3
 1278 05ec FFF7FEFF 		bl	__aeabi_fadd
 1279 05f0 0346     		mov	r3, r0
 1280 05f2 1A46     		mov	r2, r3
 1281 05f4 2E4B     		ldr	r3, .L74+84
 1282 05f6 1A60     		str	r2, [r3]	@ float
 357:main.c        ****                         ysum += gy;
 1283              		.loc 1 357 0
 1284 05f8 B7F84C30 		ldrh	r3, [r7, #76]
 1285 05fc 1BB2     		sxth	r3, r3
 1286 05fe 1846     		mov	r0, r3
 1287 0600 FFF7FEFF 		bl	__aeabi_i2f
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 31


 1288 0604 0246     		mov	r2, r0
 1289 0606 2B4B     		ldr	r3, .L74+88
 1290 0608 1B68     		ldr	r3, [r3]	@ float
 1291 060a 1046     		mov	r0, r2
 1292 060c 1946     		mov	r1, r3
 1293 060e FFF7FEFF 		bl	__aeabi_fadd
 1294 0612 0346     		mov	r3, r0
 1295 0614 1A46     		mov	r2, r3
 1296 0616 274B     		ldr	r3, .L74+88
 1297 0618 1A60     		str	r2, [r3]	@ float
 358:main.c        ****                         sum = sum/MA_WINDOW;
 1298              		.loc 1 358 0
 1299 061a 134B     		ldr	r3, .L74+12
 1300 061c 1B68     		ldr	r3, [r3]
 1301 061e 264A     		ldr	r2, .L74+92
 1302 0620 82FB0312 		smull	r1, r2, r2, r3
 1303 0624 1A44     		add	r2, r2, r3
 1304 0626 D210     		asrs	r2, r2, #3
 1305 0628 DB17     		asrs	r3, r3, #31
 1306 062a D31A     		subs	r3, r2, r3
 1307 062c 0E4A     		ldr	r2, .L74+12
 1308 062e 1360     		str	r3, [r2]
 359:main.c        ****                         xavg = xsum/MA_WINDOW;                            
 1309              		.loc 1 359 0
 1310 0630 1F4B     		ldr	r3, .L74+84
 1311 0632 1B68     		ldr	r3, [r3]	@ float
 1312 0634 1846     		mov	r0, r3
 1313 0636 2149     		ldr	r1, .L74+96
 1314 0638 FFF7FEFF 		bl	__aeabi_fdiv
 1315 063c 0346     		mov	r3, r0
 1316 063e 1A46     		mov	r2, r3
 1317 0640 0B4B     		ldr	r3, .L74+20
 1318 0642 1A60     		str	r2, [r3]	@ float
 360:main.c        ****                         yavg = ysum/MA_WINDOW;
 1319              		.loc 1 360 0
 1320 0644 1B4B     		ldr	r3, .L74+88
 1321 0646 1B68     		ldr	r3, [r3]	@ float
 1322 0648 1846     		mov	r0, r3
 1323 064a 1C49     		ldr	r1, .L74+96
 1324 064c FFF7FEFF 		bl	__aeabi_fdiv
 1325 0650 0346     		mov	r3, r0
 1326 0652 1A46     		mov	r2, r3
 1327 0654 074B     		ldr	r3, .L74+24
 1328 0656 1A60     		str	r2, [r3]	@ float
 1329 0658 A5E0     		b	.L52
 1330              	.L75:
 1331 065a 00BF     		.align	2
 1332              	.L74:
 1333 065c 00000000 		.word	reset
 1334 0660 00000000 		.word	id
 1335 0664 00000000 		.word	data_time
 1336 0668 00000000 		.word	sum
 1337 066c 00000000 		.word	average
 1338 0670 00000000 		.word	xavg
 1339 0674 00000000 		.word	yavg
 1340 0678 00000000 		.word	collect_flag
 1341 067c 00000000 		.word	wait_flag
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 32


 1342 0680 00000000 		.word	PANIC_flag
 1343 0684 00000000 		.word	depth
 1344 0688 00000000 		.word	countdown
 1345 068c 00000000 		.word	msg_count
 1346 0690 00000000 		.word	dataflag
 1347 0694 1C000000 		.word	.LC8
 1348 0698 00000000 		.word	transmit_flag
 1349 069c 00000000 		.word	STATE
 1350 06a0 28000000 		.word	.LC9
 1351 06a4 4FECC44E 		.word	1321528399
 1352 06a8 00000000 		.word	descent_time
 1353 06ac 40000000 		.word	.LC10
 1354 06b0 00000000 		.word	xsum
 1355 06b4 00000000 		.word	ysum
 1356 06b8 89888888 		.word	-2004318071
 1357 06bc 00007041 		.word	1097859072
 1358              	.L53:
 361:main.c        ****                                                    
 362:main.c        ****                     }
 363:main.c        ****                     else{
 364:main.c        ****                         average = ComputeMA(average, MA_WINDOW, az);                // Compute aver
 1359              		.loc 1 364 0
 1360 06c0 9D4B     		ldr	r3, .L76
 1361 06c2 1B88     		ldrh	r3, [r3]
 1362 06c4 1BB2     		sxth	r3, r3
 1363 06c6 1846     		mov	r0, r3
 1364 06c8 FFF7FEFF 		bl	__aeabi_i2f
 1365 06cc 0446     		mov	r4, r0
 1366 06ce B7F90231 		ldrsh	r3, [r7, #258]
 1367 06d2 1846     		mov	r0, r3
 1368 06d4 FFF7FEFF 		bl	__aeabi_i2f
 1369 06d8 0346     		mov	r3, r0
 1370 06da 2046     		mov	r0, r4
 1371 06dc 0F21     		movs	r1, #15
 1372 06de 1A46     		mov	r2, r3
 1373 06e0 FFF7FEFF 		bl	ComputeMA
 1374 06e4 0346     		mov	r3, r0
 1375 06e6 1846     		mov	r0, r3
 1376 06e8 FFF7FEFF 		bl	__aeabi_f2iz
 1377 06ec 0346     		mov	r3, r0
 1378 06ee 9AB2     		uxth	r2, r3
 1379 06f0 914B     		ldr	r3, .L76
 1380 06f2 1A80     		strh	r2, [r3]	@ movhi
 365:main.c        ****                         xavg = ComputeMA(xavg, MA_WINDOW, gx);
 1381              		.loc 1 365 0
 1382 06f4 914B     		ldr	r3, .L76+4
 1383 06f6 1C68     		ldr	r4, [r3]	@ float
 1384 06f8 B7F84E30 		ldrh	r3, [r7, #78]
 1385 06fc 1BB2     		sxth	r3, r3
 1386 06fe 1846     		mov	r0, r3
 1387 0700 FFF7FEFF 		bl	__aeabi_i2f
 1388 0704 0346     		mov	r3, r0
 1389 0706 2046     		mov	r0, r4
 1390 0708 0F21     		movs	r1, #15
 1391 070a 1A46     		mov	r2, r3
 1392 070c FFF7FEFF 		bl	ComputeMA
 1393 0710 0246     		mov	r2, r0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 33


 1394 0712 8A4B     		ldr	r3, .L76+4
 1395 0714 1A60     		str	r2, [r3]	@ float
 366:main.c        ****                         yavg = ComputeMA(yavg, MA_WINDOW, gy);
 1396              		.loc 1 366 0
 1397 0716 8A4B     		ldr	r3, .L76+8
 1398 0718 1C68     		ldr	r4, [r3]	@ float
 1399 071a B7F84C30 		ldrh	r3, [r7, #76]
 1400 071e 1BB2     		sxth	r3, r3
 1401 0720 1846     		mov	r0, r3
 1402 0722 FFF7FEFF 		bl	__aeabi_i2f
 1403 0726 0346     		mov	r3, r0
 1404 0728 2046     		mov	r0, r4
 1405 072a 0F21     		movs	r1, #15
 1406 072c 1A46     		mov	r2, r3
 1407 072e FFF7FEFF 		bl	ComputeMA
 1408 0732 0246     		mov	r2, r0
 1409 0734 824B     		ldr	r3, .L76+8
 1410 0736 1A60     		str	r2, [r3]	@ float
 367:main.c        ****                         #ifdef SD
 368:main.c        ****                         sprintf(sdbuf, "pressure: %d.%04d, %d\n", num, decimals, (int16)output); //
 369:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 370:main.c        ****                         #endif 
 371:main.c        ****                         if (abs((int)xavg) > DEGREES_50 || abs((int)yavg) > DEGREES_50){ // If gyro
 1411              		.loc 1 371 0
 1412 0738 804B     		ldr	r3, .L76+4
 1413 073a 1B68     		ldr	r3, [r3]	@ float
 1414 073c 1846     		mov	r0, r3
 1415 073e FFF7FEFF 		bl	__aeabi_f2iz
 1416 0742 0346     		mov	r3, r0
 1417 0744 002B     		cmp	r3, #0
 1418 0746 B8BF     		it	lt
 1419 0748 5B42     		rsblt	r3, r3, #0
 1420 074a 41F69612 		movw	r2, #6550
 1421 074e 9342     		cmp	r3, r2
 1422 0750 0CDC     		bgt	.L54
 1423              		.loc 1 371 0 is_stmt 0 discriminator 1
 1424 0752 7B4B     		ldr	r3, .L76+8
 1425 0754 1B68     		ldr	r3, [r3]	@ float
 1426 0756 1846     		mov	r0, r3
 1427 0758 FFF7FEFF 		bl	__aeabi_f2iz
 1428 075c 0346     		mov	r3, r0
 1429 075e 002B     		cmp	r3, #0
 1430 0760 B8BF     		it	lt
 1431 0762 5B42     		rsblt	r3, r3, #0
 1432 0764 41F69612 		movw	r2, #6550
 1433 0768 9342     		cmp	r3, r2
 1434 076a 1CDD     		ble	.L52
 1435              	.L54:
 372:main.c        ****                             STATE = RESURFACE;                                        // start lift
 1436              		.loc 1 372 0 is_stmt 1
 1437 076c 754B     		ldr	r3, .L76+12
 1438 076e 0422     		movs	r2, #4
 1439 0770 1A70     		strb	r2, [r3]
 373:main.c        ****                             setCursor(0,0);
 1440              		.loc 1 373 0
 1441 0772 0020     		movs	r0, #0
 1442 0774 0021     		movs	r1, #0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 34


 1443 0776 FFF7FEFF 		bl	setCursor
 374:main.c        ****                             clear();
 1444              		.loc 1 374 0
 1445 077a FFF7FEFF 		bl	clear
 375:main.c        ****                             LCD_print("Tilted");
 1446              		.loc 1 375 0
 1447 077e 7248     		ldr	r0, .L76+16
 1448 0780 FFF7FEFF 		bl	LCD_print
 376:main.c        ****                             CyDelay(1000u);
 1449              		.loc 1 376 0
 1450 0784 4FF47A70 		mov	r0, #1000
 1451 0788 FFF7FEFF 		bl	CyDelay
 377:main.c        ****                             setCursor(0,0);
 1452              		.loc 1 377 0
 1453 078c 0020     		movs	r0, #0
 1454 078e 0021     		movs	r1, #0
 1455 0790 FFF7FEFF 		bl	setCursor
 378:main.c        ****                             clear();
 1456              		.loc 1 378 0
 1457 0794 FFF7FEFF 		bl	clear
 379:main.c        ****                             LCD_print("STATE: RESURFACING");
 1458              		.loc 1 379 0
 1459 0798 6C48     		ldr	r0, .L76+20
 1460 079a FFF7FEFF 		bl	LCD_print
 380:main.c        ****                             CyDelay(1000u);
 1461              		.loc 1 380 0
 1462 079e 4FF47A70 		mov	r0, #1000
 1463 07a2 FFF7FEFF 		bl	CyDelay
 1464              	.L52:
 381:main.c        ****                             
 382:main.c        ****                         }
 383:main.c        ****                     }
 384:main.c        ****                     
 385:main.c        ****                     if(average > BOT_THRESHOLD){                        
 1465              		.loc 1 385 0
 1466 07a6 644B     		ldr	r3, .L76
 1467 07a8 1B88     		ldrh	r3, [r3]
 1468 07aa 1BB2     		sxth	r3, r3
 1469 07ac 44F62062 		movw	r2, #20000
 1470 07b0 9342     		cmp	r3, r2
 1471 07b2 1ADD     		ble	.L55
 386:main.c        ****                         STATE = LANDED;                                     //Switch to LANDED stat
 1472              		.loc 1 386 0
 1473 07b4 634B     		ldr	r3, .L76+12
 1474 07b6 0322     		movs	r2, #3
 1475 07b8 1A70     		strb	r2, [r3]
 387:main.c        ****                         #ifdef LCD
 388:main.c        ****                             setCursor(0,0);
 1476              		.loc 1 388 0
 1477 07ba 0020     		movs	r0, #0
 1478 07bc 0021     		movs	r1, #0
 1479 07be FFF7FEFF 		bl	setCursor
 389:main.c        ****                             clear();
 1480              		.loc 1 389 0
 1481 07c2 FFF7FEFF 		bl	clear
 390:main.c        ****                             LCD_print("STATE: LANDED");  
 1482              		.loc 1 390 0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 35


 1483 07c6 6248     		ldr	r0, .L76+24
 1484 07c8 FFF7FEFF 		bl	LCD_print
 391:main.c        ****                         #endif
 392:main.c        ****                         #ifdef SD
 393:main.c        ****                             FS_Write(fsfile, landedbuf, LANDED_LEN);
 394:main.c        ****                         #endif
 395:main.c        ****                         #ifdef SD
 396:main.c        ****                             FS_Write(fsfile, vacuumbuf, VACUUM_LEN);
 397:main.c        ****                         #endif
 398:main.c        ****                         
 399:main.c        ****                         id=0;                                                   //reset sample coun
 1485              		.loc 1 399 0
 1486 07cc 614B     		ldr	r3, .L76+28
 1487 07ce 0022     		movs	r2, #0
 1488 07d0 1A60     		str	r2, [r3]
 400:main.c        ****                         data_time = 0;
 1489              		.loc 1 400 0
 1490 07d2 614B     		ldr	r3, .L76+32
 1491 07d4 0022     		movs	r2, #0
 1492 07d6 1A60     		str	r2, [r3]
 401:main.c        ****                         sum = 0;
 1493              		.loc 1 401 0
 1494 07d8 604B     		ldr	r3, .L76+36
 1495 07da 0022     		movs	r2, #0
 1496 07dc 1A60     		str	r2, [r3]
 402:main.c        ****                         average = 0; 
 1497              		.loc 1 402 0
 1498 07de 564B     		ldr	r3, .L76
 1499 07e0 0022     		movs	r2, #0
 1500 07e2 1A80     		strh	r2, [r3]	@ movhi
 403:main.c        ****                         countdown = 0;
 1501              		.loc 1 403 0
 1502 07e4 5E4B     		ldr	r3, .L76+40
 1503 07e6 0022     		movs	r2, #0
 1504 07e8 1A70     		strb	r2, [r3]
 1505              	.L55:
 404:main.c        ****                     }
 405:main.c        ****                     id++;
 1506              		.loc 1 405 0
 1507 07ea 5A4B     		ldr	r3, .L76+28
 1508 07ec 1B68     		ldr	r3, [r3]
 1509 07ee 0133     		adds	r3, r3, #1
 1510 07f0 584A     		ldr	r2, .L76+28
 1511 07f2 1360     		str	r3, [r2]
 406:main.c        ****                     
 407:main.c        ****                     /* if max time allowed for descent has been reached, resurface */
 408:main.c        ****                     if(data_time >= descent_time ){                         // variable descent tim
 1512              		.loc 1 408 0
 1513 07f4 584B     		ldr	r3, .L76+32
 1514 07f6 1A68     		ldr	r2, [r3]
 1515 07f8 5A4B     		ldr	r3, .L76+44
 1516 07fa 1B68     		ldr	r3, [r3]
 1517 07fc 9A42     		cmp	r2, r3
 1518 07fe 17DB     		blt	.L56
 409:main.c        ****                         STATE = RESURFACE;                                      
 1519              		.loc 1 409 0
 1520 0800 504B     		ldr	r3, .L76+12
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 36


 1521 0802 0422     		movs	r2, #4
 1522 0804 1A70     		strb	r2, [r3]
 410:main.c        ****                         #ifdef LCD
 411:main.c        ****                             setCursor(0,0);
 1523              		.loc 1 411 0
 1524 0806 0020     		movs	r0, #0
 1525 0808 0021     		movs	r1, #0
 1526 080a FFF7FEFF 		bl	setCursor
 412:main.c        ****                             clear();
 1527              		.loc 1 412 0
 1528 080e FFF7FEFF 		bl	clear
 413:main.c        ****                             LCD_print("STATE: RESURFACE");  
 1529              		.loc 1 413 0
 1530 0812 5548     		ldr	r0, .L76+48
 1531 0814 FFF7FEFF 		bl	LCD_print
 414:main.c        ****                         #endif
 415:main.c        ****                         id=0;                                               //reset sample counter
 1532              		.loc 1 415 0
 1533 0818 4E4B     		ldr	r3, .L76+28
 1534 081a 0022     		movs	r2, #0
 1535 081c 1A60     		str	r2, [r3]
 416:main.c        ****                         data_time = 0;
 1536              		.loc 1 416 0
 1537 081e 4E4B     		ldr	r3, .L76+32
 1538 0820 0022     		movs	r2, #0
 1539 0822 1A60     		str	r2, [r3]
 417:main.c        ****                         sum = 0;                                            //reset sum 
 1540              		.loc 1 417 0
 1541 0824 4D4B     		ldr	r3, .L76+36
 1542 0826 0022     		movs	r2, #0
 1543 0828 1A60     		str	r2, [r3]
 418:main.c        ****                         average = 0;
 1544              		.loc 1 418 0
 1545 082a 434B     		ldr	r3, .L76
 1546 082c 0022     		movs	r2, #0
 1547 082e 1A80     		strh	r2, [r3]	@ movhi
 1548              	.L56:
 419:main.c        ****                     }
 420:main.c        ****                     
 421:main.c        ****                     collect_flag = 0;
 1549              		.loc 1 421 0
 1550 0830 4E4B     		ldr	r3, .L76+52
 1551 0832 0022     		movs	r2, #0
 1552 0834 1A70     		strb	r2, [r3]
 422:main.c        ****                 }
 423:main.c        ****                 break;
 1553              		.loc 1 423 0
 1554 0836 8FE1     		b	.L49
 1555              	.L50:
 1556              		.loc 1 423 0 is_stmt 0 discriminator 2
 1557 0838 8EE1     		b	.L49
 1558              	.L34:
 424:main.c        ****                 
 425:main.c        ****                 case LANDED:
 426:main.c        ****                     if (countdown == 15) {                   // Delay for 7 seconds at bottom
 1559              		.loc 1 426 0 is_stmt 1
 1560 083a 494B     		ldr	r3, .L76+40
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 37


 1561 083c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1562 083e 0F2B     		cmp	r3, #15
 1563 0840 08D1     		bne	.L57
 427:main.c        ****                         countdown = 0; 
 1564              		.loc 1 427 0
 1565 0842 474B     		ldr	r3, .L76+40
 1566 0844 0022     		movs	r2, #0
 1567 0846 1A70     		strb	r2, [r3]
 428:main.c        ****                         pulse = 1;                          // next stage of the state
 1568              		.loc 1 428 0
 1569 0848 0123     		movs	r3, #1
 1570 084a C7F82431 		str	r3, [r7, #292]
 429:main.c        ****                         Solenoid_1_Write(1);                // turn on solenoid 1 for 5 seconds
 1571              		.loc 1 429 0
 1572 084e 0120     		movs	r0, #1
 1573 0850 FFF7FEFF 		bl	Solenoid_1_Write
 1574              	.L57:
 430:main.c        ****                     } 
 431:main.c        ****                     
 432:main.c        ****                     MPU6050_getRotation(&gx, &gy, &gz);     // gather gyro data
 1575              		.loc 1 432 0
 1576 0854 07F14E01 		add	r1, r7, #78
 1577 0858 07F14C02 		add	r2, r7, #76
 1578 085c 07F14A03 		add	r3, r7, #74
 1579 0860 0846     		mov	r0, r1
 1580 0862 1146     		mov	r1, r2
 1581 0864 1A46     		mov	r2, r3
 1582 0866 FFF7FEFF 		bl	MPU6050_getRotation
 433:main.c        ****                     if(collect_flag == 1){                  // Compute gryo data again in case of t
 1583              		.loc 1 433 0
 1584 086a 404B     		ldr	r3, .L76+52
 1585 086c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1586 086e 002B     		cmp	r3, #0
 1587 0870 00F0FE80 		beq	.L58
 434:main.c        ****                         if (id < MA_WINDOW){    
 1588              		.loc 1 434 0
 1589 0874 374B     		ldr	r3, .L76+28
 1590 0876 1B68     		ldr	r3, [r3]
 1591 0878 0E2B     		cmp	r3, #14
 1592 087a 22DC     		bgt	.L59
 435:main.c        ****                             xsum += gx;
 1593              		.loc 1 435 0
 1594 087c B7F84E30 		ldrh	r3, [r7, #78]
 1595 0880 1BB2     		sxth	r3, r3
 1596 0882 1846     		mov	r0, r3
 1597 0884 FFF7FEFF 		bl	__aeabi_i2f
 1598 0888 0246     		mov	r2, r0
 1599 088a 394B     		ldr	r3, .L76+56
 1600 088c 1B68     		ldr	r3, [r3]	@ float
 1601 088e 1046     		mov	r0, r2
 1602 0890 1946     		mov	r1, r3
 1603 0892 FFF7FEFF 		bl	__aeabi_fadd
 1604 0896 0346     		mov	r3, r0
 1605 0898 1A46     		mov	r2, r3
 1606 089a 354B     		ldr	r3, .L76+56
 1607 089c 1A60     		str	r2, [r3]	@ float
 436:main.c        ****                             ysum += gy;
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 38


 1608              		.loc 1 436 0
 1609 089e B7F84C30 		ldrh	r3, [r7, #76]
 1610 08a2 1BB2     		sxth	r3, r3
 1611 08a4 1846     		mov	r0, r3
 1612 08a6 FFF7FEFF 		bl	__aeabi_i2f
 1613 08aa 0246     		mov	r2, r0
 1614 08ac 314B     		ldr	r3, .L76+60
 1615 08ae 1B68     		ldr	r3, [r3]	@ float
 1616 08b0 1046     		mov	r0, r2
 1617 08b2 1946     		mov	r1, r3
 1618 08b4 FFF7FEFF 		bl	__aeabi_fadd
 1619 08b8 0346     		mov	r3, r0
 1620 08ba 1A46     		mov	r2, r3
 1621 08bc 2D4B     		ldr	r3, .L76+60
 1622 08be 1A60     		str	r2, [r3]	@ float
 1623 08c0 7EE0     		b	.L60
 1624              	.L59:
 437:main.c        ****                         }
 438:main.c        ****                         else if(id == MA_WINDOW){
 1625              		.loc 1 438 0
 1626 08c2 244B     		ldr	r3, .L76+28
 1627 08c4 1B68     		ldr	r3, [r3]
 1628 08c6 0F2B     		cmp	r3, #15
 1629 08c8 58D1     		bne	.L61
 439:main.c        ****                             xsum += gx;
 1630              		.loc 1 439 0
 1631 08ca B7F84E30 		ldrh	r3, [r7, #78]
 1632 08ce 1BB2     		sxth	r3, r3
 1633 08d0 1846     		mov	r0, r3
 1634 08d2 FFF7FEFF 		bl	__aeabi_i2f
 1635 08d6 0246     		mov	r2, r0
 1636 08d8 254B     		ldr	r3, .L76+56
 1637 08da 1B68     		ldr	r3, [r3]	@ float
 1638 08dc 1046     		mov	r0, r2
 1639 08de 1946     		mov	r1, r3
 1640 08e0 FFF7FEFF 		bl	__aeabi_fadd
 1641 08e4 0346     		mov	r3, r0
 1642 08e6 1A46     		mov	r2, r3
 1643 08e8 214B     		ldr	r3, .L76+56
 1644 08ea 1A60     		str	r2, [r3]	@ float
 440:main.c        ****                             ysum += gy;
 1645              		.loc 1 440 0
 1646 08ec B7F84C30 		ldrh	r3, [r7, #76]
 1647 08f0 1BB2     		sxth	r3, r3
 1648 08f2 1846     		mov	r0, r3
 1649 08f4 FFF7FEFF 		bl	__aeabi_i2f
 1650 08f8 0246     		mov	r2, r0
 1651 08fa 1E4B     		ldr	r3, .L76+60
 1652 08fc 1B68     		ldr	r3, [r3]	@ float
 1653 08fe 1046     		mov	r0, r2
 1654 0900 1946     		mov	r1, r3
 1655 0902 FFF7FEFF 		bl	__aeabi_fadd
 1656 0906 0346     		mov	r3, r0
 1657 0908 1A46     		mov	r2, r3
 1658 090a 1A4B     		ldr	r3, .L76+60
 1659 090c 1A60     		str	r2, [r3]	@ float
 441:main.c        ****                             xavg = xsum/MA_WINDOW;                            //compute baseline av
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 39


 1660              		.loc 1 441 0
 1661 090e 184B     		ldr	r3, .L76+56
 1662 0910 1B68     		ldr	r3, [r3]	@ float
 1663 0912 1846     		mov	r0, r3
 1664 0914 1849     		ldr	r1, .L76+64
 1665 0916 FFF7FEFF 		bl	__aeabi_fdiv
 1666 091a 0346     		mov	r3, r0
 1667 091c 1A46     		mov	r2, r3
 1668 091e 074B     		ldr	r3, .L76+4
 1669 0920 1A60     		str	r2, [r3]	@ float
 442:main.c        ****                             yavg = ysum/MA_WINDOW;
 1670              		.loc 1 442 0
 1671 0922 144B     		ldr	r3, .L76+60
 1672 0924 1B68     		ldr	r3, [r3]	@ float
 1673 0926 1846     		mov	r0, r3
 1674 0928 1349     		ldr	r1, .L76+64
 1675 092a FFF7FEFF 		bl	__aeabi_fdiv
 1676 092e 0346     		mov	r3, r0
 1677 0930 1A46     		mov	r2, r3
 1678 0932 034B     		ldr	r3, .L76+8
 1679 0934 1A60     		str	r2, [r3]	@ float
 1680 0936 43E0     		b	.L60
 1681              	.L77:
 1682              		.align	2
 1683              	.L76:
 1684 0938 00000000 		.word	average
 1685 093c 00000000 		.word	xavg
 1686 0940 00000000 		.word	yavg
 1687 0944 00000000 		.word	STATE
 1688 0948 50000000 		.word	.LC11
 1689 094c 58000000 		.word	.LC12
 1690 0950 6C000000 		.word	.LC13
 1691 0954 00000000 		.word	id
 1692 0958 00000000 		.word	data_time
 1693 095c 00000000 		.word	sum
 1694 0960 00000000 		.word	countdown
 1695 0964 00000000 		.word	descent_time
 1696 0968 7C000000 		.word	.LC14
 1697 096c 00000000 		.word	collect_flag
 1698 0970 00000000 		.word	xsum
 1699 0974 00000000 		.word	ysum
 1700 0978 00007041 		.word	1097859072
 1701              	.L61:
 443:main.c        ****                         }
 444:main.c        ****                         else{
 445:main.c        ****                             xavg = ComputeMA(xavg, MA_WINDOW, gx);
 1702              		.loc 1 445 0
 1703 097c 774B     		ldr	r3, .L78
 1704 097e 1C68     		ldr	r4, [r3]	@ float
 1705 0980 B7F84E30 		ldrh	r3, [r7, #78]
 1706 0984 1BB2     		sxth	r3, r3
 1707 0986 1846     		mov	r0, r3
 1708 0988 FFF7FEFF 		bl	__aeabi_i2f
 1709 098c 0346     		mov	r3, r0
 1710 098e 2046     		mov	r0, r4
 1711 0990 0F21     		movs	r1, #15
 1712 0992 1A46     		mov	r2, r3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 40


 1713 0994 FFF7FEFF 		bl	ComputeMA
 1714 0998 0246     		mov	r2, r0
 1715 099a 704B     		ldr	r3, .L78
 1716 099c 1A60     		str	r2, [r3]	@ float
 446:main.c        ****                             yavg = ComputeMA(yavg, MA_WINDOW, gy);
 1717              		.loc 1 446 0
 1718 099e 704B     		ldr	r3, .L78+4
 1719 09a0 1C68     		ldr	r4, [r3]	@ float
 1720 09a2 B7F84C30 		ldrh	r3, [r7, #76]
 1721 09a6 1BB2     		sxth	r3, r3
 1722 09a8 1846     		mov	r0, r3
 1723 09aa FFF7FEFF 		bl	__aeabi_i2f
 1724 09ae 0346     		mov	r3, r0
 1725 09b0 2046     		mov	r0, r4
 1726 09b2 0F21     		movs	r1, #15
 1727 09b4 1A46     		mov	r2, r3
 1728 09b6 FFF7FEFF 		bl	ComputeMA
 1729 09ba 0246     		mov	r2, r0
 1730 09bc 684B     		ldr	r3, .L78+4
 1731 09be 1A60     		str	r2, [r3]	@ float
 1732              	.L60:
 447:main.c        ****                         }
 448:main.c        ****                         if (countdown > 7 && pulse == 0){       // Allow for device to settle
 1733              		.loc 1 448 0
 1734 09c0 684B     		ldr	r3, .L78+8
 1735 09c2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1736 09c4 072B     		cmp	r3, #7
 1737 09c6 4BD9     		bls	.L62
 1738              		.loc 1 448 0 is_stmt 0 discriminator 1
 1739 09c8 D7F82431 		ldr	r3, [r7, #292]
 1740 09cc 002B     		cmp	r3, #0
 1741 09ce 47D1     		bne	.L62
 449:main.c        ****                             if (abs((int)xavg) > DEGREES_20 || abs((int)yavg) > DEGREES_20){ // If 
 1742              		.loc 1 449 0 is_stmt 1
 1743 09d0 624B     		ldr	r3, .L78
 1744 09d2 1B68     		ldr	r3, [r3]	@ float
 1745 09d4 1846     		mov	r0, r3
 1746 09d6 FFF7FEFF 		bl	__aeabi_f2iz
 1747 09da 0346     		mov	r3, r0
 1748 09dc 002B     		cmp	r3, #0
 1749 09de B8BF     		it	lt
 1750 09e0 5B42     		rsblt	r3, r3, #0
 1751 09e2 40F63C22 		movw	r2, #2620
 1752 09e6 9342     		cmp	r3, r2
 1753 09e8 0CDC     		bgt	.L63
 1754              		.loc 1 449 0 is_stmt 0 discriminator 1
 1755 09ea 5D4B     		ldr	r3, .L78+4
 1756 09ec 1B68     		ldr	r3, [r3]	@ float
 1757 09ee 1846     		mov	r0, r3
 1758 09f0 FFF7FEFF 		bl	__aeabi_f2iz
 1759 09f4 0346     		mov	r3, r0
 1760 09f6 002B     		cmp	r3, #0
 1761 09f8 B8BF     		it	lt
 1762 09fa 5B42     		rsblt	r3, r3, #0
 1763 09fc 40F63C22 		movw	r2, #2620
 1764 0a00 9342     		cmp	r3, r2
 1765 0a02 2DDD     		ble	.L62
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 41


 1766              	.L63:
 450:main.c        ****                                 secs_for_tilt++;
 1767              		.loc 1 450 0 is_stmt 1
 1768 0a04 D7F82031 		ldr	r3, [r7, #288]
 1769 0a08 0133     		adds	r3, r3, #1
 1770 0a0a C7F82031 		str	r3, [r7, #288]
 451:main.c        ****                                 if (secs_for_tilt > 750) {
 1771              		.loc 1 451 0
 1772 0a0e D7F82031 		ldr	r3, [r7, #288]
 1773 0a12 40F2EE22 		movw	r2, #750
 1774 0a16 9342     		cmp	r3, r2
 1775 0a18 22DD     		ble	.L62
 452:main.c        ****                                     STATE = RESURFACE;
 1776              		.loc 1 452 0
 1777 0a1a 534B     		ldr	r3, .L78+12
 1778 0a1c 0422     		movs	r2, #4
 1779 0a1e 1A70     		strb	r2, [r3]
 453:main.c        ****                                     setCursor(0,0);
 1780              		.loc 1 453 0
 1781 0a20 0020     		movs	r0, #0
 1782 0a22 0021     		movs	r1, #0
 1783 0a24 FFF7FEFF 		bl	setCursor
 454:main.c        ****                                     clear();
 1784              		.loc 1 454 0
 1785 0a28 FFF7FEFF 		bl	clear
 455:main.c        ****                                     LCD_print("Tilted");
 1786              		.loc 1 455 0
 1787 0a2c 4F48     		ldr	r0, .L78+16
 1788 0a2e FFF7FEFF 		bl	LCD_print
 456:main.c        ****                                     CyDelay(1000u);
 1789              		.loc 1 456 0
 1790 0a32 4FF47A70 		mov	r0, #1000
 1791 0a36 FFF7FEFF 		bl	CyDelay
 457:main.c        ****                                     setCursor(0,0);
 1792              		.loc 1 457 0
 1793 0a3a 0020     		movs	r0, #0
 1794 0a3c 0021     		movs	r1, #0
 1795 0a3e FFF7FEFF 		bl	setCursor
 458:main.c        ****                                     clear();
 1796              		.loc 1 458 0
 1797 0a42 FFF7FEFF 		bl	clear
 459:main.c        ****                                     LCD_print("STATE: RESURFACING");
 1798              		.loc 1 459 0
 1799 0a46 4A48     		ldr	r0, .L78+20
 1800 0a48 FFF7FEFF 		bl	LCD_print
 460:main.c        ****                                     CyDelay(1000u);
 1801              		.loc 1 460 0
 1802 0a4c 4FF47A70 		mov	r0, #1000
 1803 0a50 FFF7FEFF 		bl	CyDelay
 461:main.c        ****                                     countdown = 0;
 1804              		.loc 1 461 0
 1805 0a54 434B     		ldr	r3, .L78+8
 1806 0a56 0022     		movs	r2, #0
 1807 0a58 1A70     		strb	r2, [r3]
 462:main.c        ****                                     secs_for_tilt = 0;
 1808              		.loc 1 462 0
 1809 0a5a 0023     		movs	r3, #0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 42


 1810 0a5c C7F82031 		str	r3, [r7, #288]
 1811              	.L62:
 463:main.c        ****                                 }
 464:main.c        ****                             }
 465:main.c        ****                         }
 466:main.c        ****                         collect_flag = 0;
 1812              		.loc 1 466 0
 1813 0a60 444B     		ldr	r3, .L78+24
 1814 0a62 0022     		movs	r2, #0
 1815 0a64 1A70     		strb	r2, [r3]
 467:main.c        ****                         id++;
 1816              		.loc 1 467 0
 1817 0a66 444B     		ldr	r3, .L78+28
 1818 0a68 1B68     		ldr	r3, [r3]
 1819 0a6a 0133     		adds	r3, r3, #1
 1820 0a6c 424A     		ldr	r2, .L78+28
 1821 0a6e 1360     		str	r3, [r2]
 1822              	.L58:
 468:main.c        ****                     }
 469:main.c        ****                     
 470:main.c        ****                     if (countdown == 5 && pulse){           // Second stage, turn off solenoid
 1823              		.loc 1 470 0
 1824 0a70 3C4B     		ldr	r3, .L78+8
 1825 0a72 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1826 0a74 052B     		cmp	r3, #5
 1827 0a76 0ED1     		bne	.L64
 1828              		.loc 1 470 0 is_stmt 0 discriminator 1
 1829 0a78 D7F82431 		ldr	r3, [r7, #292]
 1830 0a7c 002B     		cmp	r3, #0
 1831 0a7e 0AD0     		beq	.L64
 471:main.c        ****                         pulse++;
 1832              		.loc 1 471 0 is_stmt 1
 1833 0a80 D7F82431 		ldr	r3, [r7, #292]
 1834 0a84 0133     		adds	r3, r3, #1
 1835 0a86 C7F82431 		str	r3, [r7, #292]
 472:main.c        ****                         Solenoid_1_Write(0);                // turn off soleniod 1
 1836              		.loc 1 472 0
 1837 0a8a 0020     		movs	r0, #0
 1838 0a8c FFF7FEFF 		bl	Solenoid_1_Write
 473:main.c        ****                         countdown = 0;
 1839              		.loc 1 473 0
 1840 0a90 344B     		ldr	r3, .L78+8
 1841 0a92 0022     		movs	r2, #0
 1842 0a94 1A70     		strb	r2, [r3]
 1843              	.L64:
 474:main.c        ****                     }
 475:main.c        ****                     if (countdown == 3 && pulse == 2){      // Delay for 3 seconds then resurface
 1844              		.loc 1 475 0
 1845 0a96 334B     		ldr	r3, .L78+8
 1846 0a98 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1847 0a9a 032B     		cmp	r3, #3
 1848 0a9c 16D1     		bne	.L65
 1849              		.loc 1 475 0 is_stmt 0 discriminator 1
 1850 0a9e D7F82431 		ldr	r3, [r7, #292]
 1851 0aa2 022B     		cmp	r3, #2
 1852 0aa4 12D1     		bne	.L65
 476:main.c        ****                         STATE = RESURFACE;
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 43


 1853              		.loc 1 476 0 is_stmt 1
 1854 0aa6 304B     		ldr	r3, .L78+12
 1855 0aa8 0422     		movs	r2, #4
 1856 0aaa 1A70     		strb	r2, [r3]
 477:main.c        ****                         
 478:main.c        ****                         #ifdef LCD
 479:main.c        ****                             setCursor(0,0);
 1857              		.loc 1 479 0
 1858 0aac 0020     		movs	r0, #0
 1859 0aae 0021     		movs	r1, #0
 1860 0ab0 FFF7FEFF 		bl	setCursor
 480:main.c        ****                             clear();
 1861              		.loc 1 480 0
 1862 0ab4 FFF7FEFF 		bl	clear
 481:main.c        ****                             LCD_print("STATE: RESURFACING");  
 1863              		.loc 1 481 0
 1864 0ab8 2D48     		ldr	r0, .L78+20
 1865 0aba FFF7FEFF 		bl	LCD_print
 482:main.c        ****                         #endif
 483:main.c        ****                         #ifdef SD
 484:main.c        ****                             FS_Write(fsfile, resurfbuf, RESURFACE_LEN);
 485:main.c        ****                         #endif
 486:main.c        ****                         pulse = 0;
 1866              		.loc 1 486 0
 1867 0abe 0023     		movs	r3, #0
 1868 0ac0 C7F82431 		str	r3, [r7, #292]
 487:main.c        ****                         countdown = 0;
 1869              		.loc 1 487 0
 1870 0ac4 274B     		ldr	r3, .L78+8
 1871 0ac6 0022     		movs	r2, #0
 1872 0ac8 1A70     		strb	r2, [r3]
 488:main.c        ****                     }
 489:main.c        ****                 break;
 1873              		.loc 1 489 0
 1874 0aca 45E0     		b	.L49
 1875              	.L65:
 1876              		.loc 1 489 0 is_stmt 0 discriminator 3
 1877 0acc 44E0     		b	.L49
 1878              	.L35:
 490:main.c        ****                 
 491:main.c        ****             case RESURFACE:
 492:main.c        ****                 if (PANIC_flag)                 // Display that moisture sensor triggered
 1879              		.loc 1 492 0 is_stmt 1
 1880 0ace 2B4B     		ldr	r3, .L78+32
 1881 0ad0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1882 0ad2 002B     		cmp	r3, #0
 1883 0ad4 02D0     		beq	.L66
 493:main.c        ****                     LCD_print("WATER DETECTED");
 1884              		.loc 1 493 0
 1885 0ad6 2A48     		ldr	r0, .L78+36
 1886 0ad8 FFF7FEFF 		bl	LCD_print
 1887              	.L66:
 494:main.c        ****                     
 495:main.c        ****                 Solenoid_2_Write(1);            // turn on lift bag solenoid                
 1888              		.loc 1 495 0
 1889 0adc 0120     		movs	r0, #1
 1890 0ade FFF7FEFF 		bl	Solenoid_2_Write
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 44


 496:main.c        ****                 
 497:main.c        ****                 //check pressure sensor to confirm we are at the surface
 498:main.c        ****                 if (countdown == 3){
 1891              		.loc 1 498 0
 1892 0ae2 204B     		ldr	r3, .L78+8
 1893 0ae4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1894 0ae6 032B     		cmp	r3, #3
 1895 0ae8 0ED1     		bne	.L67
 499:main.c        ****                     Solenoid_2_Write(0);        // Turn off solenoid 2 for 1 second
 1896              		.loc 1 499 0
 1897 0aea 0020     		movs	r0, #0
 1898 0aec FFF7FEFF 		bl	Solenoid_2_Write
 500:main.c        ****                     CyDelay(1000u);
 1899              		.loc 1 500 0
 1900 0af0 4FF47A70 		mov	r0, #1000
 1901 0af4 FFF7FEFF 		bl	CyDelay
 501:main.c        ****                     pulse++;
 1902              		.loc 1 501 0
 1903 0af8 D7F82431 		ldr	r3, [r7, #292]
 1904 0afc 0133     		adds	r3, r3, #1
 1905 0afe C7F82431 		str	r3, [r7, #292]
 502:main.c        ****                     countdown = 0;
 1906              		.loc 1 502 0
 1907 0b02 184B     		ldr	r3, .L78+8
 1908 0b04 0022     		movs	r2, #0
 1909 0b06 1A70     		strb	r2, [r3]
 1910              	.L67:
 503:main.c        ****                 }
 504:main.c        ****                 if (pulse == 2){
 1911              		.loc 1 504 0
 1912 0b08 D7F82431 		ldr	r3, [r7, #292]
 1913 0b0c 022B     		cmp	r3, #2
 1914 0b0e 0FD1     		bne	.L68
 505:main.c        ****                     STATE = TRANSMIT;
 1915              		.loc 1 505 0
 1916 0b10 154B     		ldr	r3, .L78+12
 1917 0b12 0522     		movs	r2, #5
 1918 0b14 1A70     		strb	r2, [r3]
 506:main.c        ****                     #ifdef SD                                   //close old file, open new one
 507:main.c        ****                         FS_FClose(fsfile);
 508:main.c        ****                         sprintf(file, "test%d.txt", ++testnum);
 509:main.c        ****                         fsfile = FS_FOpen(file, "w");
 510:main.c        ****                     #endif 
 511:main.c        ****                     
 512:main.c        ****                     #ifdef LCD
 513:main.c        ****                         setCursor(0,0);
 1919              		.loc 1 513 0
 1920 0b16 0020     		movs	r0, #0
 1921 0b18 0021     		movs	r1, #0
 1922 0b1a FFF7FEFF 		bl	setCursor
 514:main.c        ****                         clear();
 1923              		.loc 1 514 0
 1924 0b1e FFF7FEFF 		bl	clear
 515:main.c        ****                         LCD_print("TRANSMIT");  
 1925              		.loc 1 515 0
 1926 0b22 1848     		ldr	r0, .L78+40
 1927 0b24 FFF7FEFF 		bl	LCD_print
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 45


 516:main.c        ****                     #endif
 517:main.c        ****                     #ifdef SD
 518:main.c        ****                         FS_Write(fsfile, transbuf, TRANSMIT_LEN);
 519:main.c        ****                     #endif
 520:main.c        ****                     countdown = 0;
 1928              		.loc 1 520 0
 1929 0b28 0E4B     		ldr	r3, .L78+8
 1930 0b2a 0022     		movs	r2, #0
 1931 0b2c 1A70     		strb	r2, [r3]
 521:main.c        ****                 }
 522:main.c        ****                 break;
 1932              		.loc 1 522 0
 1933 0b2e 13E0     		b	.L49
 1934              	.L68:
 1935              		.loc 1 522 0 is_stmt 0 discriminator 4
 1936 0b30 12E0     		b	.L49
 1937              	.L36:
 523:main.c        ****                 
 524:main.c        ****             case TRANSMIT:
 525:main.c        ****                 if (transmit_flag){
 1938              		.loc 1 525 0 is_stmt 1
 1939 0b32 154B     		ldr	r3, .L78+44
 1940 0b34 1B68     		ldr	r3, [r3]
 1941 0b36 002B     		cmp	r3, #0
 1942 0b38 0CD0     		beq	.L69
 526:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &t); // Here, the STATE variable only matters,
 1943              		.loc 1 526 0
 1944 0b3a 07F1BC02 		add	r2, r7, #188
 1945 0b3e 07F14003 		add	r3, r7, #64
 1946 0b42 1046     		mov	r0, r2
 1947 0b44 0849     		ldr	r1, .L78+12
 1948 0b46 0A22     		movs	r2, #10
 1949 0b48 FFF7FEFF 		bl	BT_Send
 527:main.c        ****                     transmit_flag = 0;
 1950              		.loc 1 527 0
 1951 0b4c 0E4B     		ldr	r3, .L78+44
 1952 0b4e 0022     		movs	r2, #0
 1953 0b50 1A60     		str	r2, [r3]
 528:main.c        ****                 }            
 529:main.c        ****                 break;
 1954              		.loc 1 529 0
 1955 0b52 01E0     		b	.L49
 1956              	.L69:
 1957              		.loc 1 529 0 is_stmt 0 discriminator 5
 1958 0b54 00E0     		b	.L49
 1959              	.L71:
 530:main.c        ****                 
 531:main.c        ****             default:
 532:main.c        ****                 break;
 1960              		.loc 1 532 0 is_stmt 1
 1961 0b56 00BF     		nop
 1962              	.L49:
 1963              	.LBE2:
 533:main.c        ****         
 534:main.c        ****         }
 535:main.c        ****     }
 1964              		.loc 1 535 0 discriminator 1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 46


 1965 0b58 FFF7FFBA 		b	.L70
 1966              	.L79:
 1967              		.align	2
 1968              	.L78:
 1969 0b5c 00000000 		.word	xavg
 1970 0b60 00000000 		.word	yavg
 1971 0b64 00000000 		.word	countdown
 1972 0b68 00000000 		.word	STATE
 1973 0b6c 50000000 		.word	.LC11
 1974 0b70 58000000 		.word	.LC12
 1975 0b74 00000000 		.word	collect_flag
 1976 0b78 00000000 		.word	id
 1977 0b7c 00000000 		.word	PANIC_flag
 1978 0b80 90000000 		.word	.LC15
 1979 0b84 A0000000 		.word	.LC16
 1980 0b88 00000000 		.word	transmit_flag
 1981              		.cfi_endproc
 1982              	.LFE67:
 1983              		.size	main, .-main
 1984 0b8c AFF30080 		.section	.rodata
 1985 0119 000000   		.align	2
 1986              	.LC17:
 1987 011c 53642076 		.ascii	"Sd vol succeed\000"
 1987      6F6C2073 
 1987      75636365 
 1987      656400
 1988 012b 00       		.align	2
 1989              	.LC18:
 1990 012c 53642076 		.ascii	"Sd vol failed\000"
 1990      6F6C2066 
 1990      61696C65 
 1990      6400
 1991 013a 0000     		.align	2
 1992              	.LC19:
 1993 013c 666F726D 		.ascii	"format Succeeded\000"
 1993      61742053 
 1993      75636365 
 1993      65646564 
 1993      00
 1994 014d 000000   		.align	2
 1995              	.LC20:
 1996 0150 666F726D 		.ascii	"format Failed\000"
 1996      61742046 
 1996      61696C65 
 1996      6400
 1997 015e 0000     		.align	2
 1998              	.LC21:
 1999 0160 7700     		.ascii	"w\000"
 2000 0162 0000     		.align	2
 2001              	.LC22:
 2002 0164 46696C65 		.ascii	"File \000"
 2002      2000
 2003 016a 0000     		.align	2
 2004              	.LC23:
 2005 016c 77617320 		.ascii	"was opened\000"
 2005      6F70656E 
 2005      656400
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 47


 2006 0177 00       		.align	2
 2007              	.LC24:
 2008 0178 77726974 		.ascii	"written to file\000"
 2008      74656E20 
 2008      746F2066 
 2008      696C6500 
 2009              		.align	2
 2010              	.LC25:
 2011 0188 4661696C 		.ascii	"Failed to write\000"
 2011      65642074 
 2011      6F207772 
 2011      69746500 
 2012              		.align	2
 2013              	.LC26:
 2014 0198 66696C65 		.ascii	"file not created\000"
 2014      206E6F74 
 2014      20637265 
 2014      61746564 
 2014      00
 2015 01a9 000000   		.align	2
 2016              	.LC27:
 2017 01ac 0A2D2D2D 		.ascii	"\012------------\012\000"
 2017      2D2D2D2D 
 2017      2D2D2D2D 
 2017      2D0A00
 2018 01bb 00       		.section	.text.SD_SETUP,"ax",%progbits
 2019              		.align	2
 2020              		.global	SD_SETUP
 2021              		.thumb
 2022              		.thumb_func
 2023              		.type	SD_SETUP, %function
 2024              	SD_SETUP:
 2025              	.LFB68:
 536:main.c        **** }
 537:main.c        **** 
 538:main.c        **** int SD_SETUP(char* filename){
 2026              		.loc 1 538 0
 2027              		.cfi_startproc
 2028              		@ args = 0, pretend = 0, frame = 16
 2029              		@ frame_needed = 1, uses_anonymous_args = 0
 2030 0000 90B5     		push	{r4, r7, lr}
 2031              		.cfi_def_cfa_offset 12
 2032              		.cfi_offset 4, -12
 2033              		.cfi_offset 7, -8
 2034              		.cfi_offset 14, -4
 2035 0002 85B0     		sub	sp, sp, #20
 2036              		.cfi_def_cfa_offset 32
 2037 0004 00AF     		add	r7, sp, #0
 2038              		.cfi_def_cfa_register 7
 2039 0006 7860     		str	r0, [r7, #4]
 539:main.c        **** int success = 1;
 2040              		.loc 1 539 0
 2041 0008 0123     		movs	r3, #1
 2042 000a FB60     		str	r3, [r7, #12]
 540:main.c        ****       FS_Init();
 2043              		.loc 1 540 0
 2044 000c FFF7FEFF 		bl	FS_Init
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 48


 541:main.c        ****             FS_Mount(volume);
 2045              		.loc 1 541 0
 2046 0010 3A48     		ldr	r0, .L90
 2047 0012 FFF7FEFF 		bl	FS_Mount
 542:main.c        ****             if(0 != FS_GetVolumeName(0u, volume, 9u))
 2048              		.loc 1 542 0
 2049 0016 0020     		movs	r0, #0
 2050 0018 3849     		ldr	r1, .L90
 2051 001a 0922     		movs	r2, #9
 2052 001c FFF7FEFF 		bl	FS_GetVolumeName
 2053 0020 0346     		mov	r3, r0
 2054 0022 002B     		cmp	r3, #0
 2055 0024 03D0     		beq	.L81
 543:main.c        ****                 /* Getting volume name succeeded so prompt it on the LCD */
 544:main.c        ****                 LCD_print("Sd vol succeed");
 2056              		.loc 1 544 0
 2057 0026 3648     		ldr	r0, .L90+4
 2058 0028 FFF7FEFF 		bl	LCD_print
 2059 002c 04E0     		b	.L82
 2060              	.L81:
 545:main.c        ****             else{
 546:main.c        ****                 LCD_print("Sd vol failed");
 2061              		.loc 1 546 0
 2062 002e 3548     		ldr	r0, .L90+8
 2063 0030 FFF7FEFF 		bl	LCD_print
 547:main.c        ****                 success = 0;
 2064              		.loc 1 547 0
 2065 0034 0023     		movs	r3, #0
 2066 0036 FB60     		str	r3, [r7, #12]
 2067              	.L82:
 548:main.c        ****             }
 549:main.c        ****             CyDelay(500u);
 2068              		.loc 1 549 0
 2069 0038 4FF4FA70 		mov	r0, #500
 2070 003c FFF7FEFF 		bl	CyDelay
 550:main.c        ****             clear();
 2071              		.loc 1 550 0
 2072 0040 FFF7FEFF 		bl	clear
 551:main.c        ****             if(0 == FS_FormatSD(volume))
 2073              		.loc 1 551 0
 2074 0044 2D48     		ldr	r0, .L90
 2075 0046 FFF7FEFF 		bl	FS_FormatSD
 2076 004a 0346     		mov	r3, r0
 2077 004c 002B     		cmp	r3, #0
 2078 004e 03D1     		bne	.L83
 552:main.c        ****                 LCD_print("format Succeeded");
 2079              		.loc 1 552 0
 2080 0050 2D48     		ldr	r0, .L90+12
 2081 0052 FFF7FEFF 		bl	LCD_print
 2082 0056 04E0     		b	.L84
 2083              	.L83:
 553:main.c        ****             else{
 554:main.c        ****                 LCD_print("format Failed");
 2084              		.loc 1 554 0
 2085 0058 2C48     		ldr	r0, .L90+16
 2086 005a FFF7FEFF 		bl	LCD_print
 555:main.c        ****                 success = 0;
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 49


 2087              		.loc 1 555 0
 2088 005e 0023     		movs	r3, #0
 2089 0060 FB60     		str	r3, [r7, #12]
 2090              	.L84:
 556:main.c        ****             }
 557:main.c        ****             
 558:main.c        ****             CyDelay(500u);
 2091              		.loc 1 558 0
 2092 0062 4FF4FA70 		mov	r0, #500
 2093 0066 FFF7FEFF 		bl	CyDelay
 559:main.c        ****             clear();
 2094              		.loc 1 559 0
 2095 006a FFF7FEFF 		bl	clear
 560:main.c        ****             
 561:main.c        ****             fsfile = FS_FOpen(filename, "w");
 2096              		.loc 1 561 0
 2097 006e 7868     		ldr	r0, [r7, #4]
 2098 0070 2749     		ldr	r1, .L90+20
 2099 0072 FFF7FEFF 		bl	FS_FOpen
 2100 0076 0246     		mov	r2, r0
 2101 0078 264B     		ldr	r3, .L90+24
 2102 007a 1A60     		str	r2, [r3]
 562:main.c        ****             if(fsfile)
 2103              		.loc 1 562 0
 2104 007c 254B     		ldr	r3, .L90+24
 2105 007e 1B68     		ldr	r3, [r3]
 2106 0080 002B     		cmp	r3, #0
 2107 0082 29D0     		beq	.L85
 563:main.c        ****             {
 564:main.c        ****                 /* Indicate successful file creation message */
 565:main.c        ****                 LCD_print("File ");
 2108              		.loc 1 565 0
 2109 0084 2448     		ldr	r0, .L90+28
 2110 0086 FFF7FEFF 		bl	LCD_print
 566:main.c        ****                 LCD_print("was opened");
 2111              		.loc 1 566 0
 2112 008a 2448     		ldr	r0, .L90+32
 2113 008c FFF7FEFF 		bl	LCD_print
 567:main.c        ****                 /* Need some delay to indicate output on the LCD */
 568:main.c        ****                 CyDelay(500u);
 2114              		.loc 1 568 0
 2115 0090 4FF4FA70 		mov	r0, #500
 2116 0094 FFF7FEFF 		bl	CyDelay
 569:main.c        ****                 clear();
 2117              		.loc 1 569 0
 2118 0098 FFF7FEFF 		bl	clear
 570:main.c        ****                 
 571:main.c        ****                 if(0 != FS_Write(fsfile, filename, strlen(filename))) 
 2119              		.loc 1 571 0
 2120 009c 1D4B     		ldr	r3, .L90+24
 2121 009e 1C68     		ldr	r4, [r3]
 2122 00a0 7868     		ldr	r0, [r7, #4]
 2123 00a2 FFF7FEFF 		bl	strlen
 2124 00a6 0346     		mov	r3, r0
 2125 00a8 2046     		mov	r0, r4
 2126 00aa 7968     		ldr	r1, [r7, #4]
 2127 00ac 1A46     		mov	r2, r3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 50


 2128 00ae FFF7FEFF 		bl	FS_Write
 2129 00b2 0346     		mov	r3, r0
 2130 00b4 002B     		cmp	r3, #0
 2131 00b6 03D0     		beq	.L86
 572:main.c        ****                     /* Inditate that data was written to a file */
 573:main.c        ****                     LCD_print("written to file");
 2132              		.loc 1 573 0
 2133 00b8 1948     		ldr	r0, .L90+36
 2134 00ba FFF7FEFF 		bl	LCD_print
 2135 00be 06E0     		b	.L87
 2136              	.L86:
 574:main.c        ****                 else {
 575:main.c        ****                     LCD_print("Failed to write");
 2137              		.loc 1 575 0
 2138 00c0 1848     		ldr	r0, .L90+40
 2139 00c2 FFF7FEFF 		bl	LCD_print
 576:main.c        ****                     success = 0;
 2140              		.loc 1 576 0
 2141 00c6 0023     		movs	r3, #0
 2142 00c8 FB60     		str	r3, [r7, #12]
 577:main.c        ****                     clear();
 2143              		.loc 1 577 0
 2144 00ca FFF7FEFF 		bl	clear
 2145              	.L87:
 578:main.c        ****                 }
 579:main.c        ****                 CyDelay(500u);
 2146              		.loc 1 579 0
 2147 00ce 4FF4FA70 		mov	r0, #500
 2148 00d2 FFF7FEFF 		bl	CyDelay
 2149 00d6 04E0     		b	.L88
 2150              	.L85:
 580:main.c        ****             }
 581:main.c        ****             else{
 582:main.c        ****                 LCD_print("file not created");
 2151              		.loc 1 582 0
 2152 00d8 1348     		ldr	r0, .L90+44
 2153 00da FFF7FEFF 		bl	LCD_print
 583:main.c        ****                 success = 0;
 2154              		.loc 1 583 0
 2155 00de 0023     		movs	r3, #0
 2156 00e0 FB60     		str	r3, [r7, #12]
 2157              	.L88:
 584:main.c        ****             }
 585:main.c        ****         FS_Write(fsfile, "\n------------\n", 14);
 2158              		.loc 1 585 0
 2159 00e2 0C4B     		ldr	r3, .L90+24
 2160 00e4 1B68     		ldr	r3, [r3]
 2161 00e6 1846     		mov	r0, r3
 2162 00e8 1049     		ldr	r1, .L90+48
 2163 00ea 0E22     		movs	r2, #14
 2164 00ec FFF7FEFF 		bl	FS_Write
 586:main.c        **** return success;
 2165              		.loc 1 586 0
 2166 00f0 FB68     		ldr	r3, [r7, #12]
 587:main.c        **** }
 2167              		.loc 1 587 0
 2168 00f2 1846     		mov	r0, r3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 51


 2169 00f4 1437     		adds	r7, r7, #20
 2170              		.cfi_def_cfa_offset 12
 2171 00f6 BD46     		mov	sp, r7
 2172              		.cfi_def_cfa_register 13
 2173              		@ sp needed
 2174 00f8 90BD     		pop	{r4, r7, pc}
 2175              	.L91:
 2176 00fa 00BF     		.align	2
 2177              	.L90:
 2178 00fc 00000000 		.word	volume
 2179 0100 1C010000 		.word	.LC17
 2180 0104 2C010000 		.word	.LC18
 2181 0108 3C010000 		.word	.LC19
 2182 010c 50010000 		.word	.LC20
 2183 0110 60010000 		.word	.LC21
 2184 0114 00000000 		.word	fsfile
 2185 0118 64010000 		.word	.LC22
 2186 011c 6C010000 		.word	.LC23
 2187 0120 78010000 		.word	.LC24
 2188 0124 88010000 		.word	.LC25
 2189 0128 98010000 		.word	.LC26
 2190 012c AC010000 		.word	.LC27
 2191              		.cfi_endproc
 2192              	.LFE68:
 2193              		.size	SD_SETUP, .-SD_SETUP
 2194              		.text
 2195              	.Letext0:
 2196              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2197              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2198              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2199              		.file 5 ".\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 2200              		.file 6 "functions.h"
 2201              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2202              		.file 8 "./mpu6050.h"
 2203              		.section	.debug_info,"",%progbits
 2204              	.Ldebug_info0:
 2205 0000 73060000 		.4byte	0x673
 2206 0004 0400     		.2byte	0x4
 2207 0006 00000000 		.4byte	.Ldebug_abbrev0
 2208 000a 04       		.byte	0x4
 2209 000b 01       		.uleb128 0x1
 2210 000c 1F010000 		.4byte	.LASF88
 2211 0010 01       		.byte	0x1
 2212 0011 3B030000 		.4byte	.LASF89
 2213 0015 BE020000 		.4byte	.LASF90
 2214 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2215 001d 00000000 		.4byte	0
 2216 0021 00000000 		.4byte	.Ldebug_line0
 2217 0025 02       		.uleb128 0x2
 2218 0026 01       		.byte	0x1
 2219 0027 06       		.byte	0x6
 2220 0028 2F020000 		.4byte	.LASF0
 2221 002c 03       		.uleb128 0x3
 2222 002d 29040000 		.4byte	.LASF2
 2223 0031 02       		.byte	0x2
 2224 0032 1D       		.byte	0x1d
 2225 0033 37000000 		.4byte	0x37
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 52


 2226 0037 02       		.uleb128 0x2
 2227 0038 01       		.byte	0x1
 2228 0039 08       		.byte	0x8
 2229 003a 0F020000 		.4byte	.LASF1
 2230 003e 03       		.uleb128 0x3
 2231 003f 8E030000 		.4byte	.LASF3
 2232 0043 02       		.byte	0x2
 2233 0044 29       		.byte	0x29
 2234 0045 49000000 		.4byte	0x49
 2235 0049 02       		.uleb128 0x2
 2236 004a 02       		.byte	0x2
 2237 004b 05       		.byte	0x5
 2238 004c BB000000 		.4byte	.LASF4
 2239 0050 02       		.uleb128 0x2
 2240 0051 02       		.byte	0x2
 2241 0052 07       		.byte	0x7
 2242 0053 77020000 		.4byte	.LASF5
 2243 0057 03       		.uleb128 0x3
 2244 0058 84030000 		.4byte	.LASF6
 2245 005c 02       		.byte	0x2
 2246 005d 3F       		.byte	0x3f
 2247 005e 62000000 		.4byte	0x62
 2248 0062 02       		.uleb128 0x2
 2249 0063 04       		.byte	0x4
 2250 0064 05       		.byte	0x5
 2251 0065 94020000 		.4byte	.LASF7
 2252 0069 03       		.uleb128 0x3
 2253 006a 71030000 		.4byte	.LASF8
 2254 006e 02       		.byte	0x2
 2255 006f 41       		.byte	0x41
 2256 0070 74000000 		.4byte	0x74
 2257 0074 02       		.uleb128 0x2
 2258 0075 04       		.byte	0x4
 2259 0076 07       		.byte	0x7
 2260 0077 47030000 		.4byte	.LASF9
 2261 007b 02       		.uleb128 0x2
 2262 007c 08       		.byte	0x8
 2263 007d 05       		.byte	0x5
 2264 007e 00010000 		.4byte	.LASF10
 2265 0082 02       		.uleb128 0x2
 2266 0083 08       		.byte	0x8
 2267 0084 07       		.byte	0x7
 2268 0085 3B020000 		.4byte	.LASF11
 2269 0089 04       		.uleb128 0x4
 2270 008a 04       		.byte	0x4
 2271 008b 05       		.byte	0x5
 2272 008c 696E7400 		.ascii	"int\000"
 2273 0090 02       		.uleb128 0x2
 2274 0091 04       		.byte	0x4
 2275 0092 07       		.byte	0x7
 2276 0093 65020000 		.4byte	.LASF12
 2277 0097 03       		.uleb128 0x3
 2278 0098 D5000000 		.4byte	.LASF13
 2279 009c 03       		.byte	0x3
 2280 009d 15       		.byte	0x15
 2281 009e 2C000000 		.4byte	0x2c
 2282 00a2 03       		.uleb128 0x3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 53


 2283 00a3 AA020000 		.4byte	.LASF14
 2284 00a7 03       		.byte	0x3
 2285 00a8 20       		.byte	0x20
 2286 00a9 3E000000 		.4byte	0x3e
 2287 00ad 03       		.uleb128 0x3
 2288 00ae A2020000 		.4byte	.LASF15
 2289 00b2 03       		.byte	0x3
 2290 00b3 2C       		.byte	0x2c
 2291 00b4 57000000 		.4byte	0x57
 2292 00b8 03       		.uleb128 0x3
 2293 00b9 52020000 		.4byte	.LASF16
 2294 00bd 03       		.byte	0x3
 2295 00be 2D       		.byte	0x2d
 2296 00bf 69000000 		.4byte	0x69
 2297 00c3 05       		.uleb128 0x5
 2298 00c4 B2020000 		.4byte	.LASF17
 2299 00c8 04       		.byte	0x4
 2300 00c9 9201     		.2byte	0x192
 2301 00cb 37000000 		.4byte	0x37
 2302 00cf 02       		.uleb128 0x2
 2303 00d0 04       		.byte	0x4
 2304 00d1 04       		.byte	0x4
 2305 00d2 EC000000 		.4byte	.LASF18
 2306 00d6 02       		.uleb128 0x2
 2307 00d7 08       		.byte	0x8
 2308 00d8 04       		.byte	0x4
 2309 00d9 6A030000 		.4byte	.LASF19
 2310 00dd 02       		.uleb128 0x2
 2311 00de 01       		.byte	0x1
 2312 00df 08       		.byte	0x8
 2313 00e0 8F020000 		.4byte	.LASF20
 2314 00e4 05       		.uleb128 0x5
 2315 00e5 42030000 		.4byte	.LASF21
 2316 00e9 04       		.byte	0x4
 2317 00ea 3C02     		.2byte	0x23c
 2318 00ec F0000000 		.4byte	0xf0
 2319 00f0 06       		.uleb128 0x6
 2320 00f1 C3000000 		.4byte	0xc3
 2321 00f5 02       		.uleb128 0x2
 2322 00f6 04       		.byte	0x4
 2323 00f7 07       		.byte	0x7
 2324 00f8 A3030000 		.4byte	.LASF22
 2325 00fc 07       		.uleb128 0x7
 2326 00fd 04       		.byte	0x4
 2327 00fe DD000000 		.4byte	0xdd
 2328 0102 03       		.uleb128 0x3
 2329 0103 1D020000 		.4byte	.LASF23
 2330 0107 05       		.byte	0x5
 2331 0108 7E       		.byte	0x7e
 2332 0109 0D010000 		.4byte	0x10d
 2333 010d 08       		.uleb128 0x8
 2334 010e 1D020000 		.4byte	.LASF23
 2335 0112 07       		.uleb128 0x7
 2336 0113 04       		.byte	0x4
 2337 0114 02010000 		.4byte	0x102
 2338 0118 02       		.uleb128 0x2
 2339 0119 08       		.byte	0x8
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 54


 2340 011a 04       		.byte	0x4
 2341 011b F4010000 		.4byte	.LASF24
 2342 011f 09       		.uleb128 0x9
 2343 0120 43000000 		.4byte	.LASF32
 2344 0124 01       		.byte	0x1
 2345 0125 06       		.byte	0x6
 2346 0126 35       		.byte	0x35
 2347 0127 56010000 		.4byte	0x156
 2348 012b 0A       		.uleb128 0xa
 2349 012c 36000000 		.4byte	.LASF25
 2350 0130 00       		.sleb128 0
 2351 0131 0A       		.uleb128 0xa
 2352 0132 00020000 		.4byte	.LASF26
 2353 0136 01       		.sleb128 1
 2354 0137 0A       		.uleb128 0xa
 2355 0138 59030000 		.4byte	.LASF27
 2356 013c 02       		.sleb128 2
 2357 013d 0A       		.uleb128 0xa
 2358 013e 71000000 		.4byte	.LASF28
 2359 0142 03       		.sleb128 3
 2360 0143 0A       		.uleb128 0xa
 2361 0144 0D000000 		.4byte	.LASF29
 2362 0148 04       		.sleb128 4
 2363 0149 0A       		.uleb128 0xa
 2364 014a 16010000 		.4byte	.LASF30
 2365 014e 05       		.sleb128 5
 2366 014f 0A       		.uleb128 0xa
 2367 0150 E1010000 		.4byte	.LASF31
 2368 0154 06       		.sleb128 6
 2369 0155 00       		.byte	0
 2370 0156 03       		.uleb128 0x3
 2371 0157 43000000 		.4byte	.LASF32
 2372 015b 06       		.byte	0x6
 2373 015c 3D       		.byte	0x3d
 2374 015d 1F010000 		.4byte	0x11f
 2375 0161 0B       		.uleb128 0xb
 2376 0162 8A000000 		.4byte	.LASF33
 2377 0166 01       		.byte	0x1
 2378 0167 6B       		.byte	0x6b
 2379 0168 00000000 		.4byte	.LFB63
 2380 016c 20000000 		.4byte	.LFE63-.LFB63
 2381 0170 01       		.uleb128 0x1
 2382 0171 9C       		.byte	0x9c
 2383 0172 0C       		.uleb128 0xc
 2384 0173 FB030000 		.4byte	.LASF34
 2385 0177 01       		.byte	0x1
 2386 0178 72       		.byte	0x72
 2387 0179 00000000 		.4byte	.LFB64
 2388 017d 40000000 		.4byte	.LFE64-.LFB64
 2389 0181 01       		.uleb128 0x1
 2390 0182 9C       		.byte	0x9c
 2391 0183 0C       		.uleb128 0xc
 2392 0184 25030000 		.4byte	.LASF35
 2393 0188 01       		.byte	0x1
 2394 0189 7B       		.byte	0x7b
 2395 018a 00000000 		.4byte	.LFB65
 2396 018e 9C000000 		.4byte	.LFE65-.LFB65
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 55


 2397 0192 01       		.uleb128 0x1
 2398 0193 9C       		.byte	0x9c
 2399 0194 0B       		.uleb128 0xb
 2400 0195 CB030000 		.4byte	.LASF36
 2401 0199 01       		.byte	0x1
 2402 019a 8C       		.byte	0x8c
 2403 019b 00000000 		.4byte	.LFB66
 2404 019f 50000000 		.4byte	.LFE66-.LFB66
 2405 01a3 01       		.uleb128 0x1
 2406 01a4 9C       		.byte	0x9c
 2407 01a5 0D       		.uleb128 0xd
 2408 01a6 9D020000 		.4byte	.LASF91
 2409 01aa 01       		.byte	0x1
 2410 01ab 96       		.byte	0x96
 2411 01ac 89000000 		.4byte	0x89
 2412 01b0 00000000 		.4byte	.LFB67
 2413 01b4 8C0B0000 		.4byte	.LFE67-.LFB67
 2414 01b8 01       		.uleb128 0x1
 2415 01b9 9C       		.byte	0x9c
 2416 01ba 65030000 		.4byte	0x365
 2417 01be 0E       		.uleb128 0xe
 2418 01bf 6E756D00 		.ascii	"num\000"
 2419 01c3 01       		.byte	0x1
 2420 01c4 98       		.byte	0x98
 2421 01c5 89000000 		.4byte	0x89
 2422 01c9 02       		.uleb128 0x2
 2423 01ca 91       		.byte	0x91
 2424 01cb 5C       		.sleb128 -36
 2425 01cc 0F       		.uleb128 0xf
 2426 01cd E3000000 		.4byte	.LASF37
 2427 01d1 01       		.byte	0x1
 2428 01d2 98       		.byte	0x98
 2429 01d3 89000000 		.4byte	0x89
 2430 01d7 02       		.uleb128 0x2
 2431 01d8 91       		.byte	0x91
 2432 01d9 58       		.sleb128 -40
 2433 01da 0F       		.uleb128 0xf
 2434 01db B2010000 		.4byte	.LASF38
 2435 01df 01       		.byte	0x1
 2436 01e0 99       		.byte	0x99
 2437 01e1 CF000000 		.4byte	0xcf
 2438 01e5 02       		.uleb128 0x2
 2439 01e6 91       		.byte	0x91
 2440 01e7 54       		.sleb128 -44
 2441 01e8 0F       		.uleb128 0xf
 2442 01e9 72020000 		.4byte	.LASF39
 2443 01ed 01       		.byte	0x1
 2444 01ee 99       		.byte	0x99
 2445 01ef CF000000 		.4byte	0xcf
 2446 01f3 02       		.uleb128 0x2
 2447 01f4 91       		.byte	0x91
 2448 01f5 50       		.sleb128 -48
 2449 01f6 0F       		.uleb128 0xf
 2450 01f7 B2030000 		.4byte	.LASF40
 2451 01fb 01       		.byte	0x1
 2452 01fc 99       		.byte	0x99
 2453 01fd CF000000 		.4byte	0xcf
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 56


 2454 0201 02       		.uleb128 0x2
 2455 0202 91       		.byte	0x91
 2456 0203 4C       		.sleb128 -52
 2457 0204 0F       		.uleb128 0xf
 2458 0205 AE000000 		.4byte	.LASF41
 2459 0209 01       		.byte	0x1
 2460 020a 99       		.byte	0x99
 2461 020b CF000000 		.4byte	0xcf
 2462 020f 02       		.uleb128 0x2
 2463 0210 91       		.byte	0x91
 2464 0211 6C       		.sleb128 -20
 2465 0212 0E       		.uleb128 0xe
 2466 0213 62756600 		.ascii	"buf\000"
 2467 0217 01       		.byte	0x1
 2468 0218 9A       		.byte	0x9a
 2469 0219 65030000 		.4byte	0x365
 2470 021d 03       		.uleb128 0x3
 2471 021e 91       		.byte	0x91
 2472 021f 907F     		.sleb128 -112
 2473 0221 0F       		.uleb128 0xf
 2474 0222 7C030000 		.4byte	.LASF42
 2475 0226 01       		.byte	0x1
 2476 0227 9A       		.byte	0x9a
 2477 0228 75030000 		.4byte	0x375
 2478 022c 03       		.uleb128 0x3
 2479 022d 91       		.byte	0x91
 2480 022e FC7E     		.sleb128 -132
 2481 0230 0F       		.uleb128 0xf
 2482 0231 F5020000 		.4byte	.LASF43
 2483 0235 01       		.byte	0x1
 2484 0236 9A       		.byte	0x9a
 2485 0237 85030000 		.4byte	0x385
 2486 023b 03       		.uleb128 0x3
 2487 023c 91       		.byte	0x91
 2488 023d EC7E     		.sleb128 -148
 2489 023f 0F       		.uleb128 0xf
 2490 0240 98030000 		.4byte	.LASF44
 2491 0244 01       		.byte	0x1
 2492 0245 9B       		.byte	0x9b
 2493 0246 95030000 		.4byte	0x395
 2494 024a 03       		.uleb128 0x3
 2495 024b 91       		.byte	0x91
 2496 024c D87E     		.sleb128 -168
 2497 024e 0F       		.uleb128 0xf
 2498 024f 15040000 		.4byte	.LASF45
 2499 0253 01       		.byte	0x1
 2500 0254 9C       		.byte	0x9c
 2501 0255 85030000 		.4byte	0x385
 2502 0259 03       		.uleb128 0x3
 2503 025a 91       		.byte	0x91
 2504 025b C87E     		.sleb128 -184
 2505 025d 0F       		.uleb128 0xf
 2506 025e 9F000000 		.4byte	.LASF46
 2507 0262 01       		.byte	0x1
 2508 0263 9D       		.byte	0x9d
 2509 0264 A5030000 		.4byte	0x3a5
 2510 0268 03       		.uleb128 0x3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 57


 2511 0269 91       		.byte	0x91
 2512 026a B47E     		.sleb128 -204
 2513 026c 0F       		.uleb128 0xf
 2514 026d 0D030000 		.4byte	.LASF47
 2515 0271 01       		.byte	0x1
 2516 0272 9E       		.byte	0x9e
 2517 0273 A5030000 		.4byte	0x3a5
 2518 0277 03       		.uleb128 0x3
 2519 0278 91       		.byte	0x91
 2520 0279 A07E     		.sleb128 -224
 2521 027b 0F       		.uleb128 0xf
 2522 027c D8010000 		.4byte	.LASF48
 2523 0280 01       		.byte	0x1
 2524 0281 9F       		.byte	0x9f
 2525 0282 B5030000 		.4byte	0x3b5
 2526 0286 03       		.uleb128 0x3
 2527 0287 91       		.byte	0x91
 2528 0288 907E     		.sleb128 -240
 2529 028a 0F       		.uleb128 0xf
 2530 028b F2000000 		.4byte	.LASF49
 2531 028f 01       		.byte	0x1
 2532 0290 A0       		.byte	0xa0
 2533 0291 89000000 		.4byte	0x89
 2534 0295 02       		.uleb128 0x2
 2535 0296 91       		.byte	0x91
 2536 0297 68       		.sleb128 -24
 2537 0298 0F       		.uleb128 0xf
 2538 0299 DD000000 		.4byte	.LASF50
 2539 029d 01       		.byte	0x1
 2540 029e A0       		.byte	0xa0
 2541 029f 89000000 		.4byte	0x89
 2542 02a3 02       		.uleb128 0x2
 2543 02a4 91       		.byte	0x91
 2544 02a5 64       		.sleb128 -28
 2545 02a6 0F       		.uleb128 0xf
 2546 02a7 CA010000 		.4byte	.LASF51
 2547 02ab 01       		.byte	0x1
 2548 02ac A0       		.byte	0xa0
 2549 02ad 89000000 		.4byte	0x89
 2550 02b1 02       		.uleb128 0x2
 2551 02b2 91       		.byte	0x91
 2552 02b3 60       		.sleb128 -32
 2553 02b4 10       		.uleb128 0x10
 2554 02b5 617800   		.ascii	"ax\000"
 2555 02b8 01       		.byte	0x1
 2556 02b9 A2       		.byte	0xa2
 2557 02ba A2000000 		.4byte	0xa2
 2558 02be 10       		.uleb128 0x10
 2559 02bf 617900   		.ascii	"ay\000"
 2560 02c2 01       		.byte	0x1
 2561 02c3 A2       		.byte	0xa2
 2562 02c4 A2000000 		.4byte	0xa2
 2563 02c8 0E       		.uleb128 0xe
 2564 02c9 617A00   		.ascii	"az\000"
 2565 02cc 01       		.byte	0x1
 2566 02cd A2       		.byte	0xa2
 2567 02ce A2000000 		.4byte	0xa2
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 58


 2568 02d2 02       		.uleb128 0x2
 2569 02d3 91       		.byte	0x91
 2570 02d4 42       		.sleb128 -62
 2571 02d5 10       		.uleb128 0x10
 2572 02d6 6900     		.ascii	"i\000"
 2573 02d8 01       		.byte	0x1
 2574 02d9 A2       		.byte	0xa2
 2575 02da A2000000 		.4byte	0xa2
 2576 02de 0E       		.uleb128 0xe
 2577 02df 677800   		.ascii	"gx\000"
 2578 02e2 01       		.byte	0x1
 2579 02e3 A3       		.byte	0xa3
 2580 02e4 A2000000 		.4byte	0xa2
 2581 02e8 03       		.uleb128 0x3
 2582 02e9 91       		.byte	0x91
 2583 02ea 8E7E     		.sleb128 -242
 2584 02ec 0E       		.uleb128 0xe
 2585 02ed 677900   		.ascii	"gy\000"
 2586 02f0 01       		.byte	0x1
 2587 02f1 A3       		.byte	0xa3
 2588 02f2 A2000000 		.4byte	0xa2
 2589 02f6 03       		.uleb128 0x3
 2590 02f7 91       		.byte	0x91
 2591 02f8 8C7E     		.sleb128 -244
 2592 02fa 0E       		.uleb128 0xe
 2593 02fb 677A00   		.ascii	"gz\000"
 2594 02fe 01       		.byte	0x1
 2595 02ff A3       		.byte	0xa3
 2596 0300 A2000000 		.4byte	0xa2
 2597 0304 03       		.uleb128 0x3
 2598 0305 91       		.byte	0x91
 2599 0306 8A7E     		.sleb128 -246
 2600 0308 0F       		.uleb128 0xf
 2601 0309 04030000 		.4byte	.LASF52
 2602 030d 01       		.byte	0x1
 2603 030e A4       		.byte	0xa4
 2604 030f A2000000 		.4byte	0xa2
 2605 0313 02       		.uleb128 0x2
 2606 0314 91       		.byte	0x91
 2607 0315 4A       		.sleb128 -54
 2608 0316 0F       		.uleb128 0xf
 2609 0317 AD010000 		.4byte	.LASF53
 2610 031b 01       		.byte	0x1
 2611 031c A5       		.byte	0xa5
 2612 031d 89000000 		.4byte	0x89
 2613 0321 03       		.uleb128 0x3
 2614 0322 91       		.byte	0x91
 2615 0323 847E     		.sleb128 -252
 2616 0325 0F       		.uleb128 0xf
 2617 0326 F0020000 		.4byte	.LASF54
 2618 032a 01       		.byte	0x1
 2619 032b A5       		.byte	0xa5
 2620 032c 89000000 		.4byte	0x89
 2621 0330 02       		.uleb128 0x2
 2622 0331 91       		.byte	0x91
 2623 0332 44       		.sleb128 -60
 2624 0333 11       		.uleb128 0x11
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 59


 2625 0334 5A010000 		.4byte	.LBB2
 2626 0338 FE090000 		.4byte	.LBE2-.LBB2
 2627 033c 12       		.uleb128 0x12
 2628 033d 7400     		.ascii	"t\000"
 2629 033f 01       		.byte	0x1
 2630 0340 1501     		.2byte	0x115
 2631 0342 89000000 		.4byte	0x89
 2632 0346 03       		.uleb128 0x3
 2633 0347 91       		.byte	0x91
 2634 0348 807E     		.sleb128 -256
 2635 034a 11       		.uleb128 0x11
 2636 034b 00020000 		.4byte	.LBB3
 2637 034f 62000000 		.4byte	.LBE3-.LBB3
 2638 0353 0F       		.uleb128 0xf
 2639 0354 4A000000 		.4byte	.LASF55
 2640 0358 01       		.byte	0x1
 2641 0359 F1       		.byte	0xf1
 2642 035a C5030000 		.4byte	0x3c5
 2643 035e 03       		.uleb128 0x3
 2644 035f 91       		.byte	0x91
 2645 0360 C47D     		.sleb128 -316
 2646 0362 00       		.byte	0
 2647 0363 00       		.byte	0
 2648 0364 00       		.byte	0
 2649 0365 13       		.uleb128 0x13
 2650 0366 DD000000 		.4byte	0xdd
 2651 036a 75030000 		.4byte	0x375
 2652 036e 14       		.uleb128 0x14
 2653 036f F5000000 		.4byte	0xf5
 2654 0373 31       		.byte	0x31
 2655 0374 00       		.byte	0
 2656 0375 13       		.uleb128 0x13
 2657 0376 DD000000 		.4byte	0xdd
 2658 037a 85030000 		.4byte	0x385
 2659 037e 14       		.uleb128 0x14
 2660 037f F5000000 		.4byte	0xf5
 2661 0383 13       		.byte	0x13
 2662 0384 00       		.byte	0
 2663 0385 13       		.uleb128 0x13
 2664 0386 DD000000 		.4byte	0xdd
 2665 038a 95030000 		.4byte	0x395
 2666 038e 14       		.uleb128 0x14
 2667 038f F5000000 		.4byte	0xf5
 2668 0393 0D       		.byte	0xd
 2669 0394 00       		.byte	0
 2670 0395 13       		.uleb128 0x13
 2671 0396 DD000000 		.4byte	0xdd
 2672 039a A5030000 		.4byte	0x3a5
 2673 039e 14       		.uleb128 0x14
 2674 039f F5000000 		.4byte	0xf5
 2675 03a3 12       		.byte	0x12
 2676 03a4 00       		.byte	0
 2677 03a5 13       		.uleb128 0x13
 2678 03a6 DD000000 		.4byte	0xdd
 2679 03aa B5030000 		.4byte	0x3b5
 2680 03ae 14       		.uleb128 0x14
 2681 03af F5000000 		.4byte	0xf5
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 60


 2682 03b3 10       		.byte	0x10
 2683 03b4 00       		.byte	0
 2684 03b5 13       		.uleb128 0x13
 2685 03b6 DD000000 		.4byte	0xdd
 2686 03ba C5030000 		.4byte	0x3c5
 2687 03be 14       		.uleb128 0x14
 2688 03bf F5000000 		.4byte	0xf5
 2689 03c3 0F       		.byte	0xf
 2690 03c4 00       		.byte	0
 2691 03c5 13       		.uleb128 0x13
 2692 03c6 DD000000 		.4byte	0xdd
 2693 03ca D5030000 		.4byte	0x3d5
 2694 03ce 14       		.uleb128 0x14
 2695 03cf F5000000 		.4byte	0xf5
 2696 03d3 3B       		.byte	0x3b
 2697 03d4 00       		.byte	0
 2698 03d5 15       		.uleb128 0x15
 2699 03d6 E5030000 		.4byte	.LASF92
 2700 03da 01       		.byte	0x1
 2701 03db 1A02     		.2byte	0x21a
 2702 03dd 89000000 		.4byte	0x89
 2703 03e1 00000000 		.4byte	.LFB68
 2704 03e5 30010000 		.4byte	.LFE68-.LFB68
 2705 03e9 01       		.uleb128 0x1
 2706 03ea 9C       		.byte	0x9c
 2707 03eb 0E040000 		.4byte	0x40e
 2708 03ef 16       		.uleb128 0x16
 2709 03f0 81000000 		.4byte	.LASF93
 2710 03f4 01       		.byte	0x1
 2711 03f5 1A02     		.2byte	0x21a
 2712 03f7 FC000000 		.4byte	0xfc
 2713 03fb 02       		.uleb128 0x2
 2714 03fc 91       		.byte	0x91
 2715 03fd 64       		.sleb128 -28
 2716 03fe 17       		.uleb128 0x17
 2717 03ff EE030000 		.4byte	.LASF56
 2718 0403 01       		.byte	0x1
 2719 0404 1B02     		.2byte	0x21b
 2720 0406 89000000 		.4byte	0x89
 2721 040a 02       		.uleb128 0x2
 2722 040b 91       		.byte	0x91
 2723 040c 6C       		.sleb128 -20
 2724 040d 00       		.byte	0
 2725 040e 18       		.uleb128 0x18
 2726 040f D8030000 		.4byte	.LASF57
 2727 0413 07       		.byte	0x7
 2728 0414 9606     		.2byte	0x696
 2729 0416 1A040000 		.4byte	0x41a
 2730 041a 06       		.uleb128 0x6
 2731 041b AD000000 		.4byte	0xad
 2732 041f 19       		.uleb128 0x19
 2733 0420 55000000 		.4byte	.LASF58
 2734 0424 08       		.byte	0x8
 2735 0425 9101     		.2byte	0x191
 2736 0427 97000000 		.4byte	0x97
 2737 042b 05       		.uleb128 0x5
 2738 042c 03       		.byte	0x3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 61


 2739 042d 00000000 		.4byte	devAddr
 2740 0431 13       		.uleb128 0x13
 2741 0432 97000000 		.4byte	0x97
 2742 0436 41040000 		.4byte	0x441
 2743 043a 14       		.uleb128 0x14
 2744 043b F5000000 		.4byte	0xf5
 2745 043f 15       		.byte	0x15
 2746 0440 00       		.byte	0
 2747 0441 19       		.uleb128 0x19
 2748 0442 1E030000 		.4byte	.LASF59
 2749 0446 08       		.byte	0x8
 2750 0447 9201     		.2byte	0x192
 2751 0449 31040000 		.4byte	0x431
 2752 044d 05       		.uleb128 0x5
 2753 044e 03       		.byte	0x3
 2754 044f 00000000 		.4byte	buffer
 2755 0453 1A       		.uleb128 0x1a
 2756 0454 50000000 		.4byte	.LASF60
 2757 0458 01       		.byte	0x1
 2758 0459 34       		.byte	0x34
 2759 045a B8000000 		.4byte	0xb8
 2760 045e 05       		.uleb128 0x5
 2761 045f 03       		.byte	0x3
 2762 0460 00000000 		.4byte	Addr
 2763 0464 1B       		.uleb128 0x1b
 2764 0465 696400   		.ascii	"id\000"
 2765 0468 01       		.byte	0x1
 2766 0469 35       		.byte	0x35
 2767 046a 62000000 		.4byte	0x62
 2768 046e 05       		.uleb128 0x5
 2769 046f 03       		.byte	0x3
 2770 0470 00000000 		.4byte	id
 2771 0474 1A       		.uleb128 0x1a
 2772 0475 C1010000 		.4byte	.LASF61
 2773 0479 01       		.byte	0x1
 2774 047a 35       		.byte	0x35
 2775 047b 62000000 		.4byte	0x62
 2776 047f 05       		.uleb128 0x5
 2777 0480 03       		.byte	0x3
 2778 0481 00000000 		.4byte	press_id
 2779 0485 1A       		.uleb128 0x1a
 2780 0486 5B020000 		.4byte	.LASF62
 2781 048a 01       		.byte	0x1
 2782 048b 36       		.byte	0x36
 2783 048c 62000000 		.4byte	0x62
 2784 0490 05       		.uleb128 0x5
 2785 0491 03       		.byte	0x3
 2786 0492 00000000 		.4byte	data_time
 2787 0496 1A       		.uleb128 0x1a
 2788 0497 00000000 		.4byte	.LASF63
 2789 049b 01       		.byte	0x1
 2790 049c 37       		.byte	0x37
 2791 049d 62000000 		.4byte	0x62
 2792 04a1 05       		.uleb128 0x5
 2793 04a2 03       		.byte	0x3
 2794 04a3 00000000 		.4byte	descent_time
 2795 04a7 1B       		.uleb128 0x1b
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 62


 2796 04a8 73756D00 		.ascii	"sum\000"
 2797 04ac 01       		.byte	0x1
 2798 04ad 39       		.byte	0x39
 2799 04ae 62000000 		.4byte	0x62
 2800 04b2 05       		.uleb128 0x5
 2801 04b3 03       		.byte	0x3
 2802 04b4 00000000 		.4byte	sum
 2803 04b8 1A       		.uleb128 0x1a
 2804 04b9 E7010000 		.4byte	.LASF64
 2805 04bd 01       		.byte	0x1
 2806 04be 3A       		.byte	0x3a
 2807 04bf CF000000 		.4byte	0xcf
 2808 04c3 05       		.uleb128 0x5
 2809 04c4 03       		.byte	0x3
 2810 04c5 00000000 		.4byte	pressure_sum
 2811 04c9 1A       		.uleb128 0x1a
 2812 04ca 0E010000 		.4byte	.LASF65
 2813 04ce 01       		.byte	0x1
 2814 04cf 3B       		.byte	0x3b
 2815 04d0 A2000000 		.4byte	0xa2
 2816 04d4 05       		.uleb128 0x5
 2817 04d5 03       		.byte	0x3
 2818 04d6 00000000 		.4byte	average
 2819 04da 1A       		.uleb128 0x1a
 2820 04db BE030000 		.4byte	.LASF66
 2821 04df 01       		.byte	0x1
 2822 04e0 3C       		.byte	0x3c
 2823 04e1 EB040000 		.4byte	0x4eb
 2824 04e5 05       		.uleb128 0x5
 2825 04e6 03       		.byte	0x3
 2826 04e7 00000000 		.4byte	collect_flag
 2827 04eb 02       		.uleb128 0x2
 2828 04ec 01       		.byte	0x1
 2829 04ed 02       		.byte	0x2
 2830 04ee B8020000 		.4byte	.LASF67
 2831 04f2 1A       		.uleb128 0x1a
 2832 04f3 1F040000 		.4byte	.LASF68
 2833 04f7 01       		.byte	0x1
 2834 04f8 3D       		.byte	0x3d
 2835 04f9 EB040000 		.4byte	0x4eb
 2836 04fd 05       		.uleb128 0x5
 2837 04fe 03       		.byte	0x3
 2838 04ff 00000000 		.4byte	wait_flag
 2839 0503 1A       		.uleb128 0x1a
 2840 0504 C5000000 		.4byte	.LASF69
 2841 0508 01       		.byte	0x1
 2842 0509 3E       		.byte	0x3e
 2843 050a EB040000 		.4byte	0x4eb
 2844 050e 05       		.uleb128 0x5
 2845 050f 03       		.byte	0x3
 2846 0510 00000000 		.4byte	PANIC_flag
 2847 0514 1A       		.uleb128 0x1a
 2848 0515 AC030000 		.4byte	.LASF70
 2849 0519 01       		.byte	0x1
 2850 051a 40       		.byte	0x40
 2851 051b 56010000 		.4byte	0x156
 2852 051f 05       		.uleb128 0x5
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 63


 2853 0520 03       		.byte	0x3
 2854 0521 00000000 		.4byte	STATE
 2855 0525 1A       		.uleb128 0x1a
 2856 0526 25020000 		.4byte	.LASF71
 2857 052a 01       		.byte	0x1
 2858 052b 41       		.byte	0x41
 2859 052c 97000000 		.4byte	0x97
 2860 0530 05       		.uleb128 0x5
 2861 0531 03       		.byte	0x3
 2862 0532 00000000 		.4byte	countdown
 2863 0536 1A       		.uleb128 0x1a
 2864 0537 21000000 		.4byte	.LASF72
 2865 053b 01       		.byte	0x1
 2866 053c 41       		.byte	0x41
 2867 053d 97000000 		.4byte	0x97
 2868 0541 05       		.uleb128 0x5
 2869 0542 03       		.byte	0x3
 2870 0543 00000000 		.4byte	update_Data
 2871 0547 13       		.uleb128 0x13
 2872 0548 97000000 		.4byte	0x97
 2873 054c 57050000 		.4byte	0x557
 2874 0550 14       		.uleb128 0x14
 2875 0551 F5000000 		.4byte	0xf5
 2876 0555 3F       		.byte	0x3f
 2877 0556 00       		.byte	0
 2878 0557 1A       		.uleb128 0x1a
 2879 0558 2D000000 		.4byte	.LASF73
 2880 055c 01       		.byte	0x1
 2881 055d 42       		.byte	0x42
 2882 055e 47050000 		.4byte	0x547
 2883 0562 05       		.uleb128 0x5
 2884 0563 03       		.byte	0x3
 2885 0564 00000000 		.4byte	RxBuffer
 2886 0568 1A       		.uleb128 0x1a
 2887 0569 17000000 		.4byte	.LASF74
 2888 056d 01       		.byte	0x1
 2889 056e 43       		.byte	0x43
 2890 056f 89000000 		.4byte	0x89
 2891 0573 05       		.uleb128 0x5
 2892 0574 03       		.byte	0x3
 2893 0575 00000000 		.4byte	msg_count
 2894 0579 1A       		.uleb128 0x1a
 2895 057a 17030000 		.4byte	.LASF75
 2896 057e 01       		.byte	0x1
 2897 057f 43       		.byte	0x43
 2898 0580 89000000 		.4byte	0x89
 2899 0584 05       		.uleb128 0x5
 2900 0585 03       		.byte	0x3
 2901 0586 00000000 		.4byte	rxflag
 2902 058a 1A       		.uleb128 0x1a
 2903 058b 64030000 		.4byte	.LASF76
 2904 058f 01       		.byte	0x1
 2905 0590 43       		.byte	0x43
 2906 0591 89000000 		.4byte	0x89
 2907 0595 05       		.uleb128 0x5
 2908 0596 03       		.byte	0x3
 2909 0597 00000000 		.4byte	bytes
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 64


 2910 059b 1A       		.uleb128 0x1a
 2911 059c 78000000 		.4byte	.LASF77
 2912 05a0 01       		.byte	0x1
 2913 05a1 43       		.byte	0x43
 2914 05a2 89000000 		.4byte	0x89
 2915 05a6 05       		.uleb128 0x5
 2916 05a7 03       		.byte	0x3
 2917 05a8 00000000 		.4byte	dataflag
 2918 05ac 1A       		.uleb128 0x1a
 2919 05ad 5D000000 		.4byte	.LASF78
 2920 05b1 01       		.byte	0x1
 2921 05b2 43       		.byte	0x43
 2922 05b3 89000000 		.4byte	0x89
 2923 05b7 05       		.uleb128 0x5
 2924 05b8 03       		.byte	0x3
 2925 05b9 00000000 		.4byte	transmit_flag
 2926 05bd 1A       		.uleb128 0x1a
 2927 05be FE020000 		.4byte	.LASF79
 2928 05c2 01       		.byte	0x1
 2929 05c3 44       		.byte	0x44
 2930 05c4 89000000 		.4byte	0x89
 2931 05c8 05       		.uleb128 0x5
 2932 05c9 03       		.byte	0x3
 2933 05ca 00000000 		.4byte	depth
 2934 05ce 1A       		.uleb128 0x1a
 2935 05cf 6B000000 		.4byte	.LASF80
 2936 05d3 01       		.byte	0x1
 2937 05d4 44       		.byte	0x44
 2938 05d5 89000000 		.4byte	0x89
 2939 05d9 05       		.uleb128 0x5
 2940 05da 03       		.byte	0x3
 2941 05db 00000000 		.4byte	reset
 2942 05df 1A       		.uleb128 0x1a
 2943 05e0 F6030000 		.4byte	.LASF81
 2944 05e4 01       		.byte	0x1
 2945 05e5 45       		.byte	0x45
 2946 05e6 CF000000 		.4byte	0xcf
 2947 05ea 05       		.uleb128 0x5
 2948 05eb 03       		.byte	0x3
 2949 05ec 00000000 		.4byte	xavg
 2950 05f0 1A       		.uleb128 0x1a
 2951 05f1 D0000000 		.4byte	.LASF82
 2952 05f5 01       		.byte	0x1
 2953 05f6 45       		.byte	0x45
 2954 05f7 CF000000 		.4byte	0xcf
 2955 05fb 05       		.uleb128 0x5
 2956 05fc 03       		.byte	0x3
 2957 05fd 00000000 		.4byte	yavg
 2958 0601 1A       		.uleb128 0x1a
 2959 0602 8A020000 		.4byte	.LASF83
 2960 0606 01       		.byte	0x1
 2961 0607 45       		.byte	0x45
 2962 0608 CF000000 		.4byte	0xcf
 2963 060c 05       		.uleb128 0x5
 2964 060d 03       		.byte	0x3
 2965 060e 00000000 		.4byte	xsum
 2966 0612 1A       		.uleb128 0x1a
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 65


 2967 0613 B9030000 		.4byte	.LASF84
 2968 0617 01       		.byte	0x1
 2969 0618 45       		.byte	0x45
 2970 0619 CF000000 		.4byte	0xcf
 2971 061d 05       		.uleb128 0x5
 2972 061e 03       		.byte	0x3
 2973 061f 00000000 		.4byte	ysum
 2974 0623 13       		.uleb128 0x13
 2975 0624 DD000000 		.4byte	0xdd
 2976 0628 33060000 		.4byte	0x633
 2977 062c 14       		.uleb128 0x14
 2978 062d F5000000 		.4byte	0xf5
 2979 0631 0A       		.byte	0xa
 2980 0632 00       		.byte	0
 2981 0633 1A       		.uleb128 0x1a
 2982 0634 A9000000 		.4byte	.LASF85
 2983 0638 01       		.byte	0x1
 2984 0639 46       		.byte	0x46
 2985 063a 23060000 		.4byte	0x623
 2986 063e 05       		.uleb128 0x5
 2987 063f 03       		.byte	0x3
 2988 0640 00000000 		.4byte	file
 2989 0644 13       		.uleb128 0x13
 2990 0645 DD000000 		.4byte	0xdd
 2991 0649 54060000 		.4byte	0x654
 2992 064d 14       		.uleb128 0x14
 2993 064e F5000000 		.4byte	0xf5
 2994 0652 09       		.byte	0x9
 2995 0653 00       		.byte	0
 2996 0654 1A       		.uleb128 0x1a
 2997 0655 BA010000 		.4byte	.LASF86
 2998 0659 01       		.byte	0x1
 2999 065a 47       		.byte	0x47
 3000 065b 44060000 		.4byte	0x644
 3001 065f 05       		.uleb128 0x5
 3002 0660 03       		.byte	0x3
 3003 0661 00000000 		.4byte	volume
 3004 0665 1A       		.uleb128 0x1a
 3005 0666 0E040000 		.4byte	.LASF87
 3006 066a 01       		.byte	0x1
 3007 066b 48       		.byte	0x48
 3008 066c 12010000 		.4byte	0x112
 3009 0670 05       		.uleb128 0x5
 3010 0671 03       		.byte	0x3
 3011 0672 00000000 		.4byte	fsfile
 3012 0676 00       		.byte	0
 3013              		.section	.debug_abbrev,"",%progbits
 3014              	.Ldebug_abbrev0:
 3015 0000 01       		.uleb128 0x1
 3016 0001 11       		.uleb128 0x11
 3017 0002 01       		.byte	0x1
 3018 0003 25       		.uleb128 0x25
 3019 0004 0E       		.uleb128 0xe
 3020 0005 13       		.uleb128 0x13
 3021 0006 0B       		.uleb128 0xb
 3022 0007 03       		.uleb128 0x3
 3023 0008 0E       		.uleb128 0xe
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 66


 3024 0009 1B       		.uleb128 0x1b
 3025 000a 0E       		.uleb128 0xe
 3026 000b 55       		.uleb128 0x55
 3027 000c 17       		.uleb128 0x17
 3028 000d 11       		.uleb128 0x11
 3029 000e 01       		.uleb128 0x1
 3030 000f 10       		.uleb128 0x10
 3031 0010 17       		.uleb128 0x17
 3032 0011 00       		.byte	0
 3033 0012 00       		.byte	0
 3034 0013 02       		.uleb128 0x2
 3035 0014 24       		.uleb128 0x24
 3036 0015 00       		.byte	0
 3037 0016 0B       		.uleb128 0xb
 3038 0017 0B       		.uleb128 0xb
 3039 0018 3E       		.uleb128 0x3e
 3040 0019 0B       		.uleb128 0xb
 3041 001a 03       		.uleb128 0x3
 3042 001b 0E       		.uleb128 0xe
 3043 001c 00       		.byte	0
 3044 001d 00       		.byte	0
 3045 001e 03       		.uleb128 0x3
 3046 001f 16       		.uleb128 0x16
 3047 0020 00       		.byte	0
 3048 0021 03       		.uleb128 0x3
 3049 0022 0E       		.uleb128 0xe
 3050 0023 3A       		.uleb128 0x3a
 3051 0024 0B       		.uleb128 0xb
 3052 0025 3B       		.uleb128 0x3b
 3053 0026 0B       		.uleb128 0xb
 3054 0027 49       		.uleb128 0x49
 3055 0028 13       		.uleb128 0x13
 3056 0029 00       		.byte	0
 3057 002a 00       		.byte	0
 3058 002b 04       		.uleb128 0x4
 3059 002c 24       		.uleb128 0x24
 3060 002d 00       		.byte	0
 3061 002e 0B       		.uleb128 0xb
 3062 002f 0B       		.uleb128 0xb
 3063 0030 3E       		.uleb128 0x3e
 3064 0031 0B       		.uleb128 0xb
 3065 0032 03       		.uleb128 0x3
 3066 0033 08       		.uleb128 0x8
 3067 0034 00       		.byte	0
 3068 0035 00       		.byte	0
 3069 0036 05       		.uleb128 0x5
 3070 0037 16       		.uleb128 0x16
 3071 0038 00       		.byte	0
 3072 0039 03       		.uleb128 0x3
 3073 003a 0E       		.uleb128 0xe
 3074 003b 3A       		.uleb128 0x3a
 3075 003c 0B       		.uleb128 0xb
 3076 003d 3B       		.uleb128 0x3b
 3077 003e 05       		.uleb128 0x5
 3078 003f 49       		.uleb128 0x49
 3079 0040 13       		.uleb128 0x13
 3080 0041 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 67


 3081 0042 00       		.byte	0
 3082 0043 06       		.uleb128 0x6
 3083 0044 35       		.uleb128 0x35
 3084 0045 00       		.byte	0
 3085 0046 49       		.uleb128 0x49
 3086 0047 13       		.uleb128 0x13
 3087 0048 00       		.byte	0
 3088 0049 00       		.byte	0
 3089 004a 07       		.uleb128 0x7
 3090 004b 0F       		.uleb128 0xf
 3091 004c 00       		.byte	0
 3092 004d 0B       		.uleb128 0xb
 3093 004e 0B       		.uleb128 0xb
 3094 004f 49       		.uleb128 0x49
 3095 0050 13       		.uleb128 0x13
 3096 0051 00       		.byte	0
 3097 0052 00       		.byte	0
 3098 0053 08       		.uleb128 0x8
 3099 0054 13       		.uleb128 0x13
 3100 0055 00       		.byte	0
 3101 0056 03       		.uleb128 0x3
 3102 0057 0E       		.uleb128 0xe
 3103 0058 3C       		.uleb128 0x3c
 3104 0059 19       		.uleb128 0x19
 3105 005a 00       		.byte	0
 3106 005b 00       		.byte	0
 3107 005c 09       		.uleb128 0x9
 3108 005d 04       		.uleb128 0x4
 3109 005e 01       		.byte	0x1
 3110 005f 03       		.uleb128 0x3
 3111 0060 0E       		.uleb128 0xe
 3112 0061 0B       		.uleb128 0xb
 3113 0062 0B       		.uleb128 0xb
 3114 0063 3A       		.uleb128 0x3a
 3115 0064 0B       		.uleb128 0xb
 3116 0065 3B       		.uleb128 0x3b
 3117 0066 0B       		.uleb128 0xb
 3118 0067 01       		.uleb128 0x1
 3119 0068 13       		.uleb128 0x13
 3120 0069 00       		.byte	0
 3121 006a 00       		.byte	0
 3122 006b 0A       		.uleb128 0xa
 3123 006c 28       		.uleb128 0x28
 3124 006d 00       		.byte	0
 3125 006e 03       		.uleb128 0x3
 3126 006f 0E       		.uleb128 0xe
 3127 0070 1C       		.uleb128 0x1c
 3128 0071 0D       		.uleb128 0xd
 3129 0072 00       		.byte	0
 3130 0073 00       		.byte	0
 3131 0074 0B       		.uleb128 0xb
 3132 0075 2E       		.uleb128 0x2e
 3133 0076 00       		.byte	0
 3134 0077 3F       		.uleb128 0x3f
 3135 0078 19       		.uleb128 0x19
 3136 0079 03       		.uleb128 0x3
 3137 007a 0E       		.uleb128 0xe
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 68


 3138 007b 3A       		.uleb128 0x3a
 3139 007c 0B       		.uleb128 0xb
 3140 007d 3B       		.uleb128 0x3b
 3141 007e 0B       		.uleb128 0xb
 3142 007f 27       		.uleb128 0x27
 3143 0080 19       		.uleb128 0x19
 3144 0081 11       		.uleb128 0x11
 3145 0082 01       		.uleb128 0x1
 3146 0083 12       		.uleb128 0x12
 3147 0084 06       		.uleb128 0x6
 3148 0085 40       		.uleb128 0x40
 3149 0086 18       		.uleb128 0x18
 3150 0087 9642     		.uleb128 0x2116
 3151 0089 19       		.uleb128 0x19
 3152 008a 00       		.byte	0
 3153 008b 00       		.byte	0
 3154 008c 0C       		.uleb128 0xc
 3155 008d 2E       		.uleb128 0x2e
 3156 008e 00       		.byte	0
 3157 008f 3F       		.uleb128 0x3f
 3158 0090 19       		.uleb128 0x19
 3159 0091 03       		.uleb128 0x3
 3160 0092 0E       		.uleb128 0xe
 3161 0093 3A       		.uleb128 0x3a
 3162 0094 0B       		.uleb128 0xb
 3163 0095 3B       		.uleb128 0x3b
 3164 0096 0B       		.uleb128 0xb
 3165 0097 27       		.uleb128 0x27
 3166 0098 19       		.uleb128 0x19
 3167 0099 11       		.uleb128 0x11
 3168 009a 01       		.uleb128 0x1
 3169 009b 12       		.uleb128 0x12
 3170 009c 06       		.uleb128 0x6
 3171 009d 40       		.uleb128 0x40
 3172 009e 18       		.uleb128 0x18
 3173 009f 9742     		.uleb128 0x2117
 3174 00a1 19       		.uleb128 0x19
 3175 00a2 00       		.byte	0
 3176 00a3 00       		.byte	0
 3177 00a4 0D       		.uleb128 0xd
 3178 00a5 2E       		.uleb128 0x2e
 3179 00a6 01       		.byte	0x1
 3180 00a7 3F       		.uleb128 0x3f
 3181 00a8 19       		.uleb128 0x19
 3182 00a9 03       		.uleb128 0x3
 3183 00aa 0E       		.uleb128 0xe
 3184 00ab 3A       		.uleb128 0x3a
 3185 00ac 0B       		.uleb128 0xb
 3186 00ad 3B       		.uleb128 0x3b
 3187 00ae 0B       		.uleb128 0xb
 3188 00af 49       		.uleb128 0x49
 3189 00b0 13       		.uleb128 0x13
 3190 00b1 11       		.uleb128 0x11
 3191 00b2 01       		.uleb128 0x1
 3192 00b3 12       		.uleb128 0x12
 3193 00b4 06       		.uleb128 0x6
 3194 00b5 40       		.uleb128 0x40
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 69


 3195 00b6 18       		.uleb128 0x18
 3196 00b7 9642     		.uleb128 0x2116
 3197 00b9 19       		.uleb128 0x19
 3198 00ba 01       		.uleb128 0x1
 3199 00bb 13       		.uleb128 0x13
 3200 00bc 00       		.byte	0
 3201 00bd 00       		.byte	0
 3202 00be 0E       		.uleb128 0xe
 3203 00bf 34       		.uleb128 0x34
 3204 00c0 00       		.byte	0
 3205 00c1 03       		.uleb128 0x3
 3206 00c2 08       		.uleb128 0x8
 3207 00c3 3A       		.uleb128 0x3a
 3208 00c4 0B       		.uleb128 0xb
 3209 00c5 3B       		.uleb128 0x3b
 3210 00c6 0B       		.uleb128 0xb
 3211 00c7 49       		.uleb128 0x49
 3212 00c8 13       		.uleb128 0x13
 3213 00c9 02       		.uleb128 0x2
 3214 00ca 18       		.uleb128 0x18
 3215 00cb 00       		.byte	0
 3216 00cc 00       		.byte	0
 3217 00cd 0F       		.uleb128 0xf
 3218 00ce 34       		.uleb128 0x34
 3219 00cf 00       		.byte	0
 3220 00d0 03       		.uleb128 0x3
 3221 00d1 0E       		.uleb128 0xe
 3222 00d2 3A       		.uleb128 0x3a
 3223 00d3 0B       		.uleb128 0xb
 3224 00d4 3B       		.uleb128 0x3b
 3225 00d5 0B       		.uleb128 0xb
 3226 00d6 49       		.uleb128 0x49
 3227 00d7 13       		.uleb128 0x13
 3228 00d8 02       		.uleb128 0x2
 3229 00d9 18       		.uleb128 0x18
 3230 00da 00       		.byte	0
 3231 00db 00       		.byte	0
 3232 00dc 10       		.uleb128 0x10
 3233 00dd 34       		.uleb128 0x34
 3234 00de 00       		.byte	0
 3235 00df 03       		.uleb128 0x3
 3236 00e0 08       		.uleb128 0x8
 3237 00e1 3A       		.uleb128 0x3a
 3238 00e2 0B       		.uleb128 0xb
 3239 00e3 3B       		.uleb128 0x3b
 3240 00e4 0B       		.uleb128 0xb
 3241 00e5 49       		.uleb128 0x49
 3242 00e6 13       		.uleb128 0x13
 3243 00e7 00       		.byte	0
 3244 00e8 00       		.byte	0
 3245 00e9 11       		.uleb128 0x11
 3246 00ea 0B       		.uleb128 0xb
 3247 00eb 01       		.byte	0x1
 3248 00ec 11       		.uleb128 0x11
 3249 00ed 01       		.uleb128 0x1
 3250 00ee 12       		.uleb128 0x12
 3251 00ef 06       		.uleb128 0x6
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 70


 3252 00f0 00       		.byte	0
 3253 00f1 00       		.byte	0
 3254 00f2 12       		.uleb128 0x12
 3255 00f3 34       		.uleb128 0x34
 3256 00f4 00       		.byte	0
 3257 00f5 03       		.uleb128 0x3
 3258 00f6 08       		.uleb128 0x8
 3259 00f7 3A       		.uleb128 0x3a
 3260 00f8 0B       		.uleb128 0xb
 3261 00f9 3B       		.uleb128 0x3b
 3262 00fa 05       		.uleb128 0x5
 3263 00fb 49       		.uleb128 0x49
 3264 00fc 13       		.uleb128 0x13
 3265 00fd 02       		.uleb128 0x2
 3266 00fe 18       		.uleb128 0x18
 3267 00ff 00       		.byte	0
 3268 0100 00       		.byte	0
 3269 0101 13       		.uleb128 0x13
 3270 0102 01       		.uleb128 0x1
 3271 0103 01       		.byte	0x1
 3272 0104 49       		.uleb128 0x49
 3273 0105 13       		.uleb128 0x13
 3274 0106 01       		.uleb128 0x1
 3275 0107 13       		.uleb128 0x13
 3276 0108 00       		.byte	0
 3277 0109 00       		.byte	0
 3278 010a 14       		.uleb128 0x14
 3279 010b 21       		.uleb128 0x21
 3280 010c 00       		.byte	0
 3281 010d 49       		.uleb128 0x49
 3282 010e 13       		.uleb128 0x13
 3283 010f 2F       		.uleb128 0x2f
 3284 0110 0B       		.uleb128 0xb
 3285 0111 00       		.byte	0
 3286 0112 00       		.byte	0
 3287 0113 15       		.uleb128 0x15
 3288 0114 2E       		.uleb128 0x2e
 3289 0115 01       		.byte	0x1
 3290 0116 3F       		.uleb128 0x3f
 3291 0117 19       		.uleb128 0x19
 3292 0118 03       		.uleb128 0x3
 3293 0119 0E       		.uleb128 0xe
 3294 011a 3A       		.uleb128 0x3a
 3295 011b 0B       		.uleb128 0xb
 3296 011c 3B       		.uleb128 0x3b
 3297 011d 05       		.uleb128 0x5
 3298 011e 27       		.uleb128 0x27
 3299 011f 19       		.uleb128 0x19
 3300 0120 49       		.uleb128 0x49
 3301 0121 13       		.uleb128 0x13
 3302 0122 11       		.uleb128 0x11
 3303 0123 01       		.uleb128 0x1
 3304 0124 12       		.uleb128 0x12
 3305 0125 06       		.uleb128 0x6
 3306 0126 40       		.uleb128 0x40
 3307 0127 18       		.uleb128 0x18
 3308 0128 9642     		.uleb128 0x2116
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 71


 3309 012a 19       		.uleb128 0x19
 3310 012b 01       		.uleb128 0x1
 3311 012c 13       		.uleb128 0x13
 3312 012d 00       		.byte	0
 3313 012e 00       		.byte	0
 3314 012f 16       		.uleb128 0x16
 3315 0130 05       		.uleb128 0x5
 3316 0131 00       		.byte	0
 3317 0132 03       		.uleb128 0x3
 3318 0133 0E       		.uleb128 0xe
 3319 0134 3A       		.uleb128 0x3a
 3320 0135 0B       		.uleb128 0xb
 3321 0136 3B       		.uleb128 0x3b
 3322 0137 05       		.uleb128 0x5
 3323 0138 49       		.uleb128 0x49
 3324 0139 13       		.uleb128 0x13
 3325 013a 02       		.uleb128 0x2
 3326 013b 18       		.uleb128 0x18
 3327 013c 00       		.byte	0
 3328 013d 00       		.byte	0
 3329 013e 17       		.uleb128 0x17
 3330 013f 34       		.uleb128 0x34
 3331 0140 00       		.byte	0
 3332 0141 03       		.uleb128 0x3
 3333 0142 0E       		.uleb128 0xe
 3334 0143 3A       		.uleb128 0x3a
 3335 0144 0B       		.uleb128 0xb
 3336 0145 3B       		.uleb128 0x3b
 3337 0146 05       		.uleb128 0x5
 3338 0147 49       		.uleb128 0x49
 3339 0148 13       		.uleb128 0x13
 3340 0149 02       		.uleb128 0x2
 3341 014a 18       		.uleb128 0x18
 3342 014b 00       		.byte	0
 3343 014c 00       		.byte	0
 3344 014d 18       		.uleb128 0x18
 3345 014e 34       		.uleb128 0x34
 3346 014f 00       		.byte	0
 3347 0150 03       		.uleb128 0x3
 3348 0151 0E       		.uleb128 0xe
 3349 0152 3A       		.uleb128 0x3a
 3350 0153 0B       		.uleb128 0xb
 3351 0154 3B       		.uleb128 0x3b
 3352 0155 05       		.uleb128 0x5
 3353 0156 49       		.uleb128 0x49
 3354 0157 13       		.uleb128 0x13
 3355 0158 3F       		.uleb128 0x3f
 3356 0159 19       		.uleb128 0x19
 3357 015a 3C       		.uleb128 0x3c
 3358 015b 19       		.uleb128 0x19
 3359 015c 00       		.byte	0
 3360 015d 00       		.byte	0
 3361 015e 19       		.uleb128 0x19
 3362 015f 34       		.uleb128 0x34
 3363 0160 00       		.byte	0
 3364 0161 03       		.uleb128 0x3
 3365 0162 0E       		.uleb128 0xe
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 72


 3366 0163 3A       		.uleb128 0x3a
 3367 0164 0B       		.uleb128 0xb
 3368 0165 3B       		.uleb128 0x3b
 3369 0166 05       		.uleb128 0x5
 3370 0167 49       		.uleb128 0x49
 3371 0168 13       		.uleb128 0x13
 3372 0169 3F       		.uleb128 0x3f
 3373 016a 19       		.uleb128 0x19
 3374 016b 02       		.uleb128 0x2
 3375 016c 18       		.uleb128 0x18
 3376 016d 00       		.byte	0
 3377 016e 00       		.byte	0
 3378 016f 1A       		.uleb128 0x1a
 3379 0170 34       		.uleb128 0x34
 3380 0171 00       		.byte	0
 3381 0172 03       		.uleb128 0x3
 3382 0173 0E       		.uleb128 0xe
 3383 0174 3A       		.uleb128 0x3a
 3384 0175 0B       		.uleb128 0xb
 3385 0176 3B       		.uleb128 0x3b
 3386 0177 0B       		.uleb128 0xb
 3387 0178 49       		.uleb128 0x49
 3388 0179 13       		.uleb128 0x13
 3389 017a 3F       		.uleb128 0x3f
 3390 017b 19       		.uleb128 0x19
 3391 017c 02       		.uleb128 0x2
 3392 017d 18       		.uleb128 0x18
 3393 017e 00       		.byte	0
 3394 017f 00       		.byte	0
 3395 0180 1B       		.uleb128 0x1b
 3396 0181 34       		.uleb128 0x34
 3397 0182 00       		.byte	0
 3398 0183 03       		.uleb128 0x3
 3399 0184 08       		.uleb128 0x8
 3400 0185 3A       		.uleb128 0x3a
 3401 0186 0B       		.uleb128 0xb
 3402 0187 3B       		.uleb128 0x3b
 3403 0188 0B       		.uleb128 0xb
 3404 0189 49       		.uleb128 0x49
 3405 018a 13       		.uleb128 0x13
 3406 018b 3F       		.uleb128 0x3f
 3407 018c 19       		.uleb128 0x19
 3408 018d 02       		.uleb128 0x2
 3409 018e 18       		.uleb128 0x18
 3410 018f 00       		.byte	0
 3411 0190 00       		.byte	0
 3412 0191 00       		.byte	0
 3413              		.section	.debug_aranges,"",%progbits
 3414 0000 44000000 		.4byte	0x44
 3415 0004 0200     		.2byte	0x2
 3416 0006 00000000 		.4byte	.Ldebug_info0
 3417 000a 04       		.byte	0x4
 3418 000b 00       		.byte	0
 3419 000c 0000     		.2byte	0
 3420 000e 0000     		.2byte	0
 3421 0010 00000000 		.4byte	.LFB63
 3422 0014 20000000 		.4byte	.LFE63-.LFB63
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 73


 3423 0018 00000000 		.4byte	.LFB64
 3424 001c 40000000 		.4byte	.LFE64-.LFB64
 3425 0020 00000000 		.4byte	.LFB65
 3426 0024 9C000000 		.4byte	.LFE65-.LFB65
 3427 0028 00000000 		.4byte	.LFB66
 3428 002c 50000000 		.4byte	.LFE66-.LFB66
 3429 0030 00000000 		.4byte	.LFB67
 3430 0034 8C0B0000 		.4byte	.LFE67-.LFB67
 3431 0038 00000000 		.4byte	.LFB68
 3432 003c 30010000 		.4byte	.LFE68-.LFB68
 3433 0040 00000000 		.4byte	0
 3434 0044 00000000 		.4byte	0
 3435              		.section	.debug_ranges,"",%progbits
 3436              	.Ldebug_ranges0:
 3437 0000 00000000 		.4byte	.LFB63
 3438 0004 20000000 		.4byte	.LFE63
 3439 0008 00000000 		.4byte	.LFB64
 3440 000c 40000000 		.4byte	.LFE64
 3441 0010 00000000 		.4byte	.LFB65
 3442 0014 9C000000 		.4byte	.LFE65
 3443 0018 00000000 		.4byte	.LFB66
 3444 001c 50000000 		.4byte	.LFE66
 3445 0020 00000000 		.4byte	.LFB67
 3446 0024 8C0B0000 		.4byte	.LFE67
 3447 0028 00000000 		.4byte	.LFB68
 3448 002c 30010000 		.4byte	.LFE68
 3449 0030 00000000 		.4byte	0
 3450 0034 00000000 		.4byte	0
 3451              		.section	.debug_line,"",%progbits
 3452              	.Ldebug_line0:
 3453 0000 99030000 		.section	.debug_str,"MS",%progbits,1
 3453      02009501 
 3453      00000201 
 3453      FB0E0D00 
 3453      01010101 
 3454              	.LASF63:
 3455 0000 64657363 		.ascii	"descent_time\000"
 3455      656E745F 
 3455      74696D65 
 3455      00
 3456              	.LASF29:
 3457 000d 52455355 		.ascii	"RESURFACE\000"
 3457      52464143 
 3457      4500
 3458              	.LASF74:
 3459 0017 6D73675F 		.ascii	"msg_count\000"
 3459      636F756E 
 3459      7400
 3460              	.LASF72:
 3461 0021 75706461 		.ascii	"update_Data\000"
 3461      74655F44 
 3461      61746100 
 3462              	.LASF73:
 3463 002d 52784275 		.ascii	"RxBuffer\000"
 3463      66666572 
 3463      00
 3464              	.LASF25:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 74


 3465 0036 53595354 		.ascii	"SYSTEM_CHECK\000"
 3465      454D5F43 
 3465      4845434B 
 3465      00
 3466              	.LASF32:
 3467 0043 53544154 		.ascii	"STATES\000"
 3467      455300
 3468              	.LASF55:
 3469 004a 73646275 		.ascii	"sdbuf\000"
 3469      6600
 3470              	.LASF60:
 3471 0050 41646472 		.ascii	"Addr\000"
 3471      00
 3472              	.LASF58:
 3473 0055 64657641 		.ascii	"devAddr\000"
 3473      64647200 
 3474              	.LASF78:
 3475 005d 7472616E 		.ascii	"transmit_flag\000"
 3475      736D6974 
 3475      5F666C61 
 3475      6700
 3476              	.LASF80:
 3477 006b 72657365 		.ascii	"reset\000"
 3477      7400
 3478              	.LASF28:
 3479 0071 4C414E44 		.ascii	"LANDED\000"
 3479      454400
 3480              	.LASF77:
 3481 0078 64617461 		.ascii	"dataflag\000"
 3481      666C6167 
 3481      00
 3482              	.LASF93:
 3483 0081 66696C65 		.ascii	"filename\000"
 3483      6E616D65 
 3483      00
 3484              	.LASF33:
 3485 008a 4D6F6973 		.ascii	"Moisture_ISR_Handler\000"
 3485      74757265 
 3485      5F495352 
 3485      5F48616E 
 3485      646C6572 
 3486              	.LASF46:
 3487 009f 76616375 		.ascii	"vacuumbuf\000"
 3487      756D6275 
 3487      6600
 3488              	.LASF85:
 3489 00a9 66696C65 		.ascii	"file\000"
 3489      00
 3490              	.LASF41:
 3491 00ae 70726573 		.ascii	"pressure_avg\000"
 3491      73757265 
 3491      5F617667 
 3491      00
 3492              	.LASF4:
 3493 00bb 73686F72 		.ascii	"short int\000"
 3493      7420696E 
 3493      7400
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 75


 3494              	.LASF69:
 3495 00c5 50414E49 		.ascii	"PANIC_flag\000"
 3495      435F666C 
 3495      616700
 3496              	.LASF82:
 3497 00d0 79617667 		.ascii	"yavg\000"
 3497      00
 3498              	.LASF13:
 3499 00d5 75696E74 		.ascii	"uint8_t\000"
 3499      385F7400 
 3500              	.LASF50:
 3501 00dd 70756C73 		.ascii	"pulse\000"
 3501      6500
 3502              	.LASF37:
 3503 00e3 64656369 		.ascii	"decimals\000"
 3503      6D616C73 
 3503      00
 3504              	.LASF18:
 3505 00ec 666C6F61 		.ascii	"float\000"
 3505      7400
 3506              	.LASF49:
 3507 00f2 73746174 		.ascii	"stateMsgCount\000"
 3507      654D7367 
 3507      436F756E 
 3507      7400
 3508              	.LASF10:
 3509 0100 6C6F6E67 		.ascii	"long long int\000"
 3509      206C6F6E 
 3509      6720696E 
 3509      7400
 3510              	.LASF65:
 3511 010e 61766572 		.ascii	"average\000"
 3511      61676500 
 3512              	.LASF30:
 3513 0116 5452414E 		.ascii	"TRANSMIT\000"
 3513      534D4954 
 3513      00
 3514              	.LASF88:
 3515 011f 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3515      4320342E 
 3515      392E3320 
 3515      32303135 
 3515      30333033 
 3516 0152 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3516      20726576 
 3516      6973696F 
 3516      6E203232 
 3516      31323230 
 3517 0185 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3517      66756E63 
 3517      74696F6E 
 3517      2D736563 
 3517      74696F6E 
 3518              	.LASF53:
 3519 01ad 74656E73 		.ascii	"tens\000"
 3519      00
 3520              	.LASF38:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 76


 3521 01b2 766F6C74 		.ascii	"voltage\000"
 3521      61676500 
 3522              	.LASF86:
 3523 01ba 766F6C75 		.ascii	"volume\000"
 3523      6D6500
 3524              	.LASF61:
 3525 01c1 70726573 		.ascii	"press_id\000"
 3525      735F6964 
 3525      00
 3526              	.LASF51:
 3527 01ca 73656373 		.ascii	"secs_for_tilt\000"
 3527      5F666F72 
 3527      5F74696C 
 3527      7400
 3528              	.LASF48:
 3529 01d8 7472616E 		.ascii	"transbuf\000"
 3529      73627566 
 3529      00
 3530              	.LASF31:
 3531 01e1 4552524F 		.ascii	"ERROR\000"
 3531      5200
 3532              	.LASF64:
 3533 01e7 70726573 		.ascii	"pressure_sum\000"
 3533      73757265 
 3533      5F73756D 
 3533      00
 3534              	.LASF24:
 3535 01f4 6C6F6E67 		.ascii	"long double\000"
 3535      20646F75 
 3535      626C6500 
 3536              	.LASF26:
 3537 0200 57414954 		.ascii	"WAIT_TO_LAUNCH\000"
 3537      5F544F5F 
 3537      4C41554E 
 3537      434800
 3538              	.LASF1:
 3539 020f 756E7369 		.ascii	"unsigned char\000"
 3539      676E6564 
 3539      20636861 
 3539      7200
 3540              	.LASF23:
 3541 021d 46535F46 		.ascii	"FS_FILE\000"
 3541      494C4500 
 3542              	.LASF71:
 3543 0225 636F756E 		.ascii	"countdown\000"
 3543      74646F77 
 3543      6E00
 3544              	.LASF0:
 3545 022f 7369676E 		.ascii	"signed char\000"
 3545      65642063 
 3545      68617200 
 3546              	.LASF11:
 3547 023b 6C6F6E67 		.ascii	"long long unsigned int\000"
 3547      206C6F6E 
 3547      6720756E 
 3547      7369676E 
 3547      65642069 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 77


 3548              	.LASF16:
 3549 0252 75696E74 		.ascii	"uint32_t\000"
 3549      33325F74 
 3549      00
 3550              	.LASF62:
 3551 025b 64617461 		.ascii	"data_time\000"
 3551      5F74696D 
 3551      6500
 3552              	.LASF12:
 3553 0265 756E7369 		.ascii	"unsigned int\000"
 3553      676E6564 
 3553      20696E74 
 3553      00
 3554              	.LASF39:
 3555 0272 74656D70 		.ascii	"temp\000"
 3555      00
 3556              	.LASF5:
 3557 0277 73686F72 		.ascii	"short unsigned int\000"
 3557      7420756E 
 3557      7369676E 
 3557      65642069 
 3557      6E7400
 3558              	.LASF83:
 3559 028a 7873756D 		.ascii	"xsum\000"
 3559      00
 3560              	.LASF20:
 3561 028f 63686172 		.ascii	"char\000"
 3561      00
 3562              	.LASF7:
 3563 0294 6C6F6E67 		.ascii	"long int\000"
 3563      20696E74 
 3563      00
 3564              	.LASF91:
 3565 029d 6D61696E 		.ascii	"main\000"
 3565      00
 3566              	.LASF15:
 3567 02a2 696E7433 		.ascii	"int32_t\000"
 3567      325F7400 
 3568              	.LASF14:
 3569 02aa 696E7431 		.ascii	"int16_t\000"
 3569      365F7400 
 3570              	.LASF17:
 3571 02b2 75696E74 		.ascii	"uint8\000"
 3571      3800
 3572              	.LASF67:
 3573 02b8 5F426F6F 		.ascii	"_Bool\000"
 3573      6C00
 3574              	.LASF90:
 3575 02be 433A5C55 		.ascii	"C:\\Users\\gding\\Documents\\Project_O-Vac\\OVac.cy"
 3575      73657273 
 3575      5C676469 
 3575      6E675C44 
 3575      6F63756D 
 3576 02ec 64736E00 		.ascii	"dsn\000"
 3577              	.LASF54:
 3578 02f0 6F6E6573 		.ascii	"ones\000"
 3578      00
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 78


 3579              	.LASF43:
 3580 02f5 63757253 		.ascii	"curState\000"
 3580      74617465 
 3580      00
 3581              	.LASF79:
 3582 02fe 64657074 		.ascii	"depth\000"
 3582      6800
 3583              	.LASF52:
 3584 0304 7A5F6F66 		.ascii	"z_offset\000"
 3584      66736574 
 3584      00
 3585              	.LASF47:
 3586 030d 72657375 		.ascii	"resurfbuf\000"
 3586      72666275 
 3586      6600
 3587              	.LASF75:
 3588 0317 7278666C 		.ascii	"rxflag\000"
 3588      616700
 3589              	.LASF59:
 3590 031e 62756666 		.ascii	"buffer\000"
 3590      657200
 3591              	.LASF35:
 3592 0325 436F756E 		.ascii	"Countdown_ISR_Handler\000"
 3592      74646F77 
 3592      6E5F4953 
 3592      525F4861 
 3592      6E646C65 
 3593              	.LASF89:
 3594 033b 6D61696E 		.ascii	"main.c\000"
 3594      2E6300
 3595              	.LASF21:
 3596 0342 72656738 		.ascii	"reg8\000"
 3596      00
 3597              	.LASF9:
 3598 0347 6C6F6E67 		.ascii	"long unsigned int\000"
 3598      20756E73 
 3598      69676E65 
 3598      6420696E 
 3598      7400
 3599              	.LASF27:
 3600 0359 44455343 		.ascii	"DESCENDING\000"
 3600      454E4449 
 3600      4E4700
 3601              	.LASF76:
 3602 0364 62797465 		.ascii	"bytes\000"
 3602      7300
 3603              	.LASF19:
 3604 036a 646F7562 		.ascii	"double\000"
 3604      6C6500
 3605              	.LASF8:
 3606 0371 5F5F7569 		.ascii	"__uint32_t\000"
 3606      6E743332 
 3606      5F7400
 3607              	.LASF42:
 3608 037c 74656D70 		.ascii	"tempbuf\000"
 3608      62756600 
 3609              	.LASF6:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 79


 3610 0384 5F5F696E 		.ascii	"__int32_t\000"
 3610      7433325F 
 3610      7400
 3611              	.LASF3:
 3612 038e 5F5F696E 		.ascii	"__int16_t\000"
 3612      7431365F 
 3612      7400
 3613              	.LASF44:
 3614 0398 64657363 		.ascii	"descendbuf\000"
 3614      656E6462 
 3614      756600
 3615              	.LASF22:
 3616 03a3 73697A65 		.ascii	"sizetype\000"
 3616      74797065 
 3616      00
 3617              	.LASF70:
 3618 03ac 53544154 		.ascii	"STATE\000"
 3618      4500
 3619              	.LASF40:
 3620 03b2 6F757470 		.ascii	"output\000"
 3620      757400
 3621              	.LASF84:
 3622 03b9 7973756D 		.ascii	"ysum\000"
 3622      00
 3623              	.LASF66:
 3624 03be 636F6C6C 		.ascii	"collect_flag\000"
 3624      6563745F 
 3624      666C6167 
 3624      00
 3625              	.LASF36:
 3626 03cb 72785F69 		.ascii	"rx_interrupt\000"
 3626      6E746572 
 3626      72757074 
 3626      00
 3627              	.LASF57:
 3628 03d8 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3628      52784275 
 3628      66666572 
 3628      00
 3629              	.LASF92:
 3630 03e5 53445F53 		.ascii	"SD_SETUP\000"
 3630      45545550 
 3630      00
 3631              	.LASF56:
 3632 03ee 73756363 		.ascii	"success\000"
 3632      65737300 
 3633              	.LASF81:
 3634 03f6 78617667 		.ascii	"xavg\000"
 3634      00
 3635              	.LASF34:
 3636 03fb 53616D70 		.ascii	"Sample_ISR_Handler\000"
 3636      6C655F49 
 3636      53525F48 
 3636      616E646C 
 3636      657200
 3637              	.LASF87:
 3638 040e 66736669 		.ascii	"fsfile\000"
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccPQazAn.s 			page 80


 3638      6C6500
 3639              	.LASF45:
 3640 0415 6C616E64 		.ascii	"landedbuf\000"
 3640      65646275 
 3640      6600
 3641              	.LASF68:
 3642 041f 77616974 		.ascii	"wait_flag\000"
 3642      5F666C61 
 3642      6700
 3643              	.LASF2:
 3644 0429 5F5F7569 		.ascii	"__uint8_t\000"
 3644      6E74385F 
 3644      7400
 3645              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

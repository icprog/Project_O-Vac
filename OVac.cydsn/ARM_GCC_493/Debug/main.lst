ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	devAddr,1,1
  19              		.comm	buffer,22,4
  20              		.global	Addr
  21              		.data
  22              		.align	2
  23              		.type	Addr, %object
  24              		.size	Addr, 4
  25              	Addr:
  26 0000 3F000000 		.word	63
  27              		.global	id
  28              		.align	2
  29              		.type	id, %object
  30              		.size	id, 4
  31              	id:
  32 0004 01000000 		.word	1
  33              		.global	data_time
  34              		.bss
  35              		.align	2
  36              		.type	data_time, %object
  37              		.size	data_time, 4
  38              	data_time:
  39 0000 00000000 		.space	4
  40              		.global	sum
  41              		.align	2
  42              		.type	sum, %object
  43              		.size	sum, 4
  44              	sum:
  45 0004 00000000 		.space	4
  46              		.global	average
  47              		.align	1
  48              		.type	average, %object
  49              		.size	average, 2
  50              	average:
  51 0008 0000     		.space	2
  52              		.global	collect_flag
  53              		.type	collect_flag, %object
  54              		.size	collect_flag, 1
  55              	collect_flag:
  56 000a 00       		.space	1
  57              		.global	wait_flag
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 2


  58              		.type	wait_flag, %object
  59              		.size	wait_flag, 1
  60              	wait_flag:
  61 000b 00       		.space	1
  62              		.global	PANIC_flag
  63              		.type	PANIC_flag, %object
  64              		.size	PANIC_flag, 1
  65              	PANIC_flag:
  66 000c 00       		.space	1
  67              		.global	STATE
  68              		.data
  69              		.type	STATE, %object
  70              		.size	STATE, 1
  71              	STATE:
  72 0008 01       		.byte	1
  73              		.global	testnum
  74              		.type	testnum, %object
  75              		.size	testnum, 1
  76              	testnum:
  77 0009 01       		.byte	1
  78              		.global	countdown
  79              		.bss
  80              		.type	countdown, %object
  81              		.size	countdown, 1
  82              	countdown:
  83 000d 00       		.space	1
  84              		.global	file
  85              		.data
  86 000a 0000     		.align	2
  87              		.type	file, %object
  88              		.size	file, 11
  89              	file:
  90 000c 74657374 		.ascii	"test_1.txt\000"
  90      5F312E74 
  90      787400
  91              		.global	volume
  92 0017 00       		.bss
  93 000e 0000     		.align	2
  94              		.type	volume, %object
  95              		.size	volume, 10
  96              	volume:
  97 0010 00000000 		.space	10
  97      00000000 
  97      0000
  98              		.comm	fsfile,4,4
  99 001a 0000     		.section	.text.Reset_system,"ax",%progbits
 100              		.align	2
 101              		.global	Reset_system
 102              		.thumb
 103              		.thumb_func
 104              		.type	Reset_system, %function
 105              	Reset_system:
 106              	.LFB63:
 107              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 3


   4:main.c        **** * Version: 2.20
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   This is a source code for example project of ADC single ended mode.
   8:main.c        **** *
   9:main.c        **** *   Variable resistor(pot) is connected to +ve input of ADC using the I/O pin.
  10:main.c        **** *   P0.0. When voltage to positive terminal of ADC is 0, the output displayed
  11:main.c        **** *   on the LCD pannel is 0x0000. As voltage on positive terminal goes on
  12:main.c        **** *   increasing, the  converted value goes on increasing from 0x0000 and reaches
  13:main.c        **** *   0xFFFF when voltage becomes 1.024V. Futher increase in voltage value,
  14:main.c        **** *   doesn't cause any changes to values displayed in the LCD.
  15:main.c        **** *
  16:main.c        **** * Hardware Connections: 
  17:main.c        **** *  Connect analog input from Variable resistor to port P0[0] of DVK1 board.
  18:main.c        **** *
  19:main.c        **** ********************************************************************************
  20:main.c        **** * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  21:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  22:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  23:main.c        **** * Therefore, you may use this software only as provided in the license agreement
  24:main.c        **** * accompanying the software package from which you obtained this software.
  25:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  26:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  27:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <project.h>
  31:main.c        **** #include <mpu6050.h>
  32:main.c        **** #include <stdio.h>
  33:main.c        **** #include <string.h>
  34:main.c        **** #include <FS.h>
  35:main.c        **** #include "LiquidCrystal_I2C.h"
  36:main.c        **** #include "functions.h"
  37:main.c        **** 
  38:main.c        **** #define MPU6050 
  39:main.c        **** #define LCD
  40:main.c        **** //#define SD
  41:main.c        **** 
  42:main.c        **** #define MA_WINDOW 15                    // Number of samples in the moving average window.
  43:main.c        **** #define BOT_THRESHOLD 20000             // Z-Aacceleration threshold for transition into LANDED sta
  44:main.c        **** #define WAIT_TIME 1000                  // Number of ISR calls until transition into DESCENDING sta
  45:main.c        **** #define DATA_TIME 5000                  // Number of ISR calls until transition into WAIT_TO_LAUNCH
  46:main.c        **** 
  47:main.c        **** 
  48:main.c        **** /*State Declarations*/
  49:main.c        **** enum STATES{
  50:main.c        **** SYSTEM_CHECK, 
  51:main.c        **** WAIT_TO_LAUNCH,
  52:main.c        **** DESCENDING,
  53:main.c        **** LANDED,
  54:main.c        **** RESURFACE,
  55:main.c        **** TRANSMIT,
  56:main.c        **** ERROR
  57:main.c        **** };
  58:main.c        **** 
  59:main.c        **** 
  60:main.c        **** uint32_t Addr = 0x3F;                       // I2C address of LCD.
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 4


  61:main.c        **** long id = 1;                                // Interrupt count.
  62:main.c        **** long data_time = 0;                        // data point num
  63:main.c        **** 
  64:main.c        **** long sum = 0;                               // Sum of accelerometer values. 
  65:main.c        **** int16_t average = 0;                        // Moving average variable.
  66:main.c        **** bool collect_flag = 0;                      // flag indicating when to record acceleration sample.
  67:main.c        **** bool wait_flag = 0;                         // flag indicating when to increment interrupt counter.
  68:main.c        **** bool PANIC_flag = 0;                        // flag indicating water is present in housing.
  69:main.c        **** //bool first_test = 1;                        // flag indicating first test(longer countdown)
  70:main.c        **** enum STATES STATE = WAIT_TO_LAUNCH;         // Set initial state. 
  71:main.c        **** uint8_t testnum = 1, countdown = 0;
  72:main.c        **** char file[11] = "test_1.txt";
  73:main.c        **** char volume[10] = {};
  74:main.c        **** FS_FILE *fsfile;
  75:main.c        **** 
  76:main.c        **** /*******************************************************************************
  77:main.c        **** * Function Name: main
  78:main.c        **** ********************************************************************************
  79:main.c        **** *
  80:main.c        **** * Summary:
  81:main.c        **** *  main() performs following functions:
  82:main.c        **** *  1: Initializes the LCD.
  83:main.c        **** *  2: Initializes timer module and sampling interrupt.
  84:main.c        **** *  3: Initializes MPU6050 Accelerometer/Gyroscope module.
  85:main.c        **** *  4: Samples Z-axis acceleration data from module @ 500hz.
  86:main.c        **** *  5: Computes moving average of Z-axis acceleration values.
  87:main.c        **** *  6: Transitions from DESCENDING to LANDED state when sudden acceleration occurs
  88:main.c        **** *     (ie. moving average > 200000).
  89:main.c        **** *
  90:main.c        **** * Parameters:
  91:main.c        **** *  None.
  92:main.c        **** *
  93:main.c        **** * Return:
  94:main.c        **** *  None.
  95:main.c        **** *
  96:main.c        **** *******************************************************************************/
  97:main.c        **** /* Reset funciton*/
  98:main.c        **** void Reset_system(){
 108              		.loc 1 98 0
 109              		.cfi_startproc
 110              		@ args = 0, pretend = 0, frame = 0
 111              		@ frame_needed = 1, uses_anonymous_args = 0
 112              		@ link register save eliminated.
 113 0000 80B4     		push	{r7}
 114              		.cfi_def_cfa_offset 4
 115              		.cfi_offset 7, -4
 116 0002 00AF     		add	r7, sp, #0
 117              		.cfi_def_cfa_register 7
  99:main.c        ****     id = 1;                                // Interrupt count.
 118              		.loc 1 99 0
 119 0004 104B     		ldr	r3, .L2
 120 0006 0122     		movs	r2, #1
 121 0008 1A60     		str	r2, [r3]
 100:main.c        ****     data_time = 0;                        // data point num
 122              		.loc 1 100 0
 123 000a 104B     		ldr	r3, .L2+4
 124 000c 0022     		movs	r2, #0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 5


 125 000e 1A60     		str	r2, [r3]
 101:main.c        **** 
 102:main.c        ****     sum = 0;                               // Sum of accelerometer values. 
 126              		.loc 1 102 0
 127 0010 0F4B     		ldr	r3, .L2+8
 128 0012 0022     		movs	r2, #0
 129 0014 1A60     		str	r2, [r3]
 103:main.c        ****     average = 0;                        // Moving average variable.
 130              		.loc 1 103 0
 131 0016 0F4B     		ldr	r3, .L2+12
 132 0018 0022     		movs	r2, #0
 133 001a 1A80     		strh	r2, [r3]	@ movhi
 104:main.c        ****     collect_flag = 0;                      // flag indicating when to record acceleration sample.
 134              		.loc 1 104 0
 135 001c 0E4B     		ldr	r3, .L2+16
 136 001e 0022     		movs	r2, #0
 137 0020 1A70     		strb	r2, [r3]
 105:main.c        ****     wait_flag = 0;                         // flag indicating when to increment interrupt counter.
 138              		.loc 1 105 0
 139 0022 0E4B     		ldr	r3, .L2+20
 140 0024 0022     		movs	r2, #0
 141 0026 1A70     		strb	r2, [r3]
 106:main.c        ****     PANIC_flag = 0;                        // flag indicating water is present in housing.
 142              		.loc 1 106 0
 143 0028 0D4B     		ldr	r3, .L2+24
 144 002a 0022     		movs	r2, #0
 145 002c 1A70     		strb	r2, [r3]
 107:main.c        **** //bool first_test = 1;                        // flag indicating first test(longer countdown)
 108:main.c        ****     STATE = WAIT_TO_LAUNCH;             // Set initial state. 
 146              		.loc 1 108 0
 147 002e 0D4B     		ldr	r3, .L2+28
 148 0030 0122     		movs	r2, #1
 149 0032 1A70     		strb	r2, [r3]
 109:main.c        ****     testnum = 1, countdown = 0;
 150              		.loc 1 109 0
 151 0034 0C4B     		ldr	r3, .L2+32
 152 0036 0122     		movs	r2, #1
 153 0038 1A70     		strb	r2, [r3]
 154 003a 0C4B     		ldr	r3, .L2+36
 155 003c 0022     		movs	r2, #0
 156 003e 1A70     		strb	r2, [r3]
 110:main.c        **** }
 157              		.loc 1 110 0
 158 0040 BD46     		mov	sp, r7
 159              		.cfi_def_cfa_register 13
 160              		@ sp needed
 161 0042 5DF8047B 		ldr	r7, [sp], #4
 162              		.cfi_restore 7
 163              		.cfi_def_cfa_offset 0
 164 0046 7047     		bx	lr
 165              	.L3:
 166              		.align	2
 167              	.L2:
 168 0048 00000000 		.word	id
 169 004c 00000000 		.word	data_time
 170 0050 00000000 		.word	sum
 171 0054 00000000 		.word	average
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 6


 172 0058 00000000 		.word	collect_flag
 173 005c 00000000 		.word	wait_flag
 174 0060 00000000 		.word	PANIC_flag
 175 0064 00000000 		.word	STATE
 176 0068 00000000 		.word	testnum
 177 006c 00000000 		.word	countdown
 178              		.cfi_endproc
 179              	.LFE63:
 180              		.size	Reset_system, .-Reset_system
 181              		.section	.text.Moisture_ISR_Handler,"ax",%progbits
 182              		.align	2
 183              		.global	Moisture_ISR_Handler
 184              		.thumb
 185              		.thumb_func
 186              		.type	Moisture_ISR_Handler, %function
 187              	Moisture_ISR_Handler:
 188              	.LFB64:
 111:main.c        **** 
 112:main.c        **** /* Moisture sensor ISR */
 113:main.c        **** CY_ISR (Moisture_ISR_Handler){
 189              		.loc 1 113 0
 190              		.cfi_startproc
 191              		@ args = 0, pretend = 0, frame = 0
 192              		@ frame_needed = 1, uses_anonymous_args = 0
 193 0000 80B5     		push	{r7, lr}
 194              		.cfi_def_cfa_offset 8
 195              		.cfi_offset 7, -8
 196              		.cfi_offset 14, -4
 197 0002 00AF     		add	r7, sp, #0
 198              		.cfi_def_cfa_register 7
 114:main.c        ****     PANIC_flag = 1;                             // Set flag to indicate water
 199              		.loc 1 114 0
 200 0004 044B     		ldr	r3, .L5
 201 0006 0122     		movs	r2, #1
 202 0008 1A70     		strb	r2, [r3]
 115:main.c        ****     STATE = RESURFACE;                          // Go to surface
 203              		.loc 1 115 0
 204 000a 044B     		ldr	r3, .L5+4
 205 000c 0422     		movs	r2, #4
 206 000e 1A70     		strb	r2, [r3]
 116:main.c        ****     Comp_Stop();                                // Stop comparator for interrupt
 207              		.loc 1 116 0
 208 0010 FFF7FEFF 		bl	Comp_Stop
 117:main.c        **** }
 209              		.loc 1 117 0
 210 0014 80BD     		pop	{r7, pc}
 211              	.L6:
 212 0016 00BF     		.align	2
 213              	.L5:
 214 0018 00000000 		.word	PANIC_flag
 215 001c 00000000 		.word	STATE
 216              		.cfi_endproc
 217              	.LFE64:
 218              		.size	Moisture_ISR_Handler, .-Moisture_ISR_Handler
 219              		.section	.text.Sample_ISR_Handler,"ax",%progbits
 220              		.align	2
 221              		.global	Sample_ISR_Handler
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 7


 222              		.thumb
 223              		.thumb_func
 224              		.type	Sample_ISR_Handler, %function
 225              	Sample_ISR_Handler:
 226              	.LFB65:
 118:main.c        **** 
 119:main.c        **** /* Sampling ISR */
 120:main.c        **** CY_ISR (Sample_ISR_Handler){
 227              		.loc 1 120 0
 228              		.cfi_startproc
 229              		@ args = 0, pretend = 0, frame = 0
 230              		@ frame_needed = 1, uses_anonymous_args = 0
 231              		@ link register save eliminated.
 232 0000 80B4     		push	{r7}
 233              		.cfi_def_cfa_offset 4
 234              		.cfi_offset 7, -4
 235 0002 00AF     		add	r7, sp, #0
 236              		.cfi_def_cfa_register 7
 121:main.c        ****     
 122:main.c        ****     Sample_Timer_STATUS;                        //Clears interrupt by accessing timer status regist
 237              		.loc 1 122 0
 238 0004 084B     		ldr	r3, .L9
 239 0006 1B78     		ldrb	r3, [r3]
 123:main.c        ****     if (STATE == DESCENDING){ 
 240              		.loc 1 123 0
 241 0008 084B     		ldr	r3, .L9+4
 242 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 243 000c 022B     		cmp	r3, #2
 244 000e 07D1     		bne	.L7
 124:main.c        ****         collect_flag = 1;
 245              		.loc 1 124 0
 246 0010 074B     		ldr	r3, .L9+8
 247 0012 0122     		movs	r2, #1
 248 0014 1A70     		strb	r2, [r3]
 125:main.c        ****         data_time++;
 249              		.loc 1 125 0
 250 0016 074B     		ldr	r3, .L9+12
 251 0018 1B68     		ldr	r3, [r3]
 252 001a 0133     		adds	r3, r3, #1
 253 001c 054A     		ldr	r2, .L9+12
 254 001e 1360     		str	r3, [r2]
 255              	.L7:
 126:main.c        ****     }
 127:main.c        **** }
 256              		.loc 1 127 0
 257 0020 BD46     		mov	sp, r7
 258              		.cfi_def_cfa_register 13
 259              		@ sp needed
 260 0022 5DF8047B 		ldr	r7, [sp], #4
 261              		.cfi_restore 7
 262              		.cfi_def_cfa_offset 0
 263 0026 7047     		bx	lr
 264              	.L10:
 265              		.align	2
 266              	.L9:
 267 0028 034F0040 		.word	1073762051
 268 002c 00000000 		.word	STATE
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 8


 269 0030 00000000 		.word	collect_flag
 270 0034 00000000 		.word	data_time
 271              		.cfi_endproc
 272              	.LFE65:
 273              		.size	Sample_ISR_Handler, .-Sample_ISR_Handler
 274              		.section	.text.Countdown_ISR_Handler,"ax",%progbits
 275              		.align	2
 276              		.global	Countdown_ISR_Handler
 277              		.thumb
 278              		.thumb_func
 279              		.type	Countdown_ISR_Handler, %function
 280              	Countdown_ISR_Handler:
 281              	.LFB66:
 128:main.c        **** 
 129:main.c        **** /* Countdown ISR*/
 130:main.c        **** CY_ISR (Countdown_ISR_Handler){
 282              		.loc 1 130 0
 283              		.cfi_startproc
 284              		@ args = 0, pretend = 0, frame = 0
 285              		@ frame_needed = 1, uses_anonymous_args = 0
 286              		@ link register save eliminated.
 287 0000 80B4     		push	{r7}
 288              		.cfi_def_cfa_offset 4
 289              		.cfi_offset 7, -4
 290 0002 00AF     		add	r7, sp, #0
 291              		.cfi_def_cfa_register 7
 131:main.c        ****     
 132:main.c        ****     Countdown_timer_STATUS;                        //Clears interrupt by accessing timer status reg
 292              		.loc 1 132 0
 293 0004 0D4B     		ldr	r3, .L14
 294 0006 1B78     		ldrb	r3, [r3]
 133:main.c        ****     if (STATE == WAIT_TO_LAUNCH){ 
 295              		.loc 1 133 0
 296 0008 0D4B     		ldr	r3, .L14+4
 297 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 298 000c 012B     		cmp	r3, #1
 299 000e 09D1     		bne	.L12
 134:main.c        ****         wait_flag = 1;
 300              		.loc 1 134 0
 301 0010 0C4B     		ldr	r3, .L14+8
 302 0012 0122     		movs	r2, #1
 303 0014 1A70     		strb	r2, [r3]
 135:main.c        ****         countdown++;
 304              		.loc 1 135 0
 305 0016 0C4B     		ldr	r3, .L14+12
 306 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 307 001a 0133     		adds	r3, r3, #1
 308 001c DAB2     		uxtb	r2, r3
 309 001e 0A4B     		ldr	r3, .L14+12
 310 0020 1A70     		strb	r2, [r3]
 311 0022 06E0     		b	.L11
 312              	.L12:
 136:main.c        ****     }
 137:main.c        ****     else  if (STATE == DESCENDING){
 313              		.loc 1 137 0
 314 0024 064B     		ldr	r3, .L14+4
 315 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 9


 316 0028 022B     		cmp	r3, #2
 317 002a 02D1     		bne	.L11
 138:main.c        ****         wait_flag = 1;
 318              		.loc 1 138 0
 319 002c 054B     		ldr	r3, .L14+8
 320 002e 0122     		movs	r2, #1
 321 0030 1A70     		strb	r2, [r3]
 322              	.L11:
 139:main.c        ****     }
 140:main.c        **** }
 323              		.loc 1 140 0
 324 0032 BD46     		mov	sp, r7
 325              		.cfi_def_cfa_register 13
 326              		@ sp needed
 327 0034 5DF8047B 		ldr	r7, [sp], #4
 328              		.cfi_restore 7
 329              		.cfi_def_cfa_offset 0
 330 0038 7047     		bx	lr
 331              	.L15:
 332 003a 00BF     		.align	2
 333              	.L14:
 334 003c 63640040 		.word	1073767523
 335 0040 00000000 		.word	STATE
 336 0044 00000000 		.word	wait_flag
 337 0048 00000000 		.word	countdown
 338              		.cfi_endproc
 339              	.LFE66:
 340              		.size	Countdown_ISR_Handler, .-Countdown_ISR_Handler
 341              		.section	.rodata
 342              		.align	2
 343              	.LC1:
 344 0000 50536F43 		.ascii	"PSoC 5LP: O-Vac\000"
 344      20354C50 
 344      3A204F2D 
 344      56616300 
 345              		.align	2
 346              	.LC2:
 347 0010 49324320 		.ascii	"I2C Working\000"
 347      576F726B 
 347      696E6700 
 348              		.global	__aeabi_i2f
 349              		.global	__aeabi_f2d
 350              		.global	__aeabi_dmul
 351              		.global	__aeabi_d2f
 352              		.global	__aeabi_f2iz
 353              		.global	__aeabi_fsub
 354              		.global	__aeabi_fmul
 355              		.align	2
 356              	.LC3:
 357 001c 542D6D69 		.ascii	"T-minus %d seconds\012\000"
 357      6E757320 
 357      25642073 
 357      65636F6E 
 357      64730A00 
 358              		.align	2
 359              	.LC4:
 360 0030 53544154 		.ascii	"STATE: DESCENT\000"
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 10


 360      453A2044 
 360      45534345 
 360      4E5400
 361 003f 00       		.align	2
 362              	.LC5:
 363 0040 53544154 		.ascii	"STATE: LANDED\000"
 363      453A204C 
 363      414E4445 
 363      4400
 364 004e 0000     		.align	2
 365              	.LC6:
 366 0050 53544154 		.ascii	"STATE: WAIT\000"
 366      453A2057 
 366      41495400 
 367              		.align	2
 368              	.LC7:
 369 005c 56414355 		.ascii	"VACUUMING\000"
 369      554D494E 
 369      4700
 370 0066 0000     		.align	2
 371              	.LC8:
 372 0068 53544154 		.ascii	"STATE: RESURFACING\000"
 372      453A2052 
 372      45535552 
 372      46414349 
 372      4E4700
 373 007b 00       		.align	2
 374              	.LC9:
 375 007c 57415445 		.ascii	"WATER DETECTED\000"
 375      52204445 
 375      54454354 
 375      454400
 376 008b 00       		.align	2
 377              	.LC10:
 378 008c 5452414E 		.ascii	"TRANSMIT\000"
 378      534D4954 
 378      00
 379 0095 000000   		.align	2
 380              	.LC0:
 381 0098 53595354 		.ascii	"SYSTEM_CHECK  \000"
 381      454D5F43 
 381      4845434B 
 381      202000
 382 00a7 00       		.section	.text.main,"ax",%progbits
 383              		.align	2
 384              		.global	main
 385              		.thumb
 386              		.thumb_func
 387              		.type	main, %function
 388              	main:
 389              	.LFB67:
 141:main.c        **** 
 142:main.c        **** int main()
 143:main.c        **** {
 390              		.loc 1 143 0
 391              		.cfi_startproc
 392              		@ args = 0, pretend = 0, frame = 152
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 11


 393              		@ frame_needed = 1, uses_anonymous_args = 0
 394 0000 90B5     		push	{r4, r7, lr}
 395              		.cfi_def_cfa_offset 12
 396              		.cfi_offset 4, -12
 397              		.cfi_offset 7, -8
 398              		.cfi_offset 14, -4
 399 0002 A7B0     		sub	sp, sp, #156
 400              		.cfi_def_cfa_offset 168
 401 0004 00AF     		add	r7, sp, #0
 402              		.cfi_def_cfa_register 7
 144:main.c        ****     LED2_1_Write(1); 
 403              		.loc 1 144 0
 404 0006 0120     		movs	r0, #1
 405 0008 FFF7FEFF 		bl	LED2_1_Write
 145:main.c        ****     float output;
 146:main.c        ****     char buf[50];                               //just to hold text values in for writing to UART
 147:main.c        ****     
 148:main.c        ****     char curState[14] = "SYSTEM_CHECK  ";
 406              		.loc 1 148 0
 407 000c C24B     		ldr	r3, .L39+8
 408 000e 07F13C04 		add	r4, r7, #60
 409 0012 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 410 0014 07C4     		stmia	r4!, {r0, r1, r2}
 411 0016 2380     		strh	r3, [r4]	@ movhi
 149:main.c        ****     int16_t ax, ay, az, i;
 150:main.c        ****     //int16_t gx, gy, gz;
 151:main.c        ****     int16_t z_offset = 0;
 412              		.loc 1 151 0
 413 0018 0023     		movs	r3, #0
 414 001a A7F89630 		strh	r3, [r7, #150]	@ movhi
 152:main.c        ****     
 153:main.c        ****     /* Start the components */
 154:main.c        ****     CYGlobalIntEnable;                          //enable global interrupts
 415              		.loc 1 154 0
 416              	@ 154 "main.c" 1
 417 001e 62B6     		CPSIE   i
 418              	@ 0 "" 2
 155:main.c        ****     I2C_Master_Start(); 
 419              		.loc 1 155 0
 420              		.thumb
 421 0020 FFF7FEFF 		bl	I2C_Master_Start
 156:main.c        ****     ADC_Start();
 422              		.loc 1 156 0
 423 0024 FFF7FEFF 		bl	ADC_Start
 157:main.c        ****     Sample_Timer_Start();                       //start timer module
 424              		.loc 1 157 0
 425 0028 FFF7FEFF 		bl	Sample_Timer_Start
 158:main.c        ****     Sample_ISR_StartEx(Sample_ISR_Handler);     //reference ISR function
 426              		.loc 1 158 0
 427 002c BB48     		ldr	r0, .L39+12
 428 002e FFF7FEFF 		bl	Sample_ISR_StartEx
 159:main.c        ****     //moisture_isr_StartEx(Moisture_ISR_Handler); //moisture isr start
 160:main.c        ****     Comp_Start();                               //comparator for moisture start
 429              		.loc 1 160 0
 430 0032 FFF7FEFF 		bl	Comp_Start
 161:main.c        ****     
 162:main.c        ****     
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 12


 163:main.c        ****     #ifdef LCD
 164:main.c        ****     LiquidCrystal_I2C_init(Addr,16,2,0);        //initialize I2C communication with LCD
 431              		.loc 1 164 0
 432 0036 BA4B     		ldr	r3, .L39+16
 433 0038 1B68     		ldr	r3, [r3]
 434 003a DBB2     		uxtb	r3, r3
 435 003c 1846     		mov	r0, r3
 436 003e 1021     		movs	r1, #16
 437 0040 0222     		movs	r2, #2
 438 0042 0023     		movs	r3, #0
 439 0044 FFF7FEFF 		bl	LiquidCrystal_I2C_init
 165:main.c        ****     begin(); 
 440              		.loc 1 165 0
 441 0048 FFF7FEFF 		bl	begin
 166:main.c        ****     
 167:main.c        ****     #endif
 168:main.c        ****    
 169:main.c        ****     /* initialize MPU6050 */
 170:main.c        ****     #ifdef MPU6050
 171:main.c        ****     MPU6050_init();    
 442              		.loc 1 171 0
 443 004c FFF7FEFF 		bl	MPU6050_init
 172:main.c        **** 	MPU6050_initialize(); 
 444              		.loc 1 172 0
 445 0050 FFF7FEFF 		bl	MPU6050_initialize
 173:main.c        ****     #endif
 174:main.c        ****         
 175:main.c        ****     #ifdef LCD
 176:main.c        ****     /* Startup Display */
 177:main.c        ****     LCD_print("PSoC 5LP: O-Vac");
 446              		.loc 1 177 0
 447 0054 B348     		ldr	r0, .L39+20
 448 0056 FFF7FEFF 		bl	LCD_print
 178:main.c        ****     setCursor(0,1);
 449              		.loc 1 178 0
 450 005a 0020     		movs	r0, #0
 451 005c 0121     		movs	r1, #1
 452 005e FFF7FEFF 		bl	setCursor
 179:main.c        ****     LCD_print("I2C Working");
 453              		.loc 1 179 0
 454 0062 B148     		ldr	r0, .L39+24
 455 0064 FFF7FEFF 		bl	LCD_print
 180:main.c        ****     
 181:main.c        ****     CyDelay(1000u);   
 456              		.loc 1 181 0
 457 0068 4FF47A70 		mov	r0, #1000
 458 006c FFF7FEFF 		bl	CyDelay
 182:main.c        ****     clear();
 459              		.loc 1 182 0
 460 0070 FFF7FEFF 		bl	clear
 183:main.c        ****     #endif
 184:main.c        ****     
 185:main.c        ****     /* Start the ADC conversion */
 186:main.c        ****     ADC_StartConvert();
 461              		.loc 1 186 0
 462 0074 FFF7FEFF 		bl	ADC_StartConvert
 187:main.c        **** 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 13


 188:main.c        ****     /* Start SD card*/
 189:main.c        ****     #ifdef SD
 190:main.c        ****         {
 191:main.c        ****             FS_Init();
 192:main.c        ****             FS_Mount(volume);
 193:main.c        ****             if(0 != FS_GetVolumeName(0u, volume, 9u))
 194:main.c        ****                 /* Getting volume name succeeded so prompt it on the LCD */
 195:main.c        ****                 LCD_print("Sd vol succeed");
 196:main.c        ****             else
 197:main.c        ****                 LCD_print("Sd vol failed");
 198:main.c        ****                 
 199:main.c        ****             CyDelay(500u);
 200:main.c        ****             clear();
 201:main.c        ****             if(0 == FS_FormatSD(volume))
 202:main.c        ****                 LCD_print("format Succeeded");
 203:main.c        ****             else
 204:main.c        ****                 LCD_print("format Failed");
 205:main.c        ****           
 206:main.c        ****             CyDelay(500u);
 207:main.c        ****             clear();
 208:main.c        ****             
 209:main.c        ****             fsfile = FS_FOpen(file, "w");
 210:main.c        ****             if(fsfile)
 211:main.c        ****             {
 212:main.c        ****                 /* Indicate successful file creation message */
 213:main.c        ****                 LCD_print("File ");
 214:main.c        ****                 LCD_print("was opened");
 215:main.c        ****                 /* Need some delay to indicate output on the LCD */
 216:main.c        ****                 CyDelay(500u);
 217:main.c        ****                 clear();
 218:main.c        ****                 
 219:main.c        ****                 if(0 != FS_Write(fsfile, file, strlen(file))) 
 220:main.c        ****                     /* Inditate that data was written to a file */
 221:main.c        ****                     LCD_print("written to file");
 222:main.c        ****                 else
 223:main.c        ****                     LCD_print("Failed to write");
 224:main.c        ****                     clear();
 225:main.c        ****                 CyDelay(500u);
 226:main.c        ****             }
 227:main.c        ****             else
 228:main.c        ****                 LCD_print("file not created");
 229:main.c        ****         }
 230:main.c        ****         FS_Write(fsfile, "\n------------\n", 14);
 231:main.c        ****     #endif
 232:main.c        ****     
 233:main.c        ****     #ifdef LCD
 234:main.c        ****     /* Display the current State */
 235:main.c        ****     setCursor(0,0);    
 463              		.loc 1 235 0
 464 0078 0020     		movs	r0, #0
 465 007a 0021     		movs	r1, #0
 466 007c FFF7FEFF 		bl	setCursor
 236:main.c        ****     LCD_print(curState);
 467              		.loc 1 236 0
 468 0080 07F13C03 		add	r3, r7, #60
 469 0084 1846     		mov	r0, r3
 470 0086 FFF7FEFF 		bl	LCD_print
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 14


 237:main.c        ****     #endif
 238:main.c        ****     
 239:main.c        ****     
 240:main.c        ****     Countdown_timer_Start();
 471              		.loc 1 240 0
 472 008a FFF7FEFF 		bl	Countdown_timer_Start
 241:main.c        ****     countdown_StartEx(Countdown_ISR_Handler);
 473              		.loc 1 241 0
 474 008e A748     		ldr	r0, .L39+28
 475 0090 FFF7FEFF 		bl	countdown_StartEx
 242:main.c        ****     int num = 0, decimals = 0;
 476              		.loc 1 242 0
 477 0094 0023     		movs	r3, #0
 478 0096 C7F89030 		str	r3, [r7, #144]
 479 009a 0023     		movs	r3, #0
 480 009c C7F88C30 		str	r3, [r7, #140]
 243:main.c        ****     float voltage = 0, temp = 0;
 481              		.loc 1 243 0
 482 00a0 4FF00003 		mov	r3, #0
 483 00a4 C7F88830 		str	r3, [r7, #136]	@ float
 484 00a8 4FF00003 		mov	r3, #0
 485 00ac C7F88430 		str	r3, [r7, #132]	@ float
 486              	.L37:
 244:main.c        ****     
 245:main.c        ****     
 246:main.c        ****     for(;;)
 247:main.c        ****     {       
 248:main.c        ****         if (Reset_Read())
 487              		.loc 1 248 0
 488 00b0 FFF7FEFF 		bl	Reset_Read
 489 00b4 0346     		mov	r3, r0
 490 00b6 002B     		cmp	r3, #0
 491 00b8 01D0     		beq	.L17
 249:main.c        ****             Reset_system();
 492              		.loc 1 249 0
 493 00ba FFF7FEFF 		bl	Reset_system
 494              	.L17:
 250:main.c        ****         if(ADC_IsEndConversion(ADC_RETURN_STATUS))
 495              		.loc 1 250 0
 496 00be 0120     		movs	r0, #1
 497 00c0 FFF7FEFF 		bl	ADC_IsEndConversion
 498 00c4 0346     		mov	r3, r0
 499 00c6 002B     		cmp	r3, #0
 500 00c8 42D0     		beq	.L18
 501              	.LBB2:
 251:main.c        ****         {
 252:main.c        ****             char pressure[50];
 253:main.c        ****             output = ADC_GetResult32();
 502              		.loc 1 253 0
 503 00ca FFF7FEFF 		bl	ADC_GetResult32
 504 00ce 0346     		mov	r3, r0
 505 00d0 1846     		mov	r0, r3
 506 00d2 FFF7FEFF 		bl	__aeabi_i2f
 507 00d6 0346     		mov	r3, r0
 508 00d8 C7F88030 		str	r3, [r7, #128]	@ float
 254:main.c        ****             
 255:main.c        ****             setCursor(0, 1);
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 15


 509              		.loc 1 255 0
 510 00dc 0020     		movs	r0, #0
 511 00de 0121     		movs	r1, #1
 512 00e0 FFF7FEFF 		bl	setCursor
 256:main.c        ****             voltage = output * (3.32 / 4096);
 513              		.loc 1 256 0
 514 00e4 D7F88000 		ldr	r0, [r7, #128]	@ float
 515 00e8 FFF7FEFF 		bl	__aeabi_f2d
 516 00ec 0246     		mov	r2, r0
 517 00ee 0B46     		mov	r3, r1
 518 00f0 1046     		mov	r0, r2
 519 00f2 1946     		mov	r1, r3
 520 00f4 86A3     		adr	r3, .L39
 521 00f6 D3E90023 		ldrd	r2, [r3]
 522 00fa FFF7FEFF 		bl	__aeabi_dmul
 523 00fe 0246     		mov	r2, r0
 524 0100 0B46     		mov	r3, r1
 525 0102 1046     		mov	r0, r2
 526 0104 1946     		mov	r1, r3
 527 0106 FFF7FEFF 		bl	__aeabi_d2f
 528 010a 0346     		mov	r3, r0
 529 010c C7F88830 		str	r3, [r7, #136]	@ float
 257:main.c        ****             num = voltage;
 530              		.loc 1 257 0
 531 0110 D7F88800 		ldr	r0, [r7, #136]	@ float
 532 0114 FFF7FEFF 		bl	__aeabi_f2iz
 533 0118 0346     		mov	r3, r0
 534 011a C7F89030 		str	r3, [r7, #144]
 258:main.c        ****             temp = voltage - num;
 535              		.loc 1 258 0
 536 011e D7F89000 		ldr	r0, [r7, #144]
 537 0122 FFF7FEFF 		bl	__aeabi_i2f
 538 0126 0346     		mov	r3, r0
 539 0128 D7F88800 		ldr	r0, [r7, #136]	@ float
 540 012c 1946     		mov	r1, r3
 541 012e FFF7FEFF 		bl	__aeabi_fsub
 542 0132 0346     		mov	r3, r0
 543 0134 C7F88430 		str	r3, [r7, #132]	@ float
 259:main.c        ****             decimals = temp * 10000;
 544              		.loc 1 259 0
 545 0138 D7F88400 		ldr	r0, [r7, #132]	@ float
 546 013c 7C49     		ldr	r1, .L39+32
 547 013e FFF7FEFF 		bl	__aeabi_fmul
 548 0142 0346     		mov	r3, r0
 549 0144 1846     		mov	r0, r3
 550 0146 FFF7FEFF 		bl	__aeabi_f2iz
 551 014a 0346     		mov	r3, r0
 552 014c C7F88C30 		str	r3, [r7, #140]
 553              	.L18:
 554              	.LBE2:
 260:main.c        ****             #ifdef SD
 261:main.c        **** //                
 262:main.c        ****             #endif
 263:main.c        ****             
 264:main.c        ****         }
 265:main.c        ****         
 266:main.c        ****         /* Display Z-Acceleration */
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 16


 267:main.c        ****         //clear();
 268:main.c        ****         az = MPU6050_getAccelerationZ();
 555              		.loc 1 268 0
 556 0150 FFF7FEFF 		bl	MPU6050_getAccelerationZ
 557 0154 0346     		mov	r3, r0
 558 0156 A7F87E30 		strh	r3, [r7, #126]	@ movhi
 269:main.c        ****        // I2C_LCD_print(1,0, id ,0,average);                                //print Interrupt count
 270:main.c        ****         
 271:main.c        ****         /* State Machine */
 272:main.c        ****         switch (STATE){
 559              		.loc 1 272 0
 560 015a 764B     		ldr	r3, .L39+36
 561 015c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 562 015e 013B     		subs	r3, r3, #1
 563 0160 042B     		cmp	r3, #4
 564 0162 00F26E81 		bhi	.L38
 565 0166 01A2     		adr	r2, .L21
 566 0168 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 567              		.p2align 2
 568              	.L21:
 569 016c 81010000 		.word	.L20+1
 570 0170 F7010000 		.word	.L22+1
 571 0174 87030000 		.word	.L23+1
 572 0178 E3030000 		.word	.L24+1
 573 017c 27040000 		.word	.L25+1
 574              		.p2align 1
 575              	.L20:
 576              	.LBB3:
 273:main.c        ****     
 274:main.c        ****             case WAIT_TO_LAUNCH:
 275:main.c        ****                 
 276:main.c        **** 
 277:main.c        ****                 if(wait_flag == 1){
 577              		.loc 1 277 0
 578 0180 6D4B     		ldr	r3, .L39+40
 579 0182 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 580 0184 002B     		cmp	r3, #0
 581 0186 35D0     		beq	.L26
 278:main.c        ****                     #ifdef LCD
 279:main.c        ****                         setCursor(0,0);
 582              		.loc 1 279 0
 583 0188 0020     		movs	r0, #0
 584 018a 0021     		movs	r1, #0
 585 018c FFF7FEFF 		bl	setCursor
 280:main.c        ****                         clear();
 586              		.loc 1 280 0
 587 0190 FFF7FEFF 		bl	clear
 281:main.c        ****                         sprintf(buf, "T-minus %d seconds\n", (60 - countdown)); // countdown
 588              		.loc 1 281 0
 589 0194 694B     		ldr	r3, .L39+44
 590 0196 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 591 0198 C3F13C03 		rsb	r3, r3, #60
 592 019c 07F14C02 		add	r2, r7, #76
 593 01a0 1046     		mov	r0, r2
 594 01a2 6749     		ldr	r1, .L39+48
 595 01a4 1A46     		mov	r2, r3
 596 01a6 FFF7FEFF 		bl	sprintf
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 17


 282:main.c        ****                         LCD_print(buf);
 597              		.loc 1 282 0
 598 01aa 07F14C03 		add	r3, r7, #76
 599 01ae 1846     		mov	r0, r3
 600 01b0 FFF7FEFF 		bl	LCD_print
 283:main.c        ****                     #endif
 284:main.c        ****                     if(countdown == 60){
 601              		.loc 1 284 0
 602 01b4 614B     		ldr	r3, .L39+44
 603 01b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 604 01b8 3C2B     		cmp	r3, #60
 605 01ba 17D1     		bne	.L27
 285:main.c        ****                         STATE = DESCENDING;
 606              		.loc 1 285 0
 607 01bc 5D4B     		ldr	r3, .L39+36
 608 01be 0222     		movs	r2, #2
 609 01c0 1A70     		strb	r2, [r3]
 286:main.c        ****                         #ifdef LCD
 287:main.c        ****                             setCursor(0,0);
 610              		.loc 1 287 0
 611 01c2 0020     		movs	r0, #0
 612 01c4 0021     		movs	r1, #0
 613 01c6 FFF7FEFF 		bl	setCursor
 288:main.c        ****                             clear();
 614              		.loc 1 288 0
 615 01ca FFF7FEFF 		bl	clear
 289:main.c        ****                             LCD_print("STATE: DESCENT");
 616              		.loc 1 289 0
 617 01ce 5D48     		ldr	r0, .L39+52
 618 01d0 FFF7FEFF 		bl	LCD_print
 290:main.c        ****                         #endif           
 291:main.c        ****                         id=0;
 619              		.loc 1 291 0
 620 01d4 5C4B     		ldr	r3, .L39+56
 621 01d6 0022     		movs	r2, #0
 622 01d8 1A60     		str	r2, [r3]
 292:main.c        ****                         data_time = 0;
 623              		.loc 1 292 0
 624 01da 5C4B     		ldr	r3, .L39+60
 625 01dc 0022     		movs	r2, #0
 626 01de 1A60     		str	r2, [r3]
 293:main.c        ****                         countdown = 9;
 627              		.loc 1 293 0
 628 01e0 564B     		ldr	r3, .L39+44
 629 01e2 0922     		movs	r2, #9
 630 01e4 1A70     		strb	r2, [r3]
 294:main.c        ****                         LED2_Write(1);                                      // turn the LED off 
 631              		.loc 1 294 0
 632 01e6 0120     		movs	r0, #1
 633 01e8 FFF7FEFF 		bl	LED2_Write
 634              	.L27:
 295:main.c        ****                     }
 296:main.c        ****                     wait_flag = 0; 
 635              		.loc 1 296 0
 636 01ec 524B     		ldr	r3, .L39+40
 637 01ee 0022     		movs	r2, #0
 638 01f0 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 18


 297:main.c        ****                 }
 298:main.c        ****                 break;
 639              		.loc 1 298 0
 640 01f2 27E1     		b	.L28
 641              	.L26:
 642 01f4 26E1     		b	.L28
 643              	.L22:
 299:main.c        ****                 
 300:main.c        ****             case DESCENDING:
 301:main.c        ****     
 302:main.c        ****                 if(collect_flag == 1){
 644              		.loc 1 302 0
 645 01f6 564B     		ldr	r3, .L39+64
 646 01f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 647 01fa 002B     		cmp	r3, #0
 648 01fc 00F0B480 		beq	.L29
 303:main.c        ****                     
 304:main.c        ****                     if (id<MA_WINDOW){
 649              		.loc 1 304 0
 650 0200 514B     		ldr	r3, .L39+56
 651 0202 1B68     		ldr	r3, [r3]
 652 0204 0E2B     		cmp	r3, #14
 653 0206 07DC     		bgt	.L30
 305:main.c        ****                         sum += az;     
 654              		.loc 1 305 0
 655 0208 B7F97E20 		ldrsh	r2, [r7, #126]
 656 020c 514B     		ldr	r3, .L39+68
 657 020e 1B68     		ldr	r3, [r3]
 658 0210 1344     		add	r3, r3, r2
 659 0212 504A     		ldr	r2, .L39+68
 660 0214 1360     		str	r3, [r2]
 661 0216 25E0     		b	.L31
 662              	.L30:
 306:main.c        ****                     }
 307:main.c        ****                     else if(id == MA_WINDOW){
 663              		.loc 1 307 0
 664 0218 4B4B     		ldr	r3, .L39+56
 665 021a 1B68     		ldr	r3, [r3]
 666 021c 0F2B     		cmp	r3, #15
 667 021e 13D1     		bne	.L32
 308:main.c        ****                         sum += az;
 668              		.loc 1 308 0
 669 0220 B7F97E20 		ldrsh	r2, [r7, #126]
 670 0224 4B4B     		ldr	r3, .L39+68
 671 0226 1B68     		ldr	r3, [r3]
 672 0228 1344     		add	r3, r3, r2
 673 022a 4A4A     		ldr	r2, .L39+68
 674 022c 1360     		str	r3, [r2]
 309:main.c        ****                         average = sum/MA_WINDOW;                            //compute baseline aver
 675              		.loc 1 309 0
 676 022e 494B     		ldr	r3, .L39+68
 677 0230 1B68     		ldr	r3, [r3]
 678 0232 494A     		ldr	r2, .L39+72
 679 0234 82FB0312 		smull	r1, r2, r2, r3
 680 0238 1A44     		add	r2, r2, r3
 681 023a D210     		asrs	r2, r2, #3
 682 023c DB17     		asrs	r3, r3, #31
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 19


 683 023e D31A     		subs	r3, r2, r3
 684 0240 9AB2     		uxth	r2, r3
 685 0242 464B     		ldr	r3, .L39+76
 686 0244 1A80     		strh	r2, [r3]	@ movhi
 687 0246 0DE0     		b	.L31
 688              	.L32:
 310:main.c        ****                     }
 311:main.c        ****                     else{
 312:main.c        ****                         average = ComputeMA(average, MA_WINDOW, az);
 689              		.loc 1 312 0
 690 0248 444B     		ldr	r3, .L39+76
 691 024a 1B88     		ldrh	r3, [r3]
 692 024c 1AB2     		sxth	r2, r3
 693 024e B7F97E30 		ldrsh	r3, [r7, #126]
 694 0252 1046     		mov	r0, r2
 695 0254 0F21     		movs	r1, #15
 696 0256 1A46     		mov	r2, r3
 697 0258 FFF7FEFF 		bl	ComputeMA
 698 025c 0346     		mov	r3, r0
 699 025e 1A46     		mov	r2, r3
 700 0260 3E4B     		ldr	r3, .L39+76
 701 0262 1A80     		strh	r2, [r3]	@ movhi
 702              	.L31:
 313:main.c        ****                         /*sprintf(buf, "%d", average);
 314:main.c        ****                         setCursor(0,1);
 315:main.c        ****                         LCD_print(buf);*/
 316:main.c        ****                         
 317:main.c        ****                     }
 318:main.c        ****                     
 319:main.c        ****                     if(average > BOT_THRESHOLD){
 703              		.loc 1 319 0
 704 0264 3D4B     		ldr	r3, .L39+76
 705 0266 1B88     		ldrh	r3, [r3]
 706 0268 1BB2     		sxth	r3, r3
 707 026a 44F62062 		movw	r2, #20000
 708 026e 9342     		cmp	r3, r2
 709 0270 23DD     		ble	.L33
 710              	.LBB4:
 320:main.c        ****                         LED2_Write(0);
 711              		.loc 1 320 0
 712 0272 0020     		movs	r0, #0
 713 0274 FFF7FEFF 		bl	LED2_Write
 321:main.c        ****                         LED7_Write(1);                                          //turn LED on      
 714              		.loc 1 321 0
 715 0278 0120     		movs	r0, #1
 716 027a FFF7FEFF 		bl	LED7_Write
 322:main.c        ****                         STATE = LANDED;                                     //Switch to LANDED stat
 717              		.loc 1 322 0
 718 027e 2D4B     		ldr	r3, .L39+36
 719 0280 0322     		movs	r2, #3
 720 0282 1A70     		strb	r2, [r3]
 323:main.c        ****                         #ifdef LCD
 324:main.c        ****                             setCursor(0,0);
 721              		.loc 1 324 0
 722 0284 0020     		movs	r0, #0
 723 0286 0021     		movs	r1, #0
 724 0288 FFF7FEFF 		bl	setCursor
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 20


 325:main.c        ****                             clear();
 725              		.loc 1 325 0
 726 028c FFF7FEFF 		bl	clear
 326:main.c        ****                             LCD_print("STATE: LANDED");  
 727              		.loc 1 326 0
 728 0290 3348     		ldr	r0, .L39+80
 729 0292 FFF7FEFF 		bl	LCD_print
 327:main.c        ****                         //I2C_LCD_print(1,0, id ,0,average);
 328:main.c        ****                         #endif
 329:main.c        ****                         char sdbuf[60] = {};
 730              		.loc 1 329 0
 731 0296 3B46     		mov	r3, r7
 732 0298 3C22     		movs	r2, #60
 733 029a 1846     		mov	r0, r3
 734 029c 0021     		movs	r1, #0
 735 029e FFF7FEFF 		bl	memset
 330:main.c        ****                         #ifdef SD
 331:main.c        ****                             sprintf(sdbuf, "STATE: LANDED ***********\n");
 332:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 333:main.c        ****                         #endif
 334:main.c        ****                         id=0;                                                   //reset sample coun
 736              		.loc 1 334 0
 737 02a2 294B     		ldr	r3, .L39+56
 738 02a4 0022     		movs	r2, #0
 739 02a6 1A60     		str	r2, [r3]
 335:main.c        ****                         data_time = 0;
 740              		.loc 1 335 0
 741 02a8 284B     		ldr	r3, .L39+60
 742 02aa 0022     		movs	r2, #0
 743 02ac 1A60     		str	r2, [r3]
 336:main.c        ****                         sum = 0;
 744              		.loc 1 336 0
 745 02ae 294B     		ldr	r3, .L39+68
 746 02b0 0022     		movs	r2, #0
 747 02b2 1A60     		str	r2, [r3]
 337:main.c        ****                         average = 0;                
 748              		.loc 1 337 0
 749 02b4 294B     		ldr	r3, .L39+76
 750 02b6 0022     		movs	r2, #0
 751 02b8 1A80     		strh	r2, [r3]	@ movhi
 752              	.L33:
 753              	.LBE4:
 338:main.c        ****                     }
 339:main.c        ****                     id++;     
 754              		.loc 1 339 0
 755 02ba 234B     		ldr	r3, .L39+56
 756 02bc 1B68     		ldr	r3, [r3]
 757 02be 0133     		adds	r3, r3, #1
 758 02c0 214A     		ldr	r2, .L39+56
 759 02c2 1360     		str	r3, [r2]
 340:main.c        ****                     
 341:main.c        ****                     /*if desired amount of samples have been collected, switch states*/
 342:main.c        ****                     if(data_time >= DATA_TIME){
 760              		.loc 1 342 0
 761 02c4 214B     		ldr	r3, .L39+60
 762 02c6 1B68     		ldr	r3, [r3]
 763 02c8 41F28732 		movw	r2, #4999
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 21


 764 02cc 9342     		cmp	r3, r2
 765 02ce 1ADD     		ble	.L34
 343:main.c        ****                         LED2_Write(0);                                          //turn LED off
 766              		.loc 1 343 0
 767 02d0 0020     		movs	r0, #0
 768 02d2 FFF7FEFF 		bl	LED2_Write
 344:main.c        ****                                                             
 345:main.c        ****                         STATE = WAIT_TO_LAUNCH;                                //Switch to Waiting 
 769              		.loc 1 345 0
 770 02d6 174B     		ldr	r3, .L39+36
 771 02d8 0122     		movs	r2, #1
 772 02da 1A70     		strb	r2, [r3]
 346:main.c        ****                         #ifdef LCD
 347:main.c        ****                             setCursor(0,0);
 773              		.loc 1 347 0
 774 02dc 0020     		movs	r0, #0
 775 02de 0021     		movs	r1, #0
 776 02e0 FFF7FEFF 		bl	setCursor
 348:main.c        ****                             clear();
 777              		.loc 1 348 0
 778 02e4 FFF7FEFF 		bl	clear
 349:main.c        ****                             LCD_print("STATE: WAIT");  
 779              		.loc 1 349 0
 780 02e8 1E48     		ldr	r0, .L39+84
 781 02ea FFF7FEFF 		bl	LCD_print
 350:main.c        ****                         #endif
 351:main.c        ****                         id=0;                                                  //reset sample count
 782              		.loc 1 351 0
 783 02ee 164B     		ldr	r3, .L39+56
 784 02f0 0022     		movs	r2, #0
 785 02f2 1A60     		str	r2, [r3]
 352:main.c        ****                         data_time = 0;
 786              		.loc 1 352 0
 787 02f4 154B     		ldr	r3, .L39+60
 788 02f6 0022     		movs	r2, #0
 789 02f8 1A60     		str	r2, [r3]
 353:main.c        ****                         sum = 0;                                               //reset sum 
 790              		.loc 1 353 0
 791 02fa 164B     		ldr	r3, .L39+68
 792 02fc 0022     		movs	r2, #0
 793 02fe 1A60     		str	r2, [r3]
 354:main.c        ****                         average = 0;
 794              		.loc 1 354 0
 795 0300 164B     		ldr	r3, .L39+76
 796 0302 0022     		movs	r2, #0
 797 0304 1A80     		strh	r2, [r3]	@ movhi
 798              	.L34:
 355:main.c        ****                        
 356:main.c        ****                     }
 357:main.c        ****                     collect_flag = 0;
 799              		.loc 1 357 0
 800 0306 124B     		ldr	r3, .L39+64
 801 0308 0022     		movs	r2, #0
 802 030a 1A70     		strb	r2, [r3]
 803 030c 3AE0     		b	.L35
 804              	.L40:
 805 030e 00BF     		.align	3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 22


 806              	.L39:
 807 0310 8FC2F528 		.word	687194767
 808 0314 5C8F4A3F 		.word	1061850972
 809 0318 98000000 		.word	.LC0
 810 031c 00000000 		.word	Sample_ISR_Handler
 811 0320 00000000 		.word	Addr
 812 0324 00000000 		.word	.LC1
 813 0328 10000000 		.word	.LC2
 814 032c 00000000 		.word	Countdown_ISR_Handler
 815 0330 00401C46 		.word	1176256512
 816 0334 00000000 		.word	STATE
 817 0338 00000000 		.word	wait_flag
 818 033c 00000000 		.word	countdown
 819 0340 1C000000 		.word	.LC3
 820 0344 30000000 		.word	.LC4
 821 0348 00000000 		.word	id
 822 034c 00000000 		.word	data_time
 823 0350 00000000 		.word	collect_flag
 824 0354 00000000 		.word	sum
 825 0358 89888888 		.word	-2004318071
 826 035c 00000000 		.word	average
 827 0360 40000000 		.word	.LC5
 828 0364 50000000 		.word	.LC6
 829              	.L29:
 358:main.c        ****                 }
 359:main.c        ****                 else if(wait_flag == 1){
 830              		.loc 1 359 0
 831 0368 374B     		ldr	r3, .L41
 832 036a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 833 036c 002B     		cmp	r3, #0
 834 036e 09D0     		beq	.L35
 835              	.LBB5:
 360:main.c        ****                        char sdbuf[60] = {};
 836              		.loc 1 360 0
 837 0370 3B46     		mov	r3, r7
 838 0372 3C22     		movs	r2, #60
 839 0374 1846     		mov	r0, r3
 840 0376 0021     		movs	r1, #0
 841 0378 FFF7FEFF 		bl	memset
 361:main.c        ****                         #ifdef SD
 362:main.c        ****                             sprintf(sdbuf, "pressure: %d.%04d, %d\n", num, decimals, (int16)output)
 363:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 364:main.c        ****                         #endif 
 365:main.c        ****                         wait_flag = 0;
 842              		.loc 1 365 0
 843 037c 324B     		ldr	r3, .L41
 844 037e 0022     		movs	r2, #0
 845 0380 1A70     		strb	r2, [r3]
 846              	.LBE5:
 366:main.c        ****                 }
 367:main.c        ****                 break;
 847              		.loc 1 367 0
 848 0382 5FE0     		b	.L28
 849              	.L35:
 850              		.loc 1 367 0 is_stmt 0 discriminator 2
 851 0384 5EE0     		b	.L28
 852              	.L23:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 23


 368:main.c        ****                 
 369:main.c        ****                 case LANDED:
 370:main.c        ****                     CyDelay(5000u);
 853              		.loc 1 370 0 is_stmt 1
 854 0386 41F28830 		movw	r0, #5000
 855 038a FFF7FEFF 		bl	CyDelay
 371:main.c        ****                     Solenoid_1_Write(1); //turn on solenoid 1
 856              		.loc 1 371 0
 857 038e 0120     		movs	r0, #1
 858 0390 FFF7FEFF 		bl	Solenoid_1_Write
 372:main.c        ****                     #ifdef LCD
 373:main.c        ****                         setCursor(0,0);
 859              		.loc 1 373 0
 860 0394 0020     		movs	r0, #0
 861 0396 0021     		movs	r1, #0
 862 0398 FFF7FEFF 		bl	setCursor
 374:main.c        ****                         clear();
 863              		.loc 1 374 0
 864 039c FFF7FEFF 		bl	clear
 375:main.c        ****                         LCD_print("VACUUMING");  
 865              		.loc 1 375 0
 866 03a0 2A48     		ldr	r0, .L41+4
 867 03a2 FFF7FEFF 		bl	LCD_print
 376:main.c        ****                     #endif
 377:main.c        ****                     char sdbuf[60] = {};
 868              		.loc 1 377 0
 869 03a6 3B46     		mov	r3, r7
 870 03a8 3C22     		movs	r2, #60
 871 03aa 1846     		mov	r0, r3
 872 03ac 0021     		movs	r1, #0
 873 03ae FFF7FEFF 		bl	memset
 378:main.c        ****                     #ifdef SD
 379:main.c        ****                             memset(sdbuf, 0, 40);
 380:main.c        ****                             sprintf(sdbuf, "STATE: VACUUMING ***********\n");
 381:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 382:main.c        ****                     #endif
 383:main.c        ****                     CyDelay(7000u);
 874              		.loc 1 383 0
 875 03b2 41F65830 		movw	r0, #7000
 876 03b6 FFF7FEFF 		bl	CyDelay
 384:main.c        ****                     Solenoid_1_Write(0); //turn off soleniod 1
 877              		.loc 1 384 0
 878 03ba 0020     		movs	r0, #0
 879 03bc FFF7FEFF 		bl	Solenoid_1_Write
 385:main.c        ****                     CyDelay(5000u);
 880              		.loc 1 385 0
 881 03c0 41F28830 		movw	r0, #5000
 882 03c4 FFF7FEFF 		bl	CyDelay
 386:main.c        ****                     STATE = RESURFACE;
 883              		.loc 1 386 0
 884 03c8 214B     		ldr	r3, .L41+8
 885 03ca 0422     		movs	r2, #4
 886 03cc 1A70     		strb	r2, [r3]
 387:main.c        ****                     #ifdef LCD
 388:main.c        ****                         setCursor(0,0);
 887              		.loc 1 388 0
 888 03ce 0020     		movs	r0, #0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 24


 889 03d0 0021     		movs	r1, #0
 890 03d2 FFF7FEFF 		bl	setCursor
 389:main.c        ****                         clear();
 891              		.loc 1 389 0
 892 03d6 FFF7FEFF 		bl	clear
 390:main.c        ****                         LCD_print("STATE: RESURFACING");  
 893              		.loc 1 390 0
 894 03da 1E48     		ldr	r0, .L41+12
 895 03dc FFF7FEFF 		bl	LCD_print
 391:main.c        ****                     #endif
 392:main.c        ****                     #ifdef SD
 393:main.c        ****                             memset(sdbuf, 0, 40);
 394:main.c        ****                             sprintf(sdbuf, "STATE: RESURFACING ***********\n");
 395:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 396:main.c        ****                     #endif
 397:main.c        ****                 break;
 896              		.loc 1 397 0
 897 03e0 30E0     		b	.L28
 898              	.L24:
 398:main.c        ****                 
 399:main.c        ****             case RESURFACE:
 400:main.c        ****                 //CyDelay(4000u);
 401:main.c        ****                 if (PANIC_flag)
 899              		.loc 1 401 0
 900 03e2 1D4B     		ldr	r3, .L41+16
 901 03e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 902 03e6 002B     		cmp	r3, #0
 903 03e8 02D0     		beq	.L36
 402:main.c        ****                     LCD_print("WATER DETECTED");
 904              		.loc 1 402 0
 905 03ea 1C48     		ldr	r0, .L41+20
 906 03ec FFF7FEFF 		bl	LCD_print
 907              	.L36:
 403:main.c        ****                 Solenoid_2_Write(1); //turn on solendiod 2
 908              		.loc 1 403 0
 909 03f0 0120     		movs	r0, #1
 910 03f2 FFF7FEFF 		bl	Solenoid_2_Write
 404:main.c        ****                 CyDelay(15000u);
 911              		.loc 1 404 0
 912 03f6 43F69820 		movw	r0, #15000
 913 03fa FFF7FEFF 		bl	CyDelay
 405:main.c        ****                 Solenoid_2_Write(0); //turn off solenoid 2
 914              		.loc 1 405 0
 915 03fe 0020     		movs	r0, #0
 916 0400 FFF7FEFF 		bl	Solenoid_2_Write
 406:main.c        ****                 //check pressure sensor to confirm we are at the surface
 407:main.c        ****                 CyDelay(5000u);                                //wait 10 seconds to lift, for testi
 917              		.loc 1 407 0
 918 0404 41F28830 		movw	r0, #5000
 919 0408 FFF7FEFF 		bl	CyDelay
 408:main.c        ****                 STATE = TRANSMIT;
 920              		.loc 1 408 0
 921 040c 104B     		ldr	r3, .L41+8
 922 040e 0522     		movs	r2, #5
 923 0410 1A70     		strb	r2, [r3]
 409:main.c        ****                 #ifdef LCD
 410:main.c        ****                     setCursor(0,0);
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 25


 924              		.loc 1 410 0
 925 0412 0020     		movs	r0, #0
 926 0414 0021     		movs	r1, #0
 927 0416 FFF7FEFF 		bl	setCursor
 411:main.c        ****                     clear();
 928              		.loc 1 411 0
 929 041a FFF7FEFF 		bl	clear
 412:main.c        ****                     LCD_print("TRANSMIT");  
 930              		.loc 1 412 0
 931 041e 1048     		ldr	r0, .L41+24
 932 0420 FFF7FEFF 		bl	LCD_print
 413:main.c        ****                 #endif
 414:main.c        ****                 #ifdef SD
 415:main.c        ****                     memset(sdbuf, 0, 40);
 416:main.c        ****                     sprintf(sdbuf, "STATE: TRANSMIT ***********\n");
 417:main.c        ****                     FS_Write(fsfile, sdbuf, strlen(sdbuf));
 418:main.c        ****                 #endif
 419:main.c        ****                 break;
 933              		.loc 1 419 0
 934 0424 0EE0     		b	.L28
 935              	.L25:
 420:main.c        ****             case TRANSMIT:
 421:main.c        ****                 LED2_Write(1);
 936              		.loc 1 421 0
 937 0426 0120     		movs	r0, #1
 938 0428 FFF7FEFF 		bl	LED2_Write
 422:main.c        ****                 LED7_Write(1);
 939              		.loc 1 422 0
 940 042c 0120     		movs	r0, #1
 941 042e FFF7FEFF 		bl	LED7_Write
 423:main.c        ****                 #ifdef SD                                   //close old file, open new one
 424:main.c        ****                     FS_FClose(fsfile);
 425:main.c        ****                     sprintf(file, "test%d.txt", ++testnum);
 426:main.c        ****                     fsfile = FS_FOpen(file, "w");
 427:main.c        ****                 #endif 
 428:main.c        ****                 CyDelay(15000u);
 942              		.loc 1 428 0
 943 0432 43F69820 		movw	r0, #15000
 944 0436 FFF7FEFF 		bl	CyDelay
 429:main.c        ****                 STATE = WAIT_TO_LAUNCH;
 945              		.loc 1 429 0
 946 043a 054B     		ldr	r3, .L41+8
 947 043c 0122     		movs	r2, #1
 948 043e 1A70     		strb	r2, [r3]
 430:main.c        ****                 
 431:main.c        **** //            case LANDED:
 432:main.c        **** //                CyDelay(1000u);                             // delay a bit
 433:main.c        **** //                LED2_Write(1);                              // turn on other LED to indicate land
 434:main.c        **** //                STATE = WAIT_TO_LAUNCH;
 435:main.c        **** //                #ifdef LCD
 436:main.c        **** //                    setCursor(0,0);
 437:main.c        **** //                    clear();
 438:main.c        **** //                    LCD_print("STATE: WAIT");
 439:main.c        **** //                #endif 
 440:main.c        **** //                #ifdef SD                                   // close old file, open new one
 441:main.c        **** //                    FS_FClose(fsfile);
 442:main.c        **** //                    sprintf(file, "test%d.txt", ++testnum);
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 26


 443:main.c        **** //                    fsfile = FS_FOpen(file, "w");
 444:main.c        **** //                #endif 
 445:main.c        ****                 break;
 949              		.loc 1 445 0
 950 0440 00E0     		b	.L28
 951              	.L38:
 446:main.c        ****                 
 447:main.c        ****             default:
 448:main.c        ****                 break;
 952              		.loc 1 448 0
 953 0442 00BF     		nop
 954              	.L28:
 955              	.LBE3:
 449:main.c        ****         
 450:main.c        ****         
 451:main.c        ****         }
 452:main.c        ****         
 453:main.c        ****     }
 956              		.loc 1 453 0 discriminator 3
 957 0444 34E6     		b	.L37
 958              	.L42:
 959 0446 00BF     		.align	2
 960              	.L41:
 961 0448 00000000 		.word	wait_flag
 962 044c 5C000000 		.word	.LC7
 963 0450 00000000 		.word	STATE
 964 0454 68000000 		.word	.LC8
 965 0458 00000000 		.word	PANIC_flag
 966 045c 7C000000 		.word	.LC9
 967 0460 8C000000 		.word	.LC10
 968              		.cfi_endproc
 969              	.LFE67:
 970              		.size	main, .-main
 971 0464 AFF30080 		.text
 972              	.Letext0:
 973              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 974              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 975              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 976              		.file 5 ".\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 977              		.file 6 "Generated_Source\\PSoC5/core_cm3.h"
 978              		.file 7 "./mpu6050.h"
 979              		.section	.debug_info,"",%progbits
 980              	.Ldebug_info0:
 981 0000 3F040000 		.4byte	0x43f
 982 0004 0400     		.2byte	0x4
 983 0006 00000000 		.4byte	.Ldebug_abbrev0
 984 000a 04       		.byte	0x4
 985 000b 01       		.uleb128 0x1
 986 000c BB000000 		.4byte	.LASF59
 987 0010 01       		.byte	0x1
 988 0011 99020000 		.4byte	.LASF60
 989 0015 38020000 		.4byte	.LASF61
 990 0019 00000000 		.4byte	.Ldebug_ranges0+0
 991 001d 00000000 		.4byte	0
 992 0021 00000000 		.4byte	.Ldebug_line0
 993 0025 02       		.uleb128 0x2
 994 0026 01       		.byte	0x1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 27


 995 0027 06       		.byte	0x6
 996 0028 B0010000 		.4byte	.LASF0
 997 002c 03       		.uleb128 0x3
 998 002d 58010000 		.4byte	.LASF2
 999 0031 02       		.byte	0x2
 1000 0032 1D       		.byte	0x1d
 1001 0033 37000000 		.4byte	0x37
 1002 0037 02       		.uleb128 0x2
 1003 0038 01       		.byte	0x1
 1004 0039 08       		.byte	0x8
 1005 003a 83010000 		.4byte	.LASF1
 1006 003e 03       		.uleb128 0x3
 1007 003f D3020000 		.4byte	.LASF3
 1008 0043 02       		.byte	0x2
 1009 0044 29       		.byte	0x29
 1010 0045 49000000 		.4byte	0x49
 1011 0049 02       		.uleb128 0x2
 1012 004a 02       		.byte	0x2
 1013 004b 05       		.byte	0x5
 1014 004c 62000000 		.4byte	.LASF4
 1015 0050 02       		.uleb128 0x2
 1016 0051 02       		.byte	0x2
 1017 0052 07       		.byte	0x7
 1018 0053 FB010000 		.4byte	.LASF5
 1019 0057 03       		.uleb128 0x3
 1020 0058 C9020000 		.4byte	.LASF6
 1021 005c 02       		.byte	0x2
 1022 005d 3F       		.byte	0x3f
 1023 005e 62000000 		.4byte	0x62
 1024 0062 02       		.uleb128 0x2
 1025 0063 04       		.byte	0x4
 1026 0064 05       		.byte	0x5
 1027 0065 13020000 		.4byte	.LASF7
 1028 0069 03       		.uleb128 0x3
 1029 006a BE020000 		.4byte	.LASF8
 1030 006e 02       		.byte	0x2
 1031 006f 41       		.byte	0x41
 1032 0070 74000000 		.4byte	0x74
 1033 0074 02       		.uleb128 0x2
 1034 0075 04       		.byte	0x4
 1035 0076 07       		.byte	0x7
 1036 0077 A5020000 		.4byte	.LASF9
 1037 007b 02       		.uleb128 0x2
 1038 007c 08       		.byte	0x8
 1039 007d 05       		.byte	0x5
 1040 007e 9C000000 		.4byte	.LASF10
 1041 0082 02       		.uleb128 0x2
 1042 0083 08       		.byte	0x8
 1043 0084 07       		.byte	0x7
 1044 0085 BC010000 		.4byte	.LASF11
 1045 0089 04       		.uleb128 0x4
 1046 008a 04       		.byte	0x4
 1047 008b 05       		.byte	0x5
 1048 008c 696E7400 		.ascii	"int\000"
 1049 0090 02       		.uleb128 0x2
 1050 0091 04       		.byte	0x4
 1051 0092 07       		.byte	0x7
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 28


 1052 0093 E6010000 		.4byte	.LASF12
 1053 0097 03       		.uleb128 0x3
 1054 0098 77000000 		.4byte	.LASF13
 1055 009c 03       		.byte	0x3
 1056 009d 15       		.byte	0x15
 1057 009e 2C000000 		.4byte	0x2c
 1058 00a2 03       		.uleb128 0x3
 1059 00a3 24020000 		.4byte	.LASF14
 1060 00a7 03       		.byte	0x3
 1061 00a8 20       		.byte	0x20
 1062 00a9 3E000000 		.4byte	0x3e
 1063 00ad 03       		.uleb128 0x3
 1064 00ae 1C020000 		.4byte	.LASF15
 1065 00b2 03       		.byte	0x3
 1066 00b3 2C       		.byte	0x2c
 1067 00b4 57000000 		.4byte	0x57
 1068 00b8 03       		.uleb128 0x3
 1069 00b9 D3010000 		.4byte	.LASF16
 1070 00bd 03       		.byte	0x3
 1071 00be 2D       		.byte	0x2d
 1072 00bf 69000000 		.4byte	0x69
 1073 00c3 05       		.uleb128 0x5
 1074 00c4 2C020000 		.4byte	.LASF17
 1075 00c8 04       		.byte	0x4
 1076 00c9 9201     		.2byte	0x192
 1077 00cb 37000000 		.4byte	0x37
 1078 00cf 02       		.uleb128 0x2
 1079 00d0 04       		.byte	0x4
 1080 00d1 04       		.byte	0x4
 1081 00d2 91000000 		.4byte	.LASF18
 1082 00d6 02       		.uleb128 0x2
 1083 00d7 08       		.byte	0x8
 1084 00d8 04       		.byte	0x4
 1085 00d9 B7020000 		.4byte	.LASF19
 1086 00dd 02       		.uleb128 0x2
 1087 00de 01       		.byte	0x1
 1088 00df 08       		.byte	0x8
 1089 00e0 0E020000 		.4byte	.LASF20
 1090 00e4 05       		.uleb128 0x5
 1091 00e5 A0020000 		.4byte	.LASF21
 1092 00e9 04       		.byte	0x4
 1093 00ea 3C02     		.2byte	0x23c
 1094 00ec F0000000 		.4byte	0xf0
 1095 00f0 06       		.uleb128 0x6
 1096 00f1 C3000000 		.4byte	0xc3
 1097 00f5 02       		.uleb128 0x2
 1098 00f6 04       		.byte	0x4
 1099 00f7 07       		.byte	0x7
 1100 00f8 DD020000 		.4byte	.LASF22
 1101 00fc 03       		.uleb128 0x3
 1102 00fd 9E010000 		.4byte	.LASF23
 1103 0101 05       		.byte	0x5
 1104 0102 7E       		.byte	0x7e
 1105 0103 07010000 		.4byte	0x107
 1106 0107 07       		.uleb128 0x7
 1107 0108 9E010000 		.4byte	.LASF23
 1108 010c 08       		.uleb128 0x8
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 29


 1109 010d 04       		.byte	0x4
 1110 010e FC000000 		.4byte	0xfc
 1111 0112 02       		.uleb128 0x2
 1112 0113 08       		.byte	0x8
 1113 0114 04       		.byte	0x4
 1114 0115 68010000 		.4byte	.LASF24
 1115 0119 09       		.uleb128 0x9
 1116 011a 22000000 		.4byte	.LASF62
 1117 011e 01       		.byte	0x1
 1118 011f 01       		.byte	0x1
 1119 0120 31       		.byte	0x31
 1120 0121 50010000 		.4byte	0x150
 1121 0125 0A       		.uleb128 0xa
 1122 0126 15000000 		.4byte	.LASF25
 1123 012a 00       		.sleb128 0
 1124 012b 0A       		.uleb128 0xa
 1125 012c 74010000 		.4byte	.LASF26
 1126 0130 01       		.sleb128 1
 1127 0131 0A       		.uleb128 0xa
 1128 0132 0A000000 		.4byte	.LASF27
 1129 0136 02       		.sleb128 2
 1130 0137 0A       		.uleb128 0xa
 1131 0138 3C000000 		.4byte	.LASF28
 1132 013c 03       		.sleb128 3
 1133 013d 0A       		.uleb128 0xa
 1134 013e 00000000 		.4byte	.LASF29
 1135 0142 04       		.sleb128 4
 1136 0143 0A       		.uleb128 0xa
 1137 0144 B2000000 		.4byte	.LASF30
 1138 0148 05       		.sleb128 5
 1139 0149 0A       		.uleb128 0xa
 1140 014a 62010000 		.4byte	.LASF31
 1141 014e 06       		.sleb128 6
 1142 014f 00       		.byte	0
 1143 0150 0B       		.uleb128 0xb
 1144 0151 91010000 		.4byte	.LASF63
 1145 0155 01       		.byte	0x1
 1146 0156 62       		.byte	0x62
 1147 0157 00000000 		.4byte	.LFB63
 1148 015b 70000000 		.4byte	.LFE63-.LFB63
 1149 015f 01       		.uleb128 0x1
 1150 0160 9C       		.byte	0x9c
 1151 0161 0C       		.uleb128 0xc
 1152 0162 48000000 		.4byte	.LASF32
 1153 0166 01       		.byte	0x1
 1154 0167 71       		.byte	0x71
 1155 0168 00000000 		.4byte	.LFB64
 1156 016c 20000000 		.4byte	.LFE64-.LFB64
 1157 0170 01       		.uleb128 0x1
 1158 0171 9C       		.byte	0x9c
 1159 0172 0D       		.uleb128 0xd
 1160 0173 17030000 		.4byte	.LASF33
 1161 0177 01       		.byte	0x1
 1162 0178 78       		.byte	0x78
 1163 0179 00000000 		.4byte	.LFB65
 1164 017d 38000000 		.4byte	.LFE65-.LFB65
 1165 0181 01       		.uleb128 0x1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 30


 1166 0182 9C       		.byte	0x9c
 1167 0183 0D       		.uleb128 0xd
 1168 0184 83020000 		.4byte	.LASF34
 1169 0188 01       		.byte	0x1
 1170 0189 82       		.byte	0x82
 1171 018a 00000000 		.4byte	.LFB66
 1172 018e 4C000000 		.4byte	.LFE66-.LFB66
 1173 0192 01       		.uleb128 0x1
 1174 0193 9C       		.byte	0x9c
 1175 0194 0E       		.uleb128 0xe
 1176 0195 43000000 		.4byte	.LASF64
 1177 0199 01       		.byte	0x1
 1178 019a 8E       		.byte	0x8e
 1179 019b 89000000 		.4byte	0x89
 1180 019f 00000000 		.4byte	.LFB67
 1181 01a3 64040000 		.4byte	.LFE67-.LFB67
 1182 01a7 01       		.uleb128 0x1
 1183 01a8 9C       		.byte	0x9c
 1184 01a9 B9020000 		.4byte	0x2b9
 1185 01ad 0F       		.uleb128 0xf
 1186 01ae EC020000 		.4byte	.LASF35
 1187 01b2 01       		.byte	0x1
 1188 01b3 91       		.byte	0x91
 1189 01b4 CF000000 		.4byte	0xcf
 1190 01b8 02       		.uleb128 0x2
 1191 01b9 91       		.byte	0x91
 1192 01ba 58       		.sleb128 -40
 1193 01bb 10       		.uleb128 0x10
 1194 01bc 62756600 		.ascii	"buf\000"
 1195 01c0 01       		.byte	0x1
 1196 01c1 92       		.byte	0x92
 1197 01c2 B9020000 		.4byte	0x2b9
 1198 01c6 03       		.uleb128 0x3
 1199 01c7 91       		.byte	0x91
 1200 01c8 A47F     		.sleb128 -92
 1201 01ca 0F       		.uleb128 0xf
 1202 01cb 6A020000 		.4byte	.LASF36
 1203 01cf 01       		.byte	0x1
 1204 01d0 94       		.byte	0x94
 1205 01d1 C9020000 		.4byte	0x2c9
 1206 01d5 03       		.uleb128 0x3
 1207 01d6 91       		.byte	0x91
 1208 01d7 947F     		.sleb128 -108
 1209 01d9 11       		.uleb128 0x11
 1210 01da 617800   		.ascii	"ax\000"
 1211 01dd 01       		.byte	0x1
 1212 01de 95       		.byte	0x95
 1213 01df A2000000 		.4byte	0xa2
 1214 01e3 11       		.uleb128 0x11
 1215 01e4 617900   		.ascii	"ay\000"
 1216 01e7 01       		.byte	0x1
 1217 01e8 95       		.byte	0x95
 1218 01e9 A2000000 		.4byte	0xa2
 1219 01ed 10       		.uleb128 0x10
 1220 01ee 617A00   		.ascii	"az\000"
 1221 01f1 01       		.byte	0x1
 1222 01f2 95       		.byte	0x95
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 31


 1223 01f3 A2000000 		.4byte	0xa2
 1224 01f7 02       		.uleb128 0x2
 1225 01f8 91       		.byte	0x91
 1226 01f9 56       		.sleb128 -42
 1227 01fa 11       		.uleb128 0x11
 1228 01fb 6900     		.ascii	"i\000"
 1229 01fd 01       		.byte	0x1
 1230 01fe 95       		.byte	0x95
 1231 01ff A2000000 		.4byte	0xa2
 1232 0203 0F       		.uleb128 0xf
 1233 0204 73020000 		.4byte	.LASF37
 1234 0208 01       		.byte	0x1
 1235 0209 97       		.byte	0x97
 1236 020a A2000000 		.4byte	0xa2
 1237 020e 02       		.uleb128 0x2
 1238 020f 91       		.byte	0x91
 1239 0210 6E       		.sleb128 -18
 1240 0211 10       		.uleb128 0x10
 1241 0212 6E756D00 		.ascii	"num\000"
 1242 0216 01       		.byte	0x1
 1243 0217 F2       		.byte	0xf2
 1244 0218 89000000 		.4byte	0x89
 1245 021c 02       		.uleb128 0x2
 1246 021d 91       		.byte	0x91
 1247 021e 68       		.sleb128 -24
 1248 021f 0F       		.uleb128 0xf
 1249 0220 88000000 		.4byte	.LASF38
 1250 0224 01       		.byte	0x1
 1251 0225 F2       		.byte	0xf2
 1252 0226 89000000 		.4byte	0x89
 1253 022a 02       		.uleb128 0x2
 1254 022b 91       		.byte	0x91
 1255 022c 64       		.sleb128 -28
 1256 022d 0F       		.uleb128 0xf
 1257 022e 49010000 		.4byte	.LASF39
 1258 0232 01       		.byte	0x1
 1259 0233 F3       		.byte	0xf3
 1260 0234 CF000000 		.4byte	0xcf
 1261 0238 02       		.uleb128 0x2
 1262 0239 91       		.byte	0x91
 1263 023a 60       		.sleb128 -32
 1264 023b 0F       		.uleb128 0xf
 1265 023c 97000000 		.4byte	.LASF40
 1266 0240 01       		.byte	0x1
 1267 0241 F3       		.byte	0xf3
 1268 0242 CF000000 		.4byte	0xcf
 1269 0246 02       		.uleb128 0x2
 1270 0247 91       		.byte	0x91
 1271 0248 5C       		.sleb128 -36
 1272 0249 12       		.uleb128 0x12
 1273 024a CA000000 		.4byte	.LBB2
 1274 024e 86000000 		.4byte	.LBE2-.LBB2
 1275 0252 66020000 		.4byte	0x266
 1276 0256 0F       		.uleb128 0xf
 1277 0257 7F000000 		.4byte	.LASF41
 1278 025b 01       		.byte	0x1
 1279 025c FC       		.byte	0xfc
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 32


 1280 025d B9020000 		.4byte	0x2b9
 1281 0261 03       		.uleb128 0x3
 1282 0262 91       		.byte	0x91
 1283 0263 D87E     		.sleb128 -168
 1284 0265 00       		.byte	0
 1285 0266 13       		.uleb128 0x13
 1286 0267 80010000 		.4byte	.LBB3
 1287 026b C4020000 		.4byte	.LBE3-.LBB3
 1288 026f 14       		.uleb128 0x14
 1289 0270 29000000 		.4byte	.LASF42
 1290 0274 01       		.byte	0x1
 1291 0275 7901     		.2byte	0x179
 1292 0277 D9020000 		.4byte	0x2d9
 1293 027b 03       		.uleb128 0x3
 1294 027c 91       		.byte	0x91
 1295 027d D87E     		.sleb128 -168
 1296 027f 12       		.uleb128 0x12
 1297 0280 72020000 		.4byte	.LBB4
 1298 0284 48000000 		.4byte	.LBE4-.LBB4
 1299 0288 9D020000 		.4byte	0x29d
 1300 028c 14       		.uleb128 0x14
 1301 028d 29000000 		.4byte	.LASF42
 1302 0291 01       		.byte	0x1
 1303 0292 4901     		.2byte	0x149
 1304 0294 D9020000 		.4byte	0x2d9
 1305 0298 03       		.uleb128 0x3
 1306 0299 91       		.byte	0x91
 1307 029a D87E     		.sleb128 -168
 1308 029c 00       		.byte	0
 1309 029d 13       		.uleb128 0x13
 1310 029e 70030000 		.4byte	.LBB5
 1311 02a2 12000000 		.4byte	.LBE5-.LBB5
 1312 02a6 14       		.uleb128 0x14
 1313 02a7 29000000 		.4byte	.LASF42
 1314 02ab 01       		.byte	0x1
 1315 02ac 6801     		.2byte	0x168
 1316 02ae D9020000 		.4byte	0x2d9
 1317 02b2 03       		.uleb128 0x3
 1318 02b3 91       		.byte	0x91
 1319 02b4 D87E     		.sleb128 -168
 1320 02b6 00       		.byte	0
 1321 02b7 00       		.byte	0
 1322 02b8 00       		.byte	0
 1323 02b9 15       		.uleb128 0x15
 1324 02ba DD000000 		.4byte	0xdd
 1325 02be C9020000 		.4byte	0x2c9
 1326 02c2 16       		.uleb128 0x16
 1327 02c3 F5000000 		.4byte	0xf5
 1328 02c7 31       		.byte	0x31
 1329 02c8 00       		.byte	0
 1330 02c9 15       		.uleb128 0x15
 1331 02ca DD000000 		.4byte	0xdd
 1332 02ce D9020000 		.4byte	0x2d9
 1333 02d2 16       		.uleb128 0x16
 1334 02d3 F5000000 		.4byte	0xf5
 1335 02d7 0D       		.byte	0xd
 1336 02d8 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 33


 1337 02d9 15       		.uleb128 0x15
 1338 02da DD000000 		.4byte	0xdd
 1339 02de E9020000 		.4byte	0x2e9
 1340 02e2 16       		.uleb128 0x16
 1341 02e3 F5000000 		.4byte	0xf5
 1342 02e7 3B       		.byte	0x3b
 1343 02e8 00       		.byte	0
 1344 02e9 17       		.uleb128 0x17
 1345 02ea 00030000 		.4byte	.LASF43
 1346 02ee 06       		.byte	0x6
 1347 02ef 9606     		.2byte	0x696
 1348 02f1 F5020000 		.4byte	0x2f5
 1349 02f5 06       		.uleb128 0x6
 1350 02f6 AD000000 		.4byte	0xad
 1351 02fa 18       		.uleb128 0x18
 1352 02fb 34000000 		.4byte	.LASF44
 1353 02ff 07       		.byte	0x7
 1354 0300 9101     		.2byte	0x191
 1355 0302 97000000 		.4byte	0x97
 1356 0306 05       		.uleb128 0x5
 1357 0307 03       		.byte	0x3
 1358 0308 00000000 		.4byte	devAddr
 1359 030c 15       		.uleb128 0x15
 1360 030d 97000000 		.4byte	0x97
 1361 0311 1C030000 		.4byte	0x31c
 1362 0315 16       		.uleb128 0x16
 1363 0316 F5000000 		.4byte	0xf5
 1364 031a 15       		.byte	0x15
 1365 031b 00       		.byte	0
 1366 031c 18       		.uleb128 0x18
 1367 031d 7C020000 		.4byte	.LASF45
 1368 0321 07       		.byte	0x7
 1369 0322 9201     		.2byte	0x192
 1370 0324 0C030000 		.4byte	0x30c
 1371 0328 05       		.uleb128 0x5
 1372 0329 03       		.byte	0x3
 1373 032a 00000000 		.4byte	buffer
 1374 032e 19       		.uleb128 0x19
 1375 032f 2F000000 		.4byte	.LASF46
 1376 0333 01       		.byte	0x1
 1377 0334 3C       		.byte	0x3c
 1378 0335 B8000000 		.4byte	0xb8
 1379 0339 05       		.uleb128 0x5
 1380 033a 03       		.byte	0x3
 1381 033b 00000000 		.4byte	Addr
 1382 033f 1A       		.uleb128 0x1a
 1383 0340 696400   		.ascii	"id\000"
 1384 0343 01       		.byte	0x1
 1385 0344 3D       		.byte	0x3d
 1386 0345 62000000 		.4byte	0x62
 1387 0349 05       		.uleb128 0x5
 1388 034a 03       		.byte	0x3
 1389 034b 00000000 		.4byte	id
 1390 034f 19       		.uleb128 0x19
 1391 0350 DC010000 		.4byte	.LASF47
 1392 0354 01       		.byte	0x1
 1393 0355 3E       		.byte	0x3e
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 34


 1394 0356 62000000 		.4byte	0x62
 1395 035a 05       		.uleb128 0x5
 1396 035b 03       		.byte	0x3
 1397 035c 00000000 		.4byte	data_time
 1398 0360 1A       		.uleb128 0x1a
 1399 0361 73756D00 		.ascii	"sum\000"
 1400 0365 01       		.byte	0x1
 1401 0366 40       		.byte	0x40
 1402 0367 62000000 		.4byte	0x62
 1403 036b 05       		.uleb128 0x5
 1404 036c 03       		.byte	0x3
 1405 036d 00000000 		.4byte	sum
 1406 0371 19       		.uleb128 0x19
 1407 0372 AA000000 		.4byte	.LASF48
 1408 0376 01       		.byte	0x1
 1409 0377 41       		.byte	0x41
 1410 0378 A2000000 		.4byte	0xa2
 1411 037c 05       		.uleb128 0x5
 1412 037d 03       		.byte	0x3
 1413 037e 00000000 		.4byte	average
 1414 0382 19       		.uleb128 0x19
 1415 0383 F3020000 		.4byte	.LASF49
 1416 0387 01       		.byte	0x1
 1417 0388 42       		.byte	0x42
 1418 0389 93030000 		.4byte	0x393
 1419 038d 05       		.uleb128 0x5
 1420 038e 03       		.byte	0x3
 1421 038f 00000000 		.4byte	collect_flag
 1422 0393 02       		.uleb128 0x2
 1423 0394 01       		.byte	0x1
 1424 0395 02       		.byte	0x2
 1425 0396 32020000 		.4byte	.LASF50
 1426 039a 19       		.uleb128 0x19
 1427 039b 0D030000 		.4byte	.LASF51
 1428 039f 01       		.byte	0x1
 1429 03a0 43       		.byte	0x43
 1430 03a1 93030000 		.4byte	0x393
 1431 03a5 05       		.uleb128 0x5
 1432 03a6 03       		.byte	0x3
 1433 03a7 00000000 		.4byte	wait_flag
 1434 03ab 19       		.uleb128 0x19
 1435 03ac 6C000000 		.4byte	.LASF52
 1436 03b0 01       		.byte	0x1
 1437 03b1 44       		.byte	0x44
 1438 03b2 93030000 		.4byte	0x393
 1439 03b6 05       		.uleb128 0x5
 1440 03b7 03       		.byte	0x3
 1441 03b8 00000000 		.4byte	PANIC_flag
 1442 03bc 19       		.uleb128 0x19
 1443 03bd E6020000 		.4byte	.LASF53
 1444 03c1 01       		.byte	0x1
 1445 03c2 46       		.byte	0x46
 1446 03c3 19010000 		.4byte	0x119
 1447 03c7 05       		.uleb128 0x5
 1448 03c8 03       		.byte	0x3
 1449 03c9 00000000 		.4byte	STATE
 1450 03cd 19       		.uleb128 0x19
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 35


 1451 03ce F3010000 		.4byte	.LASF54
 1452 03d2 01       		.byte	0x1
 1453 03d3 47       		.byte	0x47
 1454 03d4 97000000 		.4byte	0x97
 1455 03d8 05       		.uleb128 0x5
 1456 03d9 03       		.byte	0x3
 1457 03da 00000000 		.4byte	testnum
 1458 03de 19       		.uleb128 0x19
 1459 03df A6010000 		.4byte	.LASF55
 1460 03e3 01       		.byte	0x1
 1461 03e4 47       		.byte	0x47
 1462 03e5 97000000 		.4byte	0x97
 1463 03e9 05       		.uleb128 0x5
 1464 03ea 03       		.byte	0x3
 1465 03eb 00000000 		.4byte	countdown
 1466 03ef 15       		.uleb128 0x15
 1467 03f0 DD000000 		.4byte	0xdd
 1468 03f4 FF030000 		.4byte	0x3ff
 1469 03f8 16       		.uleb128 0x16
 1470 03f9 F5000000 		.4byte	0xf5
 1471 03fd 0A       		.byte	0xa
 1472 03fe 00       		.byte	0
 1473 03ff 19       		.uleb128 0x19
 1474 0400 5D000000 		.4byte	.LASF56
 1475 0404 01       		.byte	0x1
 1476 0405 48       		.byte	0x48
 1477 0406 EF030000 		.4byte	0x3ef
 1478 040a 05       		.uleb128 0x5
 1479 040b 03       		.byte	0x3
 1480 040c 00000000 		.4byte	file
 1481 0410 15       		.uleb128 0x15
 1482 0411 DD000000 		.4byte	0xdd
 1483 0415 20040000 		.4byte	0x420
 1484 0419 16       		.uleb128 0x16
 1485 041a F5000000 		.4byte	0xf5
 1486 041e 09       		.byte	0x9
 1487 041f 00       		.byte	0
 1488 0420 19       		.uleb128 0x19
 1489 0421 51010000 		.4byte	.LASF57
 1490 0425 01       		.byte	0x1
 1491 0426 49       		.byte	0x49
 1492 0427 10040000 		.4byte	0x410
 1493 042b 05       		.uleb128 0x5
 1494 042c 03       		.byte	0x3
 1495 042d 00000000 		.4byte	volume
 1496 0431 19       		.uleb128 0x19
 1497 0432 2A030000 		.4byte	.LASF58
 1498 0436 01       		.byte	0x1
 1499 0437 4A       		.byte	0x4a
 1500 0438 0C010000 		.4byte	0x10c
 1501 043c 05       		.uleb128 0x5
 1502 043d 03       		.byte	0x3
 1503 043e 00000000 		.4byte	fsfile
 1504 0442 00       		.byte	0
 1505              		.section	.debug_abbrev,"",%progbits
 1506              	.Ldebug_abbrev0:
 1507 0000 01       		.uleb128 0x1
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 36


 1508 0001 11       		.uleb128 0x11
 1509 0002 01       		.byte	0x1
 1510 0003 25       		.uleb128 0x25
 1511 0004 0E       		.uleb128 0xe
 1512 0005 13       		.uleb128 0x13
 1513 0006 0B       		.uleb128 0xb
 1514 0007 03       		.uleb128 0x3
 1515 0008 0E       		.uleb128 0xe
 1516 0009 1B       		.uleb128 0x1b
 1517 000a 0E       		.uleb128 0xe
 1518 000b 55       		.uleb128 0x55
 1519 000c 17       		.uleb128 0x17
 1520 000d 11       		.uleb128 0x11
 1521 000e 01       		.uleb128 0x1
 1522 000f 10       		.uleb128 0x10
 1523 0010 17       		.uleb128 0x17
 1524 0011 00       		.byte	0
 1525 0012 00       		.byte	0
 1526 0013 02       		.uleb128 0x2
 1527 0014 24       		.uleb128 0x24
 1528 0015 00       		.byte	0
 1529 0016 0B       		.uleb128 0xb
 1530 0017 0B       		.uleb128 0xb
 1531 0018 3E       		.uleb128 0x3e
 1532 0019 0B       		.uleb128 0xb
 1533 001a 03       		.uleb128 0x3
 1534 001b 0E       		.uleb128 0xe
 1535 001c 00       		.byte	0
 1536 001d 00       		.byte	0
 1537 001e 03       		.uleb128 0x3
 1538 001f 16       		.uleb128 0x16
 1539 0020 00       		.byte	0
 1540 0021 03       		.uleb128 0x3
 1541 0022 0E       		.uleb128 0xe
 1542 0023 3A       		.uleb128 0x3a
 1543 0024 0B       		.uleb128 0xb
 1544 0025 3B       		.uleb128 0x3b
 1545 0026 0B       		.uleb128 0xb
 1546 0027 49       		.uleb128 0x49
 1547 0028 13       		.uleb128 0x13
 1548 0029 00       		.byte	0
 1549 002a 00       		.byte	0
 1550 002b 04       		.uleb128 0x4
 1551 002c 24       		.uleb128 0x24
 1552 002d 00       		.byte	0
 1553 002e 0B       		.uleb128 0xb
 1554 002f 0B       		.uleb128 0xb
 1555 0030 3E       		.uleb128 0x3e
 1556 0031 0B       		.uleb128 0xb
 1557 0032 03       		.uleb128 0x3
 1558 0033 08       		.uleb128 0x8
 1559 0034 00       		.byte	0
 1560 0035 00       		.byte	0
 1561 0036 05       		.uleb128 0x5
 1562 0037 16       		.uleb128 0x16
 1563 0038 00       		.byte	0
 1564 0039 03       		.uleb128 0x3
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 37


 1565 003a 0E       		.uleb128 0xe
 1566 003b 3A       		.uleb128 0x3a
 1567 003c 0B       		.uleb128 0xb
 1568 003d 3B       		.uleb128 0x3b
 1569 003e 05       		.uleb128 0x5
 1570 003f 49       		.uleb128 0x49
 1571 0040 13       		.uleb128 0x13
 1572 0041 00       		.byte	0
 1573 0042 00       		.byte	0
 1574 0043 06       		.uleb128 0x6
 1575 0044 35       		.uleb128 0x35
 1576 0045 00       		.byte	0
 1577 0046 49       		.uleb128 0x49
 1578 0047 13       		.uleb128 0x13
 1579 0048 00       		.byte	0
 1580 0049 00       		.byte	0
 1581 004a 07       		.uleb128 0x7
 1582 004b 13       		.uleb128 0x13
 1583 004c 00       		.byte	0
 1584 004d 03       		.uleb128 0x3
 1585 004e 0E       		.uleb128 0xe
 1586 004f 3C       		.uleb128 0x3c
 1587 0050 19       		.uleb128 0x19
 1588 0051 00       		.byte	0
 1589 0052 00       		.byte	0
 1590 0053 08       		.uleb128 0x8
 1591 0054 0F       		.uleb128 0xf
 1592 0055 00       		.byte	0
 1593 0056 0B       		.uleb128 0xb
 1594 0057 0B       		.uleb128 0xb
 1595 0058 49       		.uleb128 0x49
 1596 0059 13       		.uleb128 0x13
 1597 005a 00       		.byte	0
 1598 005b 00       		.byte	0
 1599 005c 09       		.uleb128 0x9
 1600 005d 04       		.uleb128 0x4
 1601 005e 01       		.byte	0x1
 1602 005f 03       		.uleb128 0x3
 1603 0060 0E       		.uleb128 0xe
 1604 0061 0B       		.uleb128 0xb
 1605 0062 0B       		.uleb128 0xb
 1606 0063 3A       		.uleb128 0x3a
 1607 0064 0B       		.uleb128 0xb
 1608 0065 3B       		.uleb128 0x3b
 1609 0066 0B       		.uleb128 0xb
 1610 0067 01       		.uleb128 0x1
 1611 0068 13       		.uleb128 0x13
 1612 0069 00       		.byte	0
 1613 006a 00       		.byte	0
 1614 006b 0A       		.uleb128 0xa
 1615 006c 28       		.uleb128 0x28
 1616 006d 00       		.byte	0
 1617 006e 03       		.uleb128 0x3
 1618 006f 0E       		.uleb128 0xe
 1619 0070 1C       		.uleb128 0x1c
 1620 0071 0D       		.uleb128 0xd
 1621 0072 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 38


 1622 0073 00       		.byte	0
 1623 0074 0B       		.uleb128 0xb
 1624 0075 2E       		.uleb128 0x2e
 1625 0076 00       		.byte	0
 1626 0077 3F       		.uleb128 0x3f
 1627 0078 19       		.uleb128 0x19
 1628 0079 03       		.uleb128 0x3
 1629 007a 0E       		.uleb128 0xe
 1630 007b 3A       		.uleb128 0x3a
 1631 007c 0B       		.uleb128 0xb
 1632 007d 3B       		.uleb128 0x3b
 1633 007e 0B       		.uleb128 0xb
 1634 007f 11       		.uleb128 0x11
 1635 0080 01       		.uleb128 0x1
 1636 0081 12       		.uleb128 0x12
 1637 0082 06       		.uleb128 0x6
 1638 0083 40       		.uleb128 0x40
 1639 0084 18       		.uleb128 0x18
 1640 0085 9742     		.uleb128 0x2117
 1641 0087 19       		.uleb128 0x19
 1642 0088 00       		.byte	0
 1643 0089 00       		.byte	0
 1644 008a 0C       		.uleb128 0xc
 1645 008b 2E       		.uleb128 0x2e
 1646 008c 00       		.byte	0
 1647 008d 3F       		.uleb128 0x3f
 1648 008e 19       		.uleb128 0x19
 1649 008f 03       		.uleb128 0x3
 1650 0090 0E       		.uleb128 0xe
 1651 0091 3A       		.uleb128 0x3a
 1652 0092 0B       		.uleb128 0xb
 1653 0093 3B       		.uleb128 0x3b
 1654 0094 0B       		.uleb128 0xb
 1655 0095 27       		.uleb128 0x27
 1656 0096 19       		.uleb128 0x19
 1657 0097 11       		.uleb128 0x11
 1658 0098 01       		.uleb128 0x1
 1659 0099 12       		.uleb128 0x12
 1660 009a 06       		.uleb128 0x6
 1661 009b 40       		.uleb128 0x40
 1662 009c 18       		.uleb128 0x18
 1663 009d 9642     		.uleb128 0x2116
 1664 009f 19       		.uleb128 0x19
 1665 00a0 00       		.byte	0
 1666 00a1 00       		.byte	0
 1667 00a2 0D       		.uleb128 0xd
 1668 00a3 2E       		.uleb128 0x2e
 1669 00a4 00       		.byte	0
 1670 00a5 3F       		.uleb128 0x3f
 1671 00a6 19       		.uleb128 0x19
 1672 00a7 03       		.uleb128 0x3
 1673 00a8 0E       		.uleb128 0xe
 1674 00a9 3A       		.uleb128 0x3a
 1675 00aa 0B       		.uleb128 0xb
 1676 00ab 3B       		.uleb128 0x3b
 1677 00ac 0B       		.uleb128 0xb
 1678 00ad 27       		.uleb128 0x27
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 39


 1679 00ae 19       		.uleb128 0x19
 1680 00af 11       		.uleb128 0x11
 1681 00b0 01       		.uleb128 0x1
 1682 00b1 12       		.uleb128 0x12
 1683 00b2 06       		.uleb128 0x6
 1684 00b3 40       		.uleb128 0x40
 1685 00b4 18       		.uleb128 0x18
 1686 00b5 9742     		.uleb128 0x2117
 1687 00b7 19       		.uleb128 0x19
 1688 00b8 00       		.byte	0
 1689 00b9 00       		.byte	0
 1690 00ba 0E       		.uleb128 0xe
 1691 00bb 2E       		.uleb128 0x2e
 1692 00bc 01       		.byte	0x1
 1693 00bd 3F       		.uleb128 0x3f
 1694 00be 19       		.uleb128 0x19
 1695 00bf 03       		.uleb128 0x3
 1696 00c0 0E       		.uleb128 0xe
 1697 00c1 3A       		.uleb128 0x3a
 1698 00c2 0B       		.uleb128 0xb
 1699 00c3 3B       		.uleb128 0x3b
 1700 00c4 0B       		.uleb128 0xb
 1701 00c5 49       		.uleb128 0x49
 1702 00c6 13       		.uleb128 0x13
 1703 00c7 11       		.uleb128 0x11
 1704 00c8 01       		.uleb128 0x1
 1705 00c9 12       		.uleb128 0x12
 1706 00ca 06       		.uleb128 0x6
 1707 00cb 40       		.uleb128 0x40
 1708 00cc 18       		.uleb128 0x18
 1709 00cd 9642     		.uleb128 0x2116
 1710 00cf 19       		.uleb128 0x19
 1711 00d0 01       		.uleb128 0x1
 1712 00d1 13       		.uleb128 0x13
 1713 00d2 00       		.byte	0
 1714 00d3 00       		.byte	0
 1715 00d4 0F       		.uleb128 0xf
 1716 00d5 34       		.uleb128 0x34
 1717 00d6 00       		.byte	0
 1718 00d7 03       		.uleb128 0x3
 1719 00d8 0E       		.uleb128 0xe
 1720 00d9 3A       		.uleb128 0x3a
 1721 00da 0B       		.uleb128 0xb
 1722 00db 3B       		.uleb128 0x3b
 1723 00dc 0B       		.uleb128 0xb
 1724 00dd 49       		.uleb128 0x49
 1725 00de 13       		.uleb128 0x13
 1726 00df 02       		.uleb128 0x2
 1727 00e0 18       		.uleb128 0x18
 1728 00e1 00       		.byte	0
 1729 00e2 00       		.byte	0
 1730 00e3 10       		.uleb128 0x10
 1731 00e4 34       		.uleb128 0x34
 1732 00e5 00       		.byte	0
 1733 00e6 03       		.uleb128 0x3
 1734 00e7 08       		.uleb128 0x8
 1735 00e8 3A       		.uleb128 0x3a
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 40


 1736 00e9 0B       		.uleb128 0xb
 1737 00ea 3B       		.uleb128 0x3b
 1738 00eb 0B       		.uleb128 0xb
 1739 00ec 49       		.uleb128 0x49
 1740 00ed 13       		.uleb128 0x13
 1741 00ee 02       		.uleb128 0x2
 1742 00ef 18       		.uleb128 0x18
 1743 00f0 00       		.byte	0
 1744 00f1 00       		.byte	0
 1745 00f2 11       		.uleb128 0x11
 1746 00f3 34       		.uleb128 0x34
 1747 00f4 00       		.byte	0
 1748 00f5 03       		.uleb128 0x3
 1749 00f6 08       		.uleb128 0x8
 1750 00f7 3A       		.uleb128 0x3a
 1751 00f8 0B       		.uleb128 0xb
 1752 00f9 3B       		.uleb128 0x3b
 1753 00fa 0B       		.uleb128 0xb
 1754 00fb 49       		.uleb128 0x49
 1755 00fc 13       		.uleb128 0x13
 1756 00fd 00       		.byte	0
 1757 00fe 00       		.byte	0
 1758 00ff 12       		.uleb128 0x12
 1759 0100 0B       		.uleb128 0xb
 1760 0101 01       		.byte	0x1
 1761 0102 11       		.uleb128 0x11
 1762 0103 01       		.uleb128 0x1
 1763 0104 12       		.uleb128 0x12
 1764 0105 06       		.uleb128 0x6
 1765 0106 01       		.uleb128 0x1
 1766 0107 13       		.uleb128 0x13
 1767 0108 00       		.byte	0
 1768 0109 00       		.byte	0
 1769 010a 13       		.uleb128 0x13
 1770 010b 0B       		.uleb128 0xb
 1771 010c 01       		.byte	0x1
 1772 010d 11       		.uleb128 0x11
 1773 010e 01       		.uleb128 0x1
 1774 010f 12       		.uleb128 0x12
 1775 0110 06       		.uleb128 0x6
 1776 0111 00       		.byte	0
 1777 0112 00       		.byte	0
 1778 0113 14       		.uleb128 0x14
 1779 0114 34       		.uleb128 0x34
 1780 0115 00       		.byte	0
 1781 0116 03       		.uleb128 0x3
 1782 0117 0E       		.uleb128 0xe
 1783 0118 3A       		.uleb128 0x3a
 1784 0119 0B       		.uleb128 0xb
 1785 011a 3B       		.uleb128 0x3b
 1786 011b 05       		.uleb128 0x5
 1787 011c 49       		.uleb128 0x49
 1788 011d 13       		.uleb128 0x13
 1789 011e 02       		.uleb128 0x2
 1790 011f 18       		.uleb128 0x18
 1791 0120 00       		.byte	0
 1792 0121 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 41


 1793 0122 15       		.uleb128 0x15
 1794 0123 01       		.uleb128 0x1
 1795 0124 01       		.byte	0x1
 1796 0125 49       		.uleb128 0x49
 1797 0126 13       		.uleb128 0x13
 1798 0127 01       		.uleb128 0x1
 1799 0128 13       		.uleb128 0x13
 1800 0129 00       		.byte	0
 1801 012a 00       		.byte	0
 1802 012b 16       		.uleb128 0x16
 1803 012c 21       		.uleb128 0x21
 1804 012d 00       		.byte	0
 1805 012e 49       		.uleb128 0x49
 1806 012f 13       		.uleb128 0x13
 1807 0130 2F       		.uleb128 0x2f
 1808 0131 0B       		.uleb128 0xb
 1809 0132 00       		.byte	0
 1810 0133 00       		.byte	0
 1811 0134 17       		.uleb128 0x17
 1812 0135 34       		.uleb128 0x34
 1813 0136 00       		.byte	0
 1814 0137 03       		.uleb128 0x3
 1815 0138 0E       		.uleb128 0xe
 1816 0139 3A       		.uleb128 0x3a
 1817 013a 0B       		.uleb128 0xb
 1818 013b 3B       		.uleb128 0x3b
 1819 013c 05       		.uleb128 0x5
 1820 013d 49       		.uleb128 0x49
 1821 013e 13       		.uleb128 0x13
 1822 013f 3F       		.uleb128 0x3f
 1823 0140 19       		.uleb128 0x19
 1824 0141 3C       		.uleb128 0x3c
 1825 0142 19       		.uleb128 0x19
 1826 0143 00       		.byte	0
 1827 0144 00       		.byte	0
 1828 0145 18       		.uleb128 0x18
 1829 0146 34       		.uleb128 0x34
 1830 0147 00       		.byte	0
 1831 0148 03       		.uleb128 0x3
 1832 0149 0E       		.uleb128 0xe
 1833 014a 3A       		.uleb128 0x3a
 1834 014b 0B       		.uleb128 0xb
 1835 014c 3B       		.uleb128 0x3b
 1836 014d 05       		.uleb128 0x5
 1837 014e 49       		.uleb128 0x49
 1838 014f 13       		.uleb128 0x13
 1839 0150 3F       		.uleb128 0x3f
 1840 0151 19       		.uleb128 0x19
 1841 0152 02       		.uleb128 0x2
 1842 0153 18       		.uleb128 0x18
 1843 0154 00       		.byte	0
 1844 0155 00       		.byte	0
 1845 0156 19       		.uleb128 0x19
 1846 0157 34       		.uleb128 0x34
 1847 0158 00       		.byte	0
 1848 0159 03       		.uleb128 0x3
 1849 015a 0E       		.uleb128 0xe
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 42


 1850 015b 3A       		.uleb128 0x3a
 1851 015c 0B       		.uleb128 0xb
 1852 015d 3B       		.uleb128 0x3b
 1853 015e 0B       		.uleb128 0xb
 1854 015f 49       		.uleb128 0x49
 1855 0160 13       		.uleb128 0x13
 1856 0161 3F       		.uleb128 0x3f
 1857 0162 19       		.uleb128 0x19
 1858 0163 02       		.uleb128 0x2
 1859 0164 18       		.uleb128 0x18
 1860 0165 00       		.byte	0
 1861 0166 00       		.byte	0
 1862 0167 1A       		.uleb128 0x1a
 1863 0168 34       		.uleb128 0x34
 1864 0169 00       		.byte	0
 1865 016a 03       		.uleb128 0x3
 1866 016b 08       		.uleb128 0x8
 1867 016c 3A       		.uleb128 0x3a
 1868 016d 0B       		.uleb128 0xb
 1869 016e 3B       		.uleb128 0x3b
 1870 016f 0B       		.uleb128 0xb
 1871 0170 49       		.uleb128 0x49
 1872 0171 13       		.uleb128 0x13
 1873 0172 3F       		.uleb128 0x3f
 1874 0173 19       		.uleb128 0x19
 1875 0174 02       		.uleb128 0x2
 1876 0175 18       		.uleb128 0x18
 1877 0176 00       		.byte	0
 1878 0177 00       		.byte	0
 1879 0178 00       		.byte	0
 1880              		.section	.debug_aranges,"",%progbits
 1881 0000 3C000000 		.4byte	0x3c
 1882 0004 0200     		.2byte	0x2
 1883 0006 00000000 		.4byte	.Ldebug_info0
 1884 000a 04       		.byte	0x4
 1885 000b 00       		.byte	0
 1886 000c 0000     		.2byte	0
 1887 000e 0000     		.2byte	0
 1888 0010 00000000 		.4byte	.LFB63
 1889 0014 70000000 		.4byte	.LFE63-.LFB63
 1890 0018 00000000 		.4byte	.LFB64
 1891 001c 20000000 		.4byte	.LFE64-.LFB64
 1892 0020 00000000 		.4byte	.LFB65
 1893 0024 38000000 		.4byte	.LFE65-.LFB65
 1894 0028 00000000 		.4byte	.LFB66
 1895 002c 4C000000 		.4byte	.LFE66-.LFB66
 1896 0030 00000000 		.4byte	.LFB67
 1897 0034 64040000 		.4byte	.LFE67-.LFB67
 1898 0038 00000000 		.4byte	0
 1899 003c 00000000 		.4byte	0
 1900              		.section	.debug_ranges,"",%progbits
 1901              	.Ldebug_ranges0:
 1902 0000 00000000 		.4byte	.LFB63
 1903 0004 70000000 		.4byte	.LFE63
 1904 0008 00000000 		.4byte	.LFB64
 1905 000c 20000000 		.4byte	.LFE64
 1906 0010 00000000 		.4byte	.LFB65
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 43


 1907 0014 38000000 		.4byte	.LFE65
 1908 0018 00000000 		.4byte	.LFB66
 1909 001c 4C000000 		.4byte	.LFE66
 1910 0020 00000000 		.4byte	.LFB67
 1911 0024 64040000 		.4byte	.LFE67
 1912 0028 00000000 		.4byte	0
 1913 002c 00000000 		.4byte	0
 1914              		.section	.debug_line,"",%progbits
 1915              	.Ldebug_line0:
 1916 0000 82020000 		.section	.debug_str,"MS",%progbits,1
 1916      02008601 
 1916      00000201 
 1916      FB0E0D00 
 1916      01010101 
 1917              	.LASF29:
 1918 0000 52455355 		.ascii	"RESURFACE\000"
 1918      52464143 
 1918      4500
 1919              	.LASF27:
 1920 000a 44455343 		.ascii	"DESCENDING\000"
 1920      454E4449 
 1920      4E4700
 1921              	.LASF25:
 1922 0015 53595354 		.ascii	"SYSTEM_CHECK\000"
 1922      454D5F43 
 1922      4845434B 
 1922      00
 1923              	.LASF62:
 1924 0022 53544154 		.ascii	"STATES\000"
 1924      455300
 1925              	.LASF42:
 1926 0029 73646275 		.ascii	"sdbuf\000"
 1926      6600
 1927              	.LASF46:
 1928 002f 41646472 		.ascii	"Addr\000"
 1928      00
 1929              	.LASF44:
 1930 0034 64657641 		.ascii	"devAddr\000"
 1930      64647200 
 1931              	.LASF28:
 1932 003c 4C414E44 		.ascii	"LANDED\000"
 1932      454400
 1933              	.LASF64:
 1934 0043 6D61696E 		.ascii	"main\000"
 1934      00
 1935              	.LASF32:
 1936 0048 4D6F6973 		.ascii	"Moisture_ISR_Handler\000"
 1936      74757265 
 1936      5F495352 
 1936      5F48616E 
 1936      646C6572 
 1937              	.LASF56:
 1938 005d 66696C65 		.ascii	"file\000"
 1938      00
 1939              	.LASF4:
 1940 0062 73686F72 		.ascii	"short int\000"
 1940      7420696E 
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 44


 1940      7400
 1941              	.LASF52:
 1942 006c 50414E49 		.ascii	"PANIC_flag\000"
 1942      435F666C 
 1942      616700
 1943              	.LASF13:
 1944 0077 75696E74 		.ascii	"uint8_t\000"
 1944      385F7400 
 1945              	.LASF41:
 1946 007f 70726573 		.ascii	"pressure\000"
 1946      73757265 
 1946      00
 1947              	.LASF38:
 1948 0088 64656369 		.ascii	"decimals\000"
 1948      6D616C73 
 1948      00
 1949              	.LASF18:
 1950 0091 666C6F61 		.ascii	"float\000"
 1950      7400
 1951              	.LASF40:
 1952 0097 74656D70 		.ascii	"temp\000"
 1952      00
 1953              	.LASF10:
 1954 009c 6C6F6E67 		.ascii	"long long int\000"
 1954      206C6F6E 
 1954      6720696E 
 1954      7400
 1955              	.LASF48:
 1956 00aa 61766572 		.ascii	"average\000"
 1956      61676500 
 1957              	.LASF30:
 1958 00b2 5452414E 		.ascii	"TRANSMIT\000"
 1958      534D4954 
 1958      00
 1959              	.LASF59:
 1960 00bb 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 1960      4320342E 
 1960      392E3320 
 1960      32303135 
 1960      30333033 
 1961 00ee 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 1961      20726576 
 1961      6973696F 
 1961      6E203232 
 1961      31323230 
 1962 0121 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 1962      66756E63 
 1962      74696F6E 
 1962      2D736563 
 1962      74696F6E 
 1963              	.LASF39:
 1964 0149 766F6C74 		.ascii	"voltage\000"
 1964      61676500 
 1965              	.LASF57:
 1966 0151 766F6C75 		.ascii	"volume\000"
 1966      6D6500
 1967              	.LASF2:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 45


 1968 0158 5F5F7569 		.ascii	"__uint8_t\000"
 1968      6E74385F 
 1968      7400
 1969              	.LASF31:
 1970 0162 4552524F 		.ascii	"ERROR\000"
 1970      5200
 1971              	.LASF24:
 1972 0168 6C6F6E67 		.ascii	"long double\000"
 1972      20646F75 
 1972      626C6500 
 1973              	.LASF26:
 1974 0174 57414954 		.ascii	"WAIT_TO_LAUNCH\000"
 1974      5F544F5F 
 1974      4C41554E 
 1974      434800
 1975              	.LASF1:
 1976 0183 756E7369 		.ascii	"unsigned char\000"
 1976      676E6564 
 1976      20636861 
 1976      7200
 1977              	.LASF63:
 1978 0191 52657365 		.ascii	"Reset_system\000"
 1978      745F7379 
 1978      7374656D 
 1978      00
 1979              	.LASF23:
 1980 019e 46535F46 		.ascii	"FS_FILE\000"
 1980      494C4500 
 1981              	.LASF55:
 1982 01a6 636F756E 		.ascii	"countdown\000"
 1982      74646F77 
 1982      6E00
 1983              	.LASF0:
 1984 01b0 7369676E 		.ascii	"signed char\000"
 1984      65642063 
 1984      68617200 
 1985              	.LASF11:
 1986 01bc 6C6F6E67 		.ascii	"long long unsigned int\000"
 1986      206C6F6E 
 1986      6720756E 
 1986      7369676E 
 1986      65642069 
 1987              	.LASF16:
 1988 01d3 75696E74 		.ascii	"uint32_t\000"
 1988      33325F74 
 1988      00
 1989              	.LASF47:
 1990 01dc 64617461 		.ascii	"data_time\000"
 1990      5F74696D 
 1990      6500
 1991              	.LASF12:
 1992 01e6 756E7369 		.ascii	"unsigned int\000"
 1992      676E6564 
 1992      20696E74 
 1992      00
 1993              	.LASF54:
 1994 01f3 74657374 		.ascii	"testnum\000"
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 46


 1994      6E756D00 
 1995              	.LASF5:
 1996 01fb 73686F72 		.ascii	"short unsigned int\000"
 1996      7420756E 
 1996      7369676E 
 1996      65642069 
 1996      6E7400
 1997              	.LASF20:
 1998 020e 63686172 		.ascii	"char\000"
 1998      00
 1999              	.LASF7:
 2000 0213 6C6F6E67 		.ascii	"long int\000"
 2000      20696E74 
 2000      00
 2001              	.LASF15:
 2002 021c 696E7433 		.ascii	"int32_t\000"
 2002      325F7400 
 2003              	.LASF14:
 2004 0224 696E7431 		.ascii	"int16_t\000"
 2004      365F7400 
 2005              	.LASF17:
 2006 022c 75696E74 		.ascii	"uint8\000"
 2006      3800
 2007              	.LASF50:
 2008 0232 5F426F6F 		.ascii	"_Bool\000"
 2008      6C00
 2009              	.LASF61:
 2010 0238 433A5C55 		.ascii	"C:\\Users\\gding\\Documents\\Project_O-Vac\\OVac.cy"
 2010      73657273 
 2010      5C676469 
 2010      6E675C44 
 2010      6F63756D 
 2011 0266 64736E00 		.ascii	"dsn\000"
 2012              	.LASF36:
 2013 026a 63757253 		.ascii	"curState\000"
 2013      74617465 
 2013      00
 2014              	.LASF37:
 2015 0273 7A5F6F66 		.ascii	"z_offset\000"
 2015      66736574 
 2015      00
 2016              	.LASF45:
 2017 027c 62756666 		.ascii	"buffer\000"
 2017      657200
 2018              	.LASF34:
 2019 0283 436F756E 		.ascii	"Countdown_ISR_Handler\000"
 2019      74646F77 
 2019      6E5F4953 
 2019      525F4861 
 2019      6E646C65 
 2020              	.LASF60:
 2021 0299 6D61696E 		.ascii	"main.c\000"
 2021      2E6300
 2022              	.LASF21:
 2023 02a0 72656738 		.ascii	"reg8\000"
 2023      00
 2024              	.LASF9:
ARM GAS  C:\Users\gding\AppData\Local\Temp\ccLOORSQ.s 			page 47


 2025 02a5 6C6F6E67 		.ascii	"long unsigned int\000"
 2025      20756E73 
 2025      69676E65 
 2025      6420696E 
 2025      7400
 2026              	.LASF19:
 2027 02b7 646F7562 		.ascii	"double\000"
 2027      6C6500
 2028              	.LASF8:
 2029 02be 5F5F7569 		.ascii	"__uint32_t\000"
 2029      6E743332 
 2029      5F7400
 2030              	.LASF6:
 2031 02c9 5F5F696E 		.ascii	"__int32_t\000"
 2031      7433325F 
 2031      7400
 2032              	.LASF3:
 2033 02d3 5F5F696E 		.ascii	"__int16_t\000"
 2033      7431365F 
 2033      7400
 2034              	.LASF22:
 2035 02dd 73697A65 		.ascii	"sizetype\000"
 2035      74797065 
 2035      00
 2036              	.LASF53:
 2037 02e6 53544154 		.ascii	"STATE\000"
 2037      4500
 2038              	.LASF35:
 2039 02ec 6F757470 		.ascii	"output\000"
 2039      757400
 2040              	.LASF49:
 2041 02f3 636F6C6C 		.ascii	"collect_flag\000"
 2041      6563745F 
 2041      666C6167 
 2041      00
 2042              	.LASF43:
 2043 0300 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2043      52784275 
 2043      66666572 
 2043      00
 2044              	.LASF51:
 2045 030d 77616974 		.ascii	"wait_flag\000"
 2045      5F666C61 
 2045      6700
 2046              	.LASF33:
 2047 0317 53616D70 		.ascii	"Sample_ISR_Handler\000"
 2047      6C655F49 
 2047      53525F48 
 2047      616E646C 
 2047      657200
 2048              	.LASF58:
 2049 032a 66736669 		.ascii	"fsfile\000"
 2049      6C6500
 2050              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

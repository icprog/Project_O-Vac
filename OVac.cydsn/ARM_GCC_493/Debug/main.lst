ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	devAddr,1,1
  19              		.comm	buffer,22,4
  20              		.global	Addr
  21              		.data
  22              		.align	2
  23              		.type	Addr, %object
  24              		.size	Addr, 4
  25              	Addr:
  26 0000 3F000000 		.word	63
  27              		.global	id
  28              		.align	2
  29              		.type	id, %object
  30              		.size	id, 4
  31              	id:
  32 0004 01000000 		.word	1
  33              		.global	press_id
  34              		.align	2
  35              		.type	press_id, %object
  36              		.size	press_id, 4
  37              	press_id:
  38 0008 01000000 		.word	1
  39              		.global	data_time
  40              		.bss
  41              		.align	2
  42              		.type	data_time, %object
  43              		.size	data_time, 4
  44              	data_time:
  45 0000 00000000 		.space	4
  46              		.global	descent_time
  47              		.align	2
  48              		.type	descent_time, %object
  49              		.size	descent_time, 4
  50              	descent_time:
  51 0004 00000000 		.space	4
  52              		.global	sum
  53              		.align	2
  54              		.type	sum, %object
  55              		.size	sum, 4
  56              	sum:
  57 0008 00000000 		.space	4
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 2


  58              		.global	pressure_sum
  59              		.align	2
  60              		.type	pressure_sum, %object
  61              		.size	pressure_sum, 4
  62              	pressure_sum:
  63 000c 00000000 		.space	4
  64              		.global	average
  65              		.align	1
  66              		.type	average, %object
  67              		.size	average, 2
  68              	average:
  69 0010 0000     		.space	2
  70              		.global	collect_flag
  71              		.type	collect_flag, %object
  72              		.size	collect_flag, 1
  73              	collect_flag:
  74 0012 00       		.space	1
  75              		.global	wait_flag
  76              		.type	wait_flag, %object
  77              		.size	wait_flag, 1
  78              	wait_flag:
  79 0013 00       		.space	1
  80              		.global	PANIC_flag
  81              		.type	PANIC_flag, %object
  82              		.size	PANIC_flag, 1
  83              	PANIC_flag:
  84 0014 00       		.space	1
  85              		.global	STATE
  86              		.data
  87              		.type	STATE, %object
  88              		.size	STATE, 1
  89              	STATE:
  90 000c 01       		.byte	1
  91              		.global	countdown
  92              		.bss
  93              		.type	countdown, %object
  94              		.size	countdown, 1
  95              	countdown:
  96 0015 00       		.space	1
  97              		.global	update_Data
  98              		.type	update_Data, %object
  99              		.size	update_Data, 1
 100              	update_Data:
 101 0016 00       		.space	1
 102              		.global	RxBuffer
 103 0017 00       		.align	2
 104              		.type	RxBuffer, %object
 105              		.size	RxBuffer, 64
 106              	RxBuffer:
 107 0018 00000000 		.space	64
 107      00000000 
 107      00000000 
 107      00000000 
 107      00000000 
 108              		.global	msg_count
 109              		.align	2
 110              		.type	msg_count, %object
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 3


 111              		.size	msg_count, 4
 112              	msg_count:
 113 0058 00000000 		.space	4
 114              		.global	rxflag
 115              		.align	2
 116              		.type	rxflag, %object
 117              		.size	rxflag, 4
 118              	rxflag:
 119 005c 00000000 		.space	4
 120              		.global	bytes
 121              		.align	2
 122              		.type	bytes, %object
 123              		.size	bytes, 4
 124              	bytes:
 125 0060 00000000 		.space	4
 126              		.global	dataflag
 127              		.align	2
 128              		.type	dataflag, %object
 129              		.size	dataflag, 4
 130              	dataflag:
 131 0064 00000000 		.space	4
 132              		.global	transmit_flag
 133              		.align	2
 134              		.type	transmit_flag, %object
 135              		.size	transmit_flag, 4
 136              	transmit_flag:
 137 0068 00000000 		.space	4
 138              		.global	depth
 139              		.align	2
 140              		.type	depth, %object
 141              		.size	depth, 4
 142              	depth:
 143 006c 00000000 		.space	4
 144              		.global	reset
 145              		.align	2
 146              		.type	reset, %object
 147              		.size	reset, 4
 148              	reset:
 149 0070 00000000 		.space	4
 150              		.global	xavg
 151              		.align	2
 152              		.type	xavg, %object
 153              		.size	xavg, 4
 154              	xavg:
 155 0074 00000000 		.space	4
 156              		.global	yavg
 157              		.align	2
 158              		.type	yavg, %object
 159              		.size	yavg, 4
 160              	yavg:
 161 0078 00000000 		.space	4
 162              		.global	xsum
 163              		.align	2
 164              		.type	xsum, %object
 165              		.size	xsum, 4
 166              	xsum:
 167 007c 00000000 		.space	4
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 4


 168              		.global	ysum
 169              		.align	2
 170              		.type	ysum, %object
 171              		.size	ysum, 4
 172              	ysum:
 173 0080 00000000 		.space	4
 174              		.global	file
 175              		.data
 176 000d 000000   		.align	2
 177              		.type	file, %object
 178              		.size	file, 11
 179              	file:
 180 0010 74657374 		.ascii	"test_1.txt\000"
 180      5F312E74 
 180      787400
 181              		.global	volume
 182 001b 00       		.bss
 183              		.align	2
 184              		.type	volume, %object
 185              		.size	volume, 10
 186              	volume:
 187 0084 00000000 		.space	10
 187      00000000 
 187      0000
 188              		.comm	fsfile,4,4
 189 008e 0000     		.section	.text.Moisture_ISR_Handler,"ax",%progbits
 190              		.align	2
 191              		.global	Moisture_ISR_Handler
 192              		.thumb
 193              		.thumb_func
 194              		.type	Moisture_ISR_Handler, %function
 195              	Moisture_ISR_Handler:
 196              	.LFB63:
 197              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 2.20
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   This is a source code for example project of ADC single ended mode.
   8:main.c        **** *
   9:main.c        **** *   Variable resistor(pot) is connected to +ve input of ADC using the I/O pin.
  10:main.c        **** *   P0.0. When voltage to positive terminal of ADC is 0, the output displayed
  11:main.c        **** *   on the LCD pannel is 0x0000. As voltage on positive terminal goes on
  12:main.c        **** *   increasing, the  converted value goes on increasing from 0x0000 and reaches
  13:main.c        **** *   0xFFFF when voltage becomes 1.024V. Futher increase in voltage value,
  14:main.c        **** *   doesn't cause any changes to values displayed in the LCD.
  15:main.c        **** *
  16:main.c        **** * Hardware Connections: 
  17:main.c        **** *  Connect analog input from Variable resistor to port P0[0] of DVK1 board.
  18:main.c        **** *
  19:main.c        **** ********************************************************************************
  20:main.c        **** * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  21:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  22:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  23:main.c        **** * Therefore, you may use this software only as provided in the license agreement
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 5


  24:main.c        **** * accompanying the software package from which you obtained this software.
  25:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  26:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  27:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <project.h>
  31:main.c        **** #include <mpu6050.h>
  32:main.c        **** #include <stdio.h>
  33:main.c        **** #include <stdlib.h>
  34:main.c        **** #include <string.h>
  35:main.c        **** #include <FS.h>
  36:main.c        **** #include "LiquidCrystal_I2C.h"
  37:main.c        **** #include "functions.h"
  38:main.c        **** 
  39:main.c        **** #define MPU6050 
  40:main.c        **** #define LCD
  41:main.c        **** //#define SD
  42:main.c        **** #define BT
  43:main.c        **** 
  44:main.c        **** #define MA_WINDOW 15                    // Number of samples in the moving average window.
  45:main.c        **** #define BOT_THRESHOLD 20000             // Z-Aacceleration threshold for transition into LANDED sta
  46:main.c        **** #define WAIT_TIME 1000                  // Number of ISR calls until transition into DESCENDING sta
  47:main.c        **** #define BUFFER_LEN  64u                 // Buffer length for UART rx
  48:main.c        **** #define DEGREES_20 (131 * 20)           // Gyro value corresponding to 30 degrees. Default setting 
  49:main.c        **** #define DEGREES_50 (131 * 50)           // So every 131 in gyro value equals 1 degree of rotational
  50:main.c        **** 
  51:main.c        **** 
  52:main.c        **** uint32_t Addr = 0x3F;                   // I2C address of LCD.
  53:main.c        **** long id = 1, press_id = 1;              // Interrupt count.
  54:main.c        **** long data_time = 0;                     // data point num
  55:main.c        **** long descent_time = 0;                  // Max number of seconds allowed for descent, x 500 because
  56:main.c        **** 
  57:main.c        **** long sum = 0;                           // Sum of accelerometer values
  58:main.c        **** float pressure_sum = 0;                 // Sum of pressure values. 
  59:main.c        **** int16_t average = 0;                    // Moving average variable, accelerometer.
  60:main.c        **** bool collect_flag = 0;                  // flag indicating when to record acceleration sample.
  61:main.c        **** bool wait_flag = 0;                     // flag indicating when to increment interrupt counter.
  62:main.c        **** bool PANIC_flag = 0;                    // flag indicating water is present in housing.
  63:main.c        **** //bool first_test = 1;                  // flag indicating first test(longer countdown)
  64:main.c        **** STATES STATE = WAIT_TO_LAUNCH;                      // Set initial state. 
  65:main.c        **** uint8_t countdown = 0, update_Data = 0;             // Counting variables, one for countdowns, one 
  66:main.c        **** uint8_t RxBuffer[BUFFER_LEN] = {};                  // Rx Buffer
  67:main.c        **** int msg_count = 0, rxflag = 0, bytes = 0, dataflag = 0, transmit_flag = 0;    // UART variables
  68:main.c        **** int depth = 0, reset = 0;                                                     // Variable depth, re
  69:main.c        **** float xavg = 0, yavg = 0, xsum = 0, ysum = 0;                                 // gyro avg/sum value
  70:main.c        **** char file[11] = "test_1.txt";
  71:main.c        **** char volume[10] = {};
  72:main.c        **** FS_FILE *fsfile;
  73:main.c        **** 
  74:main.c        **** /*******************************************************************************
  75:main.c        **** * Function Name: main
  76:main.c        **** ********************************************************************************
  77:main.c        **** *
  78:main.c        **** * Summary:
  79:main.c        **** *  main() performs following functions:
  80:main.c        **** *  1: Initializes all necessary components on board (accelerometer/gyro, SD card, LCD, timers, inte
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 6


  81:main.c        **** *       Bluetooth).
  82:main.c        **** *  2: Begins at state: WAIT_FOR_LAUNCH. Waits for a bluetooth command to start, then prompts for a 
  83:main.c        **** *       completion, starts a countdown for which the device should be thrown in the water before it
  84:main.c        **** *       DESCENDING state.
  85:main.c        **** *  3: Samples Z-axis acceleration data from module @ 500hz. Computes moving average of Z-axis accel
  86:main.c        **** *       for gyro data in the case that the system flips somehow. If the moving average has breached
  87:main.c        **** *       20000), we know it has landed on the bottom. If the time of descent has gone over the max d
  88:main.c        **** *       from the depth earlier, then we go to resurfacing. 
  89:main.c        **** *  4: At the LANDED state, we delay to let the system settle, then turn on solenoid 1. This solenoi
  90:main.c        **** *       in the legs. The suction occurs for 5 seconds, then turns off. Switch to RESURFACING.
  91:main.c        **** *  5: To resurface, we pulse the solenoids at a rate of 3 seconds on to 1 second off. The number of
  92:main.c        **** *       by the depth. Once the number of pulses has finished, we move to TRANSMIT.
  93:main.c        **** *  6: At TRANSMIT, we simply wait for the data command to begin sending out the collected data or f
  94:main.c        **** *       do another run.
  95:main.c        **** *
  96:main.c        **** * Parameters:
  97:main.c        **** *  None.
  98:main.c        **** *
  99:main.c        **** * Return:
 100:main.c        **** *  None.
 101:main.c        **** *
 102:main.c        **** *******************************************************************************/
 103:main.c        **** 
 104:main.c        **** int SD_SETUP(char* filename); //SD card setup function
 105:main.c        **** 
 106:main.c        **** /* Moisture sensor ISR */
 107:main.c        **** CY_ISR (Moisture_ISR_Handler){
 198              		.loc 1 107 0
 199              		.cfi_startproc
 200              		@ args = 0, pretend = 0, frame = 0
 201              		@ frame_needed = 1, uses_anonymous_args = 0
 202 0000 80B5     		push	{r7, lr}
 203              		.cfi_def_cfa_offset 8
 204              		.cfi_offset 7, -8
 205              		.cfi_offset 14, -4
 206 0002 00AF     		add	r7, sp, #0
 207              		.cfi_def_cfa_register 7
 108:main.c        ****     PANIC_flag = 1;                             // Set flag to indicate water
 208              		.loc 1 108 0
 209 0004 044B     		ldr	r3, .L2
 210 0006 0122     		movs	r2, #1
 211 0008 1A70     		strb	r2, [r3]
 109:main.c        ****     STATE = RESURFACE;                          // Go to surface
 212              		.loc 1 109 0
 213 000a 044B     		ldr	r3, .L2+4
 214 000c 0422     		movs	r2, #4
 215 000e 1A70     		strb	r2, [r3]
 110:main.c        ****     Comp_Stop();                                // Stop comparator for interrupt
 216              		.loc 1 110 0
 217 0010 FFF7FEFF 		bl	Comp_Stop
 111:main.c        **** }
 218              		.loc 1 111 0
 219 0014 80BD     		pop	{r7, pc}
 220              	.L3:
 221 0016 00BF     		.align	2
 222              	.L2:
 223 0018 00000000 		.word	PANIC_flag
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 7


 224 001c 00000000 		.word	STATE
 225              		.cfi_endproc
 226              	.LFE63:
 227              		.size	Moisture_ISR_Handler, .-Moisture_ISR_Handler
 228              		.section	.text.Sample_ISR_Handler,"ax",%progbits
 229              		.align	2
 230              		.global	Sample_ISR_Handler
 231              		.thumb
 232              		.thumb_func
 233              		.type	Sample_ISR_Handler, %function
 234              	Sample_ISR_Handler:
 235              	.LFB64:
 112:main.c        **** 
 113:main.c        **** /* Sampling ISR */
 114:main.c        **** CY_ISR (Sample_ISR_Handler){
 236              		.loc 1 114 0
 237              		.cfi_startproc
 238              		@ args = 0, pretend = 0, frame = 0
 239              		@ frame_needed = 1, uses_anonymous_args = 0
 240              		@ link register save eliminated.
 241 0000 80B4     		push	{r7}
 242              		.cfi_def_cfa_offset 4
 243              		.cfi_offset 7, -4
 244 0002 00AF     		add	r7, sp, #0
 245              		.cfi_def_cfa_register 7
 115:main.c        ****     Sample_Timer_STATUS;                        // Clears interrupt by accessing timer status regis
 246              		.loc 1 115 0
 247 0004 0A4B     		ldr	r3, .L7
 248 0006 1B78     		ldrb	r3, [r3]
 116:main.c        ****     if (STATE == DESCENDING || STATE == LANDED){
 249              		.loc 1 116 0
 250 0008 0A4B     		ldr	r3, .L7+4
 251 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 252 000c 022B     		cmp	r3, #2
 253 000e 03D0     		beq	.L5
 254              		.loc 1 116 0 is_stmt 0 discriminator 1
 255 0010 084B     		ldr	r3, .L7+4
 256 0012 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 257 0014 032B     		cmp	r3, #3
 258 0016 04D1     		bne	.L6
 259              	.L5:
 117:main.c        ****         data_time++;
 260              		.loc 1 117 0 is_stmt 1
 261 0018 074B     		ldr	r3, .L7+8
 262 001a 1B68     		ldr	r3, [r3]
 263 001c 0133     		adds	r3, r3, #1
 264 001e 064A     		ldr	r2, .L7+8
 265 0020 1360     		str	r3, [r2]
 266              	.L6:
 118:main.c        ****     }
 119:main.c        ****     collect_flag = 1;
 267              		.loc 1 119 0
 268 0022 064B     		ldr	r3, .L7+12
 269 0024 0122     		movs	r2, #1
 270 0026 1A70     		strb	r2, [r3]
 120:main.c        **** }
 271              		.loc 1 120 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 8


 272 0028 BD46     		mov	sp, r7
 273              		.cfi_def_cfa_register 13
 274              		@ sp needed
 275 002a 5DF8047B 		ldr	r7, [sp], #4
 276              		.cfi_restore 7
 277              		.cfi_def_cfa_offset 0
 278 002e 7047     		bx	lr
 279              	.L8:
 280              		.align	2
 281              	.L7:
 282 0030 034F0040 		.word	1073762051
 283 0034 00000000 		.word	STATE
 284 0038 00000000 		.word	data_time
 285 003c 00000000 		.word	collect_flag
 286              		.cfi_endproc
 287              	.LFE64:
 288              		.size	Sample_ISR_Handler, .-Sample_ISR_Handler
 289              		.section	.text.Countdown_ISR_Handler,"ax",%progbits
 290              		.align	2
 291              		.global	Countdown_ISR_Handler
 292              		.thumb
 293              		.thumb_func
 294              		.type	Countdown_ISR_Handler, %function
 295              	Countdown_ISR_Handler:
 296              	.LFB65:
 121:main.c        **** 
 122:main.c        **** /* Countdown ISR*/
 123:main.c        **** CY_ISR (Countdown_ISR_Handler){
 297              		.loc 1 123 0
 298              		.cfi_startproc
 299              		@ args = 0, pretend = 0, frame = 0
 300              		@ frame_needed = 1, uses_anonymous_args = 0
 301              		@ link register save eliminated.
 302 0000 80B4     		push	{r7}
 303              		.cfi_def_cfa_offset 4
 304              		.cfi_offset 7, -4
 305 0002 00AF     		add	r7, sp, #0
 306              		.cfi_def_cfa_register 7
 124:main.c        ****     Countdown_timer_STATUS;                        // Clears interrupt by accessing timer status re
 307              		.loc 1 124 0
 308 0004 1D4B     		ldr	r3, .L15
 309 0006 1B78     		ldrb	r3, [r3]
 125:main.c        ****     if ((STATE == WAIT_TO_LAUNCH && depth != 0) || STATE == LANDED || STATE == RESURFACE){ 
 310              		.loc 1 125 0
 311 0008 1D4B     		ldr	r3, .L15+4
 312 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 313 000c 012B     		cmp	r3, #1
 314 000e 03D1     		bne	.L10
 315              		.loc 1 125 0 is_stmt 0 discriminator 1
 316 0010 1C4B     		ldr	r3, .L15+8
 317 0012 1B68     		ldr	r3, [r3]
 318 0014 002B     		cmp	r3, #0
 319 0016 07D1     		bne	.L11
 320              	.L10:
 321              		.loc 1 125 0 discriminator 3
 322 0018 194B     		ldr	r3, .L15+4
 323 001a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 9


 324 001c 032B     		cmp	r3, #3
 325 001e 03D0     		beq	.L11
 326              		.loc 1 125 0 discriminator 4
 327 0020 174B     		ldr	r3, .L15+4
 328 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 329 0024 042B     		cmp	r3, #4
 330 0026 08D1     		bne	.L12
 331              	.L11:
 126:main.c        ****         wait_flag = 1;
 332              		.loc 1 126 0 is_stmt 1
 333 0028 174B     		ldr	r3, .L15+12
 334 002a 0122     		movs	r2, #1
 335 002c 1A70     		strb	r2, [r3]
 127:main.c        ****         countdown++;
 336              		.loc 1 127 0
 337 002e 174B     		ldr	r3, .L15+16
 338 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 339 0032 0133     		adds	r3, r3, #1
 340 0034 DAB2     		uxtb	r2, r3
 341 0036 154B     		ldr	r3, .L15+16
 342 0038 1A70     		strb	r2, [r3]
 343              	.L12:
 128:main.c        ****     }
 129:main.c        ****     #ifdef BT
 130:main.c        ****         if (STATE == TRANSMIT || (STATE == WAIT_TO_LAUNCH && !dataflag)){
 344              		.loc 1 130 0
 345 003a 114B     		ldr	r3, .L15+4
 346 003c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 347 003e 052B     		cmp	r3, #5
 348 0040 07D0     		beq	.L13
 349              		.loc 1 130 0 is_stmt 0 discriminator 1
 350 0042 0F4B     		ldr	r3, .L15+4
 351 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 352 0046 012B     		cmp	r3, #1
 353 0048 13D1     		bne	.L9
 354              		.loc 1 130 0 discriminator 2
 355 004a 114B     		ldr	r3, .L15+20
 356 004c 1B68     		ldr	r3, [r3]
 357 004e 002B     		cmp	r3, #0
 358 0050 0FD1     		bne	.L9
 359              	.L13:
 131:main.c        ****             update_Data++;
 360              		.loc 1 131 0 is_stmt 1
 361 0052 104B     		ldr	r3, .L15+24
 362 0054 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 363 0056 0133     		adds	r3, r3, #1
 364 0058 DAB2     		uxtb	r2, r3
 365 005a 0E4B     		ldr	r3, .L15+24
 366 005c 1A70     		strb	r2, [r3]
 132:main.c        ****             if (update_Data == 10){
 367              		.loc 1 132 0
 368 005e 0D4B     		ldr	r3, .L15+24
 369 0060 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 370 0062 0A2B     		cmp	r3, #10
 371 0064 05D1     		bne	.L9
 133:main.c        ****                 transmit_flag = 1;
 372              		.loc 1 133 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 10


 373 0066 0C4B     		ldr	r3, .L15+28
 374 0068 0122     		movs	r2, #1
 375 006a 1A60     		str	r2, [r3]
 134:main.c        ****                 update_Data = 0;
 376              		.loc 1 134 0
 377 006c 094B     		ldr	r3, .L15+24
 378 006e 0022     		movs	r2, #0
 379 0070 1A70     		strb	r2, [r3]
 380              	.L9:
 135:main.c        ****             }
 136:main.c        ****         }          
 137:main.c        ****     #endif
 138:main.c        **** }
 381              		.loc 1 138 0
 382 0072 BD46     		mov	sp, r7
 383              		.cfi_def_cfa_register 13
 384              		@ sp needed
 385 0074 5DF8047B 		ldr	r7, [sp], #4
 386              		.cfi_restore 7
 387              		.cfi_def_cfa_offset 0
 388 0078 7047     		bx	lr
 389              	.L16:
 390 007a 00BF     		.align	2
 391              	.L15:
 392 007c 67640040 		.word	1073767527
 393 0080 00000000 		.word	STATE
 394 0084 00000000 		.word	depth
 395 0088 00000000 		.word	wait_flag
 396 008c 00000000 		.word	countdown
 397 0090 00000000 		.word	dataflag
 398 0094 00000000 		.word	update_Data
 399 0098 00000000 		.word	transmit_flag
 400              		.cfi_endproc
 401              	.LFE65:
 402              		.size	Countdown_ISR_Handler, .-Countdown_ISR_Handler
 403              		.section	.text.rx_interrupt,"ax",%progbits
 404              		.align	2
 405              		.global	rx_interrupt
 406              		.thumb
 407              		.thumb_func
 408              		.type	rx_interrupt, %function
 409              	rx_interrupt:
 410              	.LFB66:
 139:main.c        **** /* Bluetooth UART Rx ISR*/
 140:main.c        **** CY_ISR(rx_interrupt){
 411              		.loc 1 140 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 1, uses_anonymous_args = 0
 415 0000 98B5     		push	{r3, r4, r7, lr}
 416              		.cfi_def_cfa_offset 16
 417              		.cfi_offset 3, -16
 418              		.cfi_offset 4, -12
 419              		.cfi_offset 7, -8
 420              		.cfi_offset 14, -4
 421 0002 00AF     		add	r7, sp, #0
 422              		.cfi_def_cfa_register 7
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 11


 141:main.c        ****     #ifdef BT
 142:main.c        ****     while (UART_ReadRxStatus() & UART_RX_STS_FIFO_NOTEMPTY){
 423              		.loc 1 142 0
 424 0004 14E0     		b	.L18
 425              	.L19:
 143:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 426              		.loc 1 143 0
 427 0006 0E4B     		ldr	r3, .L20
 428 0008 1C68     		ldr	r4, [r3]
 429 000a 631C     		adds	r3, r4, #1
 430 000c 0C4A     		ldr	r2, .L20
 431 000e 1360     		str	r3, [r2]
 432 0010 FFF7FEFF 		bl	UART_GetChar
 433 0014 0346     		mov	r3, r0
 434 0016 1A46     		mov	r2, r3
 435 0018 0A4B     		ldr	r3, .L20+4
 436 001a 1A55     		strb	r2, [r3, r4]
 144:main.c        ****         if ((msg_count - 3) > bytes)
 437              		.loc 1 144 0
 438 001c 084B     		ldr	r3, .L20
 439 001e 1B68     		ldr	r3, [r3]
 440 0020 DA1E     		subs	r2, r3, #3
 441 0022 094B     		ldr	r3, .L20+8
 442 0024 1B68     		ldr	r3, [r3]
 443 0026 9A42     		cmp	r2, r3
 444 0028 02DD     		ble	.L18
 145:main.c        ****             rxflag = 1;
 445              		.loc 1 145 0
 446 002a 084B     		ldr	r3, .L20+12
 447 002c 0122     		movs	r2, #1
 448 002e 1A60     		str	r2, [r3]
 449              	.L18:
 142:main.c        ****         RxBuffer[msg_count++] = UART_GetChar();
 450              		.loc 1 142 0
 451 0030 FFF7FEFF 		bl	UART_ReadRxStatus
 452 0034 0346     		mov	r3, r0
 453 0036 03F02003 		and	r3, r3, #32
 454 003a 002B     		cmp	r3, #0
 455 003c E3D1     		bne	.L19
 146:main.c        ****     }
 147:main.c        ****     #endif
 148:main.c        **** }
 456              		.loc 1 148 0
 457 003e 98BD     		pop	{r3, r4, r7, pc}
 458              	.L21:
 459              		.align	2
 460              	.L20:
 461 0040 00000000 		.word	msg_count
 462 0044 00000000 		.word	RxBuffer
 463 0048 00000000 		.word	bytes
 464 004c 00000000 		.word	rxflag
 465              		.cfi_endproc
 466              	.LFE66:
 467              		.size	rx_interrupt, .-rx_interrupt
 468              		.section	.rodata
 469              		.align	2
 470              	.LC6:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 12


 471 0000 50536F43 		.ascii	"PSoC 5LP: O-Vac\000"
 471      20354C50 
 471      3A204F2D 
 471      56616300 
 472              		.align	2
 473              	.LC7:
 474 0010 49324320 		.ascii	"I2C Working\000"
 474      576F726B 
 474      696E6700 
 475              		.global	__aeabi_i2f
 476              		.global	__aeabi_f2d
 477              		.global	__aeabi_dmul
 478              		.global	__aeabi_d2f
 479              		.global	__aeabi_fadd
 480              		.global	__aeabi_fdiv
 481              		.global	__aeabi_f2iz
 482              		.global	__aeabi_fsub
 483              		.global	__aeabi_fmul
 484              		.align	2
 485              	.LC8:
 486 001c 53544154 		.ascii	"STATE: WAIT\000"
 486      453A2057 
 486      41495400 
 487              		.align	2
 488              	.LC9:
 489 0028 0A256420 		.ascii	"\012%d seconds remaining\000"
 489      7365636F 
 489      6E647320 
 489      72656D61 
 489      696E696E 
 490 003e 0000     		.align	2
 491              	.LC10:
 492 0040 53544154 		.ascii	"STATE: DESCENT\000"
 492      453A2044 
 492      45534345 
 492      4E5400
 493 004f 00       		.align	2
 494              	.LC11:
 495 0050 53544154 		.ascii	"STATE: LANDED\000"
 495      453A204C 
 495      414E4445 
 495      4400
 496 005e 0000     		.align	2
 497              	.LC12:
 498 0060 53544154 		.ascii	"STATE: RESURFACE\000"
 498      453A2052 
 498      45535552 
 498      46414345 
 498      00
 499 0071 000000   		.align	2
 500              	.LC13:
 501 0074 53544154 		.ascii	"STATE: RESURFACING\000"
 501      453A2052 
 501      45535552 
 501      46414349 
 501      4E4700
 502 0087 00       		.align	2
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 13


 503              	.LC14:
 504 0088 57415445 		.ascii	"WATER DETECTED\000"
 504      52204445 
 504      54454354 
 504      454400
 505 0097 00       		.align	2
 506              	.LC15:
 507 0098 5452414E 		.ascii	"TRANSMIT\000"
 507      534D4954 
 507      00
 508 00a1 000000   		.align	2
 509              	.LC0:
 510 00a4 53595354 		.ascii	"SYSTEM_CHECK\000"
 510      454D5F43 
 510      4845434B 
 510      00
 511 00b1 00       		.space	1
 512 00b2 0000     		.align	2
 513              	.LC1:
 514 00b4 0A535441 		.ascii	"\012STATE: DESCENDING\012\000"
 514      54453A20 
 514      44455343 
 514      454E4449 
 514      4E470A00 
 515              		.align	2
 516              	.LC2:
 517 00c8 53544154 		.ascii	"STATE: LANDED\012\000"
 517      453A204C 
 517      414E4445 
 517      440A00
 518 00d7 00       		.align	2
 519              	.LC3:
 520 00d8 53544154 		.ascii	"STATE: VACUUMING\012\000"
 520      453A2056 
 520      41435555 
 520      4D494E47 
 520      0A00
 521 00ea 0000     		.align	2
 522              	.LC4:
 523 00ec 53544154 		.ascii	"STATE: RESURFACE\012\000"
 523      453A2052 
 523      45535552 
 523      46414345 
 523      0A00
 524 00fe 0000     		.align	2
 525              	.LC5:
 526 0100 53544154 		.ascii	"STATE: TRANSMIT\012\000"
 526      453A2054 
 526      52414E53 
 526      4D49540A 
 526      00
 527              		.section	.text.main,"ax",%progbits
 528              		.align	2
 529              		.global	main
 530              		.thumb
 531              		.thumb_func
 532              		.type	main, %function
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 14


 533              	main:
 534              	.LFB67:
 149:main.c        **** 
 150:main.c        **** int main()
 151:main.c        **** {
 535              		.loc 1 151 0
 536              		.cfi_startproc
 537              		@ args = 0, pretend = 0, frame = 304
 538              		@ frame_needed = 1, uses_anonymous_args = 0
 539 0000 B0B5     		push	{r4, r5, r7, lr}
 540              		.cfi_def_cfa_offset 16
 541              		.cfi_offset 4, -16
 542              		.cfi_offset 5, -12
 543              		.cfi_offset 7, -8
 544              		.cfi_offset 14, -4
 545 0002 CEB0     		sub	sp, sp, #312
 546              		.cfi_def_cfa_offset 328
 547 0004 02AF     		add	r7, sp, #8
 548              		.cfi_def_cfa 7, 320
 152:main.c        ****     int num = 0, decimals = 0;                                       // ADC Voltage conversion plac
 549              		.loc 1 152 0
 550 0006 0023     		movs	r3, #0
 551 0008 C7F82031 		str	r3, [r7, #288]
 552 000c 0023     		movs	r3, #0
 553 000e C7F81C31 		str	r3, [r7, #284]
 153:main.c        ****     float voltage = 0, temp = 0, output = 0, pressure_avg = 0;       // ADC Voltage conversion vari
 554              		.loc 1 153 0
 555 0012 4FF00003 		mov	r3, #0
 556 0016 C7F81831 		str	r3, [r7, #280]	@ float
 557 001a 4FF00003 		mov	r3, #0
 558 001e C7F81431 		str	r3, [r7, #276]	@ float
 559 0022 4FF00003 		mov	r3, #0
 560 0026 C7F81031 		str	r3, [r7, #272]	@ float
 561 002a 4FF00003 		mov	r3, #0
 562 002e C7F82C31 		str	r3, [r7, #300]	@ float
 154:main.c        ****     char buf[50], tempbuf[20] = {}, curState[14] = "SYSTEM_CHECK";  // buffers, UART and initial st
 563              		.loc 1 154 0
 564 0032 07F1BC03 		add	r3, r7, #188
 565 0036 0022     		movs	r2, #0
 566 0038 1A60     		str	r2, [r3]
 567 003a 0433     		adds	r3, r3, #4
 568 003c 0022     		movs	r2, #0
 569 003e 1A60     		str	r2, [r3]
 570 0040 0433     		adds	r3, r3, #4
 571 0042 0022     		movs	r2, #0
 572 0044 1A60     		str	r2, [r3]
 573 0046 0433     		adds	r3, r3, #4
 574 0048 0022     		movs	r2, #0
 575 004a 1A60     		str	r2, [r3]
 576 004c 0433     		adds	r3, r3, #4
 577 004e 0022     		movs	r2, #0
 578 0050 1A60     		str	r2, [r3]
 579 0052 0433     		adds	r3, r3, #4
 580 0054 BE4B     		ldr	r3, .L69+8
 581 0056 07F1AC04 		add	r4, r7, #172
 582 005a 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 583 005c 07C4     		stmia	r4!, {r0, r1, r2}
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 15


 584 005e 2370     		strb	r3, [r4]
 585 0060 0023     		movs	r3, #0
 586 0062 87F8B930 		strb	r3, [r7, #185]
 155:main.c        ****     char descendbuf[DESCENDING_LEN] = STATE_DESCENDING;             // buffers for transmitting sta
 587              		.loc 1 155 0
 588 0066 BB4B     		ldr	r3, .L69+12
 589 0068 07F19804 		add	r4, r7, #152
 590 006c 1D46     		mov	r5, r3
 591 006e 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 592 0070 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 593 0072 2B68     		ldr	r3, [r5]
 594 0074 1A46     		mov	r2, r3	@ movhi
 595 0076 2280     		strh	r2, [r4]	@ movhi
 596 0078 0234     		adds	r4, r4, #2
 597 007a 1B0C     		lsrs	r3, r3, #16
 598 007c 2370     		strb	r3, [r4]
 156:main.c        ****     char landedbuf[LANDED_LEN] = STATE_LANDED;              
 599              		.loc 1 156 0
 600 007e B64B     		ldr	r3, .L69+16
 601 0080 07F18804 		add	r4, r7, #136
 602 0084 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 603 0086 07C4     		stmia	r4!, {r0, r1, r2}
 604 0088 2380     		strh	r3, [r4]	@ movhi
 157:main.c        ****     char vacuumbuf[VACUUM_LEN] = STATE_VACUUM;
 605              		.loc 1 157 0
 606 008a B44B     		ldr	r3, .L69+20
 607 008c 07F17404 		add	r4, r7, #116
 608 0090 1D46     		mov	r5, r3
 609 0092 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 610 0094 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 611 0096 2B68     		ldr	r3, [r5]
 612 0098 2370     		strb	r3, [r4]
 158:main.c        ****     char resurfbuf[RESURFACE_LEN] = STATE_RESURFACE;
 613              		.loc 1 158 0
 614 009a B14B     		ldr	r3, .L69+24
 615 009c 07F16004 		add	r4, r7, #96
 616 00a0 1D46     		mov	r5, r3
 617 00a2 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 618 00a4 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 619 00a6 2B68     		ldr	r3, [r5]
 620 00a8 2370     		strb	r3, [r4]
 159:main.c        ****     char transbuf[TRANSMIT_LEN] = STATE_TRANSMIT;
 621              		.loc 1 159 0
 622 00aa AE4B     		ldr	r3, .L69+28
 623 00ac 07F15004 		add	r4, r7, #80
 624 00b0 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 625 00b2 84E80F00 		stmia	r4, {r0, r1, r2, r3}
 160:main.c        ****     int stateMsgCount = 0, pulse = 0, secs_for_tilt = 0;
 626              		.loc 1 160 0
 627 00b6 0023     		movs	r3, #0
 628 00b8 C7F82831 		str	r3, [r7, #296]
 629 00bc 0023     		movs	r3, #0
 630 00be C7F82431 		str	r3, [r7, #292]
 631 00c2 0023     		movs	r3, #0
 632 00c4 C7F80C31 		str	r3, [r7, #268]
 161:main.c        ****     
 162:main.c        ****     int16_t ax, ay, az, i;
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 16


 163:main.c        ****     int16_t gx, gy, gz;
 164:main.c        ****     int16_t z_offset = 0;
 633              		.loc 1 164 0
 634 00c8 0023     		movs	r3, #0
 635 00ca A7F80A31 		strh	r3, [r7, #266]	@ movhi
 165:main.c        ****     int tens = 0, ones = 0;                     // digit place variables for message len of bluetoo
 636              		.loc 1 165 0
 637 00ce 0023     		movs	r3, #0
 638 00d0 7B64     		str	r3, [r7, #68]
 639 00d2 0023     		movs	r3, #0
 640 00d4 C7F80431 		str	r3, [r7, #260]
 166:main.c        ****     
 167:main.c        ****     /* Start the components */
 168:main.c        ****     CYGlobalIntEnable;                          // enable global interrupts
 641              		.loc 1 168 0
 642              	@ 168 "main.c" 1
 643 00d8 62B6     		CPSIE   i
 644              	@ 0 "" 2
 169:main.c        ****     I2C_Master_Start(); 
 645              		.loc 1 169 0
 646              		.thumb
 647 00da FFF7FEFF 		bl	I2C_Master_Start
 170:main.c        ****     ADC_Start();
 648              		.loc 1 170 0
 649 00de FFF7FEFF 		bl	ADC_Start
 171:main.c        ****     Sample_Timer_Start();                       // start timer module
 650              		.loc 1 171 0
 651 00e2 FFF7FEFF 		bl	Sample_Timer_Start
 172:main.c        ****     Sample_ISR_StartEx(Sample_ISR_Handler);     // reference ISR function
 652              		.loc 1 172 0
 653 00e6 A048     		ldr	r0, .L69+32
 654 00e8 FFF7FEFF 		bl	Sample_ISR_StartEx
 173:main.c        ****     rx_interrupt_StartEx(rx_interrupt);
 655              		.loc 1 173 0
 656 00ec 9F48     		ldr	r0, .L69+36
 657 00ee FFF7FEFF 		bl	rx_interrupt_StartEx
 174:main.c        ****     //moisture_isr_StartEx(Moisture_ISR_Handler); // moisture isr start
 175:main.c        ****     //Comp_Start();                               // comparator for moisture start
 176:main.c        ****     UART_Start();
 658              		.loc 1 176 0
 659 00f2 FFF7FEFF 		bl	UART_Start
 177:main.c        ****     
 178:main.c        ****     
 179:main.c        ****     #ifdef LCD
 180:main.c        ****         LiquidCrystal_I2C_init(Addr,16,2,0);        // initialize I2C communication with LCD
 660              		.loc 1 180 0
 661 00f6 9E4B     		ldr	r3, .L69+40
 662 00f8 1B68     		ldr	r3, [r3]
 663 00fa DBB2     		uxtb	r3, r3
 664 00fc 1846     		mov	r0, r3
 665 00fe 1021     		movs	r1, #16
 666 0100 0222     		movs	r2, #2
 667 0102 0023     		movs	r3, #0
 668 0104 FFF7FEFF 		bl	LiquidCrystal_I2C_init
 181:main.c        ****         begin(); 
 669              		.loc 1 181 0
 670 0108 FFF7FEFF 		bl	begin
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 17


 182:main.c        ****     
 183:main.c        ****     #endif
 184:main.c        ****    
 185:main.c        ****     /* initialize MPU6050 */
 186:main.c        ****     #ifdef MPU6050
 187:main.c        ****         MPU6050_init();    
 671              		.loc 1 187 0
 672 010c FFF7FEFF 		bl	MPU6050_init
 188:main.c        **** 	    MPU6050_initialize(); 
 673              		.loc 1 188 0
 674 0110 FFF7FEFF 		bl	MPU6050_initialize
 189:main.c        ****     #endif
 190:main.c        ****         
 191:main.c        ****     #ifdef LCD
 192:main.c        ****         /* Startup Display */
 193:main.c        ****         LCD_print("PSoC 5LP: O-Vac");
 675              		.loc 1 193 0
 676 0114 9748     		ldr	r0, .L69+44
 677 0116 FFF7FEFF 		bl	LCD_print
 194:main.c        ****         setCursor(0,1);
 678              		.loc 1 194 0
 679 011a 0020     		movs	r0, #0
 680 011c 0121     		movs	r1, #1
 681 011e FFF7FEFF 		bl	setCursor
 195:main.c        ****         LCD_print("I2C Working");
 682              		.loc 1 195 0
 683 0122 9548     		ldr	r0, .L69+48
 684 0124 FFF7FEFF 		bl	LCD_print
 196:main.c        ****         
 197:main.c        ****         CyDelay(1000u);   
 685              		.loc 1 197 0
 686 0128 4FF47A70 		mov	r0, #1000
 687 012c FFF7FEFF 		bl	CyDelay
 198:main.c        ****         clear();
 688              		.loc 1 198 0
 689 0130 FFF7FEFF 		bl	clear
 199:main.c        ****     #endif
 200:main.c        ****     
 201:main.c        ****     /* Start the ADC conversion */
 202:main.c        ****     ADC_StartConvert();
 690              		.loc 1 202 0
 691 0134 FFF7FEFF 		bl	ADC_StartConvert
 203:main.c        **** 
 204:main.c        ****     /* Start SD card*/
 205:main.c        ****     #ifdef SD
 206:main.c        ****         int SD_Result = SD_SETUP(file); 
 207:main.c        ****         
 208:main.c        ****     #endif
 209:main.c        ****     
 210:main.c        ****     #ifdef LCD
 211:main.c        ****         /* Display the current State */
 212:main.c        ****         setCursor(0,0);    
 692              		.loc 1 212 0
 693 0138 0020     		movs	r0, #0
 694 013a 0021     		movs	r1, #0
 695 013c FFF7FEFF 		bl	setCursor
 213:main.c        ****         LCD_print(curState);
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 18


 696              		.loc 1 213 0
 697 0140 07F1AC03 		add	r3, r7, #172
 698 0144 1846     		mov	r0, r3
 699 0146 FFF7FEFF 		bl	LCD_print
 214:main.c        ****     #endif
 215:main.c        ****     STATE = WAIT_TO_LAUNCH;
 700              		.loc 1 215 0
 701 014a 8C4B     		ldr	r3, .L69+52
 702 014c 0122     		movs	r2, #1
 703 014e 1A70     		strb	r2, [r3]
 216:main.c        ****     
 217:main.c        ****     Countdown_timer_Start();
 704              		.loc 1 217 0
 705 0150 FFF7FEFF 		bl	Countdown_timer_Start
 218:main.c        ****     countdown_StartEx(Countdown_ISR_Handler);
 706              		.loc 1 218 0
 707 0154 8A48     		ldr	r0, .L69+56
 708 0156 FFF7FEFF 		bl	countdown_StartEx
 709              	.L67:
 710              	.LBB2:
 219:main.c        ****    
 220:main.c        ****     
 221:main.c        ****     for(;;)
 222:main.c        ****     {
 223:main.c        ****         
 224:main.c        ****         if(ADC_IsEndConversion(ADC_RETURN_STATUS))              // voltage conversion for pressure
 711              		.loc 1 224 0
 712 015a 0120     		movs	r0, #1
 713 015c FFF7FEFF 		bl	ADC_IsEndConversion
 714 0160 0346     		mov	r3, r0
 715 0162 002B     		cmp	r3, #0
 716 0164 00F08980 		beq	.L23
 225:main.c        ****         {
 226:main.c        ****             output = ADC_GetResult32();
 717              		.loc 1 226 0
 718 0168 FFF7FEFF 		bl	ADC_GetResult32
 719 016c 0346     		mov	r3, r0
 720 016e 1846     		mov	r0, r3
 721 0170 FFF7FEFF 		bl	__aeabi_i2f
 722 0174 0346     		mov	r3, r0
 723 0176 C7F81031 		str	r3, [r7, #272]	@ float
 227:main.c        ****             voltage = output * (3.32 / 4096);
 724              		.loc 1 227 0
 725 017a D7F81001 		ldr	r0, [r7, #272]	@ float
 726 017e FFF7FEFF 		bl	__aeabi_f2d
 727 0182 0246     		mov	r2, r0
 728 0184 0B46     		mov	r3, r1
 729 0186 1046     		mov	r0, r2
 730 0188 1946     		mov	r1, r3
 731 018a 6FA3     		adr	r3, .L69
 732 018c D3E90023 		ldrd	r2, [r3]
 733 0190 FFF7FEFF 		bl	__aeabi_dmul
 734 0194 0246     		mov	r2, r0
 735 0196 0B46     		mov	r3, r1
 736 0198 1046     		mov	r0, r2
 737 019a 1946     		mov	r1, r3
 738 019c FFF7FEFF 		bl	__aeabi_d2f
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 19


 739 01a0 0346     		mov	r3, r0
 740 01a2 C7F81831 		str	r3, [r7, #280]	@ float
 228:main.c        ****             if(collect_flag == 1){
 741              		.loc 1 228 0
 742 01a6 774B     		ldr	r3, .L69+60
 743 01a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 744 01aa 002B     		cmp	r3, #0
 745 01ac 65D0     		beq	.L23
 229:main.c        ****                 if (press_id < MA_WINDOW){
 746              		.loc 1 229 0
 747 01ae 764B     		ldr	r3, .L69+64
 748 01b0 1B68     		ldr	r3, [r3]
 749 01b2 0E2B     		cmp	r3, #14
 750 01b4 0BDC     		bgt	.L24
 230:main.c        ****                     pressure_sum += voltage;     
 751              		.loc 1 230 0
 752 01b6 754B     		ldr	r3, .L69+68
 753 01b8 1B68     		ldr	r3, [r3]	@ float
 754 01ba 1846     		mov	r0, r3
 755 01bc D7F81811 		ldr	r1, [r7, #280]	@ float
 756 01c0 FFF7FEFF 		bl	__aeabi_fadd
 757 01c4 0346     		mov	r3, r0
 758 01c6 1A46     		mov	r2, r3
 759 01c8 704B     		ldr	r3, .L69+68
 760 01ca 1A60     		str	r2, [r3]	@ float
 761 01cc 49E0     		b	.L25
 762              	.L24:
 231:main.c        ****                 }
 232:main.c        ****                 else if(press_id == MA_WINDOW){
 763              		.loc 1 232 0
 764 01ce 6E4B     		ldr	r3, .L69+64
 765 01d0 1B68     		ldr	r3, [r3]
 766 01d2 0F2B     		cmp	r3, #15
 767 01d4 14D1     		bne	.L26
 233:main.c        ****                     pressure_sum += voltage;
 768              		.loc 1 233 0
 769 01d6 6D4B     		ldr	r3, .L69+68
 770 01d8 1B68     		ldr	r3, [r3]	@ float
 771 01da 1846     		mov	r0, r3
 772 01dc D7F81811 		ldr	r1, [r7, #280]	@ float
 773 01e0 FFF7FEFF 		bl	__aeabi_fadd
 774 01e4 0346     		mov	r3, r0
 775 01e6 1A46     		mov	r2, r3
 776 01e8 684B     		ldr	r3, .L69+68
 777 01ea 1A60     		str	r2, [r3]	@ float
 234:main.c        ****                     pressure_avg = pressure_sum/MA_WINDOW;                            // compute ba
 778              		.loc 1 234 0
 779 01ec 674B     		ldr	r3, .L69+68
 780 01ee 1B68     		ldr	r3, [r3]	@ float
 781 01f0 1846     		mov	r0, r3
 782 01f2 6749     		ldr	r1, .L69+72
 783 01f4 FFF7FEFF 		bl	__aeabi_fdiv
 784 01f8 0346     		mov	r3, r0
 785 01fa C7F82C31 		str	r3, [r7, #300]	@ float
 786 01fe 30E0     		b	.L25
 787              	.L26:
 788              	.LBB3:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 20


 235:main.c        ****                 }
 236:main.c        ****                 else{
 237:main.c        ****                     pressure_avg = ComputeMA(pressure_avg, MA_WINDOW, voltage);
 789              		.loc 1 237 0
 790 0200 D7F82C01 		ldr	r0, [r7, #300]	@ float
 791 0204 0F21     		movs	r1, #15
 792 0206 D7F81821 		ldr	r2, [r7, #280]	@ float
 793 020a FFF7FEFF 		bl	ComputeMA
 794 020e C7F82C01 		str	r0, [r7, #300]	@ float
 238:main.c        ****                     num = pressure_avg;
 795              		.loc 1 238 0
 796 0212 D7F82C01 		ldr	r0, [r7, #300]	@ float
 797 0216 FFF7FEFF 		bl	__aeabi_f2iz
 798 021a 0346     		mov	r3, r0
 799 021c C7F82031 		str	r3, [r7, #288]
 239:main.c        ****                     temp = pressure_avg - num;
 800              		.loc 1 239 0
 801 0220 D7F82001 		ldr	r0, [r7, #288]
 802 0224 FFF7FEFF 		bl	__aeabi_i2f
 803 0228 0346     		mov	r3, r0
 804 022a D7F82C01 		ldr	r0, [r7, #300]	@ float
 805 022e 1946     		mov	r1, r3
 806 0230 FFF7FEFF 		bl	__aeabi_fsub
 807 0234 0346     		mov	r3, r0
 808 0236 C7F81431 		str	r3, [r7, #276]	@ float
 240:main.c        ****                     decimals = temp * 10000;
 809              		.loc 1 240 0
 810 023a D7F81401 		ldr	r0, [r7, #276]	@ float
 811 023e 5549     		ldr	r1, .L69+76
 812 0240 FFF7FEFF 		bl	__aeabi_fmul
 813 0244 0346     		mov	r3, r0
 814 0246 1846     		mov	r0, r3
 815 0248 FFF7FEFF 		bl	__aeabi_f2iz
 816 024c 0346     		mov	r3, r0
 817 024e C7F81C31 		str	r3, [r7, #284]
 241:main.c        ****                     char sdbuf[60] = {};
 818              		.loc 1 241 0
 819 0252 3B1D     		adds	r3, r7, #4
 820 0254 1A46     		mov	r2, r3
 821 0256 3C23     		movs	r3, #60
 822 0258 1046     		mov	r0, r2
 823 025a 0021     		movs	r1, #0
 824 025c 1A46     		mov	r2, r3
 825 025e FFF7FEFF 		bl	memset
 826              	.L25:
 827              	.LBE3:
 242:main.c        ****                     #ifdef SD
 243:main.c        ****                         sprintf(sdbuf, "pressure: %d.%04d, %d\n", num, decimals, (int16)output); //
 244:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 245:main.c        ****                     #endif 
 246:main.c        ****                 }
 247:main.c        ****                 if (STATE != DESCENDING) collect_flag = 0;
 828              		.loc 1 247 0
 829 0262 464B     		ldr	r3, .L69+52
 830 0264 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 831 0266 022B     		cmp	r3, #2
 832 0268 02D0     		beq	.L27
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 21


 833              		.loc 1 247 0 is_stmt 0 discriminator 1
 834 026a 464B     		ldr	r3, .L69+60
 835 026c 0022     		movs	r2, #0
 836 026e 1A70     		strb	r2, [r3]
 837              	.L27:
 248:main.c        ****                 press_id++;
 838              		.loc 1 248 0 is_stmt 1
 839 0270 454B     		ldr	r3, .L69+64
 840 0272 1B68     		ldr	r3, [r3]
 841 0274 0133     		adds	r3, r3, #1
 842 0276 444A     		ldr	r2, .L69+64
 843 0278 1360     		str	r3, [r2]
 844              	.L23:
 249:main.c        ****             }
 250:main.c        ****         }
 251:main.c        ****         
 252:main.c        ****     /* Bluetooth message response, after 2 bytes received, retrieve message from those 2 bytes. Onc
 253:main.c        ****      * has arrived, process it. */
 254:main.c        ****     #ifdef BT
 255:main.c        ****         if (msg_count >= 2){
 845              		.loc 1 255 0
 846 027a 474B     		ldr	r3, .L69+80
 847 027c 1B68     		ldr	r3, [r3]
 848 027e 012B     		cmp	r3, #1
 849 0280 13DD     		ble	.L28
 256:main.c        ****             tens = RxBuffer[0] - 48;
 850              		.loc 1 256 0
 851 0282 464B     		ldr	r3, .L69+84
 852 0284 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 853 0286 303B     		subs	r3, r3, #48
 854 0288 7B64     		str	r3, [r7, #68]
 257:main.c        ****             ones = RxBuffer[1] - 48;
 855              		.loc 1 257 0
 856 028a 444B     		ldr	r3, .L69+84
 857 028c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 858 028e 303B     		subs	r3, r3, #48
 859 0290 C7F80431 		str	r3, [r7, #260]
 258:main.c        ****             bytes = (tens * 10) + ones;
 860              		.loc 1 258 0
 861 0294 7A6C     		ldr	r2, [r7, #68]
 862 0296 1346     		mov	r3, r2
 863 0298 9B00     		lsls	r3, r3, #2
 864 029a 1344     		add	r3, r3, r2
 865 029c 5B00     		lsls	r3, r3, #1
 866 029e 1A46     		mov	r2, r3
 867 02a0 D7F80431 		ldr	r3, [r7, #260]
 868 02a4 1344     		add	r3, r3, r2
 869 02a6 3E4A     		ldr	r2, .L69+88
 870 02a8 1360     		str	r3, [r2]
 871              	.L28:
 259:main.c        ****         } 
 260:main.c        ****         
 261:main.c        ****         if(rxflag) {
 872              		.loc 1 261 0
 873 02aa 3E4B     		ldr	r3, .L69+92
 874 02ac 1B68     		ldr	r3, [r3]
 875 02ae 002B     		cmp	r3, #0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 22


 876 02b0 2DD0     		beq	.L29
 262:main.c        ****             uint8_to_char(RxBuffer, &tempbuf[0], 20);
 877              		.loc 1 262 0
 878 02b2 07F1BC03 		add	r3, r7, #188
 879 02b6 3948     		ldr	r0, .L69+84
 880 02b8 1946     		mov	r1, r3
 881 02ba 1422     		movs	r2, #20
 882 02bc FFF7FEFF 		bl	uint8_to_char
 263:main.c        ****             depth = BT_Process(&tempbuf[3], &STATE, bytes, &dataflag, &reset);
 883              		.loc 1 263 0
 884 02c0 374B     		ldr	r3, .L69+88
 885 02c2 1A68     		ldr	r2, [r3]
 886 02c4 07F1BC03 		add	r3, r7, #188
 887 02c8 D91C     		adds	r1, r3, #3
 888 02ca 374B     		ldr	r3, .L69+96
 889 02cc 0093     		str	r3, [sp]
 890 02ce 0846     		mov	r0, r1
 891 02d0 2A49     		ldr	r1, .L69+52
 892 02d2 364B     		ldr	r3, .L69+100
 893 02d4 FFF7FEFF 		bl	BT_Process
 894 02d8 0246     		mov	r2, r0
 895 02da 354B     		ldr	r3, .L69+104
 896 02dc 1A60     		str	r2, [r3]
 264:main.c        ****             
 265:main.c        ****             msg_count = 0; bytes = 0;
 897              		.loc 1 265 0
 898 02de 2E4B     		ldr	r3, .L69+80
 899 02e0 0022     		movs	r2, #0
 900 02e2 1A60     		str	r2, [r3]
 901 02e4 2E4B     		ldr	r3, .L69+88
 902 02e6 0022     		movs	r2, #0
 903 02e8 1A60     		str	r2, [r3]
 266:main.c        ****             memset(RxBuffer, 0, BUFFER_LEN);
 904              		.loc 1 266 0
 905 02ea 2C48     		ldr	r0, .L69+84
 906 02ec 0021     		movs	r1, #0
 907 02ee 4022     		movs	r2, #64
 908 02f0 FFF7FEFF 		bl	memset
 267:main.c        ****             memset(tempbuf, 0, 20);
 909              		.loc 1 267 0
 910 02f4 07F1BC03 		add	r3, r7, #188
 911 02f8 1846     		mov	r0, r3
 912 02fa 0021     		movs	r1, #0
 913 02fc 1422     		movs	r2, #20
 914 02fe FFF7FEFF 		bl	memset
 268:main.c        ****             countdown = 0;
 915              		.loc 1 268 0
 916 0302 2C4B     		ldr	r3, .L69+108
 917 0304 0022     		movs	r2, #0
 918 0306 1A70     		strb	r2, [r3]
 269:main.c        ****             rxflag = 0;
 919              		.loc 1 269 0
 920 0308 264B     		ldr	r3, .L69+92
 921 030a 0022     		movs	r2, #0
 922 030c 1A60     		str	r2, [r3]
 923              	.L29:
 270:main.c        ****         }
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 23


 271:main.c        ****     #endif
 272:main.c        ****     
 273:main.c        ****         /* Get Z-Acceleration */
 274:main.c        **** 
 275:main.c        ****         az = MPU6050_getAccelerationZ();
 924              		.loc 1 275 0
 925 030e FFF7FEFF 		bl	MPU6050_getAccelerationZ
 926 0312 0346     		mov	r3, r0
 927 0314 A7F80231 		strh	r3, [r7, #258]	@ movhi
 276:main.c        **** 
 277:main.c        ****         int t = 1;
 928              		.loc 1 277 0
 929 0318 0123     		movs	r3, #1
 930 031a 3B64     		str	r3, [r7, #64]
 278:main.c        ****         /* State Machine */
 279:main.c        ****         switch (STATE){
 931              		.loc 1 279 0
 932 031c 174B     		ldr	r3, .L69+52
 933 031e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 934 0320 013B     		subs	r3, r3, #1
 935 0322 042B     		cmp	r3, #4
 936 0324 00F28D83 		bhi	.L68
 937 0328 01A2     		adr	r2, .L32
 938 032a 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 939 032e 00BF     		.p2align 2
 940              	.L32:
 941 0330 B9030000 		.word	.L31+1
 942 0334 45050000 		.word	.L33+1
 943 0338 CD070000 		.word	.L34+1
 944 033c BB090000 		.word	.L35+1
 945 0340 1F0A0000 		.word	.L36+1
 946              		.p2align 1
 947              	.L70:
 948 0344 AFF30080 		.align	3
 949              	.L69:
 950 0348 8FC2F528 		.word	687194767
 951 034c 5C8F4A3F 		.word	1061850972
 952 0350 A4000000 		.word	.LC0
 953 0354 B4000000 		.word	.LC1
 954 0358 C8000000 		.word	.LC2
 955 035c D8000000 		.word	.LC3
 956 0360 EC000000 		.word	.LC4
 957 0364 00010000 		.word	.LC5
 958 0368 00000000 		.word	Sample_ISR_Handler
 959 036c 00000000 		.word	rx_interrupt
 960 0370 00000000 		.word	Addr
 961 0374 00000000 		.word	.LC6
 962 0378 10000000 		.word	.LC7
 963 037c 00000000 		.word	STATE
 964 0380 00000000 		.word	Countdown_ISR_Handler
 965 0384 00000000 		.word	collect_flag
 966 0388 00000000 		.word	press_id
 967 038c 00000000 		.word	pressure_sum
 968 0390 00007041 		.word	1097859072
 969 0394 00401C46 		.word	1176256512
 970 0398 00000000 		.word	msg_count
 971 039c 00000000 		.word	RxBuffer
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 24


 972 03a0 00000000 		.word	bytes
 973 03a4 00000000 		.word	rxflag
 974 03a8 00000000 		.word	reset
 975 03ac 00000000 		.word	dataflag
 976 03b0 00000000 		.word	depth
 977 03b4 00000000 		.word	countdown
 978              	.L31:
 280:main.c        ****     
 281:main.c        ****             /* Waiting for start command and depth*/
 282:main.c        ****             case WAIT_TO_LAUNCH:  
 283:main.c        ****                 if (reset){                         // If reset command was received, reset:
 979              		.loc 1 283 0
 980 03b8 A84B     		ldr	r3, .L71
 981 03ba 1B68     		ldr	r3, [r3]
 982 03bc 002B     		cmp	r3, #0
 983 03be 37D0     		beq	.L37
 284:main.c        ****                     id = 1;                                // Interrupt count.
 984              		.loc 1 284 0
 985 03c0 A74B     		ldr	r3, .L71+4
 986 03c2 0122     		movs	r2, #1
 987 03c4 1A60     		str	r2, [r3]
 285:main.c        ****                     data_time = 0;                         // data point num
 988              		.loc 1 285 0
 989 03c6 A74B     		ldr	r3, .L71+8
 990 03c8 0022     		movs	r2, #0
 991 03ca 1A60     		str	r2, [r3]
 286:main.c        ****                     sum = 0;                               // Sum of accelerometer values. 
 992              		.loc 1 286 0
 993 03cc A64B     		ldr	r3, .L71+12
 994 03ce 0022     		movs	r2, #0
 995 03d0 1A60     		str	r2, [r3]
 287:main.c        ****                     average = 0;                           // Moving average variable.
 996              		.loc 1 287 0
 997 03d2 A64B     		ldr	r3, .L71+16
 998 03d4 0022     		movs	r2, #0
 999 03d6 1A80     		strh	r2, [r3]	@ movhi
 288:main.c        ****                     xavg = 0; yavg = 0;                    // Gyro average variables
 1000              		.loc 1 288 0
 1001 03d8 A54B     		ldr	r3, .L71+20
 1002 03da 4FF00002 		mov	r2, #0
 1003 03de 1A60     		str	r2, [r3]	@ float
 1004 03e0 A44B     		ldr	r3, .L71+24
 1005 03e2 4FF00002 		mov	r2, #0
 1006 03e6 1A60     		str	r2, [r3]	@ float
 289:main.c        ****                     collect_flag = 0;                      // flag indicating when to record accele
 1007              		.loc 1 289 0
 1008 03e8 A34B     		ldr	r3, .L71+28
 1009 03ea 0022     		movs	r2, #0
 1010 03ec 1A70     		strb	r2, [r3]
 290:main.c        ****                     wait_flag = 0;                         // flag indicating when to increment int
 1011              		.loc 1 290 0
 1012 03ee A34B     		ldr	r3, .L71+32
 1013 03f0 0022     		movs	r2, #0
 1014 03f2 1A70     		strb	r2, [r3]
 291:main.c        ****                     PANIC_flag = 0;                        // flag indicating water is present in h
 1015              		.loc 1 291 0
 1016 03f4 A24B     		ldr	r3, .L71+36
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 25


 1017 03f6 0022     		movs	r2, #0
 1018 03f8 1A70     		strb	r2, [r3]
 292:main.c        ****                     //bool first_test = 1;                 // flag indicating first test(longer cou
 293:main.c        ****                     depth = 0; countdown = 0;              // Current desired depth, variable for c
 1019              		.loc 1 293 0
 1020 03fa A24B     		ldr	r3, .L71+40
 1021 03fc 0022     		movs	r2, #0
 1022 03fe 1A60     		str	r2, [r3]
 1023 0400 A14B     		ldr	r3, .L71+44
 1024 0402 0022     		movs	r2, #0
 1025 0404 1A70     		strb	r2, [r3]
 294:main.c        ****                     msg_count = 0; dataflag = 0;           // BT message len variable, data flag 
 1026              		.loc 1 294 0
 1027 0406 A14B     		ldr	r3, .L71+48
 1028 0408 0022     		movs	r2, #0
 1029 040a 1A60     		str	r2, [r3]
 1030 040c A04B     		ldr	r3, .L71+52
 1031 040e 0022     		movs	r2, #0
 1032 0410 1A60     		str	r2, [r3]
 295:main.c        ****                     reset = 0;                             // indicates whether to reset variables 
 1033              		.loc 1 295 0
 1034 0412 924B     		ldr	r3, .L71
 1035 0414 0022     		movs	r2, #0
 1036 0416 1A60     		str	r2, [r3]
 296:main.c        ****                     pulse = 0;
 1037              		.loc 1 296 0
 1038 0418 0023     		movs	r3, #0
 1039 041a C7F82431 		str	r3, [r7, #292]
 297:main.c        ****                     #ifdef LCD
 298:main.c        ****                         setCursor(0,0);
 1040              		.loc 1 298 0
 1041 041e 0020     		movs	r0, #0
 1042 0420 0021     		movs	r1, #0
 1043 0422 FFF7FEFF 		bl	setCursor
 299:main.c        ****                         clear();
 1044              		.loc 1 299 0
 1045 0426 FFF7FEFF 		bl	clear
 300:main.c        ****                         LCD_print("STATE: WAIT");  
 1046              		.loc 1 300 0
 1047 042a 9A48     		ldr	r0, .L71+56
 1048 042c FFF7FEFF 		bl	LCD_print
 1049              	.L37:
 301:main.c        ****                     #endif 
 302:main.c        ****                 }
 303:main.c        ****             
 304:main.c        ****                 if (transmit_flag){
 1050              		.loc 1 304 0
 1051 0430 994B     		ldr	r3, .L71+60
 1052 0432 1B68     		ldr	r3, [r3]
 1053 0434 002B     		cmp	r3, #0
 1054 0436 0BD0     		beq	.L38
 305:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &tens); // Here, the STATE variable only matte
 1055              		.loc 1 305 0
 1056 0438 07F1BC02 		add	r2, r7, #188
 1057 043c 07F14403 		add	r3, r7, #68
 1058 0440 1046     		mov	r0, r2
 1059 0442 9649     		ldr	r1, .L71+64
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 26


 1060 0444 0A22     		movs	r2, #10
 1061 0446 FFF7FEFF 		bl	BT_Send
 306:main.c        ****                     transmit_flag = 0;
 1062              		.loc 1 306 0
 1063 044a 934B     		ldr	r3, .L71+60
 1064 044c 0022     		movs	r2, #0
 1065 044e 1A60     		str	r2, [r3]
 1066              	.L38:
 307:main.c        ****                 }
 308:main.c        ****                 // Once depth has been entered, can begin countdown into descending
 309:main.c        ****                 if(wait_flag == 1){
 1067              		.loc 1 309 0
 1068 0450 8A4B     		ldr	r3, .L71+32
 1069 0452 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1070 0454 002B     		cmp	r3, #0
 1071 0456 74D0     		beq	.L39
 310:main.c        ****                     #ifdef BT
 311:main.c        ****                         stateMsgCount = 0;
 1072              		.loc 1 311 0
 1073 0458 0023     		movs	r3, #0
 1074 045a C7F82831 		str	r3, [r7, #296]
 312:main.c        ****                         sprintf(buf, "\n%d seconds remaining", (10 - countdown));
 1075              		.loc 1 312 0
 1076 045e 8A4B     		ldr	r3, .L71+44
 1077 0460 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1078 0462 C3F10A03 		rsb	r3, r3, #10
 1079 0466 07F1D002 		add	r2, r7, #208
 1080 046a 1046     		mov	r0, r2
 1081 046c 8C49     		ldr	r1, .L71+68
 1082 046e 1A46     		mov	r2, r3
 1083 0470 FFF7FEFF 		bl	sprintf
 313:main.c        ****                         while (stateMsgCount < 21){
 1084              		.loc 1 313 0
 1085 0474 19E0     		b	.L40
 1086              	.L43:
 314:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1087              		.loc 1 314 0
 1088 0476 11E0     		b	.L41
 1089              	.L42:
 315:main.c        ****                                 UART_PutChar(buf[stateMsgCount++]);
 1090              		.loc 1 315 0
 1091 0478 D7F82831 		ldr	r3, [r7, #296]
 1092 047c 5A1C     		adds	r2, r3, #1
 1093 047e C7F82821 		str	r2, [r7, #296]
 1094 0482 07F59872 		add	r2, r7, #304
 1095 0486 1344     		add	r3, r3, r2
 1096 0488 13F8603C 		ldrb	r3, [r3, #-96]	@ zero_extendqisi2
 1097 048c 1846     		mov	r0, r3
 1098 048e FFF7FEFF 		bl	UART_PutChar
 316:main.c        ****                                 if (stateMsgCount >= 21) break;
 1099              		.loc 1 316 0
 1100 0492 D7F82831 		ldr	r3, [r7, #296]
 1101 0496 142B     		cmp	r3, #20
 1102 0498 00DD     		ble	.L41
 1103 049a 06E0     		b	.L40
 1104              	.L41:
 314:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 27


 1105              		.loc 1 314 0
 1106 049c FFF7FEFF 		bl	UART_ReadTxStatus
 1107 04a0 0346     		mov	r3, r0
 1108 04a2 03F00803 		and	r3, r3, #8
 1109 04a6 002B     		cmp	r3, #0
 1110 04a8 E6D1     		bne	.L42
 1111              	.L40:
 313:main.c        ****                             while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1112              		.loc 1 313 0
 1113 04aa D7F82831 		ldr	r3, [r7, #296]
 1114 04ae 142B     		cmp	r3, #20
 1115 04b0 E1DD     		ble	.L43
 317:main.c        ****                             }
 318:main.c        ****                         }
 319:main.c        ****                     #endif
 320:main.c        ****                     /* at 10 seconds, change into descending */
 321:main.c        ****                     if(countdown == 10){
 1116              		.loc 1 321 0
 1117 04b2 754B     		ldr	r3, .L71+44
 1118 04b4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1119 04b6 0A2B     		cmp	r3, #10
 1120 04b8 3FD1     		bne	.L44
 322:main.c        ****                         descent_time = (((depth / 13) + 3) * 2 * 500);
 1121              		.loc 1 322 0
 1122 04ba 724B     		ldr	r3, .L71+40
 1123 04bc 1B68     		ldr	r3, [r3]
 1124 04be 794A     		ldr	r2, .L71+72
 1125 04c0 82FB0312 		smull	r1, r2, r2, r3
 1126 04c4 9210     		asrs	r2, r2, #2
 1127 04c6 DB17     		asrs	r3, r3, #31
 1128 04c8 D31A     		subs	r3, r2, r3
 1129 04ca 0333     		adds	r3, r3, #3
 1130 04cc 4FF47A72 		mov	r2, #1000
 1131 04d0 02FB03F3 		mul	r3, r2, r3
 1132 04d4 744A     		ldr	r2, .L71+76
 1133 04d6 1360     		str	r3, [r2]
 323:main.c        ****                         /* descent time takes about 2~3 seconds to go 13 feet, add 3 for extra 10m 
 324:main.c        ****                          * number of ISR calls to get 1 second */ 
 325:main.c        ****                         STATE = DESCENDING;
 1134              		.loc 1 325 0
 1135 04d8 704B     		ldr	r3, .L71+64
 1136 04da 0222     		movs	r2, #2
 1137 04dc 1A70     		strb	r2, [r3]
 326:main.c        ****                         #ifdef LCD
 327:main.c        ****                             setCursor(0,0);
 1138              		.loc 1 327 0
 1139 04de 0020     		movs	r0, #0
 1140 04e0 0021     		movs	r1, #0
 1141 04e2 FFF7FEFF 		bl	setCursor
 328:main.c        ****                             clear();
 1142              		.loc 1 328 0
 1143 04e6 FFF7FEFF 		bl	clear
 329:main.c        ****                             LCD_print("STATE: DESCENT");
 1144              		.loc 1 329 0
 1145 04ea 7048     		ldr	r0, .L71+80
 1146 04ec FFF7FEFF 		bl	LCD_print
 330:main.c        ****                         #endif
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 28


 331:main.c        ****                         #ifdef BT
 332:main.c        ****                             stateMsgCount = 0;
 1147              		.loc 1 332 0
 1148 04f0 0023     		movs	r3, #0
 1149 04f2 C7F82831 		str	r3, [r7, #296]
 333:main.c        ****                             while (stateMsgCount < DESCENDING_LEN){
 1150              		.loc 1 333 0
 1151 04f6 19E0     		b	.L45
 1152              	.L48:
 334:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1153              		.loc 1 334 0
 1154 04f8 11E0     		b	.L46
 1155              	.L47:
 335:main.c        ****                                     UART_PutChar(descendbuf[stateMsgCount++]);
 1156              		.loc 1 335 0
 1157 04fa D7F82831 		ldr	r3, [r7, #296]
 1158 04fe 5A1C     		adds	r2, r3, #1
 1159 0500 C7F82821 		str	r2, [r7, #296]
 1160 0504 07F59872 		add	r2, r7, #304
 1161 0508 1344     		add	r3, r3, r2
 1162 050a 13F8983C 		ldrb	r3, [r3, #-152]	@ zero_extendqisi2
 1163 050e 1846     		mov	r0, r3
 1164 0510 FFF7FEFF 		bl	UART_PutChar
 336:main.c        ****                                     if (stateMsgCount >= DESCENDING_LEN) break;
 1165              		.loc 1 336 0
 1166 0514 D7F82831 		ldr	r3, [r7, #296]
 1167 0518 122B     		cmp	r3, #18
 1168 051a 00DD     		ble	.L46
 1169 051c 06E0     		b	.L45
 1170              	.L46:
 334:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1171              		.loc 1 334 0
 1172 051e FFF7FEFF 		bl	UART_ReadTxStatus
 1173 0522 0346     		mov	r3, r0
 1174 0524 03F00803 		and	r3, r3, #8
 1175 0528 002B     		cmp	r3, #0
 1176 052a E6D1     		bne	.L47
 1177              	.L45:
 333:main.c        ****                                 while (UART_ReadTxStatus() & UART_TX_STS_FIFO_NOT_FULL){
 1178              		.loc 1 333 0
 1179 052c D7F82831 		ldr	r3, [r7, #296]
 1180 0530 122B     		cmp	r3, #18
 1181 0532 E1DD     		ble	.L48
 337:main.c        ****                                 }
 338:main.c        ****                             }
 339:main.c        ****                         #endif
 340:main.c        ****                         countdown = 0; 
 1182              		.loc 1 340 0
 1183 0534 544B     		ldr	r3, .L71+44
 1184 0536 0022     		movs	r2, #0
 1185 0538 1A70     		strb	r2, [r3]
 1186              	.L44:
 341:main.c        ****                     }
 342:main.c        ****                     wait_flag = 0; 
 1187              		.loc 1 342 0
 1188 053a 504B     		ldr	r3, .L71+32
 1189 053c 0022     		movs	r2, #0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 29


 1190 053e 1A70     		strb	r2, [r3]
 343:main.c        ****                 }
 344:main.c        ****                 break;
 1191              		.loc 1 344 0
 1192 0540 80E2     		b	.L49
 1193              	.L39:
 1194 0542 7FE2     		b	.L49
 1195              	.L33:
 345:main.c        ****                 
 346:main.c        ****             case DESCENDING:
 347:main.c        ****                 MPU6050_getRotation(&gx, &gy, &gz); // gather gyro data
 1196              		.loc 1 347 0
 1197 0544 07F14E01 		add	r1, r7, #78
 1198 0548 07F14C02 		add	r2, r7, #76
 1199 054c 07F14A03 		add	r3, r7, #74
 1200 0550 0846     		mov	r0, r1
 1201 0552 1146     		mov	r1, r2
 1202 0554 1A46     		mov	r2, r3
 1203 0556 FFF7FEFF 		bl	MPU6050_getRotation
 348:main.c        ****                 if(collect_flag == 1){              // Check accelerometer and gyro data
 1204              		.loc 1 348 0
 1205 055a 474B     		ldr	r3, .L71+28
 1206 055c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1207 055e 002B     		cmp	r3, #0
 1208 0560 00F03381 		beq	.L50
 349:main.c        ****                     if (id < MA_WINDOW){    
 1209              		.loc 1 349 0
 1210 0564 3E4B     		ldr	r3, .L71+4
 1211 0566 1B68     		ldr	r3, [r3]
 1212 0568 0E2B     		cmp	r3, #14
 1213 056a 29DC     		bgt	.L51
 350:main.c        ****                         sum += az;  
 1214              		.loc 1 350 0
 1215 056c B7F90221 		ldrsh	r2, [r7, #258]
 1216 0570 3D4B     		ldr	r3, .L71+12
 1217 0572 1B68     		ldr	r3, [r3]
 1218 0574 1344     		add	r3, r3, r2
 1219 0576 3C4A     		ldr	r2, .L71+12
 1220 0578 1360     		str	r3, [r2]
 351:main.c        ****                         xsum += gx;
 1221              		.loc 1 351 0
 1222 057a B7F84E30 		ldrh	r3, [r7, #78]
 1223 057e 1BB2     		sxth	r3, r3
 1224 0580 1846     		mov	r0, r3
 1225 0582 FFF7FEFF 		bl	__aeabi_i2f
 1226 0586 0246     		mov	r2, r0
 1227 0588 494B     		ldr	r3, .L71+84
 1228 058a 1B68     		ldr	r3, [r3]	@ float
 1229 058c 1046     		mov	r0, r2
 1230 058e 1946     		mov	r1, r3
 1231 0590 FFF7FEFF 		bl	__aeabi_fadd
 1232 0594 0346     		mov	r3, r0
 1233 0596 1A46     		mov	r2, r3
 1234 0598 454B     		ldr	r3, .L71+84
 1235 059a 1A60     		str	r2, [r3]	@ float
 352:main.c        ****                         ysum += gy;
 1236              		.loc 1 352 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 30


 1237 059c B7F84C30 		ldrh	r3, [r7, #76]
 1238 05a0 1BB2     		sxth	r3, r3
 1239 05a2 1846     		mov	r0, r3
 1240 05a4 FFF7FEFF 		bl	__aeabi_i2f
 1241 05a8 0246     		mov	r2, r0
 1242 05aa 424B     		ldr	r3, .L71+88
 1243 05ac 1B68     		ldr	r3, [r3]	@ float
 1244 05ae 1046     		mov	r0, r2
 1245 05b0 1946     		mov	r1, r3
 1246 05b2 FFF7FEFF 		bl	__aeabi_fadd
 1247 05b6 0346     		mov	r3, r0
 1248 05b8 1A46     		mov	r2, r3
 1249 05ba 3E4B     		ldr	r3, .L71+88
 1250 05bc 1A60     		str	r2, [r3]	@ float
 1251 05be BBE0     		b	.L52
 1252              	.L51:
 353:main.c        ****                     }
 354:main.c        ****                     else if(id == MA_WINDOW){
 1253              		.loc 1 354 0
 1254 05c0 274B     		ldr	r3, .L71+4
 1255 05c2 1B68     		ldr	r3, [r3]
 1256 05c4 0F2B     		cmp	r3, #15
 1257 05c6 7BD1     		bne	.L53
 355:main.c        ****                         sum += az;
 1258              		.loc 1 355 0
 1259 05c8 B7F90221 		ldrsh	r2, [r7, #258]
 1260 05cc 264B     		ldr	r3, .L71+12
 1261 05ce 1B68     		ldr	r3, [r3]
 1262 05d0 1344     		add	r3, r3, r2
 1263 05d2 254A     		ldr	r2, .L71+12
 1264 05d4 1360     		str	r3, [r2]
 356:main.c        ****                         xsum += gx;
 1265              		.loc 1 356 0
 1266 05d6 B7F84E30 		ldrh	r3, [r7, #78]
 1267 05da 1BB2     		sxth	r3, r3
 1268 05dc 1846     		mov	r0, r3
 1269 05de FFF7FEFF 		bl	__aeabi_i2f
 1270 05e2 0246     		mov	r2, r0
 1271 05e4 324B     		ldr	r3, .L71+84
 1272 05e6 1B68     		ldr	r3, [r3]	@ float
 1273 05e8 1046     		mov	r0, r2
 1274 05ea 1946     		mov	r1, r3
 1275 05ec FFF7FEFF 		bl	__aeabi_fadd
 1276 05f0 0346     		mov	r3, r0
 1277 05f2 1A46     		mov	r2, r3
 1278 05f4 2E4B     		ldr	r3, .L71+84
 1279 05f6 1A60     		str	r2, [r3]	@ float
 357:main.c        ****                         ysum += gy;
 1280              		.loc 1 357 0
 1281 05f8 B7F84C30 		ldrh	r3, [r7, #76]
 1282 05fc 1BB2     		sxth	r3, r3
 1283 05fe 1846     		mov	r0, r3
 1284 0600 FFF7FEFF 		bl	__aeabi_i2f
 1285 0604 0246     		mov	r2, r0
 1286 0606 2B4B     		ldr	r3, .L71+88
 1287 0608 1B68     		ldr	r3, [r3]	@ float
 1288 060a 1046     		mov	r0, r2
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 31


 1289 060c 1946     		mov	r1, r3
 1290 060e FFF7FEFF 		bl	__aeabi_fadd
 1291 0612 0346     		mov	r3, r0
 1292 0614 1A46     		mov	r2, r3
 1293 0616 274B     		ldr	r3, .L71+88
 1294 0618 1A60     		str	r2, [r3]	@ float
 358:main.c        ****                         sum = sum/MA_WINDOW;
 1295              		.loc 1 358 0
 1296 061a 134B     		ldr	r3, .L71+12
 1297 061c 1B68     		ldr	r3, [r3]
 1298 061e 264A     		ldr	r2, .L71+92
 1299 0620 82FB0312 		smull	r1, r2, r2, r3
 1300 0624 1A44     		add	r2, r2, r3
 1301 0626 D210     		asrs	r2, r2, #3
 1302 0628 DB17     		asrs	r3, r3, #31
 1303 062a D31A     		subs	r3, r2, r3
 1304 062c 0E4A     		ldr	r2, .L71+12
 1305 062e 1360     		str	r3, [r2]
 359:main.c        ****                         xavg = xsum/MA_WINDOW;                            
 1306              		.loc 1 359 0
 1307 0630 1F4B     		ldr	r3, .L71+84
 1308 0632 1B68     		ldr	r3, [r3]	@ float
 1309 0634 1846     		mov	r0, r3
 1310 0636 2149     		ldr	r1, .L71+96
 1311 0638 FFF7FEFF 		bl	__aeabi_fdiv
 1312 063c 0346     		mov	r3, r0
 1313 063e 1A46     		mov	r2, r3
 1314 0640 0B4B     		ldr	r3, .L71+20
 1315 0642 1A60     		str	r2, [r3]	@ float
 360:main.c        ****                         yavg = ysum/MA_WINDOW;
 1316              		.loc 1 360 0
 1317 0644 1B4B     		ldr	r3, .L71+88
 1318 0646 1B68     		ldr	r3, [r3]	@ float
 1319 0648 1846     		mov	r0, r3
 1320 064a 1C49     		ldr	r1, .L71+96
 1321 064c FFF7FEFF 		bl	__aeabi_fdiv
 1322 0650 0346     		mov	r3, r0
 1323 0652 1A46     		mov	r2, r3
 1324 0654 074B     		ldr	r3, .L71+24
 1325 0656 1A60     		str	r2, [r3]	@ float
 1326 0658 6EE0     		b	.L52
 1327              	.L72:
 1328 065a 00BF     		.align	2
 1329              	.L71:
 1330 065c 00000000 		.word	reset
 1331 0660 00000000 		.word	id
 1332 0664 00000000 		.word	data_time
 1333 0668 00000000 		.word	sum
 1334 066c 00000000 		.word	average
 1335 0670 00000000 		.word	xavg
 1336 0674 00000000 		.word	yavg
 1337 0678 00000000 		.word	collect_flag
 1338 067c 00000000 		.word	wait_flag
 1339 0680 00000000 		.word	PANIC_flag
 1340 0684 00000000 		.word	depth
 1341 0688 00000000 		.word	countdown
 1342 068c 00000000 		.word	msg_count
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 32


 1343 0690 00000000 		.word	dataflag
 1344 0694 1C000000 		.word	.LC8
 1345 0698 00000000 		.word	transmit_flag
 1346 069c 00000000 		.word	STATE
 1347 06a0 28000000 		.word	.LC9
 1348 06a4 4FECC44E 		.word	1321528399
 1349 06a8 00000000 		.word	descent_time
 1350 06ac 40000000 		.word	.LC10
 1351 06b0 00000000 		.word	xsum
 1352 06b4 00000000 		.word	ysum
 1353 06b8 89888888 		.word	-2004318071
 1354 06bc 00007041 		.word	1097859072
 1355              	.L53:
 361:main.c        ****                                                    
 362:main.c        ****                     }
 363:main.c        ****                     else{
 364:main.c        ****                         average = ComputeMA(average, MA_WINDOW, az);                // Compute aver
 1356              		.loc 1 364 0
 1357 06c0 824B     		ldr	r3, .L73
 1358 06c2 1B88     		ldrh	r3, [r3]
 1359 06c4 1BB2     		sxth	r3, r3
 1360 06c6 1846     		mov	r0, r3
 1361 06c8 FFF7FEFF 		bl	__aeabi_i2f
 1362 06cc 0446     		mov	r4, r0
 1363 06ce B7F90231 		ldrsh	r3, [r7, #258]
 1364 06d2 1846     		mov	r0, r3
 1365 06d4 FFF7FEFF 		bl	__aeabi_i2f
 1366 06d8 0346     		mov	r3, r0
 1367 06da 2046     		mov	r0, r4
 1368 06dc 0F21     		movs	r1, #15
 1369 06de 1A46     		mov	r2, r3
 1370 06e0 FFF7FEFF 		bl	ComputeMA
 1371 06e4 0346     		mov	r3, r0
 1372 06e6 1846     		mov	r0, r3
 1373 06e8 FFF7FEFF 		bl	__aeabi_f2iz
 1374 06ec 0346     		mov	r3, r0
 1375 06ee 9AB2     		uxth	r2, r3
 1376 06f0 764B     		ldr	r3, .L73
 1377 06f2 1A80     		strh	r2, [r3]	@ movhi
 365:main.c        ****                         xavg = ComputeMA(xavg, MA_WINDOW, gx);
 1378              		.loc 1 365 0
 1379 06f4 764B     		ldr	r3, .L73+4
 1380 06f6 1C68     		ldr	r4, [r3]	@ float
 1381 06f8 B7F84E30 		ldrh	r3, [r7, #78]
 1382 06fc 1BB2     		sxth	r3, r3
 1383 06fe 1846     		mov	r0, r3
 1384 0700 FFF7FEFF 		bl	__aeabi_i2f
 1385 0704 0346     		mov	r3, r0
 1386 0706 2046     		mov	r0, r4
 1387 0708 0F21     		movs	r1, #15
 1388 070a 1A46     		mov	r2, r3
 1389 070c FFF7FEFF 		bl	ComputeMA
 1390 0710 0246     		mov	r2, r0
 1391 0712 6F4B     		ldr	r3, .L73+4
 1392 0714 1A60     		str	r2, [r3]	@ float
 366:main.c        ****                         yavg = ComputeMA(yavg, MA_WINDOW, gy);
 1393              		.loc 1 366 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 33


 1394 0716 6F4B     		ldr	r3, .L73+8
 1395 0718 1C68     		ldr	r4, [r3]	@ float
 1396 071a B7F84C30 		ldrh	r3, [r7, #76]
 1397 071e 1BB2     		sxth	r3, r3
 1398 0720 1846     		mov	r0, r3
 1399 0722 FFF7FEFF 		bl	__aeabi_i2f
 1400 0726 0346     		mov	r3, r0
 1401 0728 2046     		mov	r0, r4
 1402 072a 0F21     		movs	r1, #15
 1403 072c 1A46     		mov	r2, r3
 1404 072e FFF7FEFF 		bl	ComputeMA
 1405 0732 0246     		mov	r2, r0
 1406 0734 674B     		ldr	r3, .L73+8
 1407 0736 1A60     		str	r2, [r3]	@ float
 1408              	.L52:
 367:main.c        ****                         #ifdef SD
 368:main.c        ****                         sprintf(sdbuf, "pressure: %d.%04d, %d\n", num, decimals, (int16)output); //
 369:main.c        ****                         FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 370:main.c        ****                         #endif 
 371:main.c        **** //                        if (abs((int)xavg) > DEGREES_50 || abs((int)yavg) > DEGREES_50){ // If gy
 372:main.c        **** //                            STATE = RESURFACE;                                        // start li
 373:main.c        **** //                            setCursor(0,0);
 374:main.c        **** //                            clear();
 375:main.c        **** //                            LCD_print("Tilted");
 376:main.c        **** //                            CyDelay(1000u);
 377:main.c        **** //                            setCursor(0,0);
 378:main.c        **** //                            clear();
 379:main.c        **** //                            LCD_print("STATE: RESURFACING");
 380:main.c        **** //                            CyDelay(1000u);
 381:main.c        **** //                            
 382:main.c        **** //                        }
 383:main.c        ****                     }
 384:main.c        ****                     
 385:main.c        ****                     if(average > BOT_THRESHOLD){                        
 1409              		.loc 1 385 0
 1410 0738 644B     		ldr	r3, .L73
 1411 073a 1B88     		ldrh	r3, [r3]
 1412 073c 1BB2     		sxth	r3, r3
 1413 073e 44F62062 		movw	r2, #20000
 1414 0742 9342     		cmp	r3, r2
 1415 0744 1ADD     		ble	.L54
 386:main.c        ****                         STATE = LANDED;                                     //Switch to LANDED stat
 1416              		.loc 1 386 0
 1417 0746 644B     		ldr	r3, .L73+12
 1418 0748 0322     		movs	r2, #3
 1419 074a 1A70     		strb	r2, [r3]
 387:main.c        ****                         #ifdef LCD
 388:main.c        ****                             setCursor(0,0);
 1420              		.loc 1 388 0
 1421 074c 0020     		movs	r0, #0
 1422 074e 0021     		movs	r1, #0
 1423 0750 FFF7FEFF 		bl	setCursor
 389:main.c        ****                             clear();
 1424              		.loc 1 389 0
 1425 0754 FFF7FEFF 		bl	clear
 390:main.c        ****                             LCD_print("STATE: LANDED");  
 1426              		.loc 1 390 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 34


 1427 0758 6048     		ldr	r0, .L73+16
 1428 075a FFF7FEFF 		bl	LCD_print
 391:main.c        ****                         #endif
 392:main.c        ****                         #ifdef SD
 393:main.c        ****                             FS_Write(fsfile, landedbuf, LANDED_LEN);
 394:main.c        ****                         #endif
 395:main.c        ****                         #ifdef SD
 396:main.c        ****                             FS_Write(fsfile, vacuumbuf, VACUUM_LEN);
 397:main.c        ****                         #endif
 398:main.c        ****                         
 399:main.c        ****                         id=0;                                                   //reset sample coun
 1429              		.loc 1 399 0
 1430 075e 604B     		ldr	r3, .L73+20
 1431 0760 0022     		movs	r2, #0
 1432 0762 1A60     		str	r2, [r3]
 400:main.c        ****                         data_time = 0;
 1433              		.loc 1 400 0
 1434 0764 5F4B     		ldr	r3, .L73+24
 1435 0766 0022     		movs	r2, #0
 1436 0768 1A60     		str	r2, [r3]
 401:main.c        ****                         sum = 0;
 1437              		.loc 1 401 0
 1438 076a 5F4B     		ldr	r3, .L73+28
 1439 076c 0022     		movs	r2, #0
 1440 076e 1A60     		str	r2, [r3]
 402:main.c        ****                         average = 0; 
 1441              		.loc 1 402 0
 1442 0770 564B     		ldr	r3, .L73
 1443 0772 0022     		movs	r2, #0
 1444 0774 1A80     		strh	r2, [r3]	@ movhi
 403:main.c        ****                         countdown = 0;
 1445              		.loc 1 403 0
 1446 0776 5D4B     		ldr	r3, .L73+32
 1447 0778 0022     		movs	r2, #0
 1448 077a 1A70     		strb	r2, [r3]
 1449              	.L54:
 404:main.c        ****                     }
 405:main.c        ****                     id++;
 1450              		.loc 1 405 0
 1451 077c 584B     		ldr	r3, .L73+20
 1452 077e 1B68     		ldr	r3, [r3]
 1453 0780 0133     		adds	r3, r3, #1
 1454 0782 574A     		ldr	r2, .L73+20
 1455 0784 1360     		str	r3, [r2]
 406:main.c        ****                     
 407:main.c        ****                     /* if max time allowed for descent has been reached, resurface */
 408:main.c        ****                     if(data_time >= descent_time ){                         // variable descent tim
 1456              		.loc 1 408 0
 1457 0786 574B     		ldr	r3, .L73+24
 1458 0788 1A68     		ldr	r2, [r3]
 1459 078a 594B     		ldr	r3, .L73+36
 1460 078c 1B68     		ldr	r3, [r3]
 1461 078e 9A42     		cmp	r2, r3
 1462 0790 17DB     		blt	.L55
 409:main.c        ****                         STATE = RESURFACE;                                      
 1463              		.loc 1 409 0
 1464 0792 514B     		ldr	r3, .L73+12
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 35


 1465 0794 0422     		movs	r2, #4
 1466 0796 1A70     		strb	r2, [r3]
 410:main.c        ****                         #ifdef LCD
 411:main.c        ****                             setCursor(0,0);
 1467              		.loc 1 411 0
 1468 0798 0020     		movs	r0, #0
 1469 079a 0021     		movs	r1, #0
 1470 079c FFF7FEFF 		bl	setCursor
 412:main.c        ****                             clear();
 1471              		.loc 1 412 0
 1472 07a0 FFF7FEFF 		bl	clear
 413:main.c        ****                             LCD_print("STATE: RESURFACE");  
 1473              		.loc 1 413 0
 1474 07a4 5348     		ldr	r0, .L73+40
 1475 07a6 FFF7FEFF 		bl	LCD_print
 414:main.c        ****                         #endif
 415:main.c        ****                         id=0;                                               //reset sample counter
 1476              		.loc 1 415 0
 1477 07aa 4D4B     		ldr	r3, .L73+20
 1478 07ac 0022     		movs	r2, #0
 1479 07ae 1A60     		str	r2, [r3]
 416:main.c        ****                         data_time = 0;
 1480              		.loc 1 416 0
 1481 07b0 4C4B     		ldr	r3, .L73+24
 1482 07b2 0022     		movs	r2, #0
 1483 07b4 1A60     		str	r2, [r3]
 417:main.c        ****                         sum = 0;                                            //reset sum 
 1484              		.loc 1 417 0
 1485 07b6 4C4B     		ldr	r3, .L73+28
 1486 07b8 0022     		movs	r2, #0
 1487 07ba 1A60     		str	r2, [r3]
 418:main.c        ****                         average = 0;
 1488              		.loc 1 418 0
 1489 07bc 434B     		ldr	r3, .L73
 1490 07be 0022     		movs	r2, #0
 1491 07c0 1A80     		strh	r2, [r3]	@ movhi
 1492              	.L55:
 419:main.c        ****                     }
 420:main.c        ****                     
 421:main.c        ****                     collect_flag = 0;
 1493              		.loc 1 421 0
 1494 07c2 4D4B     		ldr	r3, .L73+44
 1495 07c4 0022     		movs	r2, #0
 1496 07c6 1A70     		strb	r2, [r3]
 422:main.c        ****                 }
 423:main.c        ****                 break;
 1497              		.loc 1 423 0
 1498 07c8 3CE1     		b	.L49
 1499              	.L50:
 1500              		.loc 1 423 0 is_stmt 0 discriminator 2
 1501 07ca 3BE1     		b	.L49
 1502              	.L34:
 424:main.c        ****                 
 425:main.c        ****                 case LANDED:
 426:main.c        ****                     if (countdown == 15) {                   // Delay for 7 seconds at bottom
 1503              		.loc 1 426 0 is_stmt 1
 1504 07cc 474B     		ldr	r3, .L73+32
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 36


 1505 07ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1506 07d0 0F2B     		cmp	r3, #15
 1507 07d2 08D1     		bne	.L56
 427:main.c        ****                         countdown = 0; 
 1508              		.loc 1 427 0
 1509 07d4 454B     		ldr	r3, .L73+32
 1510 07d6 0022     		movs	r2, #0
 1511 07d8 1A70     		strb	r2, [r3]
 428:main.c        ****                         pulse = 1;                          // next stage of the state
 1512              		.loc 1 428 0
 1513 07da 0123     		movs	r3, #1
 1514 07dc C7F82431 		str	r3, [r7, #292]
 429:main.c        ****                         Solenoid_1_Write(1);                // turn on solenoid 1 for 5 seconds
 1515              		.loc 1 429 0
 1516 07e0 0120     		movs	r0, #1
 1517 07e2 FFF7FEFF 		bl	Solenoid_1_Write
 1518              	.L56:
 430:main.c        ****                     } 
 431:main.c        ****                     
 432:main.c        ****                     MPU6050_getRotation(&gx, &gy, &gz);     // gather gyro data
 1519              		.loc 1 432 0
 1520 07e6 07F14E01 		add	r1, r7, #78
 1521 07ea 07F14C02 		add	r2, r7, #76
 1522 07ee 07F14A03 		add	r3, r7, #74
 1523 07f2 0846     		mov	r0, r1
 1524 07f4 1146     		mov	r1, r2
 1525 07f6 1A46     		mov	r2, r3
 1526 07f8 FFF7FEFF 		bl	MPU6050_getRotation
 433:main.c        ****                     if(collect_flag == 1){                  // Compute gryo data again in case of t
 1527              		.loc 1 433 0
 1528 07fc 3E4B     		ldr	r3, .L73+44
 1529 07fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1530 0800 002B     		cmp	r3, #0
 1531 0802 00F0AB80 		beq	.L57
 434:main.c        ****                         if (id < MA_WINDOW){    
 1532              		.loc 1 434 0
 1533 0806 364B     		ldr	r3, .L73+20
 1534 0808 1B68     		ldr	r3, [r3]
 1535 080a 0E2B     		cmp	r3, #14
 1536 080c 22DC     		bgt	.L58
 435:main.c        ****                             xsum += gx;
 1537              		.loc 1 435 0
 1538 080e B7F84E30 		ldrh	r3, [r7, #78]
 1539 0812 1BB2     		sxth	r3, r3
 1540 0814 1846     		mov	r0, r3
 1541 0816 FFF7FEFF 		bl	__aeabi_i2f
 1542 081a 0246     		mov	r2, r0
 1543 081c 374B     		ldr	r3, .L73+48
 1544 081e 1B68     		ldr	r3, [r3]	@ float
 1545 0820 1046     		mov	r0, r2
 1546 0822 1946     		mov	r1, r3
 1547 0824 FFF7FEFF 		bl	__aeabi_fadd
 1548 0828 0346     		mov	r3, r0
 1549 082a 1A46     		mov	r2, r3
 1550 082c 334B     		ldr	r3, .L73+48
 1551 082e 1A60     		str	r2, [r3]	@ float
 436:main.c        ****                             ysum += gy;
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 37


 1552              		.loc 1 436 0
 1553 0830 B7F84C30 		ldrh	r3, [r7, #76]
 1554 0834 1BB2     		sxth	r3, r3
 1555 0836 1846     		mov	r0, r3
 1556 0838 FFF7FEFF 		bl	__aeabi_i2f
 1557 083c 0246     		mov	r2, r0
 1558 083e 304B     		ldr	r3, .L73+52
 1559 0840 1B68     		ldr	r3, [r3]	@ float
 1560 0842 1046     		mov	r0, r2
 1561 0844 1946     		mov	r1, r3
 1562 0846 FFF7FEFF 		bl	__aeabi_fadd
 1563 084a 0346     		mov	r3, r0
 1564 084c 1A46     		mov	r2, r3
 1565 084e 2C4B     		ldr	r3, .L73+52
 1566 0850 1A60     		str	r2, [r3]	@ float
 1567 0852 7BE0     		b	.L59
 1568              	.L58:
 437:main.c        ****                         }
 438:main.c        ****                         else if(id == MA_WINDOW){
 1569              		.loc 1 438 0
 1570 0854 224B     		ldr	r3, .L73+20
 1571 0856 1B68     		ldr	r3, [r3]
 1572 0858 0F2B     		cmp	r3, #15
 1573 085a 55D1     		bne	.L60
 439:main.c        ****                             xsum += gx;
 1574              		.loc 1 439 0
 1575 085c B7F84E30 		ldrh	r3, [r7, #78]
 1576 0860 1BB2     		sxth	r3, r3
 1577 0862 1846     		mov	r0, r3
 1578 0864 FFF7FEFF 		bl	__aeabi_i2f
 1579 0868 0246     		mov	r2, r0
 1580 086a 244B     		ldr	r3, .L73+48
 1581 086c 1B68     		ldr	r3, [r3]	@ float
 1582 086e 1046     		mov	r0, r2
 1583 0870 1946     		mov	r1, r3
 1584 0872 FFF7FEFF 		bl	__aeabi_fadd
 1585 0876 0346     		mov	r3, r0
 1586 0878 1A46     		mov	r2, r3
 1587 087a 204B     		ldr	r3, .L73+48
 1588 087c 1A60     		str	r2, [r3]	@ float
 440:main.c        ****                             ysum += gy;
 1589              		.loc 1 440 0
 1590 087e B7F84C30 		ldrh	r3, [r7, #76]
 1591 0882 1BB2     		sxth	r3, r3
 1592 0884 1846     		mov	r0, r3
 1593 0886 FFF7FEFF 		bl	__aeabi_i2f
 1594 088a 0246     		mov	r2, r0
 1595 088c 1C4B     		ldr	r3, .L73+52
 1596 088e 1B68     		ldr	r3, [r3]	@ float
 1597 0890 1046     		mov	r0, r2
 1598 0892 1946     		mov	r1, r3
 1599 0894 FFF7FEFF 		bl	__aeabi_fadd
 1600 0898 0346     		mov	r3, r0
 1601 089a 1A46     		mov	r2, r3
 1602 089c 184B     		ldr	r3, .L73+52
 1603 089e 1A60     		str	r2, [r3]	@ float
 441:main.c        ****                             xavg = xsum/MA_WINDOW;                            //compute baseline av
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 38


 1604              		.loc 1 441 0
 1605 08a0 164B     		ldr	r3, .L73+48
 1606 08a2 1B68     		ldr	r3, [r3]	@ float
 1607 08a4 1846     		mov	r0, r3
 1608 08a6 1749     		ldr	r1, .L73+56
 1609 08a8 FFF7FEFF 		bl	__aeabi_fdiv
 1610 08ac 0346     		mov	r3, r0
 1611 08ae 1A46     		mov	r2, r3
 1612 08b0 074B     		ldr	r3, .L73+4
 1613 08b2 1A60     		str	r2, [r3]	@ float
 442:main.c        ****                             yavg = ysum/MA_WINDOW;
 1614              		.loc 1 442 0
 1615 08b4 124B     		ldr	r3, .L73+52
 1616 08b6 1B68     		ldr	r3, [r3]	@ float
 1617 08b8 1846     		mov	r0, r3
 1618 08ba 1249     		ldr	r1, .L73+56
 1619 08bc FFF7FEFF 		bl	__aeabi_fdiv
 1620 08c0 0346     		mov	r3, r0
 1621 08c2 1A46     		mov	r2, r3
 1622 08c4 034B     		ldr	r3, .L73+8
 1623 08c6 1A60     		str	r2, [r3]	@ float
 1624 08c8 40E0     		b	.L59
 1625              	.L74:
 1626 08ca 00BF     		.align	2
 1627              	.L73:
 1628 08cc 00000000 		.word	average
 1629 08d0 00000000 		.word	xavg
 1630 08d4 00000000 		.word	yavg
 1631 08d8 00000000 		.word	STATE
 1632 08dc 50000000 		.word	.LC11
 1633 08e0 00000000 		.word	id
 1634 08e4 00000000 		.word	data_time
 1635 08e8 00000000 		.word	sum
 1636 08ec 00000000 		.word	countdown
 1637 08f0 00000000 		.word	descent_time
 1638 08f4 60000000 		.word	.LC12
 1639 08f8 00000000 		.word	collect_flag
 1640 08fc 00000000 		.word	xsum
 1641 0900 00000000 		.word	ysum
 1642 0904 00007041 		.word	1097859072
 1643              	.L60:
 443:main.c        ****                         }
 444:main.c        ****                         else{
 445:main.c        ****                             xavg = ComputeMA(xavg, MA_WINDOW, gx);
 1644              		.loc 1 445 0
 1645 0908 4F4B     		ldr	r3, .L75
 1646 090a 1C68     		ldr	r4, [r3]	@ float
 1647 090c B7F84E30 		ldrh	r3, [r7, #78]
 1648 0910 1BB2     		sxth	r3, r3
 1649 0912 1846     		mov	r0, r3
 1650 0914 FFF7FEFF 		bl	__aeabi_i2f
 1651 0918 0346     		mov	r3, r0
 1652 091a 2046     		mov	r0, r4
 1653 091c 0F21     		movs	r1, #15
 1654 091e 1A46     		mov	r2, r3
 1655 0920 FFF7FEFF 		bl	ComputeMA
 1656 0924 0246     		mov	r2, r0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 39


 1657 0926 484B     		ldr	r3, .L75
 1658 0928 1A60     		str	r2, [r3]	@ float
 446:main.c        ****                             yavg = ComputeMA(yavg, MA_WINDOW, gy);
 1659              		.loc 1 446 0
 1660 092a 484B     		ldr	r3, .L75+4
 1661 092c 1C68     		ldr	r4, [r3]	@ float
 1662 092e B7F84C30 		ldrh	r3, [r7, #76]
 1663 0932 1BB2     		sxth	r3, r3
 1664 0934 1846     		mov	r0, r3
 1665 0936 FFF7FEFF 		bl	__aeabi_i2f
 1666 093a 0346     		mov	r3, r0
 1667 093c 2046     		mov	r0, r4
 1668 093e 0F21     		movs	r1, #15
 1669 0940 1A46     		mov	r2, r3
 1670 0942 FFF7FEFF 		bl	ComputeMA
 1671 0946 0246     		mov	r2, r0
 1672 0948 404B     		ldr	r3, .L75+4
 1673 094a 1A60     		str	r2, [r3]	@ float
 1674              	.L59:
 447:main.c        ****                         }
 448:main.c        **** //                        if (countdown > 7 && pulse == 0){       // Allow for device to settle
 449:main.c        **** //                            if (abs((int)xavg) > DEGREES_20 || abs((int)yavg) > DEGREES_20){ // I
 450:main.c        **** //                                secs_for_tilt++;
 451:main.c        **** //                                if (secs_for_tilt > 750) {
 452:main.c        **** //                                    STATE = RESURFACE;
 453:main.c        **** //                                    setCursor(0,0);
 454:main.c        **** //                                    clear();
 455:main.c        **** //                                    LCD_print("Tilted");
 456:main.c        **** //                                    CyDelay(1000u);
 457:main.c        **** //                                    setCursor(0,0);
 458:main.c        **** //                                    clear();
 459:main.c        **** //                                    LCD_print("STATE: RESURFACING");
 460:main.c        **** //                                    CyDelay(1000u);
 461:main.c        **** //                                    countdown = 0;
 462:main.c        **** //                                    secs_for_tilt = 0;
 463:main.c        **** //                                }
 464:main.c        **** //                            }
 465:main.c        **** //                        }
 466:main.c        ****                         collect_flag = 0;
 1675              		.loc 1 466 0
 1676 094c 404B     		ldr	r3, .L75+8
 1677 094e 0022     		movs	r2, #0
 1678 0950 1A70     		strb	r2, [r3]
 467:main.c        ****                         id++;
 1679              		.loc 1 467 0
 1680 0952 404B     		ldr	r3, .L75+12
 1681 0954 1B68     		ldr	r3, [r3]
 1682 0956 0133     		adds	r3, r3, #1
 1683 0958 3E4A     		ldr	r2, .L75+12
 1684 095a 1360     		str	r3, [r2]
 1685              	.L57:
 468:main.c        ****                     }
 469:main.c        ****                     
 470:main.c        ****                     if (countdown == 5 && pulse){           // Second stage, turn off solenoid
 1686              		.loc 1 470 0
 1687 095c 3E4B     		ldr	r3, .L75+16
 1688 095e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 40


 1689 0960 052B     		cmp	r3, #5
 1690 0962 0ED1     		bne	.L61
 1691              		.loc 1 470 0 is_stmt 0 discriminator 1
 1692 0964 D7F82431 		ldr	r3, [r7, #292]
 1693 0968 002B     		cmp	r3, #0
 1694 096a 0AD0     		beq	.L61
 471:main.c        ****                         pulse++;
 1695              		.loc 1 471 0 is_stmt 1
 1696 096c D7F82431 		ldr	r3, [r7, #292]
 1697 0970 0133     		adds	r3, r3, #1
 1698 0972 C7F82431 		str	r3, [r7, #292]
 472:main.c        ****                         Solenoid_1_Write(0);                // turn off soleniod 1
 1699              		.loc 1 472 0
 1700 0976 0020     		movs	r0, #0
 1701 0978 FFF7FEFF 		bl	Solenoid_1_Write
 473:main.c        ****                         countdown = 0;
 1702              		.loc 1 473 0
 1703 097c 364B     		ldr	r3, .L75+16
 1704 097e 0022     		movs	r2, #0
 1705 0980 1A70     		strb	r2, [r3]
 1706              	.L61:
 474:main.c        ****                     }
 475:main.c        ****                     if (countdown == 3 && pulse == 2){      // Delay for 3 seconds then resurface
 1707              		.loc 1 475 0
 1708 0982 354B     		ldr	r3, .L75+16
 1709 0984 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1710 0986 032B     		cmp	r3, #3
 1711 0988 16D1     		bne	.L62
 1712              		.loc 1 475 0 is_stmt 0 discriminator 1
 1713 098a D7F82431 		ldr	r3, [r7, #292]
 1714 098e 022B     		cmp	r3, #2
 1715 0990 12D1     		bne	.L62
 476:main.c        ****                         STATE = RESURFACE;
 1716              		.loc 1 476 0 is_stmt 1
 1717 0992 324B     		ldr	r3, .L75+20
 1718 0994 0422     		movs	r2, #4
 1719 0996 1A70     		strb	r2, [r3]
 477:main.c        ****                         
 478:main.c        ****                         #ifdef LCD
 479:main.c        ****                             setCursor(0,0);
 1720              		.loc 1 479 0
 1721 0998 0020     		movs	r0, #0
 1722 099a 0021     		movs	r1, #0
 1723 099c FFF7FEFF 		bl	setCursor
 480:main.c        ****                             clear();
 1724              		.loc 1 480 0
 1725 09a0 FFF7FEFF 		bl	clear
 481:main.c        ****                             LCD_print("STATE: RESURFACING");  
 1726              		.loc 1 481 0
 1727 09a4 2E48     		ldr	r0, .L75+24
 1728 09a6 FFF7FEFF 		bl	LCD_print
 482:main.c        ****                         #endif
 483:main.c        ****                         #ifdef SD
 484:main.c        ****                             FS_Write(fsfile, resurfbuf, RESURFACE_LEN);
 485:main.c        ****                         #endif
 486:main.c        ****                         pulse = 0;
 1729              		.loc 1 486 0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 41


 1730 09aa 0023     		movs	r3, #0
 1731 09ac C7F82431 		str	r3, [r7, #292]
 487:main.c        ****                         countdown = 0;
 1732              		.loc 1 487 0
 1733 09b0 294B     		ldr	r3, .L75+16
 1734 09b2 0022     		movs	r2, #0
 1735 09b4 1A70     		strb	r2, [r3]
 488:main.c        ****                     }
 489:main.c        ****                 break;
 1736              		.loc 1 489 0
 1737 09b6 45E0     		b	.L49
 1738              	.L62:
 1739              		.loc 1 489 0 is_stmt 0 discriminator 3
 1740 09b8 44E0     		b	.L49
 1741              	.L35:
 490:main.c        ****                 
 491:main.c        ****             case RESURFACE:
 492:main.c        ****                 if (PANIC_flag)                 // Display that moisture sensor triggered
 1742              		.loc 1 492 0 is_stmt 1
 1743 09ba 2A4B     		ldr	r3, .L75+28
 1744 09bc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1745 09be 002B     		cmp	r3, #0
 1746 09c0 02D0     		beq	.L63
 493:main.c        ****                     LCD_print("WATER DETECTED");
 1747              		.loc 1 493 0
 1748 09c2 2948     		ldr	r0, .L75+32
 1749 09c4 FFF7FEFF 		bl	LCD_print
 1750              	.L63:
 494:main.c        ****                     
 495:main.c        ****                 Solenoid_2_Write(1);            // turn on lift bag solenoid                
 1751              		.loc 1 495 0
 1752 09c8 0120     		movs	r0, #1
 1753 09ca FFF7FEFF 		bl	Solenoid_2_Write
 496:main.c        ****                 
 497:main.c        ****                 //check pressure sensor to confirm we are at the surface
 498:main.c        ****                 if (countdown == 3){
 1754              		.loc 1 498 0
 1755 09ce 224B     		ldr	r3, .L75+16
 1756 09d0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1757 09d2 032B     		cmp	r3, #3
 1758 09d4 0ED1     		bne	.L64
 499:main.c        ****                     Solenoid_2_Write(0);        // Turn off solenoid 2 for 1 second
 1759              		.loc 1 499 0
 1760 09d6 0020     		movs	r0, #0
 1761 09d8 FFF7FEFF 		bl	Solenoid_2_Write
 500:main.c        ****                     CyDelay(1000u);
 1762              		.loc 1 500 0
 1763 09dc 4FF47A70 		mov	r0, #1000
 1764 09e0 FFF7FEFF 		bl	CyDelay
 501:main.c        ****                     pulse++;
 1765              		.loc 1 501 0
 1766 09e4 D7F82431 		ldr	r3, [r7, #292]
 1767 09e8 0133     		adds	r3, r3, #1
 1768 09ea C7F82431 		str	r3, [r7, #292]
 502:main.c        ****                     countdown = 0;
 1769              		.loc 1 502 0
 1770 09ee 1A4B     		ldr	r3, .L75+16
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 42


 1771 09f0 0022     		movs	r2, #0
 1772 09f2 1A70     		strb	r2, [r3]
 1773              	.L64:
 503:main.c        ****                 }
 504:main.c        ****                 if (pulse == 2){
 1774              		.loc 1 504 0
 1775 09f4 D7F82431 		ldr	r3, [r7, #292]
 1776 09f8 022B     		cmp	r3, #2
 1777 09fa 0FD1     		bne	.L65
 505:main.c        ****                     STATE = TRANSMIT;
 1778              		.loc 1 505 0
 1779 09fc 174B     		ldr	r3, .L75+20
 1780 09fe 0522     		movs	r2, #5
 1781 0a00 1A70     		strb	r2, [r3]
 506:main.c        ****                     #ifdef SD                                   //close old file, open new one
 507:main.c        ****                         FS_FClose(fsfile);
 508:main.c        ****                         sprintf(file, "test%d.txt", ++testnum);
 509:main.c        ****                         fsfile = FS_FOpen(file, "w");
 510:main.c        ****                     #endif 
 511:main.c        ****                     
 512:main.c        ****                     #ifdef LCD
 513:main.c        ****                         setCursor(0,0);
 1782              		.loc 1 513 0
 1783 0a02 0020     		movs	r0, #0
 1784 0a04 0021     		movs	r1, #0
 1785 0a06 FFF7FEFF 		bl	setCursor
 514:main.c        ****                         clear();
 1786              		.loc 1 514 0
 1787 0a0a FFF7FEFF 		bl	clear
 515:main.c        ****                         LCD_print("TRANSMIT");  
 1788              		.loc 1 515 0
 1789 0a0e 1748     		ldr	r0, .L75+36
 1790 0a10 FFF7FEFF 		bl	LCD_print
 516:main.c        ****                     #endif
 517:main.c        ****                     #ifdef SD
 518:main.c        ****                         FS_Write(fsfile, transbuf, TRANSMIT_LEN);
 519:main.c        ****                     #endif
 520:main.c        ****                     countdown = 0;
 1791              		.loc 1 520 0
 1792 0a14 104B     		ldr	r3, .L75+16
 1793 0a16 0022     		movs	r2, #0
 1794 0a18 1A70     		strb	r2, [r3]
 521:main.c        ****                 }
 522:main.c        ****                 break;
 1795              		.loc 1 522 0
 1796 0a1a 13E0     		b	.L49
 1797              	.L65:
 1798              		.loc 1 522 0 is_stmt 0 discriminator 4
 1799 0a1c 12E0     		b	.L49
 1800              	.L36:
 523:main.c        ****                 
 524:main.c        ****             case TRANSMIT:
 525:main.c        ****                 if (transmit_flag){
 1801              		.loc 1 525 0 is_stmt 1
 1802 0a1e 144B     		ldr	r3, .L75+40
 1803 0a20 1B68     		ldr	r3, [r3]
 1804 0a22 002B     		cmp	r3, #0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 43


 1805 0a24 0CD0     		beq	.L66
 526:main.c        ****                     BT_Send(&tempbuf[0], &STATE, 10, &t); // Here, the STATE variable only matters,
 1806              		.loc 1 526 0
 1807 0a26 07F1BC02 		add	r2, r7, #188
 1808 0a2a 07F14003 		add	r3, r7, #64
 1809 0a2e 1046     		mov	r0, r2
 1810 0a30 0A49     		ldr	r1, .L75+20
 1811 0a32 0A22     		movs	r2, #10
 1812 0a34 FFF7FEFF 		bl	BT_Send
 527:main.c        ****                     transmit_flag = 0;
 1813              		.loc 1 527 0
 1814 0a38 0D4B     		ldr	r3, .L75+40
 1815 0a3a 0022     		movs	r2, #0
 1816 0a3c 1A60     		str	r2, [r3]
 528:main.c        ****                 }            
 529:main.c        ****                 break;
 1817              		.loc 1 529 0
 1818 0a3e 01E0     		b	.L49
 1819              	.L66:
 1820              		.loc 1 529 0 is_stmt 0 discriminator 5
 1821 0a40 00E0     		b	.L49
 1822              	.L68:
 530:main.c        ****                 
 531:main.c        ****             default:
 532:main.c        ****                 break;
 1823              		.loc 1 532 0 is_stmt 1
 1824 0a42 00BF     		nop
 1825              	.L49:
 1826              	.LBE2:
 533:main.c        ****         
 534:main.c        ****         }
 535:main.c        ****     }
 1827              		.loc 1 535 0 discriminator 1
 1828 0a44 FFF789BB 		b	.L67
 1829              	.L76:
 1830              		.align	2
 1831              	.L75:
 1832 0a48 00000000 		.word	xavg
 1833 0a4c 00000000 		.word	yavg
 1834 0a50 00000000 		.word	collect_flag
 1835 0a54 00000000 		.word	id
 1836 0a58 00000000 		.word	countdown
 1837 0a5c 00000000 		.word	STATE
 1838 0a60 74000000 		.word	.LC13
 1839 0a64 00000000 		.word	PANIC_flag
 1840 0a68 88000000 		.word	.LC14
 1841 0a6c 98000000 		.word	.LC15
 1842 0a70 00000000 		.word	transmit_flag
 1843              		.cfi_endproc
 1844              	.LFE67:
 1845              		.size	main, .-main
 1846 0a74 AFF30080 		.section	.rodata
 1847 0111 000000   		.align	2
 1848              	.LC16:
 1849 0114 53642076 		.ascii	"Sd vol succeed\000"
 1849      6F6C2073 
 1849      75636365 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 44


 1849      656400
 1850 0123 00       		.align	2
 1851              	.LC17:
 1852 0124 53642076 		.ascii	"Sd vol failed\000"
 1852      6F6C2066 
 1852      61696C65 
 1852      6400
 1853 0132 0000     		.align	2
 1854              	.LC18:
 1855 0134 666F726D 		.ascii	"format Succeeded\000"
 1855      61742053 
 1855      75636365 
 1855      65646564 
 1855      00
 1856 0145 000000   		.align	2
 1857              	.LC19:
 1858 0148 666F726D 		.ascii	"format Failed\000"
 1858      61742046 
 1858      61696C65 
 1858      6400
 1859 0156 0000     		.align	2
 1860              	.LC20:
 1861 0158 7700     		.ascii	"w\000"
 1862 015a 0000     		.align	2
 1863              	.LC21:
 1864 015c 46696C65 		.ascii	"File \000"
 1864      2000
 1865 0162 0000     		.align	2
 1866              	.LC22:
 1867 0164 77617320 		.ascii	"was opened\000"
 1867      6F70656E 
 1867      656400
 1868 016f 00       		.align	2
 1869              	.LC23:
 1870 0170 77726974 		.ascii	"written to file\000"
 1870      74656E20 
 1870      746F2066 
 1870      696C6500 
 1871              		.align	2
 1872              	.LC24:
 1873 0180 4661696C 		.ascii	"Failed to write\000"
 1873      65642074 
 1873      6F207772 
 1873      69746500 
 1874              		.align	2
 1875              	.LC25:
 1876 0190 66696C65 		.ascii	"file not created\000"
 1876      206E6F74 
 1876      20637265 
 1876      61746564 
 1876      00
 1877 01a1 000000   		.align	2
 1878              	.LC26:
 1879 01a4 0A2D2D2D 		.ascii	"\012------------\012\000"
 1879      2D2D2D2D 
 1879      2D2D2D2D 
 1879      2D0A00
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 45


 1880 01b3 00       		.section	.text.SD_SETUP,"ax",%progbits
 1881              		.align	2
 1882              		.global	SD_SETUP
 1883              		.thumb
 1884              		.thumb_func
 1885              		.type	SD_SETUP, %function
 1886              	SD_SETUP:
 1887              	.LFB68:
 536:main.c        **** }
 537:main.c        **** 
 538:main.c        **** int SD_SETUP(char* filename){
 1888              		.loc 1 538 0
 1889              		.cfi_startproc
 1890              		@ args = 0, pretend = 0, frame = 16
 1891              		@ frame_needed = 1, uses_anonymous_args = 0
 1892 0000 90B5     		push	{r4, r7, lr}
 1893              		.cfi_def_cfa_offset 12
 1894              		.cfi_offset 4, -12
 1895              		.cfi_offset 7, -8
 1896              		.cfi_offset 14, -4
 1897 0002 85B0     		sub	sp, sp, #20
 1898              		.cfi_def_cfa_offset 32
 1899 0004 00AF     		add	r7, sp, #0
 1900              		.cfi_def_cfa_register 7
 1901 0006 7860     		str	r0, [r7, #4]
 539:main.c        **** int success = 1;
 1902              		.loc 1 539 0
 1903 0008 0123     		movs	r3, #1
 1904 000a FB60     		str	r3, [r7, #12]
 540:main.c        ****       FS_Init();
 1905              		.loc 1 540 0
 1906 000c FFF7FEFF 		bl	FS_Init
 541:main.c        ****             FS_Mount(volume);
 1907              		.loc 1 541 0
 1908 0010 3A48     		ldr	r0, .L87
 1909 0012 FFF7FEFF 		bl	FS_Mount
 542:main.c        ****             if(0 != FS_GetVolumeName(0u, volume, 9u))
 1910              		.loc 1 542 0
 1911 0016 0020     		movs	r0, #0
 1912 0018 3849     		ldr	r1, .L87
 1913 001a 0922     		movs	r2, #9
 1914 001c FFF7FEFF 		bl	FS_GetVolumeName
 1915 0020 0346     		mov	r3, r0
 1916 0022 002B     		cmp	r3, #0
 1917 0024 03D0     		beq	.L78
 543:main.c        ****                 /* Getting volume name succeeded so prompt it on the LCD */
 544:main.c        ****                 LCD_print("Sd vol succeed");
 1918              		.loc 1 544 0
 1919 0026 3648     		ldr	r0, .L87+4
 1920 0028 FFF7FEFF 		bl	LCD_print
 1921 002c 04E0     		b	.L79
 1922              	.L78:
 545:main.c        ****             else{
 546:main.c        ****                 LCD_print("Sd vol failed");
 1923              		.loc 1 546 0
 1924 002e 3548     		ldr	r0, .L87+8
 1925 0030 FFF7FEFF 		bl	LCD_print
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 46


 547:main.c        ****                 success = 0;
 1926              		.loc 1 547 0
 1927 0034 0023     		movs	r3, #0
 1928 0036 FB60     		str	r3, [r7, #12]
 1929              	.L79:
 548:main.c        ****             }
 549:main.c        ****             CyDelay(500u);
 1930              		.loc 1 549 0
 1931 0038 4FF4FA70 		mov	r0, #500
 1932 003c FFF7FEFF 		bl	CyDelay
 550:main.c        ****             clear();
 1933              		.loc 1 550 0
 1934 0040 FFF7FEFF 		bl	clear
 551:main.c        ****             if(0 == FS_FormatSD(volume))
 1935              		.loc 1 551 0
 1936 0044 2D48     		ldr	r0, .L87
 1937 0046 FFF7FEFF 		bl	FS_FormatSD
 1938 004a 0346     		mov	r3, r0
 1939 004c 002B     		cmp	r3, #0
 1940 004e 03D1     		bne	.L80
 552:main.c        ****                 LCD_print("format Succeeded");
 1941              		.loc 1 552 0
 1942 0050 2D48     		ldr	r0, .L87+12
 1943 0052 FFF7FEFF 		bl	LCD_print
 1944 0056 04E0     		b	.L81
 1945              	.L80:
 553:main.c        ****             else{
 554:main.c        ****                 LCD_print("format Failed");
 1946              		.loc 1 554 0
 1947 0058 2C48     		ldr	r0, .L87+16
 1948 005a FFF7FEFF 		bl	LCD_print
 555:main.c        ****                 success = 0;
 1949              		.loc 1 555 0
 1950 005e 0023     		movs	r3, #0
 1951 0060 FB60     		str	r3, [r7, #12]
 1952              	.L81:
 556:main.c        ****             }
 557:main.c        ****             
 558:main.c        ****             CyDelay(500u);
 1953              		.loc 1 558 0
 1954 0062 4FF4FA70 		mov	r0, #500
 1955 0066 FFF7FEFF 		bl	CyDelay
 559:main.c        ****             clear();
 1956              		.loc 1 559 0
 1957 006a FFF7FEFF 		bl	clear
 560:main.c        ****             
 561:main.c        ****             fsfile = FS_FOpen(filename, "w");
 1958              		.loc 1 561 0
 1959 006e 7868     		ldr	r0, [r7, #4]
 1960 0070 2749     		ldr	r1, .L87+20
 1961 0072 FFF7FEFF 		bl	FS_FOpen
 1962 0076 0246     		mov	r2, r0
 1963 0078 264B     		ldr	r3, .L87+24
 1964 007a 1A60     		str	r2, [r3]
 562:main.c        ****             if(fsfile)
 1965              		.loc 1 562 0
 1966 007c 254B     		ldr	r3, .L87+24
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 47


 1967 007e 1B68     		ldr	r3, [r3]
 1968 0080 002B     		cmp	r3, #0
 1969 0082 29D0     		beq	.L82
 563:main.c        ****             {
 564:main.c        ****                 /* Indicate successful file creation message */
 565:main.c        ****                 LCD_print("File ");
 1970              		.loc 1 565 0
 1971 0084 2448     		ldr	r0, .L87+28
 1972 0086 FFF7FEFF 		bl	LCD_print
 566:main.c        ****                 LCD_print("was opened");
 1973              		.loc 1 566 0
 1974 008a 2448     		ldr	r0, .L87+32
 1975 008c FFF7FEFF 		bl	LCD_print
 567:main.c        ****                 /* Need some delay to indicate output on the LCD */
 568:main.c        ****                 CyDelay(500u);
 1976              		.loc 1 568 0
 1977 0090 4FF4FA70 		mov	r0, #500
 1978 0094 FFF7FEFF 		bl	CyDelay
 569:main.c        ****                 clear();
 1979              		.loc 1 569 0
 1980 0098 FFF7FEFF 		bl	clear
 570:main.c        ****                 
 571:main.c        ****                 if(0 != FS_Write(fsfile, filename, strlen(filename))) 
 1981              		.loc 1 571 0
 1982 009c 1D4B     		ldr	r3, .L87+24
 1983 009e 1C68     		ldr	r4, [r3]
 1984 00a0 7868     		ldr	r0, [r7, #4]
 1985 00a2 FFF7FEFF 		bl	strlen
 1986 00a6 0346     		mov	r3, r0
 1987 00a8 2046     		mov	r0, r4
 1988 00aa 7968     		ldr	r1, [r7, #4]
 1989 00ac 1A46     		mov	r2, r3
 1990 00ae FFF7FEFF 		bl	FS_Write
 1991 00b2 0346     		mov	r3, r0
 1992 00b4 002B     		cmp	r3, #0
 1993 00b6 03D0     		beq	.L83
 572:main.c        ****                     /* Inditate that data was written to a file */
 573:main.c        ****                     LCD_print("written to file");
 1994              		.loc 1 573 0
 1995 00b8 1948     		ldr	r0, .L87+36
 1996 00ba FFF7FEFF 		bl	LCD_print
 1997 00be 06E0     		b	.L84
 1998              	.L83:
 574:main.c        ****                 else {
 575:main.c        ****                     LCD_print("Failed to write");
 1999              		.loc 1 575 0
 2000 00c0 1848     		ldr	r0, .L87+40
 2001 00c2 FFF7FEFF 		bl	LCD_print
 576:main.c        ****                     success = 0;
 2002              		.loc 1 576 0
 2003 00c6 0023     		movs	r3, #0
 2004 00c8 FB60     		str	r3, [r7, #12]
 577:main.c        ****                     clear();
 2005              		.loc 1 577 0
 2006 00ca FFF7FEFF 		bl	clear
 2007              	.L84:
 578:main.c        ****                 }
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 48


 579:main.c        ****                 CyDelay(500u);
 2008              		.loc 1 579 0
 2009 00ce 4FF4FA70 		mov	r0, #500
 2010 00d2 FFF7FEFF 		bl	CyDelay
 2011 00d6 04E0     		b	.L85
 2012              	.L82:
 580:main.c        ****             }
 581:main.c        ****             else{
 582:main.c        ****                 LCD_print("file not created");
 2013              		.loc 1 582 0
 2014 00d8 1348     		ldr	r0, .L87+44
 2015 00da FFF7FEFF 		bl	LCD_print
 583:main.c        ****                 success = 0;
 2016              		.loc 1 583 0
 2017 00de 0023     		movs	r3, #0
 2018 00e0 FB60     		str	r3, [r7, #12]
 2019              	.L85:
 584:main.c        ****             }
 585:main.c        ****         FS_Write(fsfile, "\n------------\n", 14);
 2020              		.loc 1 585 0
 2021 00e2 0C4B     		ldr	r3, .L87+24
 2022 00e4 1B68     		ldr	r3, [r3]
 2023 00e6 1846     		mov	r0, r3
 2024 00e8 1049     		ldr	r1, .L87+48
 2025 00ea 0E22     		movs	r2, #14
 2026 00ec FFF7FEFF 		bl	FS_Write
 586:main.c        **** return success;
 2027              		.loc 1 586 0
 2028 00f0 FB68     		ldr	r3, [r7, #12]
 587:main.c        **** }
 2029              		.loc 1 587 0
 2030 00f2 1846     		mov	r0, r3
 2031 00f4 1437     		adds	r7, r7, #20
 2032              		.cfi_def_cfa_offset 12
 2033 00f6 BD46     		mov	sp, r7
 2034              		.cfi_def_cfa_register 13
 2035              		@ sp needed
 2036 00f8 90BD     		pop	{r4, r7, pc}
 2037              	.L88:
 2038 00fa 00BF     		.align	2
 2039              	.L87:
 2040 00fc 00000000 		.word	volume
 2041 0100 14010000 		.word	.LC16
 2042 0104 24010000 		.word	.LC17
 2043 0108 34010000 		.word	.LC18
 2044 010c 48010000 		.word	.LC19
 2045 0110 58010000 		.word	.LC20
 2046 0114 00000000 		.word	fsfile
 2047 0118 5C010000 		.word	.LC21
 2048 011c 64010000 		.word	.LC22
 2049 0120 70010000 		.word	.LC23
 2050 0124 80010000 		.word	.LC24
 2051 0128 90010000 		.word	.LC25
 2052 012c A4010000 		.word	.LC26
 2053              		.cfi_endproc
 2054              	.LFE68:
 2055              		.size	SD_SETUP, .-SD_SETUP
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 49


 2056              		.text
 2057              	.Letext0:
 2058              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2059              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 2060              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 2061              		.file 5 ".\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 2062              		.file 6 "functions.h"
 2063              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 2064              		.file 8 "./mpu6050.h"
 2065              		.section	.debug_info,"",%progbits
 2066              	.Ldebug_info0:
 2067 0000 73060000 		.4byte	0x673
 2068 0004 0400     		.2byte	0x4
 2069 0006 00000000 		.4byte	.Ldebug_abbrev0
 2070 000a 04       		.byte	0x4
 2071 000b 01       		.uleb128 0x1
 2072 000c 1E010000 		.4byte	.LASF88
 2073 0010 01       		.byte	0x1
 2074 0011 3A030000 		.4byte	.LASF89
 2075 0015 76020000 		.4byte	.LASF90
 2076 0019 00000000 		.4byte	.Ldebug_ranges0+0
 2077 001d 00000000 		.4byte	0
 2078 0021 00000000 		.4byte	.Ldebug_line0
 2079 0025 02       		.uleb128 0x2
 2080 0026 01       		.byte	0x1
 2081 0027 06       		.byte	0x6
 2082 0028 2E020000 		.4byte	.LASF0
 2083 002c 03       		.uleb128 0x3
 2084 002d 28040000 		.4byte	.LASF2
 2085 0031 02       		.byte	0x2
 2086 0032 1D       		.byte	0x1d
 2087 0033 37000000 		.4byte	0x37
 2088 0037 02       		.uleb128 0x2
 2089 0038 01       		.byte	0x1
 2090 0039 08       		.byte	0x8
 2091 003a 0E020000 		.4byte	.LASF1
 2092 003e 03       		.uleb128 0x3
 2093 003f 8D030000 		.4byte	.LASF3
 2094 0043 02       		.byte	0x2
 2095 0044 29       		.byte	0x29
 2096 0045 49000000 		.4byte	0x49
 2097 0049 02       		.uleb128 0x2
 2098 004a 02       		.byte	0x2
 2099 004b 05       		.byte	0x5
 2100 004c BA000000 		.4byte	.LASF4
 2101 0050 02       		.uleb128 0x2
 2102 0051 02       		.byte	0x2
 2103 0052 07       		.byte	0x7
 2104 0053 C7020000 		.4byte	.LASF5
 2105 0057 03       		.uleb128 0x3
 2106 0058 83030000 		.4byte	.LASF6
 2107 005c 02       		.byte	0x2
 2108 005d 3F       		.byte	0x3f
 2109 005e 62000000 		.4byte	0x62
 2110 0062 02       		.uleb128 0x2
 2111 0063 04       		.byte	0x4
 2112 0064 05       		.byte	0x5
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 50


 2113 0065 B1020000 		.4byte	.LASF7
 2114 0069 03       		.uleb128 0x3
 2115 006a 70030000 		.4byte	.LASF8
 2116 006e 02       		.byte	0x2
 2117 006f 41       		.byte	0x41
 2118 0070 74000000 		.4byte	0x74
 2119 0074 02       		.uleb128 0x2
 2120 0075 04       		.byte	0x4
 2121 0076 07       		.byte	0x7
 2122 0077 46030000 		.4byte	.LASF9
 2123 007b 02       		.uleb128 0x2
 2124 007c 08       		.byte	0x8
 2125 007d 05       		.byte	0x5
 2126 007e FF000000 		.4byte	.LASF10
 2127 0082 02       		.uleb128 0x2
 2128 0083 08       		.byte	0x8
 2129 0084 07       		.byte	0x7
 2130 0085 3A020000 		.4byte	.LASF11
 2131 0089 04       		.uleb128 0x4
 2132 008a 04       		.byte	0x4
 2133 008b 05       		.byte	0x5
 2134 008c 696E7400 		.ascii	"int\000"
 2135 0090 02       		.uleb128 0x2
 2136 0091 04       		.byte	0x4
 2137 0092 07       		.byte	0x7
 2138 0093 64020000 		.4byte	.LASF12
 2139 0097 03       		.uleb128 0x3
 2140 0098 D4000000 		.4byte	.LASF13
 2141 009c 03       		.byte	0x3
 2142 009d 15       		.byte	0x15
 2143 009e 2C000000 		.4byte	0x2c
 2144 00a2 03       		.uleb128 0x3
 2145 00a3 DA020000 		.4byte	.LASF14
 2146 00a7 03       		.byte	0x3
 2147 00a8 20       		.byte	0x20
 2148 00a9 3E000000 		.4byte	0x3e
 2149 00ad 03       		.uleb128 0x3
 2150 00ae BF020000 		.4byte	.LASF15
 2151 00b2 03       		.byte	0x3
 2152 00b3 2C       		.byte	0x2c
 2153 00b4 57000000 		.4byte	0x57
 2154 00b8 03       		.uleb128 0x3
 2155 00b9 51020000 		.4byte	.LASF16
 2156 00bd 03       		.byte	0x3
 2157 00be 2D       		.byte	0x2d
 2158 00bf 69000000 		.4byte	0x69
 2159 00c3 05       		.uleb128 0x5
 2160 00c4 E2020000 		.4byte	.LASF17
 2161 00c8 04       		.byte	0x4
 2162 00c9 9201     		.2byte	0x192
 2163 00cb 37000000 		.4byte	0x37
 2164 00cf 02       		.uleb128 0x2
 2165 00d0 04       		.byte	0x4
 2166 00d1 04       		.byte	0x4
 2167 00d2 EB000000 		.4byte	.LASF18
 2168 00d6 02       		.uleb128 0x2
 2169 00d7 08       		.byte	0x8
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 51


 2170 00d8 04       		.byte	0x4
 2171 00d9 69030000 		.4byte	.LASF19
 2172 00dd 02       		.uleb128 0x2
 2173 00de 01       		.byte	0x1
 2174 00df 08       		.byte	0x8
 2175 00e0 AC020000 		.4byte	.LASF20
 2176 00e4 05       		.uleb128 0x5
 2177 00e5 41030000 		.4byte	.LASF21
 2178 00e9 04       		.byte	0x4
 2179 00ea 3C02     		.2byte	0x23c
 2180 00ec F0000000 		.4byte	0xf0
 2181 00f0 06       		.uleb128 0x6
 2182 00f1 C3000000 		.4byte	0xc3
 2183 00f5 02       		.uleb128 0x2
 2184 00f6 04       		.byte	0x4
 2185 00f7 07       		.byte	0x7
 2186 00f8 A2030000 		.4byte	.LASF22
 2187 00fc 07       		.uleb128 0x7
 2188 00fd 04       		.byte	0x4
 2189 00fe DD000000 		.4byte	0xdd
 2190 0102 03       		.uleb128 0x3
 2191 0103 1C020000 		.4byte	.LASF23
 2192 0107 05       		.byte	0x5
 2193 0108 7E       		.byte	0x7e
 2194 0109 0D010000 		.4byte	0x10d
 2195 010d 08       		.uleb128 0x8
 2196 010e 1C020000 		.4byte	.LASF23
 2197 0112 07       		.uleb128 0x7
 2198 0113 04       		.byte	0x4
 2199 0114 02010000 		.4byte	0x102
 2200 0118 02       		.uleb128 0x2
 2201 0119 08       		.byte	0x8
 2202 011a 04       		.byte	0x4
 2203 011b F3010000 		.4byte	.LASF24
 2204 011f 09       		.uleb128 0x9
 2205 0120 43000000 		.4byte	.LASF32
 2206 0124 01       		.byte	0x1
 2207 0125 06       		.byte	0x6
 2208 0126 35       		.byte	0x35
 2209 0127 56010000 		.4byte	0x156
 2210 012b 0A       		.uleb128 0xa
 2211 012c 36000000 		.4byte	.LASF25
 2212 0130 00       		.sleb128 0
 2213 0131 0A       		.uleb128 0xa
 2214 0132 FF010000 		.4byte	.LASF26
 2215 0136 01       		.sleb128 1
 2216 0137 0A       		.uleb128 0xa
 2217 0138 58030000 		.4byte	.LASF27
 2218 013c 02       		.sleb128 2
 2219 013d 0A       		.uleb128 0xa
 2220 013e 70000000 		.4byte	.LASF28
 2221 0142 03       		.sleb128 3
 2222 0143 0A       		.uleb128 0xa
 2223 0144 0D000000 		.4byte	.LASF29
 2224 0148 04       		.sleb128 4
 2225 0149 0A       		.uleb128 0xa
 2226 014a 15010000 		.4byte	.LASF30
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 52


 2227 014e 05       		.sleb128 5
 2228 014f 0A       		.uleb128 0xa
 2229 0150 E0010000 		.4byte	.LASF31
 2230 0154 06       		.sleb128 6
 2231 0155 00       		.byte	0
 2232 0156 03       		.uleb128 0x3
 2233 0157 43000000 		.4byte	.LASF32
 2234 015b 06       		.byte	0x6
 2235 015c 3D       		.byte	0x3d
 2236 015d 1F010000 		.4byte	0x11f
 2237 0161 0B       		.uleb128 0xb
 2238 0162 89000000 		.4byte	.LASF33
 2239 0166 01       		.byte	0x1
 2240 0167 6B       		.byte	0x6b
 2241 0168 00000000 		.4byte	.LFB63
 2242 016c 20000000 		.4byte	.LFE63-.LFB63
 2243 0170 01       		.uleb128 0x1
 2244 0171 9C       		.byte	0x9c
 2245 0172 0C       		.uleb128 0xc
 2246 0173 FA030000 		.4byte	.LASF34
 2247 0177 01       		.byte	0x1
 2248 0178 72       		.byte	0x72
 2249 0179 00000000 		.4byte	.LFB64
 2250 017d 40000000 		.4byte	.LFE64-.LFB64
 2251 0181 01       		.uleb128 0x1
 2252 0182 9C       		.byte	0x9c
 2253 0183 0C       		.uleb128 0xc
 2254 0184 24030000 		.4byte	.LASF35
 2255 0188 01       		.byte	0x1
 2256 0189 7B       		.byte	0x7b
 2257 018a 00000000 		.4byte	.LFB65
 2258 018e 9C000000 		.4byte	.LFE65-.LFB65
 2259 0192 01       		.uleb128 0x1
 2260 0193 9C       		.byte	0x9c
 2261 0194 0B       		.uleb128 0xb
 2262 0195 CA030000 		.4byte	.LASF36
 2263 0199 01       		.byte	0x1
 2264 019a 8C       		.byte	0x8c
 2265 019b 00000000 		.4byte	.LFB66
 2266 019f 50000000 		.4byte	.LFE66-.LFB66
 2267 01a3 01       		.uleb128 0x1
 2268 01a4 9C       		.byte	0x9c
 2269 01a5 0D       		.uleb128 0xd
 2270 01a6 BA020000 		.4byte	.LASF91
 2271 01aa 01       		.byte	0x1
 2272 01ab 96       		.byte	0x96
 2273 01ac 89000000 		.4byte	0x89
 2274 01b0 00000000 		.4byte	.LFB67
 2275 01b4 740A0000 		.4byte	.LFE67-.LFB67
 2276 01b8 01       		.uleb128 0x1
 2277 01b9 9C       		.byte	0x9c
 2278 01ba 65030000 		.4byte	0x365
 2279 01be 0E       		.uleb128 0xe
 2280 01bf 6E756D00 		.ascii	"num\000"
 2281 01c3 01       		.byte	0x1
 2282 01c4 98       		.byte	0x98
 2283 01c5 89000000 		.4byte	0x89
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 53


 2284 01c9 02       		.uleb128 0x2
 2285 01ca 91       		.byte	0x91
 2286 01cb 60       		.sleb128 -32
 2287 01cc 0F       		.uleb128 0xf
 2288 01cd E2000000 		.4byte	.LASF37
 2289 01d1 01       		.byte	0x1
 2290 01d2 98       		.byte	0x98
 2291 01d3 89000000 		.4byte	0x89
 2292 01d7 02       		.uleb128 0x2
 2293 01d8 91       		.byte	0x91
 2294 01d9 5C       		.sleb128 -36
 2295 01da 0F       		.uleb128 0xf
 2296 01db B1010000 		.4byte	.LASF38
 2297 01df 01       		.byte	0x1
 2298 01e0 99       		.byte	0x99
 2299 01e1 CF000000 		.4byte	0xcf
 2300 01e5 02       		.uleb128 0x2
 2301 01e6 91       		.byte	0x91
 2302 01e7 58       		.sleb128 -40
 2303 01e8 0F       		.uleb128 0xf
 2304 01e9 71020000 		.4byte	.LASF39
 2305 01ed 01       		.byte	0x1
 2306 01ee 99       		.byte	0x99
 2307 01ef CF000000 		.4byte	0xcf
 2308 01f3 02       		.uleb128 0x2
 2309 01f4 91       		.byte	0x91
 2310 01f5 54       		.sleb128 -44
 2311 01f6 0F       		.uleb128 0xf
 2312 01f7 B1030000 		.4byte	.LASF40
 2313 01fb 01       		.byte	0x1
 2314 01fc 99       		.byte	0x99
 2315 01fd CF000000 		.4byte	0xcf
 2316 0201 02       		.uleb128 0x2
 2317 0202 91       		.byte	0x91
 2318 0203 50       		.sleb128 -48
 2319 0204 0F       		.uleb128 0xf
 2320 0205 AD000000 		.4byte	.LASF41
 2321 0209 01       		.byte	0x1
 2322 020a 99       		.byte	0x99
 2323 020b CF000000 		.4byte	0xcf
 2324 020f 02       		.uleb128 0x2
 2325 0210 91       		.byte	0x91
 2326 0211 6C       		.sleb128 -20
 2327 0212 0E       		.uleb128 0xe
 2328 0213 62756600 		.ascii	"buf\000"
 2329 0217 01       		.byte	0x1
 2330 0218 9A       		.byte	0x9a
 2331 0219 65030000 		.4byte	0x365
 2332 021d 03       		.uleb128 0x3
 2333 021e 91       		.byte	0x91
 2334 021f 907F     		.sleb128 -112
 2335 0221 0F       		.uleb128 0xf
 2336 0222 7B030000 		.4byte	.LASF42
 2337 0226 01       		.byte	0x1
 2338 0227 9A       		.byte	0x9a
 2339 0228 75030000 		.4byte	0x375
 2340 022c 03       		.uleb128 0x3
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 54


 2341 022d 91       		.byte	0x91
 2342 022e FC7E     		.sleb128 -132
 2343 0230 0F       		.uleb128 0xf
 2344 0231 F4020000 		.4byte	.LASF43
 2345 0235 01       		.byte	0x1
 2346 0236 9A       		.byte	0x9a
 2347 0237 85030000 		.4byte	0x385
 2348 023b 03       		.uleb128 0x3
 2349 023c 91       		.byte	0x91
 2350 023d EC7E     		.sleb128 -148
 2351 023f 0F       		.uleb128 0xf
 2352 0240 97030000 		.4byte	.LASF44
 2353 0244 01       		.byte	0x1
 2354 0245 9B       		.byte	0x9b
 2355 0246 95030000 		.4byte	0x395
 2356 024a 03       		.uleb128 0x3
 2357 024b 91       		.byte	0x91
 2358 024c D87E     		.sleb128 -168
 2359 024e 0F       		.uleb128 0xf
 2360 024f 14040000 		.4byte	.LASF45
 2361 0253 01       		.byte	0x1
 2362 0254 9C       		.byte	0x9c
 2363 0255 85030000 		.4byte	0x385
 2364 0259 03       		.uleb128 0x3
 2365 025a 91       		.byte	0x91
 2366 025b C87E     		.sleb128 -184
 2367 025d 0F       		.uleb128 0xf
 2368 025e 9E000000 		.4byte	.LASF46
 2369 0262 01       		.byte	0x1
 2370 0263 9D       		.byte	0x9d
 2371 0264 A5030000 		.4byte	0x3a5
 2372 0268 03       		.uleb128 0x3
 2373 0269 91       		.byte	0x91
 2374 026a B47E     		.sleb128 -204
 2375 026c 0F       		.uleb128 0xf
 2376 026d 0C030000 		.4byte	.LASF47
 2377 0271 01       		.byte	0x1
 2378 0272 9E       		.byte	0x9e
 2379 0273 A5030000 		.4byte	0x3a5
 2380 0277 03       		.uleb128 0x3
 2381 0278 91       		.byte	0x91
 2382 0279 A07E     		.sleb128 -224
 2383 027b 0F       		.uleb128 0xf
 2384 027c D7010000 		.4byte	.LASF48
 2385 0280 01       		.byte	0x1
 2386 0281 9F       		.byte	0x9f
 2387 0282 B5030000 		.4byte	0x3b5
 2388 0286 03       		.uleb128 0x3
 2389 0287 91       		.byte	0x91
 2390 0288 907E     		.sleb128 -240
 2391 028a 0F       		.uleb128 0xf
 2392 028b F1000000 		.4byte	.LASF49
 2393 028f 01       		.byte	0x1
 2394 0290 A0       		.byte	0xa0
 2395 0291 89000000 		.4byte	0x89
 2396 0295 02       		.uleb128 0x2
 2397 0296 91       		.byte	0x91
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 55


 2398 0297 68       		.sleb128 -24
 2399 0298 0F       		.uleb128 0xf
 2400 0299 DC000000 		.4byte	.LASF50
 2401 029d 01       		.byte	0x1
 2402 029e A0       		.byte	0xa0
 2403 029f 89000000 		.4byte	0x89
 2404 02a3 02       		.uleb128 0x2
 2405 02a4 91       		.byte	0x91
 2406 02a5 64       		.sleb128 -28
 2407 02a6 0F       		.uleb128 0xf
 2408 02a7 C9010000 		.4byte	.LASF51
 2409 02ab 01       		.byte	0x1
 2410 02ac A0       		.byte	0xa0
 2411 02ad 89000000 		.4byte	0x89
 2412 02b1 02       		.uleb128 0x2
 2413 02b2 91       		.byte	0x91
 2414 02b3 4C       		.sleb128 -52
 2415 02b4 10       		.uleb128 0x10
 2416 02b5 617800   		.ascii	"ax\000"
 2417 02b8 01       		.byte	0x1
 2418 02b9 A2       		.byte	0xa2
 2419 02ba A2000000 		.4byte	0xa2
 2420 02be 10       		.uleb128 0x10
 2421 02bf 617900   		.ascii	"ay\000"
 2422 02c2 01       		.byte	0x1
 2423 02c3 A2       		.byte	0xa2
 2424 02c4 A2000000 		.4byte	0xa2
 2425 02c8 0E       		.uleb128 0xe
 2426 02c9 617A00   		.ascii	"az\000"
 2427 02cc 01       		.byte	0x1
 2428 02cd A2       		.byte	0xa2
 2429 02ce A2000000 		.4byte	0xa2
 2430 02d2 02       		.uleb128 0x2
 2431 02d3 91       		.byte	0x91
 2432 02d4 42       		.sleb128 -62
 2433 02d5 10       		.uleb128 0x10
 2434 02d6 6900     		.ascii	"i\000"
 2435 02d8 01       		.byte	0x1
 2436 02d9 A2       		.byte	0xa2
 2437 02da A2000000 		.4byte	0xa2
 2438 02de 0E       		.uleb128 0xe
 2439 02df 677800   		.ascii	"gx\000"
 2440 02e2 01       		.byte	0x1
 2441 02e3 A3       		.byte	0xa3
 2442 02e4 A2000000 		.4byte	0xa2
 2443 02e8 03       		.uleb128 0x3
 2444 02e9 91       		.byte	0x91
 2445 02ea 8E7E     		.sleb128 -242
 2446 02ec 0E       		.uleb128 0xe
 2447 02ed 677900   		.ascii	"gy\000"
 2448 02f0 01       		.byte	0x1
 2449 02f1 A3       		.byte	0xa3
 2450 02f2 A2000000 		.4byte	0xa2
 2451 02f6 03       		.uleb128 0x3
 2452 02f7 91       		.byte	0x91
 2453 02f8 8C7E     		.sleb128 -244
 2454 02fa 0E       		.uleb128 0xe
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 56


 2455 02fb 677A00   		.ascii	"gz\000"
 2456 02fe 01       		.byte	0x1
 2457 02ff A3       		.byte	0xa3
 2458 0300 A2000000 		.4byte	0xa2
 2459 0304 03       		.uleb128 0x3
 2460 0305 91       		.byte	0x91
 2461 0306 8A7E     		.sleb128 -246
 2462 0308 0F       		.uleb128 0xf
 2463 0309 03030000 		.4byte	.LASF52
 2464 030d 01       		.byte	0x1
 2465 030e A4       		.byte	0xa4
 2466 030f A2000000 		.4byte	0xa2
 2467 0313 02       		.uleb128 0x2
 2468 0314 91       		.byte	0x91
 2469 0315 4A       		.sleb128 -54
 2470 0316 0F       		.uleb128 0xf
 2471 0317 AC010000 		.4byte	.LASF53
 2472 031b 01       		.byte	0x1
 2473 031c A5       		.byte	0xa5
 2474 031d 89000000 		.4byte	0x89
 2475 0321 03       		.uleb128 0x3
 2476 0322 91       		.byte	0x91
 2477 0323 847E     		.sleb128 -252
 2478 0325 0F       		.uleb128 0xf
 2479 0326 6B000000 		.4byte	.LASF54
 2480 032a 01       		.byte	0x1
 2481 032b A5       		.byte	0xa5
 2482 032c 89000000 		.4byte	0x89
 2483 0330 02       		.uleb128 0x2
 2484 0331 91       		.byte	0x91
 2485 0332 44       		.sleb128 -60
 2486 0333 11       		.uleb128 0x11
 2487 0334 5A010000 		.4byte	.LBB2
 2488 0338 EA080000 		.4byte	.LBE2-.LBB2
 2489 033c 12       		.uleb128 0x12
 2490 033d 7400     		.ascii	"t\000"
 2491 033f 01       		.byte	0x1
 2492 0340 1501     		.2byte	0x115
 2493 0342 89000000 		.4byte	0x89
 2494 0346 03       		.uleb128 0x3
 2495 0347 91       		.byte	0x91
 2496 0348 807E     		.sleb128 -256
 2497 034a 11       		.uleb128 0x11
 2498 034b 00020000 		.4byte	.LBB3
 2499 034f 62000000 		.4byte	.LBE3-.LBB3
 2500 0353 0F       		.uleb128 0xf
 2501 0354 4A000000 		.4byte	.LASF55
 2502 0358 01       		.byte	0x1
 2503 0359 F1       		.byte	0xf1
 2504 035a C5030000 		.4byte	0x3c5
 2505 035e 03       		.uleb128 0x3
 2506 035f 91       		.byte	0x91
 2507 0360 C47D     		.sleb128 -316
 2508 0362 00       		.byte	0
 2509 0363 00       		.byte	0
 2510 0364 00       		.byte	0
 2511 0365 13       		.uleb128 0x13
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 57


 2512 0366 DD000000 		.4byte	0xdd
 2513 036a 75030000 		.4byte	0x375
 2514 036e 14       		.uleb128 0x14
 2515 036f F5000000 		.4byte	0xf5
 2516 0373 31       		.byte	0x31
 2517 0374 00       		.byte	0
 2518 0375 13       		.uleb128 0x13
 2519 0376 DD000000 		.4byte	0xdd
 2520 037a 85030000 		.4byte	0x385
 2521 037e 14       		.uleb128 0x14
 2522 037f F5000000 		.4byte	0xf5
 2523 0383 13       		.byte	0x13
 2524 0384 00       		.byte	0
 2525 0385 13       		.uleb128 0x13
 2526 0386 DD000000 		.4byte	0xdd
 2527 038a 95030000 		.4byte	0x395
 2528 038e 14       		.uleb128 0x14
 2529 038f F5000000 		.4byte	0xf5
 2530 0393 0D       		.byte	0xd
 2531 0394 00       		.byte	0
 2532 0395 13       		.uleb128 0x13
 2533 0396 DD000000 		.4byte	0xdd
 2534 039a A5030000 		.4byte	0x3a5
 2535 039e 14       		.uleb128 0x14
 2536 039f F5000000 		.4byte	0xf5
 2537 03a3 12       		.byte	0x12
 2538 03a4 00       		.byte	0
 2539 03a5 13       		.uleb128 0x13
 2540 03a6 DD000000 		.4byte	0xdd
 2541 03aa B5030000 		.4byte	0x3b5
 2542 03ae 14       		.uleb128 0x14
 2543 03af F5000000 		.4byte	0xf5
 2544 03b3 10       		.byte	0x10
 2545 03b4 00       		.byte	0
 2546 03b5 13       		.uleb128 0x13
 2547 03b6 DD000000 		.4byte	0xdd
 2548 03ba C5030000 		.4byte	0x3c5
 2549 03be 14       		.uleb128 0x14
 2550 03bf F5000000 		.4byte	0xf5
 2551 03c3 0F       		.byte	0xf
 2552 03c4 00       		.byte	0
 2553 03c5 13       		.uleb128 0x13
 2554 03c6 DD000000 		.4byte	0xdd
 2555 03ca D5030000 		.4byte	0x3d5
 2556 03ce 14       		.uleb128 0x14
 2557 03cf F5000000 		.4byte	0xf5
 2558 03d3 3B       		.byte	0x3b
 2559 03d4 00       		.byte	0
 2560 03d5 15       		.uleb128 0x15
 2561 03d6 E4030000 		.4byte	.LASF92
 2562 03da 01       		.byte	0x1
 2563 03db 1A02     		.2byte	0x21a
 2564 03dd 89000000 		.4byte	0x89
 2565 03e1 00000000 		.4byte	.LFB68
 2566 03e5 30010000 		.4byte	.LFE68-.LFB68
 2567 03e9 01       		.uleb128 0x1
 2568 03ea 9C       		.byte	0x9c
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 58


 2569 03eb 0E040000 		.4byte	0x40e
 2570 03ef 16       		.uleb128 0x16
 2571 03f0 80000000 		.4byte	.LASF93
 2572 03f4 01       		.byte	0x1
 2573 03f5 1A02     		.2byte	0x21a
 2574 03f7 FC000000 		.4byte	0xfc
 2575 03fb 02       		.uleb128 0x2
 2576 03fc 91       		.byte	0x91
 2577 03fd 64       		.sleb128 -28
 2578 03fe 17       		.uleb128 0x17
 2579 03ff ED030000 		.4byte	.LASF56
 2580 0403 01       		.byte	0x1
 2581 0404 1B02     		.2byte	0x21b
 2582 0406 89000000 		.4byte	0x89
 2583 040a 02       		.uleb128 0x2
 2584 040b 91       		.byte	0x91
 2585 040c 6C       		.sleb128 -20
 2586 040d 00       		.byte	0
 2587 040e 18       		.uleb128 0x18
 2588 040f D7030000 		.4byte	.LASF57
 2589 0413 07       		.byte	0x7
 2590 0414 9606     		.2byte	0x696
 2591 0416 1A040000 		.4byte	0x41a
 2592 041a 06       		.uleb128 0x6
 2593 041b AD000000 		.4byte	0xad
 2594 041f 19       		.uleb128 0x19
 2595 0420 55000000 		.4byte	.LASF58
 2596 0424 08       		.byte	0x8
 2597 0425 9101     		.2byte	0x191
 2598 0427 97000000 		.4byte	0x97
 2599 042b 05       		.uleb128 0x5
 2600 042c 03       		.byte	0x3
 2601 042d 00000000 		.4byte	devAddr
 2602 0431 13       		.uleb128 0x13
 2603 0432 97000000 		.4byte	0x97
 2604 0436 41040000 		.4byte	0x441
 2605 043a 14       		.uleb128 0x14
 2606 043b F5000000 		.4byte	0xf5
 2607 043f 15       		.byte	0x15
 2608 0440 00       		.byte	0
 2609 0441 19       		.uleb128 0x19
 2610 0442 1D030000 		.4byte	.LASF59
 2611 0446 08       		.byte	0x8
 2612 0447 9201     		.2byte	0x192
 2613 0449 31040000 		.4byte	0x431
 2614 044d 05       		.uleb128 0x5
 2615 044e 03       		.byte	0x3
 2616 044f 00000000 		.4byte	buffer
 2617 0453 1A       		.uleb128 0x1a
 2618 0454 50000000 		.4byte	.LASF60
 2619 0458 01       		.byte	0x1
 2620 0459 34       		.byte	0x34
 2621 045a B8000000 		.4byte	0xb8
 2622 045e 05       		.uleb128 0x5
 2623 045f 03       		.byte	0x3
 2624 0460 00000000 		.4byte	Addr
 2625 0464 1B       		.uleb128 0x1b
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 59


 2626 0465 696400   		.ascii	"id\000"
 2627 0468 01       		.byte	0x1
 2628 0469 35       		.byte	0x35
 2629 046a 62000000 		.4byte	0x62
 2630 046e 05       		.uleb128 0x5
 2631 046f 03       		.byte	0x3
 2632 0470 00000000 		.4byte	id
 2633 0474 1A       		.uleb128 0x1a
 2634 0475 C0010000 		.4byte	.LASF61
 2635 0479 01       		.byte	0x1
 2636 047a 35       		.byte	0x35
 2637 047b 62000000 		.4byte	0x62
 2638 047f 05       		.uleb128 0x5
 2639 0480 03       		.byte	0x3
 2640 0481 00000000 		.4byte	press_id
 2641 0485 1A       		.uleb128 0x1a
 2642 0486 5A020000 		.4byte	.LASF62
 2643 048a 01       		.byte	0x1
 2644 048b 36       		.byte	0x36
 2645 048c 62000000 		.4byte	0x62
 2646 0490 05       		.uleb128 0x5
 2647 0491 03       		.byte	0x3
 2648 0492 00000000 		.4byte	data_time
 2649 0496 1A       		.uleb128 0x1a
 2650 0497 00000000 		.4byte	.LASF63
 2651 049b 01       		.byte	0x1
 2652 049c 37       		.byte	0x37
 2653 049d 62000000 		.4byte	0x62
 2654 04a1 05       		.uleb128 0x5
 2655 04a2 03       		.byte	0x3
 2656 04a3 00000000 		.4byte	descent_time
 2657 04a7 1B       		.uleb128 0x1b
 2658 04a8 73756D00 		.ascii	"sum\000"
 2659 04ac 01       		.byte	0x1
 2660 04ad 39       		.byte	0x39
 2661 04ae 62000000 		.4byte	0x62
 2662 04b2 05       		.uleb128 0x5
 2663 04b3 03       		.byte	0x3
 2664 04b4 00000000 		.4byte	sum
 2665 04b8 1A       		.uleb128 0x1a
 2666 04b9 E6010000 		.4byte	.LASF64
 2667 04bd 01       		.byte	0x1
 2668 04be 3A       		.byte	0x3a
 2669 04bf CF000000 		.4byte	0xcf
 2670 04c3 05       		.uleb128 0x5
 2671 04c4 03       		.byte	0x3
 2672 04c5 00000000 		.4byte	pressure_sum
 2673 04c9 1A       		.uleb128 0x1a
 2674 04ca 0D010000 		.4byte	.LASF65
 2675 04ce 01       		.byte	0x1
 2676 04cf 3B       		.byte	0x3b
 2677 04d0 A2000000 		.4byte	0xa2
 2678 04d4 05       		.uleb128 0x5
 2679 04d5 03       		.byte	0x3
 2680 04d6 00000000 		.4byte	average
 2681 04da 1A       		.uleb128 0x1a
 2682 04db BD030000 		.4byte	.LASF66
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 60


 2683 04df 01       		.byte	0x1
 2684 04e0 3C       		.byte	0x3c
 2685 04e1 EB040000 		.4byte	0x4eb
 2686 04e5 05       		.uleb128 0x5
 2687 04e6 03       		.byte	0x3
 2688 04e7 00000000 		.4byte	collect_flag
 2689 04eb 02       		.uleb128 0x2
 2690 04ec 01       		.byte	0x1
 2691 04ed 02       		.byte	0x2
 2692 04ee E8020000 		.4byte	.LASF67
 2693 04f2 1A       		.uleb128 0x1a
 2694 04f3 1E040000 		.4byte	.LASF68
 2695 04f7 01       		.byte	0x1
 2696 04f8 3D       		.byte	0x3d
 2697 04f9 EB040000 		.4byte	0x4eb
 2698 04fd 05       		.uleb128 0x5
 2699 04fe 03       		.byte	0x3
 2700 04ff 00000000 		.4byte	wait_flag
 2701 0503 1A       		.uleb128 0x1a
 2702 0504 C4000000 		.4byte	.LASF69
 2703 0508 01       		.byte	0x1
 2704 0509 3E       		.byte	0x3e
 2705 050a EB040000 		.4byte	0x4eb
 2706 050e 05       		.uleb128 0x5
 2707 050f 03       		.byte	0x3
 2708 0510 00000000 		.4byte	PANIC_flag
 2709 0514 1A       		.uleb128 0x1a
 2710 0515 AB030000 		.4byte	.LASF70
 2711 0519 01       		.byte	0x1
 2712 051a 40       		.byte	0x40
 2713 051b 56010000 		.4byte	0x156
 2714 051f 05       		.uleb128 0x5
 2715 0520 03       		.byte	0x3
 2716 0521 00000000 		.4byte	STATE
 2717 0525 1A       		.uleb128 0x1a
 2718 0526 24020000 		.4byte	.LASF71
 2719 052a 01       		.byte	0x1
 2720 052b 41       		.byte	0x41
 2721 052c 97000000 		.4byte	0x97
 2722 0530 05       		.uleb128 0x5
 2723 0531 03       		.byte	0x3
 2724 0532 00000000 		.4byte	countdown
 2725 0536 1A       		.uleb128 0x1a
 2726 0537 21000000 		.4byte	.LASF72
 2727 053b 01       		.byte	0x1
 2728 053c 41       		.byte	0x41
 2729 053d 97000000 		.4byte	0x97
 2730 0541 05       		.uleb128 0x5
 2731 0542 03       		.byte	0x3
 2732 0543 00000000 		.4byte	update_Data
 2733 0547 13       		.uleb128 0x13
 2734 0548 97000000 		.4byte	0x97
 2735 054c 57050000 		.4byte	0x557
 2736 0550 14       		.uleb128 0x14
 2737 0551 F5000000 		.4byte	0xf5
 2738 0555 3F       		.byte	0x3f
 2739 0556 00       		.byte	0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 61


 2740 0557 1A       		.uleb128 0x1a
 2741 0558 2D000000 		.4byte	.LASF73
 2742 055c 01       		.byte	0x1
 2743 055d 42       		.byte	0x42
 2744 055e 47050000 		.4byte	0x547
 2745 0562 05       		.uleb128 0x5
 2746 0563 03       		.byte	0x3
 2747 0564 00000000 		.4byte	RxBuffer
 2748 0568 1A       		.uleb128 0x1a
 2749 0569 17000000 		.4byte	.LASF74
 2750 056d 01       		.byte	0x1
 2751 056e 43       		.byte	0x43
 2752 056f 89000000 		.4byte	0x89
 2753 0573 05       		.uleb128 0x5
 2754 0574 03       		.byte	0x3
 2755 0575 00000000 		.4byte	msg_count
 2756 0579 1A       		.uleb128 0x1a
 2757 057a 16030000 		.4byte	.LASF75
 2758 057e 01       		.byte	0x1
 2759 057f 43       		.byte	0x43
 2760 0580 89000000 		.4byte	0x89
 2761 0584 05       		.uleb128 0x5
 2762 0585 03       		.byte	0x3
 2763 0586 00000000 		.4byte	rxflag
 2764 058a 1A       		.uleb128 0x1a
 2765 058b 63030000 		.4byte	.LASF76
 2766 058f 01       		.byte	0x1
 2767 0590 43       		.byte	0x43
 2768 0591 89000000 		.4byte	0x89
 2769 0595 05       		.uleb128 0x5
 2770 0596 03       		.byte	0x3
 2771 0597 00000000 		.4byte	bytes
 2772 059b 1A       		.uleb128 0x1a
 2773 059c 77000000 		.4byte	.LASF77
 2774 05a0 01       		.byte	0x1
 2775 05a1 43       		.byte	0x43
 2776 05a2 89000000 		.4byte	0x89
 2777 05a6 05       		.uleb128 0x5
 2778 05a7 03       		.byte	0x3
 2779 05a8 00000000 		.4byte	dataflag
 2780 05ac 1A       		.uleb128 0x1a
 2781 05ad 5D000000 		.4byte	.LASF78
 2782 05b1 01       		.byte	0x1
 2783 05b2 43       		.byte	0x43
 2784 05b3 89000000 		.4byte	0x89
 2785 05b7 05       		.uleb128 0x5
 2786 05b8 03       		.byte	0x3
 2787 05b9 00000000 		.4byte	transmit_flag
 2788 05bd 1A       		.uleb128 0x1a
 2789 05be FD020000 		.4byte	.LASF79
 2790 05c2 01       		.byte	0x1
 2791 05c3 44       		.byte	0x44
 2792 05c4 89000000 		.4byte	0x89
 2793 05c8 05       		.uleb128 0x5
 2794 05c9 03       		.byte	0x3
 2795 05ca 00000000 		.4byte	depth
 2796 05ce 1A       		.uleb128 0x1a
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 62


 2797 05cf EE020000 		.4byte	.LASF80
 2798 05d3 01       		.byte	0x1
 2799 05d4 44       		.byte	0x44
 2800 05d5 89000000 		.4byte	0x89
 2801 05d9 05       		.uleb128 0x5
 2802 05da 03       		.byte	0x3
 2803 05db 00000000 		.4byte	reset
 2804 05df 1A       		.uleb128 0x1a
 2805 05e0 F5030000 		.4byte	.LASF81
 2806 05e4 01       		.byte	0x1
 2807 05e5 45       		.byte	0x45
 2808 05e6 CF000000 		.4byte	0xcf
 2809 05ea 05       		.uleb128 0x5
 2810 05eb 03       		.byte	0x3
 2811 05ec 00000000 		.4byte	xavg
 2812 05f0 1A       		.uleb128 0x1a
 2813 05f1 CF000000 		.4byte	.LASF82
 2814 05f5 01       		.byte	0x1
 2815 05f6 45       		.byte	0x45
 2816 05f7 CF000000 		.4byte	0xcf
 2817 05fb 05       		.uleb128 0x5
 2818 05fc 03       		.byte	0x3
 2819 05fd 00000000 		.4byte	yavg
 2820 0601 1A       		.uleb128 0x1a
 2821 0602 A7020000 		.4byte	.LASF83
 2822 0606 01       		.byte	0x1
 2823 0607 45       		.byte	0x45
 2824 0608 CF000000 		.4byte	0xcf
 2825 060c 05       		.uleb128 0x5
 2826 060d 03       		.byte	0x3
 2827 060e 00000000 		.4byte	xsum
 2828 0612 1A       		.uleb128 0x1a
 2829 0613 B8030000 		.4byte	.LASF84
 2830 0617 01       		.byte	0x1
 2831 0618 45       		.byte	0x45
 2832 0619 CF000000 		.4byte	0xcf
 2833 061d 05       		.uleb128 0x5
 2834 061e 03       		.byte	0x3
 2835 061f 00000000 		.4byte	ysum
 2836 0623 13       		.uleb128 0x13
 2837 0624 DD000000 		.4byte	0xdd
 2838 0628 33060000 		.4byte	0x633
 2839 062c 14       		.uleb128 0x14
 2840 062d F5000000 		.4byte	0xf5
 2841 0631 0A       		.byte	0xa
 2842 0632 00       		.byte	0
 2843 0633 1A       		.uleb128 0x1a
 2844 0634 A8000000 		.4byte	.LASF85
 2845 0638 01       		.byte	0x1
 2846 0639 46       		.byte	0x46
 2847 063a 23060000 		.4byte	0x623
 2848 063e 05       		.uleb128 0x5
 2849 063f 03       		.byte	0x3
 2850 0640 00000000 		.4byte	file
 2851 0644 13       		.uleb128 0x13
 2852 0645 DD000000 		.4byte	0xdd
 2853 0649 54060000 		.4byte	0x654
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 63


 2854 064d 14       		.uleb128 0x14
 2855 064e F5000000 		.4byte	0xf5
 2856 0652 09       		.byte	0x9
 2857 0653 00       		.byte	0
 2858 0654 1A       		.uleb128 0x1a
 2859 0655 B9010000 		.4byte	.LASF86
 2860 0659 01       		.byte	0x1
 2861 065a 47       		.byte	0x47
 2862 065b 44060000 		.4byte	0x644
 2863 065f 05       		.uleb128 0x5
 2864 0660 03       		.byte	0x3
 2865 0661 00000000 		.4byte	volume
 2866 0665 1A       		.uleb128 0x1a
 2867 0666 0D040000 		.4byte	.LASF87
 2868 066a 01       		.byte	0x1
 2869 066b 48       		.byte	0x48
 2870 066c 12010000 		.4byte	0x112
 2871 0670 05       		.uleb128 0x5
 2872 0671 03       		.byte	0x3
 2873 0672 00000000 		.4byte	fsfile
 2874 0676 00       		.byte	0
 2875              		.section	.debug_abbrev,"",%progbits
 2876              	.Ldebug_abbrev0:
 2877 0000 01       		.uleb128 0x1
 2878 0001 11       		.uleb128 0x11
 2879 0002 01       		.byte	0x1
 2880 0003 25       		.uleb128 0x25
 2881 0004 0E       		.uleb128 0xe
 2882 0005 13       		.uleb128 0x13
 2883 0006 0B       		.uleb128 0xb
 2884 0007 03       		.uleb128 0x3
 2885 0008 0E       		.uleb128 0xe
 2886 0009 1B       		.uleb128 0x1b
 2887 000a 0E       		.uleb128 0xe
 2888 000b 55       		.uleb128 0x55
 2889 000c 17       		.uleb128 0x17
 2890 000d 11       		.uleb128 0x11
 2891 000e 01       		.uleb128 0x1
 2892 000f 10       		.uleb128 0x10
 2893 0010 17       		.uleb128 0x17
 2894 0011 00       		.byte	0
 2895 0012 00       		.byte	0
 2896 0013 02       		.uleb128 0x2
 2897 0014 24       		.uleb128 0x24
 2898 0015 00       		.byte	0
 2899 0016 0B       		.uleb128 0xb
 2900 0017 0B       		.uleb128 0xb
 2901 0018 3E       		.uleb128 0x3e
 2902 0019 0B       		.uleb128 0xb
 2903 001a 03       		.uleb128 0x3
 2904 001b 0E       		.uleb128 0xe
 2905 001c 00       		.byte	0
 2906 001d 00       		.byte	0
 2907 001e 03       		.uleb128 0x3
 2908 001f 16       		.uleb128 0x16
 2909 0020 00       		.byte	0
 2910 0021 03       		.uleb128 0x3
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 64


 2911 0022 0E       		.uleb128 0xe
 2912 0023 3A       		.uleb128 0x3a
 2913 0024 0B       		.uleb128 0xb
 2914 0025 3B       		.uleb128 0x3b
 2915 0026 0B       		.uleb128 0xb
 2916 0027 49       		.uleb128 0x49
 2917 0028 13       		.uleb128 0x13
 2918 0029 00       		.byte	0
 2919 002a 00       		.byte	0
 2920 002b 04       		.uleb128 0x4
 2921 002c 24       		.uleb128 0x24
 2922 002d 00       		.byte	0
 2923 002e 0B       		.uleb128 0xb
 2924 002f 0B       		.uleb128 0xb
 2925 0030 3E       		.uleb128 0x3e
 2926 0031 0B       		.uleb128 0xb
 2927 0032 03       		.uleb128 0x3
 2928 0033 08       		.uleb128 0x8
 2929 0034 00       		.byte	0
 2930 0035 00       		.byte	0
 2931 0036 05       		.uleb128 0x5
 2932 0037 16       		.uleb128 0x16
 2933 0038 00       		.byte	0
 2934 0039 03       		.uleb128 0x3
 2935 003a 0E       		.uleb128 0xe
 2936 003b 3A       		.uleb128 0x3a
 2937 003c 0B       		.uleb128 0xb
 2938 003d 3B       		.uleb128 0x3b
 2939 003e 05       		.uleb128 0x5
 2940 003f 49       		.uleb128 0x49
 2941 0040 13       		.uleb128 0x13
 2942 0041 00       		.byte	0
 2943 0042 00       		.byte	0
 2944 0043 06       		.uleb128 0x6
 2945 0044 35       		.uleb128 0x35
 2946 0045 00       		.byte	0
 2947 0046 49       		.uleb128 0x49
 2948 0047 13       		.uleb128 0x13
 2949 0048 00       		.byte	0
 2950 0049 00       		.byte	0
 2951 004a 07       		.uleb128 0x7
 2952 004b 0F       		.uleb128 0xf
 2953 004c 00       		.byte	0
 2954 004d 0B       		.uleb128 0xb
 2955 004e 0B       		.uleb128 0xb
 2956 004f 49       		.uleb128 0x49
 2957 0050 13       		.uleb128 0x13
 2958 0051 00       		.byte	0
 2959 0052 00       		.byte	0
 2960 0053 08       		.uleb128 0x8
 2961 0054 13       		.uleb128 0x13
 2962 0055 00       		.byte	0
 2963 0056 03       		.uleb128 0x3
 2964 0057 0E       		.uleb128 0xe
 2965 0058 3C       		.uleb128 0x3c
 2966 0059 19       		.uleb128 0x19
 2967 005a 00       		.byte	0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 65


 2968 005b 00       		.byte	0
 2969 005c 09       		.uleb128 0x9
 2970 005d 04       		.uleb128 0x4
 2971 005e 01       		.byte	0x1
 2972 005f 03       		.uleb128 0x3
 2973 0060 0E       		.uleb128 0xe
 2974 0061 0B       		.uleb128 0xb
 2975 0062 0B       		.uleb128 0xb
 2976 0063 3A       		.uleb128 0x3a
 2977 0064 0B       		.uleb128 0xb
 2978 0065 3B       		.uleb128 0x3b
 2979 0066 0B       		.uleb128 0xb
 2980 0067 01       		.uleb128 0x1
 2981 0068 13       		.uleb128 0x13
 2982 0069 00       		.byte	0
 2983 006a 00       		.byte	0
 2984 006b 0A       		.uleb128 0xa
 2985 006c 28       		.uleb128 0x28
 2986 006d 00       		.byte	0
 2987 006e 03       		.uleb128 0x3
 2988 006f 0E       		.uleb128 0xe
 2989 0070 1C       		.uleb128 0x1c
 2990 0071 0D       		.uleb128 0xd
 2991 0072 00       		.byte	0
 2992 0073 00       		.byte	0
 2993 0074 0B       		.uleb128 0xb
 2994 0075 2E       		.uleb128 0x2e
 2995 0076 00       		.byte	0
 2996 0077 3F       		.uleb128 0x3f
 2997 0078 19       		.uleb128 0x19
 2998 0079 03       		.uleb128 0x3
 2999 007a 0E       		.uleb128 0xe
 3000 007b 3A       		.uleb128 0x3a
 3001 007c 0B       		.uleb128 0xb
 3002 007d 3B       		.uleb128 0x3b
 3003 007e 0B       		.uleb128 0xb
 3004 007f 27       		.uleb128 0x27
 3005 0080 19       		.uleb128 0x19
 3006 0081 11       		.uleb128 0x11
 3007 0082 01       		.uleb128 0x1
 3008 0083 12       		.uleb128 0x12
 3009 0084 06       		.uleb128 0x6
 3010 0085 40       		.uleb128 0x40
 3011 0086 18       		.uleb128 0x18
 3012 0087 9642     		.uleb128 0x2116
 3013 0089 19       		.uleb128 0x19
 3014 008a 00       		.byte	0
 3015 008b 00       		.byte	0
 3016 008c 0C       		.uleb128 0xc
 3017 008d 2E       		.uleb128 0x2e
 3018 008e 00       		.byte	0
 3019 008f 3F       		.uleb128 0x3f
 3020 0090 19       		.uleb128 0x19
 3021 0091 03       		.uleb128 0x3
 3022 0092 0E       		.uleb128 0xe
 3023 0093 3A       		.uleb128 0x3a
 3024 0094 0B       		.uleb128 0xb
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 66


 3025 0095 3B       		.uleb128 0x3b
 3026 0096 0B       		.uleb128 0xb
 3027 0097 27       		.uleb128 0x27
 3028 0098 19       		.uleb128 0x19
 3029 0099 11       		.uleb128 0x11
 3030 009a 01       		.uleb128 0x1
 3031 009b 12       		.uleb128 0x12
 3032 009c 06       		.uleb128 0x6
 3033 009d 40       		.uleb128 0x40
 3034 009e 18       		.uleb128 0x18
 3035 009f 9742     		.uleb128 0x2117
 3036 00a1 19       		.uleb128 0x19
 3037 00a2 00       		.byte	0
 3038 00a3 00       		.byte	0
 3039 00a4 0D       		.uleb128 0xd
 3040 00a5 2E       		.uleb128 0x2e
 3041 00a6 01       		.byte	0x1
 3042 00a7 3F       		.uleb128 0x3f
 3043 00a8 19       		.uleb128 0x19
 3044 00a9 03       		.uleb128 0x3
 3045 00aa 0E       		.uleb128 0xe
 3046 00ab 3A       		.uleb128 0x3a
 3047 00ac 0B       		.uleb128 0xb
 3048 00ad 3B       		.uleb128 0x3b
 3049 00ae 0B       		.uleb128 0xb
 3050 00af 49       		.uleb128 0x49
 3051 00b0 13       		.uleb128 0x13
 3052 00b1 11       		.uleb128 0x11
 3053 00b2 01       		.uleb128 0x1
 3054 00b3 12       		.uleb128 0x12
 3055 00b4 06       		.uleb128 0x6
 3056 00b5 40       		.uleb128 0x40
 3057 00b6 18       		.uleb128 0x18
 3058 00b7 9642     		.uleb128 0x2116
 3059 00b9 19       		.uleb128 0x19
 3060 00ba 01       		.uleb128 0x1
 3061 00bb 13       		.uleb128 0x13
 3062 00bc 00       		.byte	0
 3063 00bd 00       		.byte	0
 3064 00be 0E       		.uleb128 0xe
 3065 00bf 34       		.uleb128 0x34
 3066 00c0 00       		.byte	0
 3067 00c1 03       		.uleb128 0x3
 3068 00c2 08       		.uleb128 0x8
 3069 00c3 3A       		.uleb128 0x3a
 3070 00c4 0B       		.uleb128 0xb
 3071 00c5 3B       		.uleb128 0x3b
 3072 00c6 0B       		.uleb128 0xb
 3073 00c7 49       		.uleb128 0x49
 3074 00c8 13       		.uleb128 0x13
 3075 00c9 02       		.uleb128 0x2
 3076 00ca 18       		.uleb128 0x18
 3077 00cb 00       		.byte	0
 3078 00cc 00       		.byte	0
 3079 00cd 0F       		.uleb128 0xf
 3080 00ce 34       		.uleb128 0x34
 3081 00cf 00       		.byte	0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 67


 3082 00d0 03       		.uleb128 0x3
 3083 00d1 0E       		.uleb128 0xe
 3084 00d2 3A       		.uleb128 0x3a
 3085 00d3 0B       		.uleb128 0xb
 3086 00d4 3B       		.uleb128 0x3b
 3087 00d5 0B       		.uleb128 0xb
 3088 00d6 49       		.uleb128 0x49
 3089 00d7 13       		.uleb128 0x13
 3090 00d8 02       		.uleb128 0x2
 3091 00d9 18       		.uleb128 0x18
 3092 00da 00       		.byte	0
 3093 00db 00       		.byte	0
 3094 00dc 10       		.uleb128 0x10
 3095 00dd 34       		.uleb128 0x34
 3096 00de 00       		.byte	0
 3097 00df 03       		.uleb128 0x3
 3098 00e0 08       		.uleb128 0x8
 3099 00e1 3A       		.uleb128 0x3a
 3100 00e2 0B       		.uleb128 0xb
 3101 00e3 3B       		.uleb128 0x3b
 3102 00e4 0B       		.uleb128 0xb
 3103 00e5 49       		.uleb128 0x49
 3104 00e6 13       		.uleb128 0x13
 3105 00e7 00       		.byte	0
 3106 00e8 00       		.byte	0
 3107 00e9 11       		.uleb128 0x11
 3108 00ea 0B       		.uleb128 0xb
 3109 00eb 01       		.byte	0x1
 3110 00ec 11       		.uleb128 0x11
 3111 00ed 01       		.uleb128 0x1
 3112 00ee 12       		.uleb128 0x12
 3113 00ef 06       		.uleb128 0x6
 3114 00f0 00       		.byte	0
 3115 00f1 00       		.byte	0
 3116 00f2 12       		.uleb128 0x12
 3117 00f3 34       		.uleb128 0x34
 3118 00f4 00       		.byte	0
 3119 00f5 03       		.uleb128 0x3
 3120 00f6 08       		.uleb128 0x8
 3121 00f7 3A       		.uleb128 0x3a
 3122 00f8 0B       		.uleb128 0xb
 3123 00f9 3B       		.uleb128 0x3b
 3124 00fa 05       		.uleb128 0x5
 3125 00fb 49       		.uleb128 0x49
 3126 00fc 13       		.uleb128 0x13
 3127 00fd 02       		.uleb128 0x2
 3128 00fe 18       		.uleb128 0x18
 3129 00ff 00       		.byte	0
 3130 0100 00       		.byte	0
 3131 0101 13       		.uleb128 0x13
 3132 0102 01       		.uleb128 0x1
 3133 0103 01       		.byte	0x1
 3134 0104 49       		.uleb128 0x49
 3135 0105 13       		.uleb128 0x13
 3136 0106 01       		.uleb128 0x1
 3137 0107 13       		.uleb128 0x13
 3138 0108 00       		.byte	0
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 68


 3139 0109 00       		.byte	0
 3140 010a 14       		.uleb128 0x14
 3141 010b 21       		.uleb128 0x21
 3142 010c 00       		.byte	0
 3143 010d 49       		.uleb128 0x49
 3144 010e 13       		.uleb128 0x13
 3145 010f 2F       		.uleb128 0x2f
 3146 0110 0B       		.uleb128 0xb
 3147 0111 00       		.byte	0
 3148 0112 00       		.byte	0
 3149 0113 15       		.uleb128 0x15
 3150 0114 2E       		.uleb128 0x2e
 3151 0115 01       		.byte	0x1
 3152 0116 3F       		.uleb128 0x3f
 3153 0117 19       		.uleb128 0x19
 3154 0118 03       		.uleb128 0x3
 3155 0119 0E       		.uleb128 0xe
 3156 011a 3A       		.uleb128 0x3a
 3157 011b 0B       		.uleb128 0xb
 3158 011c 3B       		.uleb128 0x3b
 3159 011d 05       		.uleb128 0x5
 3160 011e 27       		.uleb128 0x27
 3161 011f 19       		.uleb128 0x19
 3162 0120 49       		.uleb128 0x49
 3163 0121 13       		.uleb128 0x13
 3164 0122 11       		.uleb128 0x11
 3165 0123 01       		.uleb128 0x1
 3166 0124 12       		.uleb128 0x12
 3167 0125 06       		.uleb128 0x6
 3168 0126 40       		.uleb128 0x40
 3169 0127 18       		.uleb128 0x18
 3170 0128 9642     		.uleb128 0x2116
 3171 012a 19       		.uleb128 0x19
 3172 012b 01       		.uleb128 0x1
 3173 012c 13       		.uleb128 0x13
 3174 012d 00       		.byte	0
 3175 012e 00       		.byte	0
 3176 012f 16       		.uleb128 0x16
 3177 0130 05       		.uleb128 0x5
 3178 0131 00       		.byte	0
 3179 0132 03       		.uleb128 0x3
 3180 0133 0E       		.uleb128 0xe
 3181 0134 3A       		.uleb128 0x3a
 3182 0135 0B       		.uleb128 0xb
 3183 0136 3B       		.uleb128 0x3b
 3184 0137 05       		.uleb128 0x5
 3185 0138 49       		.uleb128 0x49
 3186 0139 13       		.uleb128 0x13
 3187 013a 02       		.uleb128 0x2
 3188 013b 18       		.uleb128 0x18
 3189 013c 00       		.byte	0
 3190 013d 00       		.byte	0
 3191 013e 17       		.uleb128 0x17
 3192 013f 34       		.uleb128 0x34
 3193 0140 00       		.byte	0
 3194 0141 03       		.uleb128 0x3
 3195 0142 0E       		.uleb128 0xe
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 69


 3196 0143 3A       		.uleb128 0x3a
 3197 0144 0B       		.uleb128 0xb
 3198 0145 3B       		.uleb128 0x3b
 3199 0146 05       		.uleb128 0x5
 3200 0147 49       		.uleb128 0x49
 3201 0148 13       		.uleb128 0x13
 3202 0149 02       		.uleb128 0x2
 3203 014a 18       		.uleb128 0x18
 3204 014b 00       		.byte	0
 3205 014c 00       		.byte	0
 3206 014d 18       		.uleb128 0x18
 3207 014e 34       		.uleb128 0x34
 3208 014f 00       		.byte	0
 3209 0150 03       		.uleb128 0x3
 3210 0151 0E       		.uleb128 0xe
 3211 0152 3A       		.uleb128 0x3a
 3212 0153 0B       		.uleb128 0xb
 3213 0154 3B       		.uleb128 0x3b
 3214 0155 05       		.uleb128 0x5
 3215 0156 49       		.uleb128 0x49
 3216 0157 13       		.uleb128 0x13
 3217 0158 3F       		.uleb128 0x3f
 3218 0159 19       		.uleb128 0x19
 3219 015a 3C       		.uleb128 0x3c
 3220 015b 19       		.uleb128 0x19
 3221 015c 00       		.byte	0
 3222 015d 00       		.byte	0
 3223 015e 19       		.uleb128 0x19
 3224 015f 34       		.uleb128 0x34
 3225 0160 00       		.byte	0
 3226 0161 03       		.uleb128 0x3
 3227 0162 0E       		.uleb128 0xe
 3228 0163 3A       		.uleb128 0x3a
 3229 0164 0B       		.uleb128 0xb
 3230 0165 3B       		.uleb128 0x3b
 3231 0166 05       		.uleb128 0x5
 3232 0167 49       		.uleb128 0x49
 3233 0168 13       		.uleb128 0x13
 3234 0169 3F       		.uleb128 0x3f
 3235 016a 19       		.uleb128 0x19
 3236 016b 02       		.uleb128 0x2
 3237 016c 18       		.uleb128 0x18
 3238 016d 00       		.byte	0
 3239 016e 00       		.byte	0
 3240 016f 1A       		.uleb128 0x1a
 3241 0170 34       		.uleb128 0x34
 3242 0171 00       		.byte	0
 3243 0172 03       		.uleb128 0x3
 3244 0173 0E       		.uleb128 0xe
 3245 0174 3A       		.uleb128 0x3a
 3246 0175 0B       		.uleb128 0xb
 3247 0176 3B       		.uleb128 0x3b
 3248 0177 0B       		.uleb128 0xb
 3249 0178 49       		.uleb128 0x49
 3250 0179 13       		.uleb128 0x13
 3251 017a 3F       		.uleb128 0x3f
 3252 017b 19       		.uleb128 0x19
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 70


 3253 017c 02       		.uleb128 0x2
 3254 017d 18       		.uleb128 0x18
 3255 017e 00       		.byte	0
 3256 017f 00       		.byte	0
 3257 0180 1B       		.uleb128 0x1b
 3258 0181 34       		.uleb128 0x34
 3259 0182 00       		.byte	0
 3260 0183 03       		.uleb128 0x3
 3261 0184 08       		.uleb128 0x8
 3262 0185 3A       		.uleb128 0x3a
 3263 0186 0B       		.uleb128 0xb
 3264 0187 3B       		.uleb128 0x3b
 3265 0188 0B       		.uleb128 0xb
 3266 0189 49       		.uleb128 0x49
 3267 018a 13       		.uleb128 0x13
 3268 018b 3F       		.uleb128 0x3f
 3269 018c 19       		.uleb128 0x19
 3270 018d 02       		.uleb128 0x2
 3271 018e 18       		.uleb128 0x18
 3272 018f 00       		.byte	0
 3273 0190 00       		.byte	0
 3274 0191 00       		.byte	0
 3275              		.section	.debug_aranges,"",%progbits
 3276 0000 44000000 		.4byte	0x44
 3277 0004 0200     		.2byte	0x2
 3278 0006 00000000 		.4byte	.Ldebug_info0
 3279 000a 04       		.byte	0x4
 3280 000b 00       		.byte	0
 3281 000c 0000     		.2byte	0
 3282 000e 0000     		.2byte	0
 3283 0010 00000000 		.4byte	.LFB63
 3284 0014 20000000 		.4byte	.LFE63-.LFB63
 3285 0018 00000000 		.4byte	.LFB64
 3286 001c 40000000 		.4byte	.LFE64-.LFB64
 3287 0020 00000000 		.4byte	.LFB65
 3288 0024 9C000000 		.4byte	.LFE65-.LFB65
 3289 0028 00000000 		.4byte	.LFB66
 3290 002c 50000000 		.4byte	.LFE66-.LFB66
 3291 0030 00000000 		.4byte	.LFB67
 3292 0034 740A0000 		.4byte	.LFE67-.LFB67
 3293 0038 00000000 		.4byte	.LFB68
 3294 003c 30010000 		.4byte	.LFE68-.LFB68
 3295 0040 00000000 		.4byte	0
 3296 0044 00000000 		.4byte	0
 3297              		.section	.debug_ranges,"",%progbits
 3298              	.Ldebug_ranges0:
 3299 0000 00000000 		.4byte	.LFB63
 3300 0004 20000000 		.4byte	.LFE63
 3301 0008 00000000 		.4byte	.LFB64
 3302 000c 40000000 		.4byte	.LFE64
 3303 0010 00000000 		.4byte	.LFB65
 3304 0014 9C000000 		.4byte	.LFE65
 3305 0018 00000000 		.4byte	.LFB66
 3306 001c 50000000 		.4byte	.LFE66
 3307 0020 00000000 		.4byte	.LFB67
 3308 0024 740A0000 		.4byte	.LFE67
 3309 0028 00000000 		.4byte	.LFB68
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 71


 3310 002c 30010000 		.4byte	.LFE68
 3311 0030 00000000 		.4byte	0
 3312 0034 00000000 		.4byte	0
 3313              		.section	.debug_line,"",%progbits
 3314              	.Ldebug_line0:
 3315 0000 6F030000 		.section	.debug_str,"MS",%progbits,1
 3315      02009501 
 3315      00000201 
 3315      FB0E0D00 
 3315      01010101 
 3316              	.LASF63:
 3317 0000 64657363 		.ascii	"descent_time\000"
 3317      656E745F 
 3317      74696D65 
 3317      00
 3318              	.LASF29:
 3319 000d 52455355 		.ascii	"RESURFACE\000"
 3319      52464143 
 3319      4500
 3320              	.LASF74:
 3321 0017 6D73675F 		.ascii	"msg_count\000"
 3321      636F756E 
 3321      7400
 3322              	.LASF72:
 3323 0021 75706461 		.ascii	"update_Data\000"
 3323      74655F44 
 3323      61746100 
 3324              	.LASF73:
 3325 002d 52784275 		.ascii	"RxBuffer\000"
 3325      66666572 
 3325      00
 3326              	.LASF25:
 3327 0036 53595354 		.ascii	"SYSTEM_CHECK\000"
 3327      454D5F43 
 3327      4845434B 
 3327      00
 3328              	.LASF32:
 3329 0043 53544154 		.ascii	"STATES\000"
 3329      455300
 3330              	.LASF55:
 3331 004a 73646275 		.ascii	"sdbuf\000"
 3331      6600
 3332              	.LASF60:
 3333 0050 41646472 		.ascii	"Addr\000"
 3333      00
 3334              	.LASF58:
 3335 0055 64657641 		.ascii	"devAddr\000"
 3335      64647200 
 3336              	.LASF78:
 3337 005d 7472616E 		.ascii	"transmit_flag\000"
 3337      736D6974 
 3337      5F666C61 
 3337      6700
 3338              	.LASF54:
 3339 006b 6F6E6573 		.ascii	"ones\000"
 3339      00
 3340              	.LASF28:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 72


 3341 0070 4C414E44 		.ascii	"LANDED\000"
 3341      454400
 3342              	.LASF77:
 3343 0077 64617461 		.ascii	"dataflag\000"
 3343      666C6167 
 3343      00
 3344              	.LASF93:
 3345 0080 66696C65 		.ascii	"filename\000"
 3345      6E616D65 
 3345      00
 3346              	.LASF33:
 3347 0089 4D6F6973 		.ascii	"Moisture_ISR_Handler\000"
 3347      74757265 
 3347      5F495352 
 3347      5F48616E 
 3347      646C6572 
 3348              	.LASF46:
 3349 009e 76616375 		.ascii	"vacuumbuf\000"
 3349      756D6275 
 3349      6600
 3350              	.LASF85:
 3351 00a8 66696C65 		.ascii	"file\000"
 3351      00
 3352              	.LASF41:
 3353 00ad 70726573 		.ascii	"pressure_avg\000"
 3353      73757265 
 3353      5F617667 
 3353      00
 3354              	.LASF4:
 3355 00ba 73686F72 		.ascii	"short int\000"
 3355      7420696E 
 3355      7400
 3356              	.LASF69:
 3357 00c4 50414E49 		.ascii	"PANIC_flag\000"
 3357      435F666C 
 3357      616700
 3358              	.LASF82:
 3359 00cf 79617667 		.ascii	"yavg\000"
 3359      00
 3360              	.LASF13:
 3361 00d4 75696E74 		.ascii	"uint8_t\000"
 3361      385F7400 
 3362              	.LASF50:
 3363 00dc 70756C73 		.ascii	"pulse\000"
 3363      6500
 3364              	.LASF37:
 3365 00e2 64656369 		.ascii	"decimals\000"
 3365      6D616C73 
 3365      00
 3366              	.LASF18:
 3367 00eb 666C6F61 		.ascii	"float\000"
 3367      7400
 3368              	.LASF49:
 3369 00f1 73746174 		.ascii	"stateMsgCount\000"
 3369      654D7367 
 3369      436F756E 
 3369      7400
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 73


 3370              	.LASF10:
 3371 00ff 6C6F6E67 		.ascii	"long long int\000"
 3371      206C6F6E 
 3371      6720696E 
 3371      7400
 3372              	.LASF65:
 3373 010d 61766572 		.ascii	"average\000"
 3373      61676500 
 3374              	.LASF30:
 3375 0115 5452414E 		.ascii	"TRANSMIT\000"
 3375      534D4954 
 3375      00
 3376              	.LASF88:
 3377 011e 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 3377      4320342E 
 3377      392E3320 
 3377      32303135 
 3377      30333033 
 3378 0151 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 3378      20726576 
 3378      6973696F 
 3378      6E203232 
 3378      31323230 
 3379 0184 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 3379      66756E63 
 3379      74696F6E 
 3379      2D736563 
 3379      74696F6E 
 3380              	.LASF53:
 3381 01ac 74656E73 		.ascii	"tens\000"
 3381      00
 3382              	.LASF38:
 3383 01b1 766F6C74 		.ascii	"voltage\000"
 3383      61676500 
 3384              	.LASF86:
 3385 01b9 766F6C75 		.ascii	"volume\000"
 3385      6D6500
 3386              	.LASF61:
 3387 01c0 70726573 		.ascii	"press_id\000"
 3387      735F6964 
 3387      00
 3388              	.LASF51:
 3389 01c9 73656373 		.ascii	"secs_for_tilt\000"
 3389      5F666F72 
 3389      5F74696C 
 3389      7400
 3390              	.LASF48:
 3391 01d7 7472616E 		.ascii	"transbuf\000"
 3391      73627566 
 3391      00
 3392              	.LASF31:
 3393 01e0 4552524F 		.ascii	"ERROR\000"
 3393      5200
 3394              	.LASF64:
 3395 01e6 70726573 		.ascii	"pressure_sum\000"
 3395      73757265 
 3395      5F73756D 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 74


 3395      00
 3396              	.LASF24:
 3397 01f3 6C6F6E67 		.ascii	"long double\000"
 3397      20646F75 
 3397      626C6500 
 3398              	.LASF26:
 3399 01ff 57414954 		.ascii	"WAIT_TO_LAUNCH\000"
 3399      5F544F5F 
 3399      4C41554E 
 3399      434800
 3400              	.LASF1:
 3401 020e 756E7369 		.ascii	"unsigned char\000"
 3401      676E6564 
 3401      20636861 
 3401      7200
 3402              	.LASF23:
 3403 021c 46535F46 		.ascii	"FS_FILE\000"
 3403      494C4500 
 3404              	.LASF71:
 3405 0224 636F756E 		.ascii	"countdown\000"
 3405      74646F77 
 3405      6E00
 3406              	.LASF0:
 3407 022e 7369676E 		.ascii	"signed char\000"
 3407      65642063 
 3407      68617200 
 3408              	.LASF11:
 3409 023a 6C6F6E67 		.ascii	"long long unsigned int\000"
 3409      206C6F6E 
 3409      6720756E 
 3409      7369676E 
 3409      65642069 
 3410              	.LASF16:
 3411 0251 75696E74 		.ascii	"uint32_t\000"
 3411      33325F74 
 3411      00
 3412              	.LASF62:
 3413 025a 64617461 		.ascii	"data_time\000"
 3413      5F74696D 
 3413      6500
 3414              	.LASF12:
 3415 0264 756E7369 		.ascii	"unsigned int\000"
 3415      676E6564 
 3415      20696E74 
 3415      00
 3416              	.LASF39:
 3417 0271 74656D70 		.ascii	"temp\000"
 3417      00
 3418              	.LASF90:
 3419 0276 433A5C55 		.ascii	"C:\\Users\\gstoll\\Desktop\\Project_O-Vac\\OVac.cyd"
 3419      73657273 
 3419      5C677374 
 3419      6F6C6C5C 
 3419      4465736B 
 3420 02a4 736E00   		.ascii	"sn\000"
 3421              	.LASF83:
 3422 02a7 7873756D 		.ascii	"xsum\000"
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 75


 3422      00
 3423              	.LASF20:
 3424 02ac 63686172 		.ascii	"char\000"
 3424      00
 3425              	.LASF7:
 3426 02b1 6C6F6E67 		.ascii	"long int\000"
 3426      20696E74 
 3426      00
 3427              	.LASF91:
 3428 02ba 6D61696E 		.ascii	"main\000"
 3428      00
 3429              	.LASF15:
 3430 02bf 696E7433 		.ascii	"int32_t\000"
 3430      325F7400 
 3431              	.LASF5:
 3432 02c7 73686F72 		.ascii	"short unsigned int\000"
 3432      7420756E 
 3432      7369676E 
 3432      65642069 
 3432      6E7400
 3433              	.LASF14:
 3434 02da 696E7431 		.ascii	"int16_t\000"
 3434      365F7400 
 3435              	.LASF17:
 3436 02e2 75696E74 		.ascii	"uint8\000"
 3436      3800
 3437              	.LASF67:
 3438 02e8 5F426F6F 		.ascii	"_Bool\000"
 3438      6C00
 3439              	.LASF80:
 3440 02ee 72657365 		.ascii	"reset\000"
 3440      7400
 3441              	.LASF43:
 3442 02f4 63757253 		.ascii	"curState\000"
 3442      74617465 
 3442      00
 3443              	.LASF79:
 3444 02fd 64657074 		.ascii	"depth\000"
 3444      6800
 3445              	.LASF52:
 3446 0303 7A5F6F66 		.ascii	"z_offset\000"
 3446      66736574 
 3446      00
 3447              	.LASF47:
 3448 030c 72657375 		.ascii	"resurfbuf\000"
 3448      72666275 
 3448      6600
 3449              	.LASF75:
 3450 0316 7278666C 		.ascii	"rxflag\000"
 3450      616700
 3451              	.LASF59:
 3452 031d 62756666 		.ascii	"buffer\000"
 3452      657200
 3453              	.LASF35:
 3454 0324 436F756E 		.ascii	"Countdown_ISR_Handler\000"
 3454      74646F77 
 3454      6E5F4953 
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 76


 3454      525F4861 
 3454      6E646C65 
 3455              	.LASF89:
 3456 033a 6D61696E 		.ascii	"main.c\000"
 3456      2E6300
 3457              	.LASF21:
 3458 0341 72656738 		.ascii	"reg8\000"
 3458      00
 3459              	.LASF9:
 3460 0346 6C6F6E67 		.ascii	"long unsigned int\000"
 3460      20756E73 
 3460      69676E65 
 3460      6420696E 
 3460      7400
 3461              	.LASF27:
 3462 0358 44455343 		.ascii	"DESCENDING\000"
 3462      454E4449 
 3462      4E4700
 3463              	.LASF76:
 3464 0363 62797465 		.ascii	"bytes\000"
 3464      7300
 3465              	.LASF19:
 3466 0369 646F7562 		.ascii	"double\000"
 3466      6C6500
 3467              	.LASF8:
 3468 0370 5F5F7569 		.ascii	"__uint32_t\000"
 3468      6E743332 
 3468      5F7400
 3469              	.LASF42:
 3470 037b 74656D70 		.ascii	"tempbuf\000"
 3470      62756600 
 3471              	.LASF6:
 3472 0383 5F5F696E 		.ascii	"__int32_t\000"
 3472      7433325F 
 3472      7400
 3473              	.LASF3:
 3474 038d 5F5F696E 		.ascii	"__int16_t\000"
 3474      7431365F 
 3474      7400
 3475              	.LASF44:
 3476 0397 64657363 		.ascii	"descendbuf\000"
 3476      656E6462 
 3476      756600
 3477              	.LASF22:
 3478 03a2 73697A65 		.ascii	"sizetype\000"
 3478      74797065 
 3478      00
 3479              	.LASF70:
 3480 03ab 53544154 		.ascii	"STATE\000"
 3480      4500
 3481              	.LASF40:
 3482 03b1 6F757470 		.ascii	"output\000"
 3482      757400
 3483              	.LASF84:
 3484 03b8 7973756D 		.ascii	"ysum\000"
 3484      00
 3485              	.LASF66:
ARM GAS  C:\Users\gstoll\AppData\Local\Temp\ccKSCNTx.s 			page 77


 3486 03bd 636F6C6C 		.ascii	"collect_flag\000"
 3486      6563745F 
 3486      666C6167 
 3486      00
 3487              	.LASF36:
 3488 03ca 72785F69 		.ascii	"rx_interrupt\000"
 3488      6E746572 
 3488      72757074 
 3488      00
 3489              	.LASF57:
 3490 03d7 49544D5F 		.ascii	"ITM_RxBuffer\000"
 3490      52784275 
 3490      66666572 
 3490      00
 3491              	.LASF92:
 3492 03e4 53445F53 		.ascii	"SD_SETUP\000"
 3492      45545550 
 3492      00
 3493              	.LASF56:
 3494 03ed 73756363 		.ascii	"success\000"
 3494      65737300 
 3495              	.LASF81:
 3496 03f5 78617667 		.ascii	"xavg\000"
 3496      00
 3497              	.LASF34:
 3498 03fa 53616D70 		.ascii	"Sample_ISR_Handler\000"
 3498      6C655F49 
 3498      53525F48 
 3498      616E646C 
 3498      657200
 3499              	.LASF87:
 3500 040d 66736669 		.ascii	"fsfile\000"
 3500      6C6500
 3501              	.LASF45:
 3502 0414 6C616E64 		.ascii	"landedbuf\000"
 3502      65646275 
 3502      6600
 3503              	.LASF68:
 3504 041e 77616974 		.ascii	"wait_flag\000"
 3504      5F666C61 
 3504      6700
 3505              	.LASF2:
 3506 0428 5F5F7569 		.ascii	"__uint8_t\000"
 3506      6E74385F 
 3506      7400
 3507              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br

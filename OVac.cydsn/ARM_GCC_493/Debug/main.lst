ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 6
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"main.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.comm	devAddr,1,1
  19              		.comm	buffer,22,4
  20              		.global	Addr
  21              		.data
  22              		.align	2
  23              		.type	Addr, %object
  24              		.size	Addr, 4
  25              	Addr:
  26 0000 3F000000 		.word	63
  27              		.global	id
  28              		.align	2
  29              		.type	id, %object
  30              		.size	id, 4
  31              	id:
  32 0004 01000000 		.word	1
  33              		.global	data_time
  34              		.bss
  35              		.align	2
  36              		.type	data_time, %object
  37              		.size	data_time, 4
  38              	data_time:
  39 0000 00000000 		.space	4
  40              		.global	sum
  41              		.align	2
  42              		.type	sum, %object
  43              		.size	sum, 4
  44              	sum:
  45 0004 00000000 		.space	4
  46              		.global	average
  47              		.align	1
  48              		.type	average, %object
  49              		.size	average, 2
  50              	average:
  51 0008 0000     		.space	2
  52              		.global	collect_flag
  53              		.type	collect_flag, %object
  54              		.size	collect_flag, 1
  55              	collect_flag:
  56 000a 00       		.space	1
  57              		.global	wait_flag
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 2


  58              		.type	wait_flag, %object
  59              		.size	wait_flag, 1
  60              	wait_flag:
  61 000b 00       		.space	1
  62              		.global	PANIC_flag
  63              		.type	PANIC_flag, %object
  64              		.size	PANIC_flag, 1
  65              	PANIC_flag:
  66 000c 00       		.space	1
  67              		.global	STATE
  68              		.data
  69              		.type	STATE, %object
  70              		.size	STATE, 1
  71              	STATE:
  72 0008 01       		.byte	1
  73              		.global	testnum
  74              		.type	testnum, %object
  75              		.size	testnum, 1
  76              	testnum:
  77 0009 01       		.byte	1
  78              		.global	countdown
  79              		.bss
  80              		.type	countdown, %object
  81              		.size	countdown, 1
  82              	countdown:
  83 000d 00       		.space	1
  84              		.global	RxBuffer
  85 000e 0000     		.align	2
  86              		.type	RxBuffer, %object
  87              		.size	RxBuffer, 64
  88              	RxBuffer:
  89 0010 00000000 		.space	64
  89      00000000 
  89      00000000 
  89      00000000 
  89      00000000 
  90              		.global	j
  91              		.align	2
  92              		.type	j, %object
  93              		.size	j, 4
  94              	j:
  95 0050 00000000 		.space	4
  96              		.global	rxflag
  97              		.align	2
  98              		.type	rxflag, %object
  99              		.size	rxflag, 4
 100              	rxflag:
 101 0054 00000000 		.space	4
 102              		.global	bytes
 103              		.align	2
 104              		.type	bytes, %object
 105              		.size	bytes, 4
 106              	bytes:
 107 0058 00000000 		.space	4
 108              		.global	file
 109              		.data
 110 000a 0000     		.align	2
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 3


 111              		.type	file, %object
 112              		.size	file, 11
 113              	file:
 114 000c 74657374 		.ascii	"test_1.txt\000"
 114      5F312E74 
 114      787400
 115              		.global	volume
 116 0017 00       		.bss
 117              		.align	2
 118              		.type	volume, %object
 119              		.size	volume, 10
 120              	volume:
 121 005c 00000000 		.space	10
 121      00000000 
 121      0000
 122              		.comm	fsfile,4,4
 123 0066 0000     		.section	.text.Reset_system,"ax",%progbits
 124              		.align	2
 125              		.global	Reset_system
 126              		.thumb
 127              		.thumb_func
 128              		.type	Reset_system, %function
 129              	Reset_system:
 130              	.LFB63:
 131              		.file 1 "main.c"
   1:main.c        **** /*******************************************************************************
   2:main.c        **** * File Name: main.c
   3:main.c        **** *
   4:main.c        **** * Version: 2.20
   5:main.c        **** *
   6:main.c        **** * Description:
   7:main.c        **** *   This is a source code for example project of ADC single ended mode.
   8:main.c        **** *
   9:main.c        **** *   Variable resistor(pot) is connected to +ve input of ADC using the I/O pin.
  10:main.c        **** *   P0.0. When voltage to positive terminal of ADC is 0, the output displayed
  11:main.c        **** *   on the LCD pannel is 0x0000. As voltage on positive terminal goes on
  12:main.c        **** *   increasing, the  converted value goes on increasing from 0x0000 and reaches
  13:main.c        **** *   0xFFFF when voltage becomes 1.024V. Futher increase in voltage value,
  14:main.c        **** *   doesn't cause any changes to values displayed in the LCD.
  15:main.c        **** *
  16:main.c        **** * Hardware Connections: 
  17:main.c        **** *  Connect analog input from Variable resistor to port P0[0] of DVK1 board.
  18:main.c        **** *
  19:main.c        **** ********************************************************************************
  20:main.c        **** * Copyright 2012-2015, Cypress Semiconductor Corporation. All rights reserved.
  21:main.c        **** * This software is owned by Cypress Semiconductor Corporation and is protected
  22:main.c        **** * by and subject to worldwide patent and copyright laws and treaties.
  23:main.c        **** * Therefore, you may use this software only as provided in the license agreement
  24:main.c        **** * accompanying the software package from which you obtained this software.
  25:main.c        **** * CYPRESS AND ITS SUPPLIERS MAKE NO WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  26:main.c        **** * WITH REGARD TO THIS SOFTWARE, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT,
  27:main.c        **** * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
  28:main.c        **** *******************************************************************************/
  29:main.c        **** 
  30:main.c        **** #include <project.h>
  31:main.c        **** #include <mpu6050.h>
  32:main.c        **** #include <stdio.h>
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 4


  33:main.c        **** #include <string.h>
  34:main.c        **** #include <FS.h>
  35:main.c        **** #include "LiquidCrystal_I2C.h"
  36:main.c        **** #include "functions.h"
  37:main.c        **** 
  38:main.c        **** //#define MPU6050 
  39:main.c        **** //#define LCD
  40:main.c        **** //#define SD
  41:main.c        **** 
  42:main.c        **** #define MA_WINDOW 15                    // Number of samples in the moving average window.
  43:main.c        **** #define BOT_THRESHOLD 20000             // Z-Aacceleration threshold for transition into LANDED sta
  44:main.c        **** #define WAIT_TIME 1000                  // Number of ISR calls until transition into DESCENDING sta
  45:main.c        **** #define DATA_TIME 5000                  // Number of ISR calls until transition into WAIT_TO_LAUNCH
  46:main.c        **** #define BUFFER_LEN  64u                 // Buffer length for UART rx
  47:main.c        **** 
  48:main.c        **** 
  49:main.c        **** uint32_t Addr = 0x3F;                       // I2C address of LCD.
  50:main.c        **** long id = 1;                                // Interrupt count.
  51:main.c        **** long data_time = 0;                        // data point num
  52:main.c        **** 
  53:main.c        **** long sum = 0;                               // Sum of accelerometer values. 
  54:main.c        **** int16_t average = 0;                        // Moving average variable.
  55:main.c        **** bool collect_flag = 0;                      // flag indicating when to record acceleration sample.
  56:main.c        **** bool wait_flag = 0;                         // flag indicating when to increment interrupt counter.
  57:main.c        **** bool PANIC_flag = 0;                        // flag indicating water is present in housing.
  58:main.c        **** //bool first_test = 1;                        // flag indicating first test(longer countdown)
  59:main.c        **** STATES STATE = WAIT_TO_LAUNCH;         // Set initial state. 
  60:main.c        **** uint8_t testnum = 1, countdown = 0;
  61:main.c        **** uint8_t RxBuffer[BUFFER_LEN] = {};            // Rx Buffer
  62:main.c        **** int j = 0, rxflag = 0, bytes = 0;    // UART variables
  63:main.c        **** char file[11] = "test_1.txt";
  64:main.c        **** char volume[10] = {};
  65:main.c        **** FS_FILE *fsfile;
  66:main.c        **** 
  67:main.c        **** /*******************************************************************************
  68:main.c        **** * Function Name: main
  69:main.c        **** ********************************************************************************
  70:main.c        **** *
  71:main.c        **** * Summary:
  72:main.c        **** *  main() performs following functions:
  73:main.c        **** *  1: Initializes the LCD.
  74:main.c        **** *  2: Initializes timer module and sampling interrupt.
  75:main.c        **** *  3: Initializes MPU6050 Accelerometer/Gyroscope module.
  76:main.c        **** *  4: Samples Z-axis acceleration data from module @ 500hz.
  77:main.c        **** *  5: Computes moving average of Z-axis acceleration values.
  78:main.c        **** *  6: Transitions from DESCENDING to LANDED state when sudden acceleration occurs
  79:main.c        **** *     (ie. moving average > 200000).
  80:main.c        **** *
  81:main.c        **** * Parameters:
  82:main.c        **** *  None.
  83:main.c        **** *
  84:main.c        **** * Return:
  85:main.c        **** *  None.
  86:main.c        **** *
  87:main.c        **** *******************************************************************************/
  88:main.c        **** /* Reset funciton*/
  89:main.c        **** void Reset_system(){
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 5


 132              		.loc 1 89 0
 133              		.cfi_startproc
 134              		@ args = 0, pretend = 0, frame = 0
 135              		@ frame_needed = 1, uses_anonymous_args = 0
 136              		@ link register save eliminated.
 137 0000 80B4     		push	{r7}
 138              		.cfi_def_cfa_offset 4
 139              		.cfi_offset 7, -4
 140 0002 00AF     		add	r7, sp, #0
 141              		.cfi_def_cfa_register 7
  90:main.c        ****     id = 1;                                // Interrupt count.
 142              		.loc 1 90 0
 143 0004 104B     		ldr	r3, .L2
 144 0006 0122     		movs	r2, #1
 145 0008 1A60     		str	r2, [r3]
  91:main.c        ****     data_time = 0;                        // data point num
 146              		.loc 1 91 0
 147 000a 104B     		ldr	r3, .L2+4
 148 000c 0022     		movs	r2, #0
 149 000e 1A60     		str	r2, [r3]
  92:main.c        **** 
  93:main.c        ****     sum = 0;                               // Sum of accelerometer values. 
 150              		.loc 1 93 0
 151 0010 0F4B     		ldr	r3, .L2+8
 152 0012 0022     		movs	r2, #0
 153 0014 1A60     		str	r2, [r3]
  94:main.c        ****     average = 0;                        // Moving average variable.
 154              		.loc 1 94 0
 155 0016 0F4B     		ldr	r3, .L2+12
 156 0018 0022     		movs	r2, #0
 157 001a 1A80     		strh	r2, [r3]	@ movhi
  95:main.c        ****     collect_flag = 0;                      // flag indicating when to record acceleration sample.
 158              		.loc 1 95 0
 159 001c 0E4B     		ldr	r3, .L2+16
 160 001e 0022     		movs	r2, #0
 161 0020 1A70     		strb	r2, [r3]
  96:main.c        ****     wait_flag = 0;                         // flag indicating when to increment interrupt counter.
 162              		.loc 1 96 0
 163 0022 0E4B     		ldr	r3, .L2+20
 164 0024 0022     		movs	r2, #0
 165 0026 1A70     		strb	r2, [r3]
  97:main.c        ****     PANIC_flag = 0;                        // flag indicating water is present in housing.
 166              		.loc 1 97 0
 167 0028 0D4B     		ldr	r3, .L2+24
 168 002a 0022     		movs	r2, #0
 169 002c 1A70     		strb	r2, [r3]
  98:main.c        **** //bool first_test = 1;                        // flag indicating first test(longer countdown)
  99:main.c        ****     STATE = WAIT_TO_LAUNCH;             // Set initial state. 
 170              		.loc 1 99 0
 171 002e 0D4B     		ldr	r3, .L2+28
 172 0030 0122     		movs	r2, #1
 173 0032 1A70     		strb	r2, [r3]
 100:main.c        ****     testnum = 1, countdown = 0;
 174              		.loc 1 100 0
 175 0034 0C4B     		ldr	r3, .L2+32
 176 0036 0122     		movs	r2, #1
 177 0038 1A70     		strb	r2, [r3]
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 6


 178 003a 0C4B     		ldr	r3, .L2+36
 179 003c 0022     		movs	r2, #0
 180 003e 1A70     		strb	r2, [r3]
 101:main.c        **** }
 181              		.loc 1 101 0
 182 0040 BD46     		mov	sp, r7
 183              		.cfi_def_cfa_register 13
 184              		@ sp needed
 185 0042 5DF8047B 		ldr	r7, [sp], #4
 186              		.cfi_restore 7
 187              		.cfi_def_cfa_offset 0
 188 0046 7047     		bx	lr
 189              	.L3:
 190              		.align	2
 191              	.L2:
 192 0048 00000000 		.word	id
 193 004c 00000000 		.word	data_time
 194 0050 00000000 		.word	sum
 195 0054 00000000 		.word	average
 196 0058 00000000 		.word	collect_flag
 197 005c 00000000 		.word	wait_flag
 198 0060 00000000 		.word	PANIC_flag
 199 0064 00000000 		.word	STATE
 200 0068 00000000 		.word	testnum
 201 006c 00000000 		.word	countdown
 202              		.cfi_endproc
 203              	.LFE63:
 204              		.size	Reset_system, .-Reset_system
 205              		.section	.text.Moisture_ISR_Handler,"ax",%progbits
 206              		.align	2
 207              		.global	Moisture_ISR_Handler
 208              		.thumb
 209              		.thumb_func
 210              		.type	Moisture_ISR_Handler, %function
 211              	Moisture_ISR_Handler:
 212              	.LFB64:
 102:main.c        **** 
 103:main.c        **** /* Moisture sensor ISR */
 104:main.c        **** CY_ISR (Moisture_ISR_Handler){
 213              		.loc 1 104 0
 214              		.cfi_startproc
 215              		@ args = 0, pretend = 0, frame = 0
 216              		@ frame_needed = 1, uses_anonymous_args = 0
 217 0000 80B5     		push	{r7, lr}
 218              		.cfi_def_cfa_offset 8
 219              		.cfi_offset 7, -8
 220              		.cfi_offset 14, -4
 221 0002 00AF     		add	r7, sp, #0
 222              		.cfi_def_cfa_register 7
 105:main.c        ****     PANIC_flag = 1;                             // Set flag to indicate water
 223              		.loc 1 105 0
 224 0004 044B     		ldr	r3, .L5
 225 0006 0122     		movs	r2, #1
 226 0008 1A70     		strb	r2, [r3]
 106:main.c        ****     STATE = RESURFACE;                          // Go to surface
 227              		.loc 1 106 0
 228 000a 044B     		ldr	r3, .L5+4
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 7


 229 000c 0422     		movs	r2, #4
 230 000e 1A70     		strb	r2, [r3]
 107:main.c        ****     Comp_Stop();                                // Stop comparator for interrupt
 231              		.loc 1 107 0
 232 0010 FFF7FEFF 		bl	Comp_Stop
 108:main.c        **** }
 233              		.loc 1 108 0
 234 0014 80BD     		pop	{r7, pc}
 235              	.L6:
 236 0016 00BF     		.align	2
 237              	.L5:
 238 0018 00000000 		.word	PANIC_flag
 239 001c 00000000 		.word	STATE
 240              		.cfi_endproc
 241              	.LFE64:
 242              		.size	Moisture_ISR_Handler, .-Moisture_ISR_Handler
 243              		.section	.text.Sample_ISR_Handler,"ax",%progbits
 244              		.align	2
 245              		.global	Sample_ISR_Handler
 246              		.thumb
 247              		.thumb_func
 248              		.type	Sample_ISR_Handler, %function
 249              	Sample_ISR_Handler:
 250              	.LFB65:
 109:main.c        **** 
 110:main.c        **** /* Sampling ISR */
 111:main.c        **** CY_ISR (Sample_ISR_Handler){
 251              		.loc 1 111 0
 252              		.cfi_startproc
 253              		@ args = 0, pretend = 0, frame = 0
 254              		@ frame_needed = 1, uses_anonymous_args = 0
 255              		@ link register save eliminated.
 256 0000 80B4     		push	{r7}
 257              		.cfi_def_cfa_offset 4
 258              		.cfi_offset 7, -4
 259 0002 00AF     		add	r7, sp, #0
 260              		.cfi_def_cfa_register 7
 112:main.c        ****     
 113:main.c        ****     Sample_Timer_STATUS;                        // Clears interrupt by accessing timer status regis
 261              		.loc 1 113 0
 262 0004 084B     		ldr	r3, .L9
 263 0006 1B78     		ldrb	r3, [r3]
 114:main.c        ****     if (STATE == DESCENDING){ 
 264              		.loc 1 114 0
 265 0008 084B     		ldr	r3, .L9+4
 266 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 267 000c 022B     		cmp	r3, #2
 268 000e 07D1     		bne	.L7
 115:main.c        ****         collect_flag = 1;
 269              		.loc 1 115 0
 270 0010 074B     		ldr	r3, .L9+8
 271 0012 0122     		movs	r2, #1
 272 0014 1A70     		strb	r2, [r3]
 116:main.c        ****         data_time++;
 273              		.loc 1 116 0
 274 0016 074B     		ldr	r3, .L9+12
 275 0018 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 8


 276 001a 0133     		adds	r3, r3, #1
 277 001c 054A     		ldr	r2, .L9+12
 278 001e 1360     		str	r3, [r2]
 279              	.L7:
 117:main.c        ****     }
 118:main.c        **** }
 280              		.loc 1 118 0
 281 0020 BD46     		mov	sp, r7
 282              		.cfi_def_cfa_register 13
 283              		@ sp needed
 284 0022 5DF8047B 		ldr	r7, [sp], #4
 285              		.cfi_restore 7
 286              		.cfi_def_cfa_offset 0
 287 0026 7047     		bx	lr
 288              	.L10:
 289              		.align	2
 290              	.L9:
 291 0028 034F0040 		.word	1073762051
 292 002c 00000000 		.word	STATE
 293 0030 00000000 		.word	collect_flag
 294 0034 00000000 		.word	data_time
 295              		.cfi_endproc
 296              	.LFE65:
 297              		.size	Sample_ISR_Handler, .-Sample_ISR_Handler
 298              		.section	.text.Countdown_ISR_Handler,"ax",%progbits
 299              		.align	2
 300              		.global	Countdown_ISR_Handler
 301              		.thumb
 302              		.thumb_func
 303              		.type	Countdown_ISR_Handler, %function
 304              	Countdown_ISR_Handler:
 305              	.LFB66:
 119:main.c        **** 
 120:main.c        **** /* Countdown ISR*/
 121:main.c        **** CY_ISR (Countdown_ISR_Handler){
 306              		.loc 1 121 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 1, uses_anonymous_args = 0
 310              		@ link register save eliminated.
 311 0000 80B4     		push	{r7}
 312              		.cfi_def_cfa_offset 4
 313              		.cfi_offset 7, -4
 314 0002 00AF     		add	r7, sp, #0
 315              		.cfi_def_cfa_register 7
 122:main.c        ****     
 123:main.c        ****     Countdown_timer_STATUS;                        // Clears interrupt by accessing timer status re
 316              		.loc 1 123 0
 317 0004 0D4B     		ldr	r3, .L14
 318 0006 1B78     		ldrb	r3, [r3]
 124:main.c        ****     if (STATE == WAIT_TO_LAUNCH){ 
 319              		.loc 1 124 0
 320 0008 0D4B     		ldr	r3, .L14+4
 321 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 322 000c 012B     		cmp	r3, #1
 323 000e 09D1     		bne	.L12
 125:main.c        ****         wait_flag = 1;
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 9


 324              		.loc 1 125 0
 325 0010 0C4B     		ldr	r3, .L14+8
 326 0012 0122     		movs	r2, #1
 327 0014 1A70     		strb	r2, [r3]
 126:main.c        ****         countdown++;
 328              		.loc 1 126 0
 329 0016 0C4B     		ldr	r3, .L14+12
 330 0018 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 331 001a 0133     		adds	r3, r3, #1
 332 001c DAB2     		uxtb	r2, r3
 333 001e 0A4B     		ldr	r3, .L14+12
 334 0020 1A70     		strb	r2, [r3]
 335 0022 06E0     		b	.L11
 336              	.L12:
 127:main.c        ****     }
 128:main.c        ****     else  if (STATE == DESCENDING){
 337              		.loc 1 128 0
 338 0024 064B     		ldr	r3, .L14+4
 339 0026 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 340 0028 022B     		cmp	r3, #2
 341 002a 02D1     		bne	.L11
 129:main.c        ****         wait_flag = 1;
 342              		.loc 1 129 0
 343 002c 054B     		ldr	r3, .L14+8
 344 002e 0122     		movs	r2, #1
 345 0030 1A70     		strb	r2, [r3]
 346              	.L11:
 130:main.c        ****     }
 131:main.c        **** }
 347              		.loc 1 131 0
 348 0032 BD46     		mov	sp, r7
 349              		.cfi_def_cfa_register 13
 350              		@ sp needed
 351 0034 5DF8047B 		ldr	r7, [sp], #4
 352              		.cfi_restore 7
 353              		.cfi_def_cfa_offset 0
 354 0038 7047     		bx	lr
 355              	.L15:
 356 003a 00BF     		.align	2
 357              	.L14:
 358 003c 6B640040 		.word	1073767531
 359 0040 00000000 		.word	STATE
 360 0044 00000000 		.word	wait_flag
 361 0048 00000000 		.word	countdown
 362              		.cfi_endproc
 363              	.LFE66:
 364              		.size	Countdown_ISR_Handler, .-Countdown_ISR_Handler
 365              		.section	.text.rx_interrupt,"ax",%progbits
 366              		.align	2
 367              		.global	rx_interrupt
 368              		.thumb
 369              		.thumb_func
 370              		.type	rx_interrupt, %function
 371              	rx_interrupt:
 372              	.LFB67:
 132:main.c        **** 
 133:main.c        **** CY_ISR(rx_interrupt){
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 10


 373              		.loc 1 133 0
 374              		.cfi_startproc
 375              		@ args = 0, pretend = 0, frame = 0
 376              		@ frame_needed = 1, uses_anonymous_args = 0
 377 0000 98B5     		push	{r3, r4, r7, lr}
 378              		.cfi_def_cfa_offset 16
 379              		.cfi_offset 3, -16
 380              		.cfi_offset 4, -12
 381              		.cfi_offset 7, -8
 382              		.cfi_offset 14, -4
 383 0002 00AF     		add	r7, sp, #0
 384              		.cfi_def_cfa_register 7
 134:main.c        ****     while (UART_ReadRxStatus() & UART_RX_STS_FIFO_NOTEMPTY){
 385              		.loc 1 134 0
 386 0004 14E0     		b	.L17
 387              	.L18:
 135:main.c        ****         RxBuffer[j++] = UART_GetChar();
 388              		.loc 1 135 0
 389 0006 0E4B     		ldr	r3, .L19
 390 0008 1C68     		ldr	r4, [r3]
 391 000a 631C     		adds	r3, r4, #1
 392 000c 0C4A     		ldr	r2, .L19
 393 000e 1360     		str	r3, [r2]
 394 0010 FFF7FEFF 		bl	UART_GetChar
 395 0014 0346     		mov	r3, r0
 396 0016 1A46     		mov	r2, r3
 397 0018 0A4B     		ldr	r3, .L19+4
 398 001a 1A55     		strb	r2, [r3, r4]
 136:main.c        ****         if ((j - 3) == bytes)
 399              		.loc 1 136 0
 400 001c 084B     		ldr	r3, .L19
 401 001e 1B68     		ldr	r3, [r3]
 402 0020 DA1E     		subs	r2, r3, #3
 403 0022 094B     		ldr	r3, .L19+8
 404 0024 1B68     		ldr	r3, [r3]
 405 0026 9A42     		cmp	r2, r3
 406 0028 02D1     		bne	.L17
 137:main.c        ****             rxflag = 1;
 407              		.loc 1 137 0
 408 002a 084B     		ldr	r3, .L19+12
 409 002c 0122     		movs	r2, #1
 410 002e 1A60     		str	r2, [r3]
 411              	.L17:
 134:main.c        ****         RxBuffer[j++] = UART_GetChar();
 412              		.loc 1 134 0
 413 0030 FFF7FEFF 		bl	UART_ReadRxStatus
 414 0034 0346     		mov	r3, r0
 415 0036 03F02003 		and	r3, r3, #32
 416 003a 002B     		cmp	r3, #0
 417 003c E3D1     		bne	.L18
 138:main.c        ****     }
 139:main.c        **** }
 418              		.loc 1 139 0
 419 003e 98BD     		pop	{r3, r4, r7, pc}
 420              	.L20:
 421              		.align	2
 422              	.L19:
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 11


 423 0040 00000000 		.word	j
 424 0044 00000000 		.word	RxBuffer
 425 0048 00000000 		.word	bytes
 426 004c 00000000 		.word	rxflag
 427              		.cfi_endproc
 428              	.LFE67:
 429              		.size	rx_interrupt, .-rx_interrupt
 430              		.global	__aeabi_i2f
 431              		.global	__aeabi_f2d
 432              		.global	__aeabi_dmul
 433              		.global	__aeabi_d2f
 434              		.global	__aeabi_f2iz
 435              		.global	__aeabi_fsub
 436              		.global	__aeabi_fmul
 437              		.section	.rodata
 438              		.align	2
 439              	.LC1:
 440 0000 57415445 		.ascii	"WATER DETECTED\000"
 440      52204445 
 440      54454354 
 440      454400
 441 000f 00       		.align	2
 442              	.LC0:
 443 0010 53595354 		.ascii	"SYSTEM_CHECK  \000"
 443      454D5F43 
 443      4845434B 
 443      202000
 444 001f 00       		.section	.text.main,"ax",%progbits
 445              		.align	2
 446              		.global	main
 447              		.thumb
 448              		.thumb_func
 449              		.type	main, %function
 450              	main:
 451              	.LFB68:
 140:main.c        **** 
 141:main.c        **** int main()
 142:main.c        **** {
 452              		.loc 1 142 0
 453              		.cfi_startproc
 454              		@ args = 0, pretend = 0, frame = 160
 455              		@ frame_needed = 1, uses_anonymous_args = 0
 456 0000 90B5     		push	{r4, r7, lr}
 457              		.cfi_def_cfa_offset 12
 458              		.cfi_offset 4, -12
 459              		.cfi_offset 7, -8
 460              		.cfi_offset 14, -4
 461 0002 A9B0     		sub	sp, sp, #164
 462              		.cfi_def_cfa_offset 176
 463 0004 00AF     		add	r7, sp, #0
 464              		.cfi_def_cfa_register 7
 143:main.c        ****     LED2_1_Write(1); 
 465              		.loc 1 143 0
 466 0006 0120     		movs	r0, #1
 467 0008 FFF7FEFF 		bl	LED2_1_Write
 144:main.c        ****     float output;
 145:main.c        ****     char buf[50];                               // just to hold text values in for writing to UART
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 12


 146:main.c        ****     
 147:main.c        ****     char curState[14] = "SYSTEM_CHECK  ";
 468              		.loc 1 147 0
 469 000c B84B     		ldr	r3, .L45+8
 470 000e 07F13C04 		add	r4, r7, #60
 471 0012 0FCB     		ldmia	r3, {r0, r1, r2, r3}
 472 0014 07C4     		stmia	r4!, {r0, r1, r2}
 473 0016 2380     		strh	r3, [r4]	@ movhi
 148:main.c        ****     int16_t ax, ay, az, i;
 149:main.c        ****     //int16_t gx, gy, gz;
 150:main.c        ****     int16_t z_offset = 0;
 474              		.loc 1 150 0
 475 0018 0023     		movs	r3, #0
 476 001a A7F89E30 		strh	r3, [r7, #158]	@ movhi
 151:main.c        ****     int tens = 0, ones = 0;                     // digit place variables for message len of bluetoo
 477              		.loc 1 151 0
 478 001e 0023     		movs	r3, #0
 479 0020 C7F89830 		str	r3, [r7, #152]
 480 0024 0023     		movs	r3, #0
 481 0026 C7F89430 		str	r3, [r7, #148]
 152:main.c        ****     
 153:main.c        ****     /* Start the components */
 154:main.c        ****     CYGlobalIntEnable;                          // enable global interrupts
 482              		.loc 1 154 0
 483              	@ 154 "main.c" 1
 484 002a 62B6     		CPSIE   i
 485              	@ 0 "" 2
 155:main.c        ****     //I2C_Master_Start(); 
 156:main.c        ****     //ADC_Start();
 157:main.c        ****     Sample_Timer_Start();                       // start timer module
 486              		.loc 1 157 0
 487              		.thumb
 488 002c FFF7FEFF 		bl	Sample_Timer_Start
 158:main.c        ****     Sample_ISR_StartEx(Sample_ISR_Handler);     // reference ISR function
 489              		.loc 1 158 0
 490 0030 B048     		ldr	r0, .L45+12
 491 0032 FFF7FEFF 		bl	Sample_ISR_StartEx
 159:main.c        ****     rx_interrupt_StartEx(rx_interrupt);
 492              		.loc 1 159 0
 493 0036 B048     		ldr	r0, .L45+16
 494 0038 FFF7FEFF 		bl	rx_interrupt_StartEx
 160:main.c        ****     //moisture_isr_StartEx(Moisture_ISR_Handler); // moisture isr start
 161:main.c        ****     //Comp_Start();                               // comparator for moisture start
 162:main.c        ****     UART_Start();
 495              		.loc 1 162 0
 496 003c FFF7FEFF 		bl	UART_Start
 163:main.c        ****     
 164:main.c        ****     
 165:main.c        ****     #ifdef LCD
 166:main.c        ****         LiquidCrystal_I2C_init(Addr,16,2,0);        // initialize I2C communication with LCD
 167:main.c        ****         begin(); 
 168:main.c        ****     
 169:main.c        ****     #endif
 170:main.c        ****    
 171:main.c        ****     /* initialize MPU6050 */
 172:main.c        ****     #ifdef MPU6050
 173:main.c        ****         MPU6050_init();    
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 13


 174:main.c        **** 	    MPU6050_initialize(); 
 175:main.c        ****     #endif
 176:main.c        ****         
 177:main.c        ****     #ifdef LCD
 178:main.c        ****         /* Startup Display */
 179:main.c        ****         LCD_print("PSoC 5LP: O-Vac");
 180:main.c        ****         setCursor(0,1);
 181:main.c        ****         LCD_print("I2C Working");
 182:main.c        ****         
 183:main.c        ****         CyDelay(1000u);   
 184:main.c        ****         clear();
 185:main.c        ****     #endif
 186:main.c        ****     
 187:main.c        ****     /* Start the ADC conversion */
 188:main.c        ****     ADC_StartConvert();
 497              		.loc 1 188 0
 498 0040 FFF7FEFF 		bl	ADC_StartConvert
 189:main.c        **** 
 190:main.c        ****     /* Start SD card*/
 191:main.c        ****     #ifdef SD
 192:main.c        ****         {
 193:main.c        ****             FS_Init();
 194:main.c        ****             FS_Mount(volume);
 195:main.c        ****             if(0 != FS_GetVolumeName(0u, volume, 9u))
 196:main.c        ****                 /* Getting volume name succeeded so prompt it on the LCD */
 197:main.c        ****                 LCD_print("Sd vol succeed");
 198:main.c        ****             else
 199:main.c        ****                 LCD_print("Sd vol failed");
 200:main.c        ****                 
 201:main.c        ****             CyDelay(500u);
 202:main.c        ****             clear();
 203:main.c        ****             if(0 == FS_FormatSD(volume))
 204:main.c        ****                 LCD_print("format Succeeded");
 205:main.c        ****             else
 206:main.c        ****                 LCD_print("format Failed");
 207:main.c        ****           
 208:main.c        ****             CyDelay(500u);
 209:main.c        ****             clear();
 210:main.c        ****             
 211:main.c        ****             fsfile = FS_FOpen(file, "w");
 212:main.c        ****             if(fsfile)
 213:main.c        ****             {
 214:main.c        ****                 /* Indicate successful file creation message */
 215:main.c        ****                 LCD_print("File ");
 216:main.c        ****                 LCD_print("was opened");
 217:main.c        ****                 /* Need some delay to indicate output on the LCD */
 218:main.c        ****                 CyDelay(500u);
 219:main.c        ****                 clear();
 220:main.c        ****                 
 221:main.c        ****                 if(0 != FS_Write(fsfile, file, strlen(file))) 
 222:main.c        ****                     /* Inditate that data was written to a file */
 223:main.c        ****                     LCD_print("written to file");
 224:main.c        ****                 else
 225:main.c        ****                     LCD_print("Failed to write");
 226:main.c        ****                     clear();
 227:main.c        ****                 CyDelay(500u);
 228:main.c        ****             }
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 14


 229:main.c        ****             else
 230:main.c        ****                 LCD_print("file not created");
 231:main.c        ****         }
 232:main.c        ****         FS_Write(fsfile, "\n------------\n", 14);
 233:main.c        ****     #endif
 234:main.c        ****     
 235:main.c        ****     #ifdef LCD
 236:main.c        ****         /* Display the current State */
 237:main.c        ****         setCursor(0,0);    
 238:main.c        ****         LCD_print(curState);
 239:main.c        ****     #endif
 240:main.c        ****     
 241:main.c        ****     
 242:main.c        **** //    Countdown_timer_Start();
 243:main.c        **** //    countdown_StartEx(Countdown_ISR_Handler);
 244:main.c        ****     int num = 0, decimals = 0;
 499              		.loc 1 244 0
 500 0044 0023     		movs	r3, #0
 501 0046 C7F89030 		str	r3, [r7, #144]
 502 004a 0023     		movs	r3, #0
 503 004c C7F88C30 		str	r3, [r7, #140]
 245:main.c        ****     float voltage = 0, temp = 0;
 504              		.loc 1 245 0
 505 0050 4FF00003 		mov	r3, #0
 506 0054 C7F88830 		str	r3, [r7, #136]	@ float
 507 0058 4FF00003 		mov	r3, #0
 508 005c C7F88430 		str	r3, [r7, #132]	@ float
 509              	.L43:
 246:main.c        ****     
 247:main.c        ****     
 248:main.c        ****     for(;;)
 249:main.c        ****     {       
 250:main.c        ****         if (Reset_Read())
 510              		.loc 1 250 0
 511 0060 FFF7FEFF 		bl	Reset_Read
 512 0064 0346     		mov	r3, r0
 513 0066 002B     		cmp	r3, #0
 514 0068 01D0     		beq	.L22
 251:main.c        ****             Reset_system();
 515              		.loc 1 251 0
 516 006a FFF7FEFF 		bl	Reset_system
 517              	.L22:
 252:main.c        ****         if(ADC_IsEndConversion(ADC_RETURN_STATUS))
 518              		.loc 1 252 0
 519 006e 0120     		movs	r0, #1
 520 0070 FFF7FEFF 		bl	ADC_IsEndConversion
 521 0074 0346     		mov	r3, r0
 522 0076 002B     		cmp	r3, #0
 523 0078 42D0     		beq	.L23
 524              	.LBB2:
 253:main.c        ****         {
 254:main.c        ****             char pressure[50];
 255:main.c        ****             output = ADC_GetResult32();
 525              		.loc 1 255 0
 526 007a FFF7FEFF 		bl	ADC_GetResult32
 527 007e 0346     		mov	r3, r0
 528 0080 1846     		mov	r0, r3
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 15


 529 0082 FFF7FEFF 		bl	__aeabi_i2f
 530 0086 0346     		mov	r3, r0
 531 0088 C7F88030 		str	r3, [r7, #128]	@ float
 256:main.c        ****             
 257:main.c        ****             setCursor(0, 1);
 532              		.loc 1 257 0
 533 008c 0020     		movs	r0, #0
 534 008e 0121     		movs	r1, #1
 535 0090 FFF7FEFF 		bl	setCursor
 258:main.c        ****             voltage = output * (3.32 / 4096);
 536              		.loc 1 258 0
 537 0094 D7F88000 		ldr	r0, [r7, #128]	@ float
 538 0098 FFF7FEFF 		bl	__aeabi_f2d
 539 009c 0246     		mov	r2, r0
 540 009e 0B46     		mov	r3, r1
 541 00a0 1046     		mov	r0, r2
 542 00a2 1946     		mov	r1, r3
 543 00a4 90A3     		adr	r3, .L45
 544 00a6 D3E90023 		ldrd	r2, [r3]
 545 00aa FFF7FEFF 		bl	__aeabi_dmul
 546 00ae 0246     		mov	r2, r0
 547 00b0 0B46     		mov	r3, r1
 548 00b2 1046     		mov	r0, r2
 549 00b4 1946     		mov	r1, r3
 550 00b6 FFF7FEFF 		bl	__aeabi_d2f
 551 00ba 0346     		mov	r3, r0
 552 00bc C7F88830 		str	r3, [r7, #136]	@ float
 259:main.c        ****             num = voltage;
 553              		.loc 1 259 0
 554 00c0 D7F88800 		ldr	r0, [r7, #136]	@ float
 555 00c4 FFF7FEFF 		bl	__aeabi_f2iz
 556 00c8 0346     		mov	r3, r0
 557 00ca C7F89030 		str	r3, [r7, #144]
 260:main.c        ****             temp = voltage - num;
 558              		.loc 1 260 0
 559 00ce D7F89000 		ldr	r0, [r7, #144]
 560 00d2 FFF7FEFF 		bl	__aeabi_i2f
 561 00d6 0346     		mov	r3, r0
 562 00d8 D7F88800 		ldr	r0, [r7, #136]	@ float
 563 00dc 1946     		mov	r1, r3
 564 00de FFF7FEFF 		bl	__aeabi_fsub
 565 00e2 0346     		mov	r3, r0
 566 00e4 C7F88430 		str	r3, [r7, #132]	@ float
 261:main.c        ****             decimals = temp * 10000;
 567              		.loc 1 261 0
 568 00e8 D7F88400 		ldr	r0, [r7, #132]	@ float
 569 00ec 8349     		ldr	r1, .L45+20
 570 00ee FFF7FEFF 		bl	__aeabi_fmul
 571 00f2 0346     		mov	r3, r0
 572 00f4 1846     		mov	r0, r3
 573 00f6 FFF7FEFF 		bl	__aeabi_f2iz
 574 00fa 0346     		mov	r3, r0
 575 00fc C7F88C30 		str	r3, [r7, #140]
 576              	.L23:
 577              	.LBE2:
 262:main.c        ****             #ifdef SD
 263:main.c        **** //                
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 16


 264:main.c        ****             #endif
 265:main.c        ****             
 266:main.c        ****         }
 267:main.c        ****         
 268:main.c        ****     /* Bluetooth message response*/
 269:main.c        ****         if (j == 2){
 578              		.loc 1 269 0
 579 0100 7F4B     		ldr	r3, .L45+24
 580 0102 1B68     		ldr	r3, [r3]
 581 0104 022B     		cmp	r3, #2
 582 0106 15D1     		bne	.L24
 270:main.c        ****             tens = RxBuffer[0] - 48;
 583              		.loc 1 270 0
 584 0108 7E4B     		ldr	r3, .L45+28
 585 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 586 010c 303B     		subs	r3, r3, #48
 587 010e C7F89830 		str	r3, [r7, #152]
 271:main.c        ****             ones = RxBuffer[1] - 48;
 588              		.loc 1 271 0
 589 0112 7C4B     		ldr	r3, .L45+28
 590 0114 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
 591 0116 303B     		subs	r3, r3, #48
 592 0118 C7F89430 		str	r3, [r7, #148]
 272:main.c        ****             bytes = (tens * 10) + ones;
 593              		.loc 1 272 0
 594 011c D7F89820 		ldr	r2, [r7, #152]
 595 0120 1346     		mov	r3, r2
 596 0122 9B00     		lsls	r3, r3, #2
 597 0124 1344     		add	r3, r3, r2
 598 0126 5B00     		lsls	r3, r3, #1
 599 0128 1A46     		mov	r2, r3
 600 012a D7F89430 		ldr	r3, [r7, #148]
 601 012e 1344     		add	r3, r3, r2
 602 0130 754A     		ldr	r2, .L45+32
 603 0132 1360     		str	r3, [r2]
 604              	.L24:
 273:main.c        ****         } 
 274:main.c        ****         
 275:main.c        ****         if(rxflag) {
 605              		.loc 1 275 0
 606 0134 754B     		ldr	r3, .L45+36
 607 0136 1B68     		ldr	r3, [r3]
 608 0138 002B     		cmp	r3, #0
 609 013a 14D0     		beq	.L25
 276:main.c        ****             Process_BT(&RxBuffer[3], &STATE, bytes);
 610              		.loc 1 276 0
 611 013c 724B     		ldr	r3, .L45+32
 612 013e 1B68     		ldr	r3, [r3]
 613 0140 7348     		ldr	r0, .L45+40
 614 0142 7449     		ldr	r1, .L45+44
 615 0144 1A46     		mov	r2, r3
 616 0146 FFF7FEFF 		bl	Process_BT
 277:main.c        ****             j = 0; bytes = 0;
 617              		.loc 1 277 0
 618 014a 6D4B     		ldr	r3, .L45+24
 619 014c 0022     		movs	r2, #0
 620 014e 1A60     		str	r2, [r3]
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 17


 621 0150 6D4B     		ldr	r3, .L45+32
 622 0152 0022     		movs	r2, #0
 623 0154 1A60     		str	r2, [r3]
 278:main.c        ****             memset(RxBuffer, 0, BUFFER_LEN);
 624              		.loc 1 278 0
 625 0156 6B48     		ldr	r0, .L45+28
 626 0158 0021     		movs	r1, #0
 627 015a 4022     		movs	r2, #64
 628 015c FFF7FEFF 		bl	memset
 279:main.c        ****             rxflag = 0;
 629              		.loc 1 279 0
 630 0160 6A4B     		ldr	r3, .L45+36
 631 0162 0022     		movs	r2, #0
 632 0164 1A60     		str	r2, [r3]
 633              	.L25:
 280:main.c        ****         }
 281:main.c        ****         
 282:main.c        ****         /* Display Z-Acceleration */
 283:main.c        ****         //clear();
 284:main.c        ****         //az = MPU6050_getAccelerationZ();
 285:main.c        ****        // I2C_LCD_print(1,0, id ,0,average);                                //print Interrupt count
 286:main.c        ****         
 287:main.c        ****         /* State Machine */
 288:main.c        ****         switch (STATE){
 634              		.loc 1 288 0
 635 0166 6B4B     		ldr	r3, .L45+44
 636 0168 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 637 016a 013B     		subs	r3, r3, #1
 638 016c 042B     		cmp	r3, #4
 639 016e 00F20881 		bhi	.L44
 640 0172 01A2     		adr	r2, .L28
 641 0174 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 642              		.p2align 2
 643              	.L28:
 644 0178 8D010000 		.word	.L27+1
 645 017c 9F010000 		.word	.L29+1
 646 0180 AF020000 		.word	.L30+1
 647 0184 35030000 		.word	.L31+1
 648 0188 67030000 		.word	.L32+1
 649              		.p2align 1
 650              	.L27:
 651              	.LBB3:
 289:main.c        ****     
 290:main.c        ****             case WAIT_TO_LAUNCH:
 291:main.c        ****                 
 292:main.c        **** 
 293:main.c        ****                 if(wait_flag == 1){
 652              		.loc 1 293 0
 653 018c 624B     		ldr	r3, .L45+48
 654 018e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 655 0190 002B     		cmp	r3, #0
 656 0192 03D0     		beq	.L33
 294:main.c        ****                     #ifdef LCD
 295:main.c        ****                         setCursor(0,0);
 296:main.c        ****                         clear();
 297:main.c        ****                         
 298:main.c        ****                         sprintf(buf, "T-minus %d seconds\n", (60 - countdown)); // countdown
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 18


 299:main.c        ****                         LCD_print(buf);
 300:main.c        ****                     #endif
 301:main.c        **** //                    if(countdown == 60){
 302:main.c        **** //                        STATE = DESCENDING;
 303:main.c        **** //                        #ifdef LCD
 304:main.c        **** //                            setCursor(0,0);
 305:main.c        **** //                            clear();
 306:main.c        **** //                            LCD_print("STATE: DESCENT");
 307:main.c        **** //                        #endif           
 308:main.c        **** //                        id=0;
 309:main.c        **** //                        data_time = 0;
 310:main.c        **** //                        countdown = 9;
 311:main.c        **** //                        LED2_Write(1);                                      // turn the LED off 
 312:main.c        **** //                    }
 313:main.c        ****                     wait_flag = 0; 
 657              		.loc 1 313 0
 658 0194 604B     		ldr	r3, .L45+48
 659 0196 0022     		movs	r2, #0
 660 0198 1A70     		strb	r2, [r3]
 314:main.c        ****                 }
 315:main.c        ****                 break;
 661              		.loc 1 315 0
 662 019a F3E0     		b	.L34
 663              	.L33:
 664 019c F2E0     		b	.L34
 665              	.L29:
 316:main.c        ****                 
 317:main.c        ****             case DESCENDING:
 318:main.c        ****     
 319:main.c        ****                 if(collect_flag == 1){
 666              		.loc 1 319 0
 667 019e 5F4B     		ldr	r3, .L45+52
 668 01a0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 669 01a2 002B     		cmp	r3, #0
 670 01a4 74D0     		beq	.L35
 320:main.c        ****                     
 321:main.c        ****                     if (id<MA_WINDOW){
 671              		.loc 1 321 0
 672 01a6 5E4B     		ldr	r3, .L45+56
 673 01a8 1B68     		ldr	r3, [r3]
 674 01aa 0E2B     		cmp	r3, #14
 675 01ac 07DC     		bgt	.L36
 322:main.c        ****                         sum += az;     
 676              		.loc 1 322 0
 677 01ae B7F97E20 		ldrsh	r2, [r7, #126]
 678 01b2 5C4B     		ldr	r3, .L45+60
 679 01b4 1B68     		ldr	r3, [r3]
 680 01b6 1344     		add	r3, r3, r2
 681 01b8 5A4A     		ldr	r2, .L45+60
 682 01ba 1360     		str	r3, [r2]
 683 01bc 25E0     		b	.L37
 684              	.L36:
 323:main.c        ****                     }
 324:main.c        ****                     else if(id == MA_WINDOW){
 685              		.loc 1 324 0
 686 01be 584B     		ldr	r3, .L45+56
 687 01c0 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 19


 688 01c2 0F2B     		cmp	r3, #15
 689 01c4 13D1     		bne	.L38
 325:main.c        ****                         sum += az;
 690              		.loc 1 325 0
 691 01c6 B7F97E20 		ldrsh	r2, [r7, #126]
 692 01ca 564B     		ldr	r3, .L45+60
 693 01cc 1B68     		ldr	r3, [r3]
 694 01ce 1344     		add	r3, r3, r2
 695 01d0 544A     		ldr	r2, .L45+60
 696 01d2 1360     		str	r3, [r2]
 326:main.c        ****                         average = sum/MA_WINDOW;                            //compute baseline aver
 697              		.loc 1 326 0
 698 01d4 534B     		ldr	r3, .L45+60
 699 01d6 1B68     		ldr	r3, [r3]
 700 01d8 534A     		ldr	r2, .L45+64
 701 01da 82FB0312 		smull	r1, r2, r2, r3
 702 01de 1A44     		add	r2, r2, r3
 703 01e0 D210     		asrs	r2, r2, #3
 704 01e2 DB17     		asrs	r3, r3, #31
 705 01e4 D31A     		subs	r3, r2, r3
 706 01e6 9AB2     		uxth	r2, r3
 707 01e8 504B     		ldr	r3, .L45+68
 708 01ea 1A80     		strh	r2, [r3]	@ movhi
 709 01ec 0DE0     		b	.L37
 710              	.L38:
 327:main.c        ****                     }
 328:main.c        ****                     else{
 329:main.c        ****                         average = ComputeMA(average, MA_WINDOW, az);
 711              		.loc 1 329 0
 712 01ee 4F4B     		ldr	r3, .L45+68
 713 01f0 1B88     		ldrh	r3, [r3]
 714 01f2 1AB2     		sxth	r2, r3
 715 01f4 B7F97E30 		ldrsh	r3, [r7, #126]
 716 01f8 1046     		mov	r0, r2
 717 01fa 0F21     		movs	r1, #15
 718 01fc 1A46     		mov	r2, r3
 719 01fe FFF7FEFF 		bl	ComputeMA
 720 0202 0346     		mov	r3, r0
 721 0204 1A46     		mov	r2, r3
 722 0206 494B     		ldr	r3, .L45+68
 723 0208 1A80     		strh	r2, [r3]	@ movhi
 724              	.L37:
 330:main.c        ****                         /*sprintf(buf, "%d", average);
 331:main.c        ****                         setCursor(0,1);
 332:main.c        ****                         LCD_print(buf);*/
 333:main.c        ****                         
 334:main.c        ****                     }
 335:main.c        ****                     
 336:main.c        ****                     if(average > BOT_THRESHOLD){
 725              		.loc 1 336 0
 726 020a 484B     		ldr	r3, .L45+68
 727 020c 1B88     		ldrh	r3, [r3]
 728 020e 1BB2     		sxth	r3, r3
 729 0210 44F62062 		movw	r2, #20000
 730 0214 9342     		cmp	r3, r2
 731 0216 1ADD     		ble	.L39
 732              	.LBB4:
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 20


 337:main.c        ****                         LED2_Write(0);
 733              		.loc 1 337 0
 734 0218 0020     		movs	r0, #0
 735 021a FFF7FEFF 		bl	LED2_Write
 338:main.c        ****                         LED7_Write(1);                                          //turn LED on      
 736              		.loc 1 338 0
 737 021e 0120     		movs	r0, #1
 738 0220 FFF7FEFF 		bl	LED7_Write
 339:main.c        ****                         STATE = LANDED;                                     //Switch to LANDED stat
 739              		.loc 1 339 0
 740 0224 3B4B     		ldr	r3, .L45+44
 741 0226 0322     		movs	r2, #3
 742 0228 1A70     		strb	r2, [r3]
 340:main.c        ****                         #ifdef LCD
 341:main.c        ****                             setCursor(0,0);
 342:main.c        ****                             clear();
 343:main.c        ****                             LCD_print("STATE: LANDED");  
 344:main.c        ****                         //I2C_LCD_print(1,0, id ,0,average);
 345:main.c        ****                         #endif
 346:main.c        ****                         char sdbuf[60] = {};
 743              		.loc 1 346 0
 744 022a 3B46     		mov	r3, r7
 745 022c 3C22     		movs	r2, #60
 746 022e 1846     		mov	r0, r3
 747 0230 0021     		movs	r1, #0
 748 0232 FFF7FEFF 		bl	memset
 347:main.c        ****                         #ifdef SD
 348:main.c        ****                             sprintf(sdbuf, "STATE: LANDED ***********\n");
 349:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 350:main.c        ****                         #endif
 351:main.c        ****                         id=0;                                                   //reset sample coun
 749              		.loc 1 351 0
 750 0236 3A4B     		ldr	r3, .L45+56
 751 0238 0022     		movs	r2, #0
 752 023a 1A60     		str	r2, [r3]
 352:main.c        ****                         data_time = 0;
 753              		.loc 1 352 0
 754 023c 3C4B     		ldr	r3, .L45+72
 755 023e 0022     		movs	r2, #0
 756 0240 1A60     		str	r2, [r3]
 353:main.c        ****                         sum = 0;
 757              		.loc 1 353 0
 758 0242 384B     		ldr	r3, .L45+60
 759 0244 0022     		movs	r2, #0
 760 0246 1A60     		str	r2, [r3]
 354:main.c        ****                         average = 0;                
 761              		.loc 1 354 0
 762 0248 384B     		ldr	r3, .L45+68
 763 024a 0022     		movs	r2, #0
 764 024c 1A80     		strh	r2, [r3]	@ movhi
 765              	.L39:
 766              	.LBE4:
 355:main.c        ****                     }
 356:main.c        ****                     id++;     
 767              		.loc 1 356 0
 768 024e 344B     		ldr	r3, .L45+56
 769 0250 1B68     		ldr	r3, [r3]
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 21


 770 0252 0133     		adds	r3, r3, #1
 771 0254 324A     		ldr	r2, .L45+56
 772 0256 1360     		str	r3, [r2]
 357:main.c        ****                     
 358:main.c        ****                     /*if desired amount of samples have been collected, switch states*/
 359:main.c        ****                     if(data_time >= DATA_TIME){
 773              		.loc 1 359 0
 774 0258 354B     		ldr	r3, .L45+72
 775 025a 1B68     		ldr	r3, [r3]
 776 025c 41F28732 		movw	r2, #4999
 777 0260 9342     		cmp	r3, r2
 778 0262 11DD     		ble	.L40
 360:main.c        ****                         LED2_Write(0);                                          //turn LED off
 779              		.loc 1 360 0
 780 0264 0020     		movs	r0, #0
 781 0266 FFF7FEFF 		bl	LED2_Write
 361:main.c        ****                                                             
 362:main.c        ****                         STATE = WAIT_TO_LAUNCH;                                //Switch to Waiting 
 782              		.loc 1 362 0
 783 026a 2A4B     		ldr	r3, .L45+44
 784 026c 0122     		movs	r2, #1
 785 026e 1A70     		strb	r2, [r3]
 363:main.c        ****                         #ifdef LCD
 364:main.c        ****                             setCursor(0,0);
 365:main.c        ****                             clear();
 366:main.c        ****                             LCD_print("STATE: WAIT");  
 367:main.c        ****                         #endif
 368:main.c        ****                         id=0;                                                  //reset sample count
 786              		.loc 1 368 0
 787 0270 2B4B     		ldr	r3, .L45+56
 788 0272 0022     		movs	r2, #0
 789 0274 1A60     		str	r2, [r3]
 369:main.c        ****                         data_time = 0;
 790              		.loc 1 369 0
 791 0276 2E4B     		ldr	r3, .L45+72
 792 0278 0022     		movs	r2, #0
 793 027a 1A60     		str	r2, [r3]
 370:main.c        ****                         sum = 0;                                               //reset sum 
 794              		.loc 1 370 0
 795 027c 294B     		ldr	r3, .L45+60
 796 027e 0022     		movs	r2, #0
 797 0280 1A60     		str	r2, [r3]
 371:main.c        ****                         average = 0;
 798              		.loc 1 371 0
 799 0282 2A4B     		ldr	r3, .L45+68
 800 0284 0022     		movs	r2, #0
 801 0286 1A80     		strh	r2, [r3]	@ movhi
 802              	.L40:
 372:main.c        ****                        
 373:main.c        ****                     }
 374:main.c        ****                     collect_flag = 0;
 803              		.loc 1 374 0
 804 0288 244B     		ldr	r3, .L45+52
 805 028a 0022     		movs	r2, #0
 806 028c 1A70     		strb	r2, [r3]
 807 028e 0DE0     		b	.L41
 808              	.L35:
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 22


 375:main.c        ****                 }
 376:main.c        ****                 else if(wait_flag == 1){
 809              		.loc 1 376 0
 810 0290 214B     		ldr	r3, .L45+48
 811 0292 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 812 0294 002B     		cmp	r3, #0
 813 0296 09D0     		beq	.L41
 814              	.LBB5:
 377:main.c        ****                        char sdbuf[60] = {};
 815              		.loc 1 377 0
 816 0298 3B46     		mov	r3, r7
 817 029a 3C22     		movs	r2, #60
 818 029c 1846     		mov	r0, r3
 819 029e 0021     		movs	r1, #0
 820 02a0 FFF7FEFF 		bl	memset
 378:main.c        ****                         #ifdef SD
 379:main.c        ****                             sprintf(sdbuf, "pressure: %d.%04d, %d\n", num, decimals, (int16)output)
 380:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));                           
 381:main.c        ****                         #endif 
 382:main.c        ****                         wait_flag = 0;
 821              		.loc 1 382 0
 822 02a4 1C4B     		ldr	r3, .L45+48
 823 02a6 0022     		movs	r2, #0
 824 02a8 1A70     		strb	r2, [r3]
 825              	.LBE5:
 383:main.c        ****                 }
 384:main.c        ****                 break;
 826              		.loc 1 384 0
 827 02aa 6BE0     		b	.L34
 828              	.L41:
 829              		.loc 1 384 0 is_stmt 0 discriminator 2
 830 02ac 6AE0     		b	.L34
 831              	.L30:
 385:main.c        ****                 
 386:main.c        ****                 case LANDED:
 387:main.c        ****                     CyDelay(5000u);
 832              		.loc 1 387 0 is_stmt 1
 833 02ae 41F28830 		movw	r0, #5000
 834 02b2 FFF7FEFF 		bl	CyDelay
 388:main.c        ****                     Solenoid_1_Write(1); //turn on solenoid 1
 835              		.loc 1 388 0
 836 02b6 0120     		movs	r0, #1
 837 02b8 FFF7FEFF 		bl	Solenoid_1_Write
 389:main.c        ****                     #ifdef LCD
 390:main.c        ****                         setCursor(0,0);
 391:main.c        ****                         clear();
 392:main.c        ****                         LCD_print("VACUUMING");  
 393:main.c        ****                     #endif
 394:main.c        ****                     char sdbuf[60] = {};
 838              		.loc 1 394 0
 839 02bc 3B46     		mov	r3, r7
 840 02be 3C22     		movs	r2, #60
 841 02c0 1846     		mov	r0, r3
 842 02c2 0021     		movs	r1, #0
 843 02c4 FFF7FEFF 		bl	memset
 395:main.c        ****                     #ifdef SD
 396:main.c        ****                             memset(sdbuf, 0, 40);
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 23


 397:main.c        ****                             sprintf(sdbuf, "STATE: VACUUMING ***********\n");
 398:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 399:main.c        ****                     #endif
 400:main.c        ****                     CyDelay(7000u);
 844              		.loc 1 400 0
 845 02c8 41F65830 		movw	r0, #7000
 846 02cc FFF7FEFF 		bl	CyDelay
 401:main.c        ****                     Solenoid_1_Write(0); //turn off soleniod 1
 847              		.loc 1 401 0
 848 02d0 0020     		movs	r0, #0
 849 02d2 FFF7FEFF 		bl	Solenoid_1_Write
 402:main.c        ****                     CyDelay(5000u);
 850              		.loc 1 402 0
 851 02d6 41F28830 		movw	r0, #5000
 852 02da FFF7FEFF 		bl	CyDelay
 403:main.c        ****                     STATE = RESURFACE;
 853              		.loc 1 403 0
 854 02de 0D4B     		ldr	r3, .L45+44
 855 02e0 0422     		movs	r2, #4
 856 02e2 1A70     		strb	r2, [r3]
 404:main.c        ****                     #ifdef LCD
 405:main.c        ****                         setCursor(0,0);
 406:main.c        ****                         clear();
 407:main.c        ****                         LCD_print("STATE: RESURFACING");  
 408:main.c        ****                     #endif
 409:main.c        ****                     #ifdef SD
 410:main.c        ****                             memset(sdbuf, 0, 40);
 411:main.c        ****                             sprintf(sdbuf, "STATE: RESURFACING ***********\n");
 412:main.c        ****                             FS_Write(fsfile, sdbuf, strlen(sdbuf));
 413:main.c        ****                     #endif
 414:main.c        ****                 break;
 857              		.loc 1 414 0
 858 02e4 4EE0     		b	.L34
 859              	.L46:
 860 02e6 00BF     		.align	3
 861              	.L45:
 862 02e8 8FC2F528 		.word	687194767
 863 02ec 5C8F4A3F 		.word	1061850972
 864 02f0 10000000 		.word	.LC0
 865 02f4 00000000 		.word	Sample_ISR_Handler
 866 02f8 00000000 		.word	rx_interrupt
 867 02fc 00401C46 		.word	1176256512
 868 0300 00000000 		.word	j
 869 0304 00000000 		.word	RxBuffer
 870 0308 00000000 		.word	bytes
 871 030c 00000000 		.word	rxflag
 872 0310 03000000 		.word	RxBuffer+3
 873 0314 00000000 		.word	STATE
 874 0318 00000000 		.word	wait_flag
 875 031c 00000000 		.word	collect_flag
 876 0320 00000000 		.word	id
 877 0324 00000000 		.word	sum
 878 0328 89888888 		.word	-2004318071
 879 032c 00000000 		.word	average
 880 0330 00000000 		.word	data_time
 881              	.L31:
 415:main.c        ****                 
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 24


 416:main.c        ****             case RESURFACE:
 417:main.c        ****                 //CyDelay(4000u);
 418:main.c        ****                 if (PANIC_flag)
 882              		.loc 1 418 0
 883 0334 144B     		ldr	r3, .L47
 884 0336 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 885 0338 002B     		cmp	r3, #0
 886 033a 02D0     		beq	.L42
 419:main.c        ****                     LCD_print("WATER DETECTED");
 887              		.loc 1 419 0
 888 033c 1348     		ldr	r0, .L47+4
 889 033e FFF7FEFF 		bl	LCD_print
 890              	.L42:
 420:main.c        ****                 Solenoid_2_Write(1); //turn on solendiod 2
 891              		.loc 1 420 0
 892 0342 0120     		movs	r0, #1
 893 0344 FFF7FEFF 		bl	Solenoid_2_Write
 421:main.c        ****                 CyDelay(15000u);
 894              		.loc 1 421 0
 895 0348 43F69820 		movw	r0, #15000
 896 034c FFF7FEFF 		bl	CyDelay
 422:main.c        ****                 Solenoid_2_Write(0); //turn off solenoid 2
 897              		.loc 1 422 0
 898 0350 0020     		movs	r0, #0
 899 0352 FFF7FEFF 		bl	Solenoid_2_Write
 423:main.c        ****                 //check pressure sensor to confirm we are at the surface
 424:main.c        ****                 CyDelay(5000u);                                //wait 10 seconds to lift, for testi
 900              		.loc 1 424 0
 901 0356 41F28830 		movw	r0, #5000
 902 035a FFF7FEFF 		bl	CyDelay
 425:main.c        ****                 STATE = TRANSMIT;
 903              		.loc 1 425 0
 904 035e 0C4B     		ldr	r3, .L47+8
 905 0360 0522     		movs	r2, #5
 906 0362 1A70     		strb	r2, [r3]
 426:main.c        ****                 #ifdef LCD
 427:main.c        ****                     setCursor(0,0);
 428:main.c        ****                     clear();
 429:main.c        ****                     LCD_print("TRANSMIT");  
 430:main.c        ****                 #endif
 431:main.c        ****                 #ifdef SD
 432:main.c        ****                     memset(sdbuf, 0, 40);
 433:main.c        ****                     sprintf(sdbuf, "STATE: TRANSMIT ***********\n");
 434:main.c        ****                     FS_Write(fsfile, sdbuf, strlen(sdbuf));
 435:main.c        ****                 #endif
 436:main.c        ****                 break;
 907              		.loc 1 436 0
 908 0364 0EE0     		b	.L34
 909              	.L32:
 437:main.c        ****             case TRANSMIT:
 438:main.c        ****                 LED2_Write(1);
 910              		.loc 1 438 0
 911 0366 0120     		movs	r0, #1
 912 0368 FFF7FEFF 		bl	LED2_Write
 439:main.c        ****                 LED7_Write(1);
 913              		.loc 1 439 0
 914 036c 0120     		movs	r0, #1
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 25


 915 036e FFF7FEFF 		bl	LED7_Write
 440:main.c        ****                 #ifdef SD                                   //close old file, open new one
 441:main.c        ****                     FS_FClose(fsfile);
 442:main.c        ****                     sprintf(file, "test%d.txt", ++testnum);
 443:main.c        ****                     fsfile = FS_FOpen(file, "w");
 444:main.c        ****                 #endif 
 445:main.c        ****                 CyDelay(15000u);
 916              		.loc 1 445 0
 917 0372 43F69820 		movw	r0, #15000
 918 0376 FFF7FEFF 		bl	CyDelay
 446:main.c        ****                 STATE = WAIT_TO_LAUNCH;
 919              		.loc 1 446 0
 920 037a 054B     		ldr	r3, .L47+8
 921 037c 0122     		movs	r2, #1
 922 037e 1A70     		strb	r2, [r3]
 447:main.c        ****                 
 448:main.c        **** //            case LANDED:
 449:main.c        **** //                CyDelay(1000u);                             // delay a bit
 450:main.c        **** //                LED2_Write(1);                              // turn on other LED to indicate land
 451:main.c        **** //                STATE = WAIT_TO_LAUNCH;
 452:main.c        **** //                #ifdef LCD
 453:main.c        **** //                    setCursor(0,0);
 454:main.c        **** //                    clear();
 455:main.c        **** //                    LCD_print("STATE: WAIT");
 456:main.c        **** //                #endif 
 457:main.c        **** //                #ifdef SD                                   // close old file, open new one
 458:main.c        **** //                    FS_FClose(fsfile);
 459:main.c        **** //                    sprintf(file, "test%d.txt", ++testnum);
 460:main.c        **** //                    fsfile = FS_FOpen(file, "w");
 461:main.c        **** //                #endif 
 462:main.c        ****                 break;
 923              		.loc 1 462 0
 924 0380 00E0     		b	.L34
 925              	.L44:
 463:main.c        ****                 
 464:main.c        ****             default:
 465:main.c        ****                 break;
 926              		.loc 1 465 0
 927 0382 00BF     		nop
 928              	.L34:
 929              	.LBE3:
 466:main.c        ****         
 467:main.c        ****         
 468:main.c        ****         }
 469:main.c        ****         
 470:main.c        ****     }
 930              		.loc 1 470 0 discriminator 3
 931 0384 6CE6     		b	.L43
 932              	.L48:
 933 0386 00BF     		.align	2
 934              	.L47:
 935 0388 00000000 		.word	PANIC_flag
 936 038c 00000000 		.word	.LC1
 937 0390 00000000 		.word	STATE
 938              		.cfi_endproc
 939              	.LFE68:
 940              		.size	main, .-main
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 26


 941 0394 AFF30080 		.text
 942              	.Letext0:
 943              		.file 2 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 944              		.file 3 "c:\\program files (x86)\\cypress\\psoc creator\\4.0\\psoc creator\\import\\gnu\\arm\\4.9.
 945              		.file 4 "Generated_Source\\PSoC5/cytypes.h"
 946              		.file 5 ".\\emFile_V322c\\Code\\Include\\PSoC5/FS_Types.h"
 947              		.file 6 "functions.h"
 948              		.file 7 "Generated_Source\\PSoC5/core_cm3.h"
 949              		.file 8 "./mpu6050.h"
 950              		.section	.debug_info,"",%progbits
 951              	.Ldebug_info0:
 952 0000 C9040000 		.4byte	0x4c9
 953 0004 0400     		.2byte	0x4
 954 0006 00000000 		.4byte	.Ldebug_abbrev0
 955 000a 04       		.byte	0x4
 956 000b 01       		.uleb128 0x1
 957 000c C9000000 		.4byte	.LASF66
 958 0010 01       		.byte	0x1
 959 0011 B3020000 		.4byte	.LASF67
 960 0015 4B020000 		.4byte	.LASF68
 961 0019 00000000 		.4byte	.Ldebug_ranges0+0
 962 001d 00000000 		.4byte	0
 963 0021 00000000 		.4byte	.Ldebug_line0
 964 0025 02       		.uleb128 0x2
 965 0026 01       		.byte	0x1
 966 0027 06       		.byte	0x6
 967 0028 C3010000 		.4byte	.LASF0
 968 002c 03       		.uleb128 0x3
 969 002d 6B010000 		.4byte	.LASF2
 970 0031 02       		.byte	0x2
 971 0032 1D       		.byte	0x1d
 972 0033 37000000 		.4byte	0x37
 973 0037 02       		.uleb128 0x2
 974 0038 01       		.byte	0x1
 975 0039 08       		.byte	0x8
 976 003a 96010000 		.4byte	.LASF1
 977 003e 03       		.uleb128 0x3
 978 003f F3020000 		.4byte	.LASF3
 979 0043 02       		.byte	0x2
 980 0044 29       		.byte	0x29
 981 0045 49000000 		.4byte	0x49
 982 0049 02       		.uleb128 0x2
 983 004a 02       		.byte	0x2
 984 004b 05       		.byte	0x5
 985 004c 70000000 		.4byte	.LASF4
 986 0050 02       		.uleb128 0x2
 987 0051 02       		.byte	0x2
 988 0052 07       		.byte	0x7
 989 0053 0E020000 		.4byte	.LASF5
 990 0057 03       		.uleb128 0x3
 991 0058 E9020000 		.4byte	.LASF6
 992 005c 02       		.byte	0x2
 993 005d 3F       		.byte	0x3f
 994 005e 62000000 		.4byte	0x62
 995 0062 02       		.uleb128 0x2
 996 0063 04       		.byte	0x4
 997 0064 05       		.byte	0x5
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 27


 998 0065 26020000 		.4byte	.LASF7
 999 0069 03       		.uleb128 0x3
 1000 006a DE020000 		.4byte	.LASF8
 1001 006e 02       		.byte	0x2
 1002 006f 41       		.byte	0x41
 1003 0070 74000000 		.4byte	0x74
 1004 0074 02       		.uleb128 0x2
 1005 0075 04       		.byte	0x4
 1006 0076 07       		.byte	0x7
 1007 0077 BF020000 		.4byte	.LASF9
 1008 007b 02       		.uleb128 0x2
 1009 007c 08       		.byte	0x8
 1010 007d 05       		.byte	0x5
 1011 007e AA000000 		.4byte	.LASF10
 1012 0082 02       		.uleb128 0x2
 1013 0083 08       		.byte	0x8
 1014 0084 07       		.byte	0x7
 1015 0085 CF010000 		.4byte	.LASF11
 1016 0089 04       		.uleb128 0x4
 1017 008a 04       		.byte	0x4
 1018 008b 05       		.byte	0x5
 1019 008c 696E7400 		.ascii	"int\000"
 1020 0090 02       		.uleb128 0x2
 1021 0091 04       		.byte	0x4
 1022 0092 07       		.byte	0x7
 1023 0093 F9010000 		.4byte	.LASF12
 1024 0097 03       		.uleb128 0x3
 1025 0098 85000000 		.4byte	.LASF13
 1026 009c 03       		.byte	0x3
 1027 009d 15       		.byte	0x15
 1028 009e 2C000000 		.4byte	0x2c
 1029 00a2 03       		.uleb128 0x3
 1030 00a3 37020000 		.4byte	.LASF14
 1031 00a7 03       		.byte	0x3
 1032 00a8 20       		.byte	0x20
 1033 00a9 3E000000 		.4byte	0x3e
 1034 00ad 03       		.uleb128 0x3
 1035 00ae 2F020000 		.4byte	.LASF15
 1036 00b2 03       		.byte	0x3
 1037 00b3 2C       		.byte	0x2c
 1038 00b4 57000000 		.4byte	0x57
 1039 00b8 03       		.uleb128 0x3
 1040 00b9 E6010000 		.4byte	.LASF16
 1041 00bd 03       		.byte	0x3
 1042 00be 2D       		.byte	0x2d
 1043 00bf 69000000 		.4byte	0x69
 1044 00c3 05       		.uleb128 0x5
 1045 00c4 3F020000 		.4byte	.LASF17
 1046 00c8 04       		.byte	0x4
 1047 00c9 9201     		.2byte	0x192
 1048 00cb 37000000 		.4byte	0x37
 1049 00cf 02       		.uleb128 0x2
 1050 00d0 04       		.byte	0x4
 1051 00d1 04       		.byte	0x4
 1052 00d2 9F000000 		.4byte	.LASF18
 1053 00d6 02       		.uleb128 0x2
 1054 00d7 08       		.byte	0x8
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 28


 1055 00d8 04       		.byte	0x4
 1056 00d9 D7020000 		.4byte	.LASF19
 1057 00dd 02       		.uleb128 0x2
 1058 00de 01       		.byte	0x1
 1059 00df 08       		.byte	0x8
 1060 00e0 21020000 		.4byte	.LASF20
 1061 00e4 05       		.uleb128 0x5
 1062 00e5 BA020000 		.4byte	.LASF21
 1063 00e9 04       		.byte	0x4
 1064 00ea 3C02     		.2byte	0x23c
 1065 00ec F0000000 		.4byte	0xf0
 1066 00f0 06       		.uleb128 0x6
 1067 00f1 C3000000 		.4byte	0xc3
 1068 00f5 02       		.uleb128 0x2
 1069 00f6 04       		.byte	0x4
 1070 00f7 07       		.byte	0x7
 1071 00f8 FD020000 		.4byte	.LASF22
 1072 00fc 03       		.uleb128 0x3
 1073 00fd B1010000 		.4byte	.LASF23
 1074 0101 05       		.byte	0x5
 1075 0102 7E       		.byte	0x7e
 1076 0103 07010000 		.4byte	0x107
 1077 0107 07       		.uleb128 0x7
 1078 0108 B1010000 		.4byte	.LASF23
 1079 010c 08       		.uleb128 0x8
 1080 010d 04       		.byte	0x4
 1081 010e FC000000 		.4byte	0xfc
 1082 0112 02       		.uleb128 0x2
 1083 0113 08       		.byte	0x8
 1084 0114 04       		.byte	0x4
 1085 0115 7B010000 		.4byte	.LASF24
 1086 0119 09       		.uleb128 0x9
 1087 011a 2B000000 		.4byte	.LASF32
 1088 011e 01       		.byte	0x1
 1089 011f 06       		.byte	0x6
 1090 0120 16       		.byte	0x16
 1091 0121 50010000 		.4byte	0x150
 1092 0125 0A       		.uleb128 0xa
 1093 0126 1E000000 		.4byte	.LASF25
 1094 012a 00       		.sleb128 0
 1095 012b 0A       		.uleb128 0xa
 1096 012c 87010000 		.4byte	.LASF26
 1097 0130 01       		.sleb128 1
 1098 0131 0A       		.uleb128 0xa
 1099 0132 0A000000 		.4byte	.LASF27
 1100 0136 02       		.sleb128 2
 1101 0137 0A       		.uleb128 0xa
 1102 0138 4A000000 		.4byte	.LASF28
 1103 013c 03       		.sleb128 3
 1104 013d 0A       		.uleb128 0xa
 1105 013e 00000000 		.4byte	.LASF29
 1106 0142 04       		.sleb128 4
 1107 0143 0A       		.uleb128 0xa
 1108 0144 C0000000 		.4byte	.LASF30
 1109 0148 05       		.sleb128 5
 1110 0149 0A       		.uleb128 0xa
 1111 014a 75010000 		.4byte	.LASF31
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 29


 1112 014e 06       		.sleb128 6
 1113 014f 00       		.byte	0
 1114 0150 03       		.uleb128 0x3
 1115 0151 2B000000 		.4byte	.LASF32
 1116 0155 06       		.byte	0x6
 1117 0156 1E       		.byte	0x1e
 1118 0157 19010000 		.4byte	0x119
 1119 015b 0B       		.uleb128 0xb
 1120 015c A4010000 		.4byte	.LASF69
 1121 0160 01       		.byte	0x1
 1122 0161 59       		.byte	0x59
 1123 0162 00000000 		.4byte	.LFB63
 1124 0166 70000000 		.4byte	.LFE63-.LFB63
 1125 016a 01       		.uleb128 0x1
 1126 016b 9C       		.byte	0x9c
 1127 016c 0C       		.uleb128 0xc
 1128 016d 56000000 		.4byte	.LASF33
 1129 0171 01       		.byte	0x1
 1130 0172 68       		.byte	0x68
 1131 0173 00000000 		.4byte	.LFB64
 1132 0177 20000000 		.4byte	.LFE64-.LFB64
 1133 017b 01       		.uleb128 0x1
 1134 017c 9C       		.byte	0x9c
 1135 017d 0D       		.uleb128 0xd
 1136 017e 44030000 		.4byte	.LASF34
 1137 0182 01       		.byte	0x1
 1138 0183 6F       		.byte	0x6f
 1139 0184 00000000 		.4byte	.LFB65
 1140 0188 38000000 		.4byte	.LFE65-.LFB65
 1141 018c 01       		.uleb128 0x1
 1142 018d 9C       		.byte	0x9c
 1143 018e 0D       		.uleb128 0xd
 1144 018f 9D020000 		.4byte	.LASF35
 1145 0193 01       		.byte	0x1
 1146 0194 79       		.byte	0x79
 1147 0195 00000000 		.4byte	.LFB66
 1148 0199 4C000000 		.4byte	.LFE66-.LFB66
 1149 019d 01       		.uleb128 0x1
 1150 019e 9C       		.byte	0x9c
 1151 019f 0C       		.uleb128 0xc
 1152 01a0 20030000 		.4byte	.LASF36
 1153 01a4 01       		.byte	0x1
 1154 01a5 85       		.byte	0x85
 1155 01a6 00000000 		.4byte	.LFB67
 1156 01aa 50000000 		.4byte	.LFE67-.LFB67
 1157 01ae 01       		.uleb128 0x1
 1158 01af 9C       		.byte	0x9c
 1159 01b0 0E       		.uleb128 0xe
 1160 01b1 51000000 		.4byte	.LASF70
 1161 01b5 01       		.byte	0x1
 1162 01b6 8D       		.byte	0x8d
 1163 01b7 89000000 		.4byte	0x89
 1164 01bb 00000000 		.4byte	.LFB68
 1165 01bf 94030000 		.4byte	.LFE68-.LFB68
 1166 01c3 01       		.uleb128 0x1
 1167 01c4 9C       		.byte	0x9c
 1168 01c5 F1020000 		.4byte	0x2f1
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 30


 1169 01c9 0F       		.uleb128 0xf
 1170 01ca 0C030000 		.4byte	.LASF37
 1171 01ce 01       		.byte	0x1
 1172 01cf 90       		.byte	0x90
 1173 01d0 CF000000 		.4byte	0xcf
 1174 01d4 02       		.uleb128 0x2
 1175 01d5 91       		.byte	0x91
 1176 01d6 50       		.sleb128 -48
 1177 01d7 10       		.uleb128 0x10
 1178 01d8 62756600 		.ascii	"buf\000"
 1179 01dc 01       		.byte	0x1
 1180 01dd 91       		.byte	0x91
 1181 01de F1020000 		.4byte	0x2f1
 1182 01e2 03       		.uleb128 0x3
 1183 01e3 91       		.byte	0x91
 1184 01e4 9C7F     		.sleb128 -100
 1185 01e6 0F       		.uleb128 0xf
 1186 01e7 7D020000 		.4byte	.LASF38
 1187 01eb 01       		.byte	0x1
 1188 01ec 93       		.byte	0x93
 1189 01ed 01030000 		.4byte	0x301
 1190 01f1 03       		.uleb128 0x3
 1191 01f2 91       		.byte	0x91
 1192 01f3 8C7F     		.sleb128 -116
 1193 01f5 11       		.uleb128 0x11
 1194 01f6 617800   		.ascii	"ax\000"
 1195 01f9 01       		.byte	0x1
 1196 01fa 94       		.byte	0x94
 1197 01fb A2000000 		.4byte	0xa2
 1198 01ff 11       		.uleb128 0x11
 1199 0200 617900   		.ascii	"ay\000"
 1200 0203 01       		.byte	0x1
 1201 0204 94       		.byte	0x94
 1202 0205 A2000000 		.4byte	0xa2
 1203 0209 10       		.uleb128 0x10
 1204 020a 617A00   		.ascii	"az\000"
 1205 020d 01       		.byte	0x1
 1206 020e 94       		.byte	0x94
 1207 020f A2000000 		.4byte	0xa2
 1208 0213 02       		.uleb128 0x2
 1209 0214 91       		.byte	0x91
 1210 0215 4E       		.sleb128 -50
 1211 0216 11       		.uleb128 0x11
 1212 0217 6900     		.ascii	"i\000"
 1213 0219 01       		.byte	0x1
 1214 021a 94       		.byte	0x94
 1215 021b A2000000 		.4byte	0xa2
 1216 021f 0F       		.uleb128 0xf
 1217 0220 86020000 		.4byte	.LASF39
 1218 0224 01       		.byte	0x1
 1219 0225 96       		.byte	0x96
 1220 0226 A2000000 		.4byte	0xa2
 1221 022a 02       		.uleb128 0x2
 1222 022b 91       		.byte	0x91
 1223 022c 6E       		.sleb128 -18
 1224 022d 0F       		.uleb128 0xf
 1225 022e 57010000 		.4byte	.LASF40
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 31


 1226 0232 01       		.byte	0x1
 1227 0233 97       		.byte	0x97
 1228 0234 89000000 		.4byte	0x89
 1229 0238 02       		.uleb128 0x2
 1230 0239 91       		.byte	0x91
 1231 023a 68       		.sleb128 -24
 1232 023b 0F       		.uleb128 0xf
 1233 023c 45000000 		.4byte	.LASF41
 1234 0240 01       		.byte	0x1
 1235 0241 97       		.byte	0x97
 1236 0242 89000000 		.4byte	0x89
 1237 0246 02       		.uleb128 0x2
 1238 0247 91       		.byte	0x91
 1239 0248 64       		.sleb128 -28
 1240 0249 10       		.uleb128 0x10
 1241 024a 6E756D00 		.ascii	"num\000"
 1242 024e 01       		.byte	0x1
 1243 024f F4       		.byte	0xf4
 1244 0250 89000000 		.4byte	0x89
 1245 0254 02       		.uleb128 0x2
 1246 0255 91       		.byte	0x91
 1247 0256 60       		.sleb128 -32
 1248 0257 0F       		.uleb128 0xf
 1249 0258 96000000 		.4byte	.LASF42
 1250 025c 01       		.byte	0x1
 1251 025d F4       		.byte	0xf4
 1252 025e 89000000 		.4byte	0x89
 1253 0262 02       		.uleb128 0x2
 1254 0263 91       		.byte	0x91
 1255 0264 5C       		.sleb128 -36
 1256 0265 0F       		.uleb128 0xf
 1257 0266 5C010000 		.4byte	.LASF43
 1258 026a 01       		.byte	0x1
 1259 026b F5       		.byte	0xf5
 1260 026c CF000000 		.4byte	0xcf
 1261 0270 02       		.uleb128 0x2
 1262 0271 91       		.byte	0x91
 1263 0272 58       		.sleb128 -40
 1264 0273 0F       		.uleb128 0xf
 1265 0274 A5000000 		.4byte	.LASF44
 1266 0278 01       		.byte	0x1
 1267 0279 F5       		.byte	0xf5
 1268 027a CF000000 		.4byte	0xcf
 1269 027e 02       		.uleb128 0x2
 1270 027f 91       		.byte	0x91
 1271 0280 54       		.sleb128 -44
 1272 0281 12       		.uleb128 0x12
 1273 0282 7A000000 		.4byte	.LBB2
 1274 0286 86000000 		.4byte	.LBE2-.LBB2
 1275 028a 9E020000 		.4byte	0x29e
 1276 028e 0F       		.uleb128 0xf
 1277 028f 8D000000 		.4byte	.LASF45
 1278 0293 01       		.byte	0x1
 1279 0294 FE       		.byte	0xfe
 1280 0295 F1020000 		.4byte	0x2f1
 1281 0299 03       		.uleb128 0x3
 1282 029a 91       		.byte	0x91
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 32


 1283 029b D07E     		.sleb128 -176
 1284 029d 00       		.byte	0
 1285 029e 13       		.uleb128 0x13
 1286 029f 8C010000 		.4byte	.LBB3
 1287 02a3 F8010000 		.4byte	.LBE3-.LBB3
 1288 02a7 14       		.uleb128 0x14
 1289 02a8 32000000 		.4byte	.LASF46
 1290 02ac 01       		.byte	0x1
 1291 02ad 8A01     		.2byte	0x18a
 1292 02af 11030000 		.4byte	0x311
 1293 02b3 03       		.uleb128 0x3
 1294 02b4 91       		.byte	0x91
 1295 02b5 D07E     		.sleb128 -176
 1296 02b7 12       		.uleb128 0x12
 1297 02b8 18020000 		.4byte	.LBB4
 1298 02bc 36000000 		.4byte	.LBE4-.LBB4
 1299 02c0 D5020000 		.4byte	0x2d5
 1300 02c4 14       		.uleb128 0x14
 1301 02c5 32000000 		.4byte	.LASF46
 1302 02c9 01       		.byte	0x1
 1303 02ca 5A01     		.2byte	0x15a
 1304 02cc 11030000 		.4byte	0x311
 1305 02d0 03       		.uleb128 0x3
 1306 02d1 91       		.byte	0x91
 1307 02d2 D07E     		.sleb128 -176
 1308 02d4 00       		.byte	0
 1309 02d5 13       		.uleb128 0x13
 1310 02d6 98020000 		.4byte	.LBB5
 1311 02da 12000000 		.4byte	.LBE5-.LBB5
 1312 02de 14       		.uleb128 0x14
 1313 02df 32000000 		.4byte	.LASF46
 1314 02e3 01       		.byte	0x1
 1315 02e4 7901     		.2byte	0x179
 1316 02e6 11030000 		.4byte	0x311
 1317 02ea 03       		.uleb128 0x3
 1318 02eb 91       		.byte	0x91
 1319 02ec D07E     		.sleb128 -176
 1320 02ee 00       		.byte	0
 1321 02ef 00       		.byte	0
 1322 02f0 00       		.byte	0
 1323 02f1 15       		.uleb128 0x15
 1324 02f2 DD000000 		.4byte	0xdd
 1325 02f6 01030000 		.4byte	0x301
 1326 02fa 16       		.uleb128 0x16
 1327 02fb F5000000 		.4byte	0xf5
 1328 02ff 31       		.byte	0x31
 1329 0300 00       		.byte	0
 1330 0301 15       		.uleb128 0x15
 1331 0302 DD000000 		.4byte	0xdd
 1332 0306 11030000 		.4byte	0x311
 1333 030a 16       		.uleb128 0x16
 1334 030b F5000000 		.4byte	0xf5
 1335 030f 0D       		.byte	0xd
 1336 0310 00       		.byte	0
 1337 0311 15       		.uleb128 0x15
 1338 0312 DD000000 		.4byte	0xdd
 1339 0316 21030000 		.4byte	0x321
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 33


 1340 031a 16       		.uleb128 0x16
 1341 031b F5000000 		.4byte	0xf5
 1342 031f 3B       		.byte	0x3b
 1343 0320 00       		.byte	0
 1344 0321 17       		.uleb128 0x17
 1345 0322 2D030000 		.4byte	.LASF47
 1346 0326 07       		.byte	0x7
 1347 0327 9606     		.2byte	0x696
 1348 0329 2D030000 		.4byte	0x32d
 1349 032d 06       		.uleb128 0x6
 1350 032e AD000000 		.4byte	0xad
 1351 0332 18       		.uleb128 0x18
 1352 0333 3D000000 		.4byte	.LASF48
 1353 0337 08       		.byte	0x8
 1354 0338 9101     		.2byte	0x191
 1355 033a 97000000 		.4byte	0x97
 1356 033e 05       		.uleb128 0x5
 1357 033f 03       		.byte	0x3
 1358 0340 00000000 		.4byte	devAddr
 1359 0344 15       		.uleb128 0x15
 1360 0345 97000000 		.4byte	0x97
 1361 0349 54030000 		.4byte	0x354
 1362 034d 16       		.uleb128 0x16
 1363 034e F5000000 		.4byte	0xf5
 1364 0352 15       		.byte	0x15
 1365 0353 00       		.byte	0
 1366 0354 18       		.uleb128 0x18
 1367 0355 96020000 		.4byte	.LASF49
 1368 0359 08       		.byte	0x8
 1369 035a 9201     		.2byte	0x192
 1370 035c 44030000 		.4byte	0x344
 1371 0360 05       		.uleb128 0x5
 1372 0361 03       		.byte	0x3
 1373 0362 00000000 		.4byte	buffer
 1374 0366 19       		.uleb128 0x19
 1375 0367 38000000 		.4byte	.LASF50
 1376 036b 01       		.byte	0x1
 1377 036c 31       		.byte	0x31
 1378 036d B8000000 		.4byte	0xb8
 1379 0371 05       		.uleb128 0x5
 1380 0372 03       		.byte	0x3
 1381 0373 00000000 		.4byte	Addr
 1382 0377 1A       		.uleb128 0x1a
 1383 0378 696400   		.ascii	"id\000"
 1384 037b 01       		.byte	0x1
 1385 037c 32       		.byte	0x32
 1386 037d 62000000 		.4byte	0x62
 1387 0381 05       		.uleb128 0x5
 1388 0382 03       		.byte	0x3
 1389 0383 00000000 		.4byte	id
 1390 0387 19       		.uleb128 0x19
 1391 0388 EF010000 		.4byte	.LASF51
 1392 038c 01       		.byte	0x1
 1393 038d 33       		.byte	0x33
 1394 038e 62000000 		.4byte	0x62
 1395 0392 05       		.uleb128 0x5
 1396 0393 03       		.byte	0x3
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 34


 1397 0394 00000000 		.4byte	data_time
 1398 0398 1A       		.uleb128 0x1a
 1399 0399 73756D00 		.ascii	"sum\000"
 1400 039d 01       		.byte	0x1
 1401 039e 35       		.byte	0x35
 1402 039f 62000000 		.4byte	0x62
 1403 03a3 05       		.uleb128 0x5
 1404 03a4 03       		.byte	0x3
 1405 03a5 00000000 		.4byte	sum
 1406 03a9 19       		.uleb128 0x19
 1407 03aa B8000000 		.4byte	.LASF52
 1408 03ae 01       		.byte	0x1
 1409 03af 36       		.byte	0x36
 1410 03b0 A2000000 		.4byte	0xa2
 1411 03b4 05       		.uleb128 0x5
 1412 03b5 03       		.byte	0x3
 1413 03b6 00000000 		.4byte	average
 1414 03ba 19       		.uleb128 0x19
 1415 03bb 13030000 		.4byte	.LASF53
 1416 03bf 01       		.byte	0x1
 1417 03c0 37       		.byte	0x37
 1418 03c1 CB030000 		.4byte	0x3cb
 1419 03c5 05       		.uleb128 0x5
 1420 03c6 03       		.byte	0x3
 1421 03c7 00000000 		.4byte	collect_flag
 1422 03cb 02       		.uleb128 0x2
 1423 03cc 01       		.byte	0x1
 1424 03cd 02       		.byte	0x2
 1425 03ce 45020000 		.4byte	.LASF54
 1426 03d2 19       		.uleb128 0x19
 1427 03d3 3A030000 		.4byte	.LASF55
 1428 03d7 01       		.byte	0x1
 1429 03d8 38       		.byte	0x38
 1430 03d9 CB030000 		.4byte	0x3cb
 1431 03dd 05       		.uleb128 0x5
 1432 03de 03       		.byte	0x3
 1433 03df 00000000 		.4byte	wait_flag
 1434 03e3 19       		.uleb128 0x19
 1435 03e4 7A000000 		.4byte	.LASF56
 1436 03e8 01       		.byte	0x1
 1437 03e9 39       		.byte	0x39
 1438 03ea CB030000 		.4byte	0x3cb
 1439 03ee 05       		.uleb128 0x5
 1440 03ef 03       		.byte	0x3
 1441 03f0 00000000 		.4byte	PANIC_flag
 1442 03f4 19       		.uleb128 0x19
 1443 03f5 06030000 		.4byte	.LASF57
 1444 03f9 01       		.byte	0x1
 1445 03fa 3B       		.byte	0x3b
 1446 03fb 50010000 		.4byte	0x150
 1447 03ff 05       		.uleb128 0x5
 1448 0400 03       		.byte	0x3
 1449 0401 00000000 		.4byte	STATE
 1450 0405 19       		.uleb128 0x19
 1451 0406 06020000 		.4byte	.LASF58
 1452 040a 01       		.byte	0x1
 1453 040b 3C       		.byte	0x3c
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 35


 1454 040c 97000000 		.4byte	0x97
 1455 0410 05       		.uleb128 0x5
 1456 0411 03       		.byte	0x3
 1457 0412 00000000 		.4byte	testnum
 1458 0416 19       		.uleb128 0x19
 1459 0417 B9010000 		.4byte	.LASF59
 1460 041b 01       		.byte	0x1
 1461 041c 3C       		.byte	0x3c
 1462 041d 97000000 		.4byte	0x97
 1463 0421 05       		.uleb128 0x5
 1464 0422 03       		.byte	0x3
 1465 0423 00000000 		.4byte	countdown
 1466 0427 15       		.uleb128 0x15
 1467 0428 97000000 		.4byte	0x97
 1468 042c 37040000 		.4byte	0x437
 1469 0430 16       		.uleb128 0x16
 1470 0431 F5000000 		.4byte	0xf5
 1471 0435 3F       		.byte	0x3f
 1472 0436 00       		.byte	0
 1473 0437 19       		.uleb128 0x19
 1474 0438 15000000 		.4byte	.LASF60
 1475 043c 01       		.byte	0x1
 1476 043d 3D       		.byte	0x3d
 1477 043e 27040000 		.4byte	0x427
 1478 0442 05       		.uleb128 0x5
 1479 0443 03       		.byte	0x3
 1480 0444 00000000 		.4byte	RxBuffer
 1481 0448 1A       		.uleb128 0x1a
 1482 0449 6A00     		.ascii	"j\000"
 1483 044b 01       		.byte	0x1
 1484 044c 3E       		.byte	0x3e
 1485 044d 89000000 		.4byte	0x89
 1486 0451 05       		.uleb128 0x5
 1487 0452 03       		.byte	0x3
 1488 0453 00000000 		.4byte	j
 1489 0457 19       		.uleb128 0x19
 1490 0458 8F020000 		.4byte	.LASF61
 1491 045c 01       		.byte	0x1
 1492 045d 3E       		.byte	0x3e
 1493 045e 89000000 		.4byte	0x89
 1494 0462 05       		.uleb128 0x5
 1495 0463 03       		.byte	0x3
 1496 0464 00000000 		.4byte	rxflag
 1497 0468 19       		.uleb128 0x19
 1498 0469 D1020000 		.4byte	.LASF62
 1499 046d 01       		.byte	0x1
 1500 046e 3E       		.byte	0x3e
 1501 046f 89000000 		.4byte	0x89
 1502 0473 05       		.uleb128 0x5
 1503 0474 03       		.byte	0x3
 1504 0475 00000000 		.4byte	bytes
 1505 0479 15       		.uleb128 0x15
 1506 047a DD000000 		.4byte	0xdd
 1507 047e 89040000 		.4byte	0x489
 1508 0482 16       		.uleb128 0x16
 1509 0483 F5000000 		.4byte	0xf5
 1510 0487 0A       		.byte	0xa
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 36


 1511 0488 00       		.byte	0
 1512 0489 19       		.uleb128 0x19
 1513 048a 6B000000 		.4byte	.LASF63
 1514 048e 01       		.byte	0x1
 1515 048f 3F       		.byte	0x3f
 1516 0490 79040000 		.4byte	0x479
 1517 0494 05       		.uleb128 0x5
 1518 0495 03       		.byte	0x3
 1519 0496 00000000 		.4byte	file
 1520 049a 15       		.uleb128 0x15
 1521 049b DD000000 		.4byte	0xdd
 1522 049f AA040000 		.4byte	0x4aa
 1523 04a3 16       		.uleb128 0x16
 1524 04a4 F5000000 		.4byte	0xf5
 1525 04a8 09       		.byte	0x9
 1526 04a9 00       		.byte	0
 1527 04aa 19       		.uleb128 0x19
 1528 04ab 64010000 		.4byte	.LASF64
 1529 04af 01       		.byte	0x1
 1530 04b0 40       		.byte	0x40
 1531 04b1 9A040000 		.4byte	0x49a
 1532 04b5 05       		.uleb128 0x5
 1533 04b6 03       		.byte	0x3
 1534 04b7 00000000 		.4byte	volume
 1535 04bb 19       		.uleb128 0x19
 1536 04bc 57030000 		.4byte	.LASF65
 1537 04c0 01       		.byte	0x1
 1538 04c1 41       		.byte	0x41
 1539 04c2 0C010000 		.4byte	0x10c
 1540 04c6 05       		.uleb128 0x5
 1541 04c7 03       		.byte	0x3
 1542 04c8 00000000 		.4byte	fsfile
 1543 04cc 00       		.byte	0
 1544              		.section	.debug_abbrev,"",%progbits
 1545              	.Ldebug_abbrev0:
 1546 0000 01       		.uleb128 0x1
 1547 0001 11       		.uleb128 0x11
 1548 0002 01       		.byte	0x1
 1549 0003 25       		.uleb128 0x25
 1550 0004 0E       		.uleb128 0xe
 1551 0005 13       		.uleb128 0x13
 1552 0006 0B       		.uleb128 0xb
 1553 0007 03       		.uleb128 0x3
 1554 0008 0E       		.uleb128 0xe
 1555 0009 1B       		.uleb128 0x1b
 1556 000a 0E       		.uleb128 0xe
 1557 000b 55       		.uleb128 0x55
 1558 000c 17       		.uleb128 0x17
 1559 000d 11       		.uleb128 0x11
 1560 000e 01       		.uleb128 0x1
 1561 000f 10       		.uleb128 0x10
 1562 0010 17       		.uleb128 0x17
 1563 0011 00       		.byte	0
 1564 0012 00       		.byte	0
 1565 0013 02       		.uleb128 0x2
 1566 0014 24       		.uleb128 0x24
 1567 0015 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 37


 1568 0016 0B       		.uleb128 0xb
 1569 0017 0B       		.uleb128 0xb
 1570 0018 3E       		.uleb128 0x3e
 1571 0019 0B       		.uleb128 0xb
 1572 001a 03       		.uleb128 0x3
 1573 001b 0E       		.uleb128 0xe
 1574 001c 00       		.byte	0
 1575 001d 00       		.byte	0
 1576 001e 03       		.uleb128 0x3
 1577 001f 16       		.uleb128 0x16
 1578 0020 00       		.byte	0
 1579 0021 03       		.uleb128 0x3
 1580 0022 0E       		.uleb128 0xe
 1581 0023 3A       		.uleb128 0x3a
 1582 0024 0B       		.uleb128 0xb
 1583 0025 3B       		.uleb128 0x3b
 1584 0026 0B       		.uleb128 0xb
 1585 0027 49       		.uleb128 0x49
 1586 0028 13       		.uleb128 0x13
 1587 0029 00       		.byte	0
 1588 002a 00       		.byte	0
 1589 002b 04       		.uleb128 0x4
 1590 002c 24       		.uleb128 0x24
 1591 002d 00       		.byte	0
 1592 002e 0B       		.uleb128 0xb
 1593 002f 0B       		.uleb128 0xb
 1594 0030 3E       		.uleb128 0x3e
 1595 0031 0B       		.uleb128 0xb
 1596 0032 03       		.uleb128 0x3
 1597 0033 08       		.uleb128 0x8
 1598 0034 00       		.byte	0
 1599 0035 00       		.byte	0
 1600 0036 05       		.uleb128 0x5
 1601 0037 16       		.uleb128 0x16
 1602 0038 00       		.byte	0
 1603 0039 03       		.uleb128 0x3
 1604 003a 0E       		.uleb128 0xe
 1605 003b 3A       		.uleb128 0x3a
 1606 003c 0B       		.uleb128 0xb
 1607 003d 3B       		.uleb128 0x3b
 1608 003e 05       		.uleb128 0x5
 1609 003f 49       		.uleb128 0x49
 1610 0040 13       		.uleb128 0x13
 1611 0041 00       		.byte	0
 1612 0042 00       		.byte	0
 1613 0043 06       		.uleb128 0x6
 1614 0044 35       		.uleb128 0x35
 1615 0045 00       		.byte	0
 1616 0046 49       		.uleb128 0x49
 1617 0047 13       		.uleb128 0x13
 1618 0048 00       		.byte	0
 1619 0049 00       		.byte	0
 1620 004a 07       		.uleb128 0x7
 1621 004b 13       		.uleb128 0x13
 1622 004c 00       		.byte	0
 1623 004d 03       		.uleb128 0x3
 1624 004e 0E       		.uleb128 0xe
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 38


 1625 004f 3C       		.uleb128 0x3c
 1626 0050 19       		.uleb128 0x19
 1627 0051 00       		.byte	0
 1628 0052 00       		.byte	0
 1629 0053 08       		.uleb128 0x8
 1630 0054 0F       		.uleb128 0xf
 1631 0055 00       		.byte	0
 1632 0056 0B       		.uleb128 0xb
 1633 0057 0B       		.uleb128 0xb
 1634 0058 49       		.uleb128 0x49
 1635 0059 13       		.uleb128 0x13
 1636 005a 00       		.byte	0
 1637 005b 00       		.byte	0
 1638 005c 09       		.uleb128 0x9
 1639 005d 04       		.uleb128 0x4
 1640 005e 01       		.byte	0x1
 1641 005f 03       		.uleb128 0x3
 1642 0060 0E       		.uleb128 0xe
 1643 0061 0B       		.uleb128 0xb
 1644 0062 0B       		.uleb128 0xb
 1645 0063 3A       		.uleb128 0x3a
 1646 0064 0B       		.uleb128 0xb
 1647 0065 3B       		.uleb128 0x3b
 1648 0066 0B       		.uleb128 0xb
 1649 0067 01       		.uleb128 0x1
 1650 0068 13       		.uleb128 0x13
 1651 0069 00       		.byte	0
 1652 006a 00       		.byte	0
 1653 006b 0A       		.uleb128 0xa
 1654 006c 28       		.uleb128 0x28
 1655 006d 00       		.byte	0
 1656 006e 03       		.uleb128 0x3
 1657 006f 0E       		.uleb128 0xe
 1658 0070 1C       		.uleb128 0x1c
 1659 0071 0D       		.uleb128 0xd
 1660 0072 00       		.byte	0
 1661 0073 00       		.byte	0
 1662 0074 0B       		.uleb128 0xb
 1663 0075 2E       		.uleb128 0x2e
 1664 0076 00       		.byte	0
 1665 0077 3F       		.uleb128 0x3f
 1666 0078 19       		.uleb128 0x19
 1667 0079 03       		.uleb128 0x3
 1668 007a 0E       		.uleb128 0xe
 1669 007b 3A       		.uleb128 0x3a
 1670 007c 0B       		.uleb128 0xb
 1671 007d 3B       		.uleb128 0x3b
 1672 007e 0B       		.uleb128 0xb
 1673 007f 11       		.uleb128 0x11
 1674 0080 01       		.uleb128 0x1
 1675 0081 12       		.uleb128 0x12
 1676 0082 06       		.uleb128 0x6
 1677 0083 40       		.uleb128 0x40
 1678 0084 18       		.uleb128 0x18
 1679 0085 9742     		.uleb128 0x2117
 1680 0087 19       		.uleb128 0x19
 1681 0088 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 39


 1682 0089 00       		.byte	0
 1683 008a 0C       		.uleb128 0xc
 1684 008b 2E       		.uleb128 0x2e
 1685 008c 00       		.byte	0
 1686 008d 3F       		.uleb128 0x3f
 1687 008e 19       		.uleb128 0x19
 1688 008f 03       		.uleb128 0x3
 1689 0090 0E       		.uleb128 0xe
 1690 0091 3A       		.uleb128 0x3a
 1691 0092 0B       		.uleb128 0xb
 1692 0093 3B       		.uleb128 0x3b
 1693 0094 0B       		.uleb128 0xb
 1694 0095 27       		.uleb128 0x27
 1695 0096 19       		.uleb128 0x19
 1696 0097 11       		.uleb128 0x11
 1697 0098 01       		.uleb128 0x1
 1698 0099 12       		.uleb128 0x12
 1699 009a 06       		.uleb128 0x6
 1700 009b 40       		.uleb128 0x40
 1701 009c 18       		.uleb128 0x18
 1702 009d 9642     		.uleb128 0x2116
 1703 009f 19       		.uleb128 0x19
 1704 00a0 00       		.byte	0
 1705 00a1 00       		.byte	0
 1706 00a2 0D       		.uleb128 0xd
 1707 00a3 2E       		.uleb128 0x2e
 1708 00a4 00       		.byte	0
 1709 00a5 3F       		.uleb128 0x3f
 1710 00a6 19       		.uleb128 0x19
 1711 00a7 03       		.uleb128 0x3
 1712 00a8 0E       		.uleb128 0xe
 1713 00a9 3A       		.uleb128 0x3a
 1714 00aa 0B       		.uleb128 0xb
 1715 00ab 3B       		.uleb128 0x3b
 1716 00ac 0B       		.uleb128 0xb
 1717 00ad 27       		.uleb128 0x27
 1718 00ae 19       		.uleb128 0x19
 1719 00af 11       		.uleb128 0x11
 1720 00b0 01       		.uleb128 0x1
 1721 00b1 12       		.uleb128 0x12
 1722 00b2 06       		.uleb128 0x6
 1723 00b3 40       		.uleb128 0x40
 1724 00b4 18       		.uleb128 0x18
 1725 00b5 9742     		.uleb128 0x2117
 1726 00b7 19       		.uleb128 0x19
 1727 00b8 00       		.byte	0
 1728 00b9 00       		.byte	0
 1729 00ba 0E       		.uleb128 0xe
 1730 00bb 2E       		.uleb128 0x2e
 1731 00bc 01       		.byte	0x1
 1732 00bd 3F       		.uleb128 0x3f
 1733 00be 19       		.uleb128 0x19
 1734 00bf 03       		.uleb128 0x3
 1735 00c0 0E       		.uleb128 0xe
 1736 00c1 3A       		.uleb128 0x3a
 1737 00c2 0B       		.uleb128 0xb
 1738 00c3 3B       		.uleb128 0x3b
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 40


 1739 00c4 0B       		.uleb128 0xb
 1740 00c5 49       		.uleb128 0x49
 1741 00c6 13       		.uleb128 0x13
 1742 00c7 11       		.uleb128 0x11
 1743 00c8 01       		.uleb128 0x1
 1744 00c9 12       		.uleb128 0x12
 1745 00ca 06       		.uleb128 0x6
 1746 00cb 40       		.uleb128 0x40
 1747 00cc 18       		.uleb128 0x18
 1748 00cd 9642     		.uleb128 0x2116
 1749 00cf 19       		.uleb128 0x19
 1750 00d0 01       		.uleb128 0x1
 1751 00d1 13       		.uleb128 0x13
 1752 00d2 00       		.byte	0
 1753 00d3 00       		.byte	0
 1754 00d4 0F       		.uleb128 0xf
 1755 00d5 34       		.uleb128 0x34
 1756 00d6 00       		.byte	0
 1757 00d7 03       		.uleb128 0x3
 1758 00d8 0E       		.uleb128 0xe
 1759 00d9 3A       		.uleb128 0x3a
 1760 00da 0B       		.uleb128 0xb
 1761 00db 3B       		.uleb128 0x3b
 1762 00dc 0B       		.uleb128 0xb
 1763 00dd 49       		.uleb128 0x49
 1764 00de 13       		.uleb128 0x13
 1765 00df 02       		.uleb128 0x2
 1766 00e0 18       		.uleb128 0x18
 1767 00e1 00       		.byte	0
 1768 00e2 00       		.byte	0
 1769 00e3 10       		.uleb128 0x10
 1770 00e4 34       		.uleb128 0x34
 1771 00e5 00       		.byte	0
 1772 00e6 03       		.uleb128 0x3
 1773 00e7 08       		.uleb128 0x8
 1774 00e8 3A       		.uleb128 0x3a
 1775 00e9 0B       		.uleb128 0xb
 1776 00ea 3B       		.uleb128 0x3b
 1777 00eb 0B       		.uleb128 0xb
 1778 00ec 49       		.uleb128 0x49
 1779 00ed 13       		.uleb128 0x13
 1780 00ee 02       		.uleb128 0x2
 1781 00ef 18       		.uleb128 0x18
 1782 00f0 00       		.byte	0
 1783 00f1 00       		.byte	0
 1784 00f2 11       		.uleb128 0x11
 1785 00f3 34       		.uleb128 0x34
 1786 00f4 00       		.byte	0
 1787 00f5 03       		.uleb128 0x3
 1788 00f6 08       		.uleb128 0x8
 1789 00f7 3A       		.uleb128 0x3a
 1790 00f8 0B       		.uleb128 0xb
 1791 00f9 3B       		.uleb128 0x3b
 1792 00fa 0B       		.uleb128 0xb
 1793 00fb 49       		.uleb128 0x49
 1794 00fc 13       		.uleb128 0x13
 1795 00fd 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 41


 1796 00fe 00       		.byte	0
 1797 00ff 12       		.uleb128 0x12
 1798 0100 0B       		.uleb128 0xb
 1799 0101 01       		.byte	0x1
 1800 0102 11       		.uleb128 0x11
 1801 0103 01       		.uleb128 0x1
 1802 0104 12       		.uleb128 0x12
 1803 0105 06       		.uleb128 0x6
 1804 0106 01       		.uleb128 0x1
 1805 0107 13       		.uleb128 0x13
 1806 0108 00       		.byte	0
 1807 0109 00       		.byte	0
 1808 010a 13       		.uleb128 0x13
 1809 010b 0B       		.uleb128 0xb
 1810 010c 01       		.byte	0x1
 1811 010d 11       		.uleb128 0x11
 1812 010e 01       		.uleb128 0x1
 1813 010f 12       		.uleb128 0x12
 1814 0110 06       		.uleb128 0x6
 1815 0111 00       		.byte	0
 1816 0112 00       		.byte	0
 1817 0113 14       		.uleb128 0x14
 1818 0114 34       		.uleb128 0x34
 1819 0115 00       		.byte	0
 1820 0116 03       		.uleb128 0x3
 1821 0117 0E       		.uleb128 0xe
 1822 0118 3A       		.uleb128 0x3a
 1823 0119 0B       		.uleb128 0xb
 1824 011a 3B       		.uleb128 0x3b
 1825 011b 05       		.uleb128 0x5
 1826 011c 49       		.uleb128 0x49
 1827 011d 13       		.uleb128 0x13
 1828 011e 02       		.uleb128 0x2
 1829 011f 18       		.uleb128 0x18
 1830 0120 00       		.byte	0
 1831 0121 00       		.byte	0
 1832 0122 15       		.uleb128 0x15
 1833 0123 01       		.uleb128 0x1
 1834 0124 01       		.byte	0x1
 1835 0125 49       		.uleb128 0x49
 1836 0126 13       		.uleb128 0x13
 1837 0127 01       		.uleb128 0x1
 1838 0128 13       		.uleb128 0x13
 1839 0129 00       		.byte	0
 1840 012a 00       		.byte	0
 1841 012b 16       		.uleb128 0x16
 1842 012c 21       		.uleb128 0x21
 1843 012d 00       		.byte	0
 1844 012e 49       		.uleb128 0x49
 1845 012f 13       		.uleb128 0x13
 1846 0130 2F       		.uleb128 0x2f
 1847 0131 0B       		.uleb128 0xb
 1848 0132 00       		.byte	0
 1849 0133 00       		.byte	0
 1850 0134 17       		.uleb128 0x17
 1851 0135 34       		.uleb128 0x34
 1852 0136 00       		.byte	0
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 42


 1853 0137 03       		.uleb128 0x3
 1854 0138 0E       		.uleb128 0xe
 1855 0139 3A       		.uleb128 0x3a
 1856 013a 0B       		.uleb128 0xb
 1857 013b 3B       		.uleb128 0x3b
 1858 013c 05       		.uleb128 0x5
 1859 013d 49       		.uleb128 0x49
 1860 013e 13       		.uleb128 0x13
 1861 013f 3F       		.uleb128 0x3f
 1862 0140 19       		.uleb128 0x19
 1863 0141 3C       		.uleb128 0x3c
 1864 0142 19       		.uleb128 0x19
 1865 0143 00       		.byte	0
 1866 0144 00       		.byte	0
 1867 0145 18       		.uleb128 0x18
 1868 0146 34       		.uleb128 0x34
 1869 0147 00       		.byte	0
 1870 0148 03       		.uleb128 0x3
 1871 0149 0E       		.uleb128 0xe
 1872 014a 3A       		.uleb128 0x3a
 1873 014b 0B       		.uleb128 0xb
 1874 014c 3B       		.uleb128 0x3b
 1875 014d 05       		.uleb128 0x5
 1876 014e 49       		.uleb128 0x49
 1877 014f 13       		.uleb128 0x13
 1878 0150 3F       		.uleb128 0x3f
 1879 0151 19       		.uleb128 0x19
 1880 0152 02       		.uleb128 0x2
 1881 0153 18       		.uleb128 0x18
 1882 0154 00       		.byte	0
 1883 0155 00       		.byte	0
 1884 0156 19       		.uleb128 0x19
 1885 0157 34       		.uleb128 0x34
 1886 0158 00       		.byte	0
 1887 0159 03       		.uleb128 0x3
 1888 015a 0E       		.uleb128 0xe
 1889 015b 3A       		.uleb128 0x3a
 1890 015c 0B       		.uleb128 0xb
 1891 015d 3B       		.uleb128 0x3b
 1892 015e 0B       		.uleb128 0xb
 1893 015f 49       		.uleb128 0x49
 1894 0160 13       		.uleb128 0x13
 1895 0161 3F       		.uleb128 0x3f
 1896 0162 19       		.uleb128 0x19
 1897 0163 02       		.uleb128 0x2
 1898 0164 18       		.uleb128 0x18
 1899 0165 00       		.byte	0
 1900 0166 00       		.byte	0
 1901 0167 1A       		.uleb128 0x1a
 1902 0168 34       		.uleb128 0x34
 1903 0169 00       		.byte	0
 1904 016a 03       		.uleb128 0x3
 1905 016b 08       		.uleb128 0x8
 1906 016c 3A       		.uleb128 0x3a
 1907 016d 0B       		.uleb128 0xb
 1908 016e 3B       		.uleb128 0x3b
 1909 016f 0B       		.uleb128 0xb
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 43


 1910 0170 49       		.uleb128 0x49
 1911 0171 13       		.uleb128 0x13
 1912 0172 3F       		.uleb128 0x3f
 1913 0173 19       		.uleb128 0x19
 1914 0174 02       		.uleb128 0x2
 1915 0175 18       		.uleb128 0x18
 1916 0176 00       		.byte	0
 1917 0177 00       		.byte	0
 1918 0178 00       		.byte	0
 1919              		.section	.debug_aranges,"",%progbits
 1920 0000 44000000 		.4byte	0x44
 1921 0004 0200     		.2byte	0x2
 1922 0006 00000000 		.4byte	.Ldebug_info0
 1923 000a 04       		.byte	0x4
 1924 000b 00       		.byte	0
 1925 000c 0000     		.2byte	0
 1926 000e 0000     		.2byte	0
 1927 0010 00000000 		.4byte	.LFB63
 1928 0014 70000000 		.4byte	.LFE63-.LFB63
 1929 0018 00000000 		.4byte	.LFB64
 1930 001c 20000000 		.4byte	.LFE64-.LFB64
 1931 0020 00000000 		.4byte	.LFB65
 1932 0024 38000000 		.4byte	.LFE65-.LFB65
 1933 0028 00000000 		.4byte	.LFB66
 1934 002c 4C000000 		.4byte	.LFE66-.LFB66
 1935 0030 00000000 		.4byte	.LFB67
 1936 0034 50000000 		.4byte	.LFE67-.LFB67
 1937 0038 00000000 		.4byte	.LFB68
 1938 003c 94030000 		.4byte	.LFE68-.LFB68
 1939 0040 00000000 		.4byte	0
 1940 0044 00000000 		.4byte	0
 1941              		.section	.debug_ranges,"",%progbits
 1942              	.Ldebug_ranges0:
 1943 0000 00000000 		.4byte	.LFB63
 1944 0004 70000000 		.4byte	.LFE63
 1945 0008 00000000 		.4byte	.LFB64
 1946 000c 20000000 		.4byte	.LFE64
 1947 0010 00000000 		.4byte	.LFB65
 1948 0014 38000000 		.4byte	.LFE65
 1949 0018 00000000 		.4byte	.LFB66
 1950 001c 4C000000 		.4byte	.LFE66
 1951 0020 00000000 		.4byte	.LFB67
 1952 0024 50000000 		.4byte	.LFE67
 1953 0028 00000000 		.4byte	.LFB68
 1954 002c 94030000 		.4byte	.LFE68
 1955 0030 00000000 		.4byte	0
 1956 0034 00000000 		.4byte	0
 1957              		.section	.debug_line,"",%progbits
 1958              	.Ldebug_line0:
 1959 0000 8E020000 		.section	.debug_str,"MS",%progbits,1
 1959      02009501 
 1959      00000201 
 1959      FB0E0D00 
 1959      01010101 
 1960              	.LASF29:
 1961 0000 52455355 		.ascii	"RESURFACE\000"
 1961      52464143 
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 44


 1961      4500
 1962              	.LASF27:
 1963 000a 44455343 		.ascii	"DESCENDING\000"
 1963      454E4449 
 1963      4E4700
 1964              	.LASF60:
 1965 0015 52784275 		.ascii	"RxBuffer\000"
 1965      66666572 
 1965      00
 1966              	.LASF25:
 1967 001e 53595354 		.ascii	"SYSTEM_CHECK\000"
 1967      454D5F43 
 1967      4845434B 
 1967      00
 1968              	.LASF32:
 1969 002b 53544154 		.ascii	"STATES\000"
 1969      455300
 1970              	.LASF46:
 1971 0032 73646275 		.ascii	"sdbuf\000"
 1971      6600
 1972              	.LASF50:
 1973 0038 41646472 		.ascii	"Addr\000"
 1973      00
 1974              	.LASF48:
 1975 003d 64657641 		.ascii	"devAddr\000"
 1975      64647200 
 1976              	.LASF41:
 1977 0045 6F6E6573 		.ascii	"ones\000"
 1977      00
 1978              	.LASF28:
 1979 004a 4C414E44 		.ascii	"LANDED\000"
 1979      454400
 1980              	.LASF70:
 1981 0051 6D61696E 		.ascii	"main\000"
 1981      00
 1982              	.LASF33:
 1983 0056 4D6F6973 		.ascii	"Moisture_ISR_Handler\000"
 1983      74757265 
 1983      5F495352 
 1983      5F48616E 
 1983      646C6572 
 1984              	.LASF63:
 1985 006b 66696C65 		.ascii	"file\000"
 1985      00
 1986              	.LASF4:
 1987 0070 73686F72 		.ascii	"short int\000"
 1987      7420696E 
 1987      7400
 1988              	.LASF56:
 1989 007a 50414E49 		.ascii	"PANIC_flag\000"
 1989      435F666C 
 1989      616700
 1990              	.LASF13:
 1991 0085 75696E74 		.ascii	"uint8_t\000"
 1991      385F7400 
 1992              	.LASF45:
 1993 008d 70726573 		.ascii	"pressure\000"
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 45


 1993      73757265 
 1993      00
 1994              	.LASF42:
 1995 0096 64656369 		.ascii	"decimals\000"
 1995      6D616C73 
 1995      00
 1996              	.LASF18:
 1997 009f 666C6F61 		.ascii	"float\000"
 1997      7400
 1998              	.LASF44:
 1999 00a5 74656D70 		.ascii	"temp\000"
 1999      00
 2000              	.LASF10:
 2001 00aa 6C6F6E67 		.ascii	"long long int\000"
 2001      206C6F6E 
 2001      6720696E 
 2001      7400
 2002              	.LASF52:
 2003 00b8 61766572 		.ascii	"average\000"
 2003      61676500 
 2004              	.LASF30:
 2005 00c0 5452414E 		.ascii	"TRANSMIT\000"
 2005      534D4954 
 2005      00
 2006              	.LASF66:
 2007 00c9 474E5520 		.ascii	"GNU C 4.9.3 20150303 (release) [ARM/embedded-4_9-br"
 2007      4320342E 
 2007      392E3320 
 2007      32303135 
 2007      30333033 
 2008 00fc 616E6368 		.ascii	"anch revision 221220] -mcpu=cortex-m3 -mthumb -g -O"
 2008      20726576 
 2008      6973696F 
 2008      6E203232 
 2008      31323230 
 2009 012f 30202D66 		.ascii	"0 -ffunction-sections -ffat-lto-objects\000"
 2009      66756E63 
 2009      74696F6E 
 2009      2D736563 
 2009      74696F6E 
 2010              	.LASF40:
 2011 0157 74656E73 		.ascii	"tens\000"
 2011      00
 2012              	.LASF43:
 2013 015c 766F6C74 		.ascii	"voltage\000"
 2013      61676500 
 2014              	.LASF64:
 2015 0164 766F6C75 		.ascii	"volume\000"
 2015      6D6500
 2016              	.LASF2:
 2017 016b 5F5F7569 		.ascii	"__uint8_t\000"
 2017      6E74385F 
 2017      7400
 2018              	.LASF31:
 2019 0175 4552524F 		.ascii	"ERROR\000"
 2019      5200
 2020              	.LASF24:
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 46


 2021 017b 6C6F6E67 		.ascii	"long double\000"
 2021      20646F75 
 2021      626C6500 
 2022              	.LASF26:
 2023 0187 57414954 		.ascii	"WAIT_TO_LAUNCH\000"
 2023      5F544F5F 
 2023      4C41554E 
 2023      434800
 2024              	.LASF1:
 2025 0196 756E7369 		.ascii	"unsigned char\000"
 2025      676E6564 
 2025      20636861 
 2025      7200
 2026              	.LASF69:
 2027 01a4 52657365 		.ascii	"Reset_system\000"
 2027      745F7379 
 2027      7374656D 
 2027      00
 2028              	.LASF23:
 2029 01b1 46535F46 		.ascii	"FS_FILE\000"
 2029      494C4500 
 2030              	.LASF59:
 2031 01b9 636F756E 		.ascii	"countdown\000"
 2031      74646F77 
 2031      6E00
 2032              	.LASF0:
 2033 01c3 7369676E 		.ascii	"signed char\000"
 2033      65642063 
 2033      68617200 
 2034              	.LASF11:
 2035 01cf 6C6F6E67 		.ascii	"long long unsigned int\000"
 2035      206C6F6E 
 2035      6720756E 
 2035      7369676E 
 2035      65642069 
 2036              	.LASF16:
 2037 01e6 75696E74 		.ascii	"uint32_t\000"
 2037      33325F74 
 2037      00
 2038              	.LASF51:
 2039 01ef 64617461 		.ascii	"data_time\000"
 2039      5F74696D 
 2039      6500
 2040              	.LASF12:
 2041 01f9 756E7369 		.ascii	"unsigned int\000"
 2041      676E6564 
 2041      20696E74 
 2041      00
 2042              	.LASF58:
 2043 0206 74657374 		.ascii	"testnum\000"
 2043      6E756D00 
 2044              	.LASF5:
 2045 020e 73686F72 		.ascii	"short unsigned int\000"
 2045      7420756E 
 2045      7369676E 
 2045      65642069 
 2045      6E7400
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 47


 2046              	.LASF20:
 2047 0221 63686172 		.ascii	"char\000"
 2047      00
 2048              	.LASF7:
 2049 0226 6C6F6E67 		.ascii	"long int\000"
 2049      20696E74 
 2049      00
 2050              	.LASF15:
 2051 022f 696E7433 		.ascii	"int32_t\000"
 2051      325F7400 
 2052              	.LASF14:
 2053 0237 696E7431 		.ascii	"int16_t\000"
 2053      365F7400 
 2054              	.LASF17:
 2055 023f 75696E74 		.ascii	"uint8\000"
 2055      3800
 2056              	.LASF54:
 2057 0245 5F426F6F 		.ascii	"_Bool\000"
 2057      6C00
 2058              	.LASF68:
 2059 024b 433A5C55 		.ascii	"C:\\Users\\gding\\Documents\\Project_O-Vac\\OVac.cy"
 2059      73657273 
 2059      5C676469 
 2059      6E675C44 
 2059      6F63756D 
 2060 0279 64736E00 		.ascii	"dsn\000"
 2061              	.LASF38:
 2062 027d 63757253 		.ascii	"curState\000"
 2062      74617465 
 2062      00
 2063              	.LASF39:
 2064 0286 7A5F6F66 		.ascii	"z_offset\000"
 2064      66736574 
 2064      00
 2065              	.LASF61:
 2066 028f 7278666C 		.ascii	"rxflag\000"
 2066      616700
 2067              	.LASF49:
 2068 0296 62756666 		.ascii	"buffer\000"
 2068      657200
 2069              	.LASF35:
 2070 029d 436F756E 		.ascii	"Countdown_ISR_Handler\000"
 2070      74646F77 
 2070      6E5F4953 
 2070      525F4861 
 2070      6E646C65 
 2071              	.LASF67:
 2072 02b3 6D61696E 		.ascii	"main.c\000"
 2072      2E6300
 2073              	.LASF21:
 2074 02ba 72656738 		.ascii	"reg8\000"
 2074      00
 2075              	.LASF9:
 2076 02bf 6C6F6E67 		.ascii	"long unsigned int\000"
 2076      20756E73 
 2076      69676E65 
 2076      6420696E 
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 48


 2076      7400
 2077              	.LASF62:
 2078 02d1 62797465 		.ascii	"bytes\000"
 2078      7300
 2079              	.LASF19:
 2080 02d7 646F7562 		.ascii	"double\000"
 2080      6C6500
 2081              	.LASF8:
 2082 02de 5F5F7569 		.ascii	"__uint32_t\000"
 2082      6E743332 
 2082      5F7400
 2083              	.LASF6:
 2084 02e9 5F5F696E 		.ascii	"__int32_t\000"
 2084      7433325F 
 2084      7400
 2085              	.LASF3:
 2086 02f3 5F5F696E 		.ascii	"__int16_t\000"
 2086      7431365F 
 2086      7400
 2087              	.LASF22:
 2088 02fd 73697A65 		.ascii	"sizetype\000"
 2088      74797065 
 2088      00
 2089              	.LASF57:
 2090 0306 53544154 		.ascii	"STATE\000"
 2090      4500
 2091              	.LASF37:
 2092 030c 6F757470 		.ascii	"output\000"
 2092      757400
 2093              	.LASF53:
 2094 0313 636F6C6C 		.ascii	"collect_flag\000"
 2094      6563745F 
 2094      666C6167 
 2094      00
 2095              	.LASF36:
 2096 0320 72785F69 		.ascii	"rx_interrupt\000"
 2096      6E746572 
 2096      72757074 
 2096      00
 2097              	.LASF47:
 2098 032d 49544D5F 		.ascii	"ITM_RxBuffer\000"
 2098      52784275 
 2098      66666572 
 2098      00
 2099              	.LASF55:
 2100 033a 77616974 		.ascii	"wait_flag\000"
 2100      5F666C61 
 2100      6700
 2101              	.LASF34:
 2102 0344 53616D70 		.ascii	"Sample_ISR_Handler\000"
 2102      6C655F49 
 2102      53525F48 
 2102      616E646C 
 2102      657200
 2103              	.LASF65:
 2104 0357 66736669 		.ascii	"fsfile\000"
 2104      6C6500
ARM GAS  C:\Users\gding\AppData\Local\Temp\cc21eTaS.s 			page 49


 2105              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 4.9.3 20150303 (release) [ARM/embedded-4_9-br
